["```py\n# install pytorch with cudatoolkit 11.3\nconda  install  pytorch  cudatoolkit=11.3  -c  pytorch-nightly  -y\n# install TorchRec\npip3  install  torchrec-nightly \n```", "```py\nimport os\nimport torch\nimport torchrec\nimport torch.distributed as dist\n\nos.environ[\"RANK\"] = \"0\"\nos.environ[\"WORLD_SIZE\"] = \"1\"\nos.environ[\"MASTER_ADDR\"] = \"localhost\"\nos.environ[\"MASTER_PORT\"] = \"29500\"\n\n# Note - you will need a V100 or A100 to run tutorial as as!\n# If using an older GPU (such as colab free K80),\n# you will need to compile fbgemm with the appripriate CUDA architecture\n# or run with \"gloo\" on CPUs\ndist.init_process_group(backend=\"nccl\") \n```", "```py\nebc = torchrec.EmbeddingBagCollection(\n    device=\"meta\",\n    tables=[\n        torchrec.EmbeddingBagConfig(\n            name=\"product_table\",\n            embedding_dim=64,\n            num_embeddings=4096,\n            feature_names=[\"product\"],\n            pooling=torchrec.PoolingType.SUM,\n        ),\n        torchrec.EmbeddingBagConfig(\n            name=\"user_table\",\n            embedding_dim=64,\n            num_embeddings=4096,\n            feature_names=[\"user\"],\n            pooling=torchrec.PoolingType.SUM,\n        )\n    ]\n) \n```", "```py\nmodel = torchrec.distributed.DistributedModelParallel(ebc, device=torch.device(\"cuda\"))\nprint(model)\nprint(model.plan) \n```", "```py\n|------------|\n| product ID |\n|------------|\n| [101, 202] |\n| []         |\n| [303]      |\n|------------| \n```", "```py\nproduct_eb = torch.nn.EmbeddingBag(4096, 64)\nproduct_eb(input=torch.tensor([101, 202, 303]), offsets=torch.tensor([0, 2, 2])) \n```", "```py\n|------------|------------|\n| product ID | user ID    |\n|------------|------------|\n| [101, 202] | [404]      |\n| []         | [505]      |\n| [303]      | [606]      |\n|------------|------------| \n```", "```py\nmb = torchrec.KeyedJaggedTensor(\n    keys = [\"product\", \"user\"],\n    values = torch.tensor([101, 202, 303, 404, 505, 606]).cuda(),\n    lengths = torch.tensor([2, 0, 1, 1, 1, 1], dtype=torch.int64).cuda(),\n)\n\nprint(mb.to(torch.device(\"cpu\"))) \n```", "```py\npooled_embeddings = model(mb)\nprint(pooled_embeddings) \n```"]