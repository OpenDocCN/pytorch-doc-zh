- en: torch.mps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/docs/stable/mps.html](https://pytorch.org/docs/stable/mps.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This package enables an interface for accessing MPS (Metal Performance Shaders)
    backend in Python. Metal is Apple’s API for programming metal GPU (graphics processor
    unit). Using MPS means that increased performance can be achieved, by running
    work on the metal GPU(s). See [https://developer.apple.com/documentation/metalperformanceshaders](https://developer.apple.com/documentation/metalperformanceshaders)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`synchronize`](generated/torch.mps.synchronize.html#torch.mps.synchronize
    "torch.mps.synchronize") | Waits for all kernels in all streams on a MPS device
    to complete. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_rng_state`](generated/torch.mps.get_rng_state.html#torch.mps.get_rng_state
    "torch.mps.get_rng_state") | Returns the random number generator state as a ByteTensor.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_rng_state`](generated/torch.mps.set_rng_state.html#torch.mps.set_rng_state
    "torch.mps.set_rng_state") | Sets the random number generator state. |'
  prefs: []
  type: TYPE_TB
- en: '| [`manual_seed`](generated/torch.mps.manual_seed.html#torch.mps.manual_seed
    "torch.mps.manual_seed") | Sets the seed for generating random numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`seed`](generated/torch.mps.seed.html#torch.mps.seed "torch.mps.seed") |
    Sets the seed for generating random numbers to a random number. |'
  prefs: []
  type: TYPE_TB
- en: '| [`empty_cache`](generated/torch.mps.empty_cache.html#torch.mps.empty_cache
    "torch.mps.empty_cache") | Releases all unoccupied cached memory currently held
    by the caching allocator so that those can be used in other GPU applications.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_per_process_memory_fraction`](generated/torch.mps.set_per_process_memory_fraction.html#torch.mps.set_per_process_memory_fraction
    "torch.mps.set_per_process_memory_fraction") | Set memory fraction for limiting
    process''s memory allocation on MPS device. |'
  prefs: []
  type: TYPE_TB
- en: '| [`current_allocated_memory`](generated/torch.mps.current_allocated_memory.html#torch.mps.current_allocated_memory
    "torch.mps.current_allocated_memory") | Returns the current GPU memory occupied
    by tensors in bytes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`driver_allocated_memory`](generated/torch.mps.driver_allocated_memory.html#torch.mps.driver_allocated_memory
    "torch.mps.driver_allocated_memory") | Returns total GPU memory allocated by Metal
    driver for the process in bytes. |'
  prefs: []
  type: TYPE_TB
- en: MPS Profiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`profiler.start`](generated/torch.mps.profiler.start.html#torch.mps.profiler.start
    "torch.mps.profiler.start") | Start OS Signpost tracing from MPS backend. |'
  prefs: []
  type: TYPE_TB
- en: '| [`profiler.stop`](generated/torch.mps.profiler.stop.html#torch.mps.profiler.stop
    "torch.mps.profiler.stop") | Stops generating OS Signpost tracing from MPS backend.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`profiler.profile`](generated/torch.mps.profiler.profile.html#torch.mps.profiler.profile
    "torch.mps.profiler.profile") | Context Manager to enabling generating OS Signpost
    tracing from MPS backend. |'
  prefs: []
  type: TYPE_TB
- en: MPS Event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`event.Event`](generated/torch.mps.event.Event.html#torch.mps.event.Event
    "torch.mps.event.Event") | Wrapper around an MPS event. |'
  prefs: []
  type: TYPE_TB
