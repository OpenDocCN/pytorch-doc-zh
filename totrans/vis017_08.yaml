- en: Decoding / Encoding images and videos
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解码/编码图像和视频
- en: 原文：[https://pytorch.org/vision/stable/io.html](https://pytorch.org/vision/stable/io.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/vision/stable/io.html](https://pytorch.org/vision/stable/io.html)
- en: The `torchvision.io` package provides functions for performing IO operations.
    They are currently specific to reading and writing images and videos.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`torchvision.io`包提供了执行IO操作的函数。目前这些函数专门用于读取和写入图像和视频。'
- en: Images[](#images "Permalink to this heading")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像[](#images "跳转到此标题")
- en: '| [`read_image`](generated/torchvision.io.read_image.html#torchvision.io.read_image
    "torchvision.io.read_image")(path[, mode]) | Reads a JPEG or PNG image into a
    3 dimensional RGB or grayscale Tensor. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`read_image`](generated/torchvision.io.read_image.html#torchvision.io.read_image
    "torchvision.io.read_image")(path[, mode]) | 将JPEG或PNG图像读入三维RGB或灰度张量。 |'
- en: '| [`decode_image`](generated/torchvision.io.decode_image.html#torchvision.io.decode_image
    "torchvision.io.decode_image")(input[, mode]) | Detects whether an image is a
    JPEG or PNG and performs the appropriate operation to decode the image into a
    3 dimensional RGB or grayscale Tensor. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`decode_image`](generated/torchvision.io.decode_image.html#torchvision.io.decode_image
    "torchvision.io.decode_image")(input[, mode]) | 检测图像是JPEG还是PNG，并执行适当的操作将图像解码为三维RGB或灰度张量。
    |'
- en: '| [`encode_jpeg`](generated/torchvision.io.encode_jpeg.html#torchvision.io.encode_jpeg
    "torchvision.io.encode_jpeg")(input[, quality]) | Takes an input tensor in CHW
    layout and returns a buffer with the contents of its corresponding JPEG file.
    |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`encode_jpeg`](generated/torchvision.io.encode_jpeg.html#torchvision.io.encode_jpeg
    "torchvision.io.encode_jpeg")(input[, quality]) | 将输入张量按CHW布局编码为其对应JPEG文件内容的缓冲区。
    |'
- en: '| [`decode_jpeg`](generated/torchvision.io.decode_jpeg.html#torchvision.io.decode_jpeg
    "torchvision.io.decode_jpeg")(input[, mode, device]) | Decodes a JPEG image into
    a 3 dimensional RGB or grayscale Tensor. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`decode_jpeg`](generated/torchvision.io.decode_jpeg.html#torchvision.io.decode_jpeg
    "torchvision.io.decode_jpeg")(input[, mode, device]) | 将JPEG图像解码为三维RGB或灰度张量。 |'
- en: '| [`write_jpeg`](generated/torchvision.io.write_jpeg.html#torchvision.io.write_jpeg
    "torchvision.io.write_jpeg")(input, filename[, quality]) | Takes an input tensor
    in CHW layout and saves it in a JPEG file. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`write_jpeg`](generated/torchvision.io.write_jpeg.html#torchvision.io.write_jpeg
    "torchvision.io.write_jpeg")(input, filename[, quality]) | 将输入张量按CHW布局保存为JPEG文件。
    |'
- en: '| [`encode_png`](generated/torchvision.io.encode_png.html#torchvision.io.encode_png
    "torchvision.io.encode_png")(input[, compression_level]) | Takes an input tensor
    in CHW layout and returns a buffer with the contents of its corresponding PNG
    file. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`encode_png`](generated/torchvision.io.encode_png.html#torchvision.io.encode_png
    "torchvision.io.encode_png")(input[, compression_level]) | 将输入张量按CHW布局编码为其对应PNG文件内容的缓冲区。
    |'
- en: '| [`decode_png`](generated/torchvision.io.decode_png.html#torchvision.io.decode_png
    "torchvision.io.decode_png")(input[, mode]) | Decodes a PNG image into a 3 dimensional
    RGB or grayscale Tensor. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`decode_png`](generated/torchvision.io.decode_png.html#torchvision.io.decode_png
    "torchvision.io.decode_png")(input[, mode]) | 将PNG图像解码为三维RGB或灰度张量。 |'
- en: '| [`write_png`](generated/torchvision.io.write_png.html#torchvision.io.write_png
    "torchvision.io.write_png")(input, filename[, compression_level]) | Takes an input
    tensor in CHW layout (or HW in the case of grayscale images) and saves it in a
    PNG file. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`write_png`](generated/torchvision.io.write_png.html#torchvision.io.write_png
    "torchvision.io.write_png")(input, filename[, compression_level]) | 将输入张量按CHW布局（或灰度图像的情况下按HW布局）保存为PNG文件。
    |'
- en: '| [`read_file`](generated/torchvision.io.read_file.html#torchvision.io.read_file
    "torchvision.io.read_file")(path) | Reads and outputs the bytes contents of a
    file as a uint8 Tensor with one dimension. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`read_file`](generated/torchvision.io.read_file.html#torchvision.io.read_file
    "torchvision.io.read_file")(path) | 读取文件的字节内容，并输出为具有一维uint8张量。 |'
- en: '| [`write_file`](generated/torchvision.io.write_file.html#torchvision.io.write_file
    "torchvision.io.write_file")(filename, data) | Writes the contents of an uint8
    tensor with one dimension to a file. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`write_file`](generated/torchvision.io.write_file.html#torchvision.io.write_file
    "torchvision.io.write_file")(filename, data) | 将具有一维的uint8张量内容写入文件。 |'
- en: '| [`ImageReadMode`](generated/torchvision.io.ImageReadMode.html#torchvision.io.ImageReadMode
    "torchvision.io.ImageReadMode")(value) | Support for various modes while reading
    images. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`ImageReadMode`](generated/torchvision.io.ImageReadMode.html#torchvision.io.ImageReadMode
    "torchvision.io.ImageReadMode")(value) | 在读取图像时支持各种模式。 |'
- en: Video[](#video "Permalink to this heading")
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视频[](#video "跳转到此标题")
- en: '| [`read_video`](generated/torchvision.io.read_video.html#torchvision.io.read_video
    "torchvision.io.read_video")(filename[, start_pts, end_pts, ...]) | Reads a video
    from a file, returning both the video frames and the audio frames |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`read_video`](generated/torchvision.io.read_video.html#torchvision.io.read_video
    "torchvision.io.read_video")(filename[, start_pts, end_pts, ...]) | 从文件中读取视频，返回视频帧和音频帧
    |'
- en: '| [`read_video_timestamps`](generated/torchvision.io.read_video_timestamps.html#torchvision.io.read_video_timestamps
    "torchvision.io.read_video_timestamps")(filename[, pts_unit]) | List the video
    frames timestamps. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`read_video_timestamps`](generated/torchvision.io.read_video_timestamps.html#torchvision.io.read_video_timestamps
    "torchvision.io.read_video_timestamps")(filename[, pts_unit]) | 列出视频帧的时间戳。 |'
- en: '| [`write_video`](generated/torchvision.io.write_video.html#torchvision.io.write_video
    "torchvision.io.write_video")(filename, video_array, fps[, ...]) | Writes a 4d
    tensor in [T, H, W, C] format in a video file |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`write_video`](generated/torchvision.io.write_video.html#torchvision.io.write_video
    "torchvision.io.write_video")(filename, video_array, fps[, ...]) | 将[T, H, W,
    C]格式的4维张量写入视频文件 |'
- en: Fine-grained video API[](#fine-grained-video-api "Permalink to this heading")
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 细粒度视频API[](#fine-grained-video-api "跳转到此标题")
- en: In addition to the `read_video` function, we provide a high-performance lower-level
    API for more fine-grained control compared to the `read_video` function. It does
    all this whilst fully supporting torchscript.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`read_video`函数外，我们还提供了一个高性能的低级API，用于比`read_video`函数更精细的控制。它在完全支持torchscript的同时完成所有这些操作。
- en: Warning
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The fine-grained video API is in Beta stage, and backward compatibility is not
    guaranteed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 细粒度视频API处于Beta阶段，不保证向后兼容性。
- en: '| [`VideoReader`](generated/torchvision.io.VideoReader.html#torchvision.io.VideoReader
    "torchvision.io.VideoReader")(src[, stream, num_threads]) | Fine-grained video-reading
    API. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`VideoReader`](generated/torchvision.io.VideoReader.html#torchvision.io.VideoReader
    "torchvision.io.VideoReader")(src[, stream, num_threads]) | 细粒度视频读取API。 |'
- en: 'Example of inspecting a video:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 检查视频的示例：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
