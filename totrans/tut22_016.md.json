["```py\nimport torch \n```", "```py\n[z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")(5, 3)\nprint([z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([z.dtype](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\")) \n```", "```py\ntensor([[0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.]])\ntorch.float32 \n```", "```py\ni = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")((5, 3), dtype=[torch.int16](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"))\nprint(i) \n```", "```py\ntensor([[1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1]], dtype=torch.int16) \n```", "```py\n[torch.manual_seed](https://pytorch.org/docs/stable/generated/torch.manual_seed.html#torch.manual_seed \"torch.manual_seed\")(1729)\n[r1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2)\nprint('A random tensor:')\nprint([r1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[r2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2)\nprint('\\nA different random tensor:')\nprint([r2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) # new values\n\n[torch.manual_seed](https://pytorch.org/docs/stable/generated/torch.manual_seed.html#torch.manual_seed \"torch.manual_seed\")(1729)\n[r3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2)\nprint('\\nShould match r1:')\nprint([r3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) # repeats values of r1 because of re-seed \n```", "```py\nA random tensor:\ntensor([[0.3126, 0.3791],\n        [0.3087, 0.0736]])\n\nA different random tensor:\ntensor([[0.4216, 0.0691],\n        [0.2332, 0.4047]])\n\nShould match r1:\ntensor([[0.3126, 0.3791],\n        [0.3087, 0.0736]]) \n```", "```py\n[ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 3)\nprint([ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[twos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 3) * 2 # every element is multiplied by 2\nprint([twos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[threes](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [twos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")       # addition allowed because shapes are similar\nprint([threes](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))              # tensors are added element-wise\nprint([threes](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)        # this has the same dimensions as input tensors\n\n[r1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 3)\n[r2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 2)\n# uncomment this line to get a runtime error\n# r3 = r1 + r2 \n```", "```py\ntensor([[1., 1., 1.],\n        [1., 1., 1.]])\ntensor([[2., 2., 2.],\n        [2., 2., 2.]])\ntensor([[3., 3., 3.],\n        [3., 3., 3.]])\ntorch.Size([2, 3]) \n```", "```py\n[r](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = ([torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2) - 0.5) * 2 # values between -1 and 1\nprint('A random matrix, r:')\nprint([r](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n# Common mathematical operations are supported:\nprint('\\nAbsolute value of r:')\nprint([torch.abs](https://pytorch.org/docs/stable/generated/torch.abs.html#torch.abs \"torch.abs\")([r](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n\n# ...as are trigonometric functions:\nprint('\\nInverse sine of r:')\nprint([torch.asin](https://pytorch.org/docs/stable/generated/torch.asin.html#torch.asin \"torch.asin\")([r](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n\n# ...and linear algebra operations like determinant and singular value decomposition\nprint('\\nDeterminant of r:')\nprint([torch.det](https://pytorch.org/docs/stable/generated/torch.det.html#torch.det \"torch.det\")([r](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\nprint('\\nSingular value decomposition of r:')\nprint([torch.svd](https://pytorch.org/docs/stable/generated/torch.svd.html#torch.svd \"torch.svd\")([r](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n\n# ...and statistical and aggregate operations:\nprint('\\nAverage and standard deviation of r:')\nprint([torch.std_mean](https://pytorch.org/docs/stable/generated/torch.std_mean.html#torch.std_mean \"torch.std_mean\")([r](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\nprint('\\nMaximum value of r:')\nprint([torch.max](https://pytorch.org/docs/stable/generated/torch.max.html#torch.max \"torch.max\")([r](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\nA random matrix, r:\ntensor([[ 0.9956, -0.2232],\n        [ 0.3858, -0.6593]])\n\nAbsolute value of r:\ntensor([[0.9956, 0.2232],\n        [0.3858, 0.6593]])\n\nInverse sine of r:\ntensor([[ 1.4775, -0.2251],\n        [ 0.3961, -0.7199]])\n\nDeterminant of r:\ntensor(-0.5703)\n\nSingular value decomposition of r:\ntorch.return_types.svd(\nU=tensor([[-0.8353, -0.5497],\n        [-0.5497,  0.8353]]),\nS=tensor([1.1793, 0.4836]),\nV=tensor([[-0.8851, -0.4654],\n        [ 0.4654, -0.8851]]))\n\nAverage and standard deviation of r:\n(tensor(0.7217), tensor(0.1247))\n\nMaximum value of r:\ntensor(0.9956) \n```", "```py\nimport torch                     # for all things PyTorch\nimport torch.nn as nn            # for torch.nn.Module, the parent object for PyTorch models\nimport torch.nn.functional as F  # for the activation function \n```", "```py\nclass LeNet([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n\n    def __init__(self):\n        super([LeNet](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n        # 1 input image channel (black & white), 6 output channels, 5x5 square convolution\n        # kernel\n        self.conv1 = [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(1, 6, 5)\n        self.conv2 = [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(6, 16, 5)\n        # an affine operation: y = Wx + b\n        self.fc1 = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(16 * 5 * 5, 120)  # 5*5 from image dimension\n        self.fc2 = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(120, 84)\n        self.fc3 = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(84, 10)\n\n    def forward(self, x):\n        # Max pooling over a (2, 2) window\n        x = [F.max_pool2d](https://pytorch.org/docs/stable/generated/torch.nn.functional.max_pool2d.html#torch.nn.functional.max_pool2d \"torch.nn.functional.max_pool2d\")([F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.conv1(x)), (2, 2))\n        # If the size is a square you can only specify a single number\n        x = [F.max_pool2d](https://pytorch.org/docs/stable/generated/torch.nn.functional.max_pool2d.html#torch.nn.functional.max_pool2d \"torch.nn.functional.max_pool2d\")([F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.conv2(x)), 2)\n        x = x.view(-1, self.num_flat_features(x))\n        x = [F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.fc1(x))\n        x = [F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\n    def num_flat_features(self, x):\n        size = x.size()[1:]  # all dimensions except the batch dimension\n        num_features = 1\n        for s in size:\n            num_features *= s\n        return num_features \n```", "```py\nnet = [LeNet](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\nprint(net)                         # what does the object tell us about itself?\n\ninput = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(1, 1, 32, 32)   # stand-in for a 32x32 black & white image\nprint('\\nImage batch shape:')\nprint(input.shape)\n\n[output](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = net(input)                # we don't call forward() directly\nprint('\\nRaw output:')\nprint([output](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([output](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape) \n```", "```py\nLeNet(\n  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=120, bias=True)\n  (fc2): Linear(in_features=120, out_features=84, bias=True)\n  (fc3): Linear(in_features=84, out_features=10, bias=True)\n)\n\nImage batch shape:\ntorch.Size([1, 1, 32, 32])\n\nRaw output:\ntensor([[ 0.0898,  0.0318,  0.1485,  0.0301, -0.0085, -0.1135, -0.0296,  0.0164,\n          0.0039,  0.0616]], grad_fn=<AddmmBackward0>)\ntorch.Size([1, 10]) \n```", "```py\n#%matplotlib inline\n\nimport torch\nimport torchvision\nimport torchvision.transforms as transforms\n\n[transform](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\") = [transforms.Compose](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")(\n    [[transforms.ToTensor](https://pytorch.org/vision/stable/generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor \"torchvision.transforms.ToTensor\")(),\n     [transforms.Normalize](https://pytorch.org/vision/stable/generated/torchvision.transforms.Normalize.html#torchvision.transforms.Normalize \"torchvision.transforms.Normalize\")((0.4914, 0.4822, 0.4465), (0.2470, 0.2435, 0.2616))]) \n```", "```py\n[trainset](https://pytorch.org/vision/stable/generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10 \"torchvision.datasets.CIFAR10\") = [torchvision.datasets.CIFAR10](https://pytorch.org/vision/stable/generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10 \"torchvision.datasets.CIFAR10\")(root='./data', train=True,\n                                        download=True, [transform](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")=[transform](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")) \n```", "```py\nDownloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n\n  0%|          | 0/170498071 [00:00<?, ?it/s]\n  0%|          | 425984/170498071 [00:00<00:42, 4044472.50it/s]\n  2%|2         | 4063232/170498071 [00:00<00:07, 22577866.17it/s]\n  6%|5         | 9404416/170498071 [00:00<00:04, 36369973.58it/s]\n  8%|8         | 13762560/170498071 [00:00<00:04, 39105082.28it/s]\n 11%|#1        | 19005440/170498071 [00:00<00:03, 43825417.38it/s]\n 14%|#3        | 23429120/170498071 [00:00<00:03, 43818360.32it/s]\n 17%|#6        | 28639232/170498071 [00:00<00:03, 46489541.28it/s]\n 20%|#9        | 33325056/170498071 [00:00<00:02, 45786944.87it/s]\n 23%|##2       | 38567936/170498071 [00:00<00:02, 47766940.54it/s]\n 25%|##5       | 43384832/170498071 [00:01<00:02, 46754502.74it/s]\n 28%|##8       | 48562176/170498071 [00:01<00:02, 48195537.67it/s]\n 31%|###1      | 53411840/170498071 [00:01<00:02, 46939745.24it/s]\n 35%|###4      | 59506688/170498071 [00:01<00:02, 51037365.18it/s]\n 39%|###9      | 67108864/170498071 [00:01<00:01, 58314403.51it/s]\n 45%|####5     | 77168640/170498071 [00:01<00:01, 70815830.81it/s]\n 50%|#####     | 86016000/170498071 [00:01<00:01, 76062449.51it/s]\n 56%|#####6    | 96239616/170498071 [00:01<00:00, 83839821.30it/s]\n 62%|######1   | 105283584/170498071 [00:01<00:00, 85769908.93it/s]\n 68%|######7   | 115474432/170498071 [00:01<00:00, 90570010.64it/s]\n 73%|#######3  | 124551168/170498071 [00:02<00:00, 90287482.99it/s]\n 79%|#######8  | 134545408/170498071 [00:02<00:00, 93132654.68it/s]\n 84%|########4 | 143884288/170498071 [00:02<00:00, 92481450.08it/s]\n 90%|########9 | 153157632/170498071 [00:02<00:00, 92207858.35it/s]\n 95%|#########5| 162398208/170498071 [00:02<00:00, 74753698.93it/s]\n100%|#########9| 170426368/170498071 [00:02<00:00, 64194917.16it/s]\n100%|##########| 170498071/170498071 [00:02<00:00, 63329744.47it/s]\nExtracting ./data/cifar-10-python.tar.gz to ./data \n```", "```py\n[trainloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\") = [torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")([trainset](https://pytorch.org/vision/stable/generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10 \"torchvision.datasets.CIFAR10\"), batch_size=4,\n                                          shuffle=True, num_workers=2) \n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nclasses = ('plane', 'car', 'bird', 'cat',\n           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n\ndef imshow(img):\n    img = img / 2 + 0.5     # unnormalize\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n\n# get some random training images\ndataiter = iter([trainloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\"))\n[images](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [labels](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = next(dataiter)\n\n# show images\nimshow([torchvision.utils.make_grid](https://pytorch.org/vision/stable/generated/torchvision.utils.make_grid.html#torchvision.utils.make_grid \"torchvision.utils.make_grid\")([images](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n# print labels\nprint(' '.join('%5s' % classes[[labels](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[j]] for j in range(4))) \n```", "```py\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n ship   car horse  ship \n```", "```py\n#%matplotlib inline\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\nimport torchvision\nimport torchvision.transforms as transforms\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np \n```", "```py\n[transform](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\") = [transforms.Compose](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")(\n    [[transforms.ToTensor](https://pytorch.org/vision/stable/generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor \"torchvision.transforms.ToTensor\")(),\n     [transforms.Normalize](https://pytorch.org/vision/stable/generated/torchvision.transforms.Normalize.html#torchvision.transforms.Normalize \"torchvision.transforms.Normalize\")((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n\n[trainset](https://pytorch.org/vision/stable/generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10 \"torchvision.datasets.CIFAR10\") = [torchvision.datasets.CIFAR10](https://pytorch.org/vision/stable/generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10 \"torchvision.datasets.CIFAR10\")(root='./data', train=True,\n                                        download=True, [transform](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")=[transform](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\"))\n[trainloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\") = [torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")([trainset](https://pytorch.org/vision/stable/generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10 \"torchvision.datasets.CIFAR10\"), batch_size=4,\n                                          shuffle=True, num_workers=2)\n\n[testset](https://pytorch.org/vision/stable/generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10 \"torchvision.datasets.CIFAR10\") = [torchvision.datasets.CIFAR10](https://pytorch.org/vision/stable/generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10 \"torchvision.datasets.CIFAR10\")(root='./data', train=False,\n                                       download=True, [transform](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")=[transform](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\"))\n[testloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\") = [torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")([testset](https://pytorch.org/vision/stable/generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10 \"torchvision.datasets.CIFAR10\"), batch_size=4,\n                                         shuffle=False, num_workers=2)\n\nclasses = ('plane', 'car', 'bird', 'cat',\n           'deer', 'dog', 'frog', 'horse', 'ship', 'truck') \n```", "```py\nFiles already downloaded and verified\nFiles already downloaded and verified \n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# functions to show an image\n\ndef imshow(img):\n    img = img / 2 + 0.5     # unnormalize\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n\n# get some random training images\ndataiter = iter([trainloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\"))\n[images](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [labels](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = next(dataiter)\n\n# show images\nimshow([torchvision.utils.make_grid](https://pytorch.org/vision/stable/generated/torchvision.utils.make_grid.html#torchvision.utils.make_grid \"torchvision.utils.make_grid\")([images](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n# print labels\nprint(' '.join('%5s' % classes[[labels](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[j]] for j in range(4))) \n```", "```py\ncat   cat  deer  frog \n```", "```py\nclass Net([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super([Net](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n        self.conv1 = [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(3, 6, 5)\n        self.pool = [nn.MaxPool2d](https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html#torch.nn.MaxPool2d \"torch.nn.MaxPool2d\")(2, 2)\n        self.conv2 = [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(6, 16, 5)\n        self.fc1 = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(16 * 5 * 5, 120)\n        self.fc2 = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(120, 84)\n        self.fc3 = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(84, 10)\n\n    def forward(self, x):\n        x = self.pool([F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.conv1(x)))\n        x = self.pool([F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.conv2(x)))\n        x = x.view(-1, 16 * 5 * 5)\n        x = [F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.fc1(x))\n        x = [F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\nnet = [Net](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")() \n```", "```py\n[criterion](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\") = [nn.CrossEntropyLoss](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\")()\n[optimizer](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = [optim.SGD](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")([net.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(), lr=0.001, momentum=0.9) \n```", "```py\nfor epoch in range(2):  # loop over the dataset multiple times\n\n    running_loss = 0.0\n    for i, data in enumerate([trainloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\"), 0):\n        # get the inputs\n        [inputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [labels](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = data\n\n        # zero the parameter gradients\n        [optimizer.zero_grad](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.zero_grad \"torch.optim.SGD.zero_grad\")()\n\n        # forward + backward + optimize\n        [outputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = net([inputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [criterion](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\")([outputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [labels](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        [loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\n        [optimizer.step](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.step \"torch.optim.SGD.step\")()\n\n        # print statistics\n        running_loss += [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").item()\n        if i % 2000 == 1999:    # print every 2000 mini-batches\n            print('[%d, %5d] loss: %.3f' %\n                  (epoch + 1, i + 1, running_loss / 2000))\n            running_loss = 0.0\n\nprint('Finished Training') \n```", "```py\n[1,  2000] loss: 2.195\n[1,  4000] loss: 1.876\n[1,  6000] loss: 1.655\n[1,  8000] loss: 1.576\n[1, 10000] loss: 1.519\n[1, 12000] loss: 1.466\n[2,  2000] loss: 1.421\n[2,  4000] loss: 1.376\n[2,  6000] loss: 1.336\n[2,  8000] loss: 1.335\n[2, 10000] loss: 1.326\n[2, 12000] loss: 1.270\nFinished Training \n```", "```py\n[1,  2000]  loss:  2.235\n[1,  4000]  loss:  1.940\n[1,  6000]  loss:  1.713\n[1,  8000]  loss:  1.573\n[1,  10000]  loss:  1.507\n[1,  12000]  loss:  1.442\n[2,  2000]  loss:  1.378\n[2,  4000]  loss:  1.364\n[2,  6000]  loss:  1.349\n[2,  8000]  loss:  1.319\n[2,  10000]  loss:  1.284\n[2,  12000]  loss:  1.267\nFinished  Training \n```", "```py\ncorrect = 0\ntotal = 0\nwith [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n    for data in [testloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\"):\n        [images](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [labels](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = data\n        [outputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = net([images](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        [_](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [predicted](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.max](https://pytorch.org/docs/stable/generated/torch.max.html#torch.max \"torch.max\")([outputs.data](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), 1)\n        total += [labels](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").size(0)\n        correct += ([predicted](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") == [labels](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")).sum().item()\n\nprint('Accuracy of the network on the 10000 test images: %d  %%' % (\n    100 * correct / total)) \n```", "```py\nAccuracy of the network on the 10000 test images: 54 % \n```"]