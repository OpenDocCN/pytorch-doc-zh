- en: torch.utils.dlpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/docs/stable/dlpack.html](https://pytorch.org/docs/stable/dlpack.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Converts a tensor from an external library into a `torch.Tensor`.
  prefs: []
  type: TYPE_NORMAL
- en: The returned PyTorch tensor will share the memory with the input tensor (which
    may have come from another library). Note that in-place operations will therefore
    also affect the data of the input tensor. This may lead to unexpected issues (e.g.,
    other libraries may have read-only flags or immutable data structures), so the
    user should only do this if they know for sure that this is fine.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**ext_tensor** (object with `__dlpack__` attribute, or a DLPack capsule) –'
  prefs: []
  type: TYPE_NORMAL
- en: The tensor or DLPack capsule to convert.
  prefs: []
  type: TYPE_NORMAL
- en: If `ext_tensor` is a tensor (or ndarray) object, it must support the `__dlpack__`
    protocol (i.e., have a `ext_tensor.__dlpack__` method). Otherwise `ext_tensor`
    may be a DLPack capsule, which is an opaque `PyCapsule` instance, typically produced
    by a `to_dlpack` function or method.
  prefs: []
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns an opaque object (a “DLPack capsule”) representing the tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`to_dlpack` is a legacy DLPack interface. The capsule it returns cannot be
    used for anything in Python other than use it as input to `from_dlpack`. The more
    idiomatic use of DLPack is to call `from_dlpack` directly on the tensor object
    - this works when that object has a `__dlpack__` method, which PyTorch and most
    other libraries indeed have now.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Only call `from_dlpack` once per capsule produced with `to_dlpack`. Behavior
    when a capsule is consumed multiple times is undefined.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**tensor** – a tensor to be exported'
  prefs: []
  type: TYPE_NORMAL
- en: The DLPack capsule shares the tensor’s memory.
  prefs: []
  type: TYPE_NORMAL
