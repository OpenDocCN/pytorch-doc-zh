["```py\nimport torch  # This is all you need to use both PyTorch and TorchScript!\nprint(torch.__version__)\n[torch.manual_seed](https://pytorch.org/docs/stable/generated/torch.manual_seed.html#torch.manual_seed \"torch.manual_seed\")(191009)  # set the seed for reproducibility \n```", "```py\n2.2.0+cu121\n\n<torch._C.Generator object at 0x7fcf1e81f070> \n```", "```py\nclass MyCell([torch.nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super([MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n\n    def forward(self, [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        new_h = [torch.tanh](https://pytorch.org/docs/stable/generated/torch.tanh.html#torch.tanh \"torch.tanh\")([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        return new_h, new_h\n\nmy_cell = [MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 4)\n[h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 4)\nprint(my_cell([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\n(tensor([[0.8219, 0.8990, 0.6670, 0.8277],\n        [0.5176, 0.4017, 0.8545, 0.7336],\n        [0.6013, 0.6992, 0.2618, 0.6668]]), tensor([[0.8219, 0.8990, 0.6670, 0.8277],\n        [0.5176, 0.4017, 0.8545, 0.7336],\n        [0.6013, 0.6992, 0.2618, 0.6668]])) \n```", "```py\nclass MyCell([torch.nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super([MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n        self.linear = [torch.nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(4, 4)\n\n    def forward(self, [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        new_h = [torch.tanh](https://pytorch.org/docs/stable/generated/torch.tanh.html#torch.tanh \"torch.tanh\")(self.linear([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) + [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        return new_h, new_h\n\nmy_cell = [MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\nprint(my_cell)\nprint(my_cell([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\nMyCell(\n  (linear): Linear(in_features=4, out_features=4, bias=True)\n)\n(tensor([[ 0.8573,  0.6190,  0.5774,  0.7869],\n        [ 0.3326,  0.0530,  0.0702,  0.8114],\n        [ 0.7818, -0.0506,  0.4039,  0.7967]], grad_fn=<TanhBackward0>), tensor([[ 0.8573,  0.6190,  0.5774,  0.7869],\n        [ 0.3326,  0.0530,  0.0702,  0.8114],\n        [ 0.7818, -0.0506,  0.4039,  0.7967]], grad_fn=<TanhBackward0>)) \n```", "```py\nclass MyDecisionGate([torch.nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def forward(self, [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        if [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").sum() > 0:\n            return [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n        else:\n            return -[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\nclass MyCell([torch.nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super([MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n        self.dg = [MyDecisionGate](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\n        self.linear = [torch.nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(4, 4)\n\n    def forward(self, [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        new_h = [torch.tanh](https://pytorch.org/docs/stable/generated/torch.tanh.html#torch.tanh \"torch.tanh\")(self.dg(self.linear([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) + [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        return new_h, new_h\n\nmy_cell = [MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\nprint(my_cell)\nprint(my_cell([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\nMyCell(\n  (dg): MyDecisionGate()\n  (linear): Linear(in_features=4, out_features=4, bias=True)\n)\n(tensor([[ 0.8346,  0.5931,  0.2097,  0.8232],\n        [ 0.2340, -0.1254,  0.2679,  0.8064],\n        [ 0.6231,  0.1494, -0.3110,  0.7865]], grad_fn=<TanhBackward0>), tensor([[ 0.8346,  0.5931,  0.2097,  0.8232],\n        [ 0.2340, -0.1254,  0.2679,  0.8064],\n        [ 0.6231,  0.1494, -0.3110,  0.7865]], grad_fn=<TanhBackward0>)) \n```", "```py\nclass MyCell([torch.nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super([MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n        self.linear = [torch.nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(4, 4)\n\n    def forward(self, [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        new_h = [torch.tanh](https://pytorch.org/docs/stable/generated/torch.tanh.html#torch.tanh \"torch.tanh\")(self.linear([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) + [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        return new_h, new_h\n\nmy_cell = [MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 4), [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 4)\ntraced_cell = [torch.jit.trace](https://pytorch.org/docs/stable/generated/torch.jit.trace.html#torch.jit.trace \"torch.jit.trace\")(my_cell, ([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\nprint(traced_cell)\ntraced_cell([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nMyCell(\n  original_name=MyCell\n  (linear): Linear(original_name=Linear)\n)\n\n(tensor([[-0.2541,  0.2460,  0.2297,  0.1014],\n        [-0.2329, -0.2911,  0.5641,  0.5015],\n        [ 0.1688,  0.2252,  0.7251,  0.2530]], grad_fn=<TanhBackward0>), tensor([[-0.2541,  0.2460,  0.2297,  0.1014],\n        [-0.2329, -0.2911,  0.5641,  0.5015],\n        [ 0.1688,  0.2252,  0.7251,  0.2530]], grad_fn=<TanhBackward0>)) \n```", "```py\nprint([traced_cell.graph](https://pytorch.org/docs/stable/generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule.graph \"torch.jit.ScriptModule.graph\")) \n```", "```py\ngraph(%self.1 : __torch__.MyCell,\n      %x : Float(3, 4, strides=[4, 1], requires_grad=0, device=cpu),\n      %h : Float(3, 4, strides=[4, 1], requires_grad=0, device=cpu)):\n  %linear : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name=\"linear\"](%self.1)\n  %20 : Tensor = prim::CallMethod[name=\"forward\"](%linear, %x)\n  %11 : int = prim::Constant[value=1]() # /var/lib/jenkins/workspace/beginner_source/Intro_to_TorchScript_tutorial.py:189:0\n  %12 : Float(3, 4, strides=[4, 1], requires_grad=1, device=cpu) = aten::add(%20, %h, %11) # /var/lib/jenkins/workspace/beginner_source/Intro_to_TorchScript_tutorial.py:189:0\n  %13 : Float(3, 4, strides=[4, 1], requires_grad=1, device=cpu) = aten::tanh(%12) # /var/lib/jenkins/workspace/beginner_source/Intro_to_TorchScript_tutorial.py:189:0\n  %14 : (Float(3, 4, strides=[4, 1], requires_grad=1, device=cpu), Float(3, 4, strides=[4, 1], requires_grad=1, device=cpu)) = prim::TupleConstruct(%13, %13)\n  return (%14) \n```", "```py\nprint([traced_cell.code](https://pytorch.org/docs/stable/generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule.code \"torch.jit.ScriptModule.code\")) \n```", "```py\ndef forward(self,\n    x: Tensor,\n    h: Tensor) -> Tuple[Tensor, Tensor]:\n  linear = self.linear\n  _0 = torch.tanh(torch.add((linear).forward(x, ), h))\n  return (_0, _0) \n```", "```py\nprint(my_cell([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\nprint(traced_cell([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\n(tensor([[-0.2541,  0.2460,  0.2297,  0.1014],\n        [-0.2329, -0.2911,  0.5641,  0.5015],\n        [ 0.1688,  0.2252,  0.7251,  0.2530]], grad_fn=<TanhBackward0>), tensor([[-0.2541,  0.2460,  0.2297,  0.1014],\n        [-0.2329, -0.2911,  0.5641,  0.5015],\n        [ 0.1688,  0.2252,  0.7251,  0.2530]], grad_fn=<TanhBackward0>))\n(tensor([[-0.2541,  0.2460,  0.2297,  0.1014],\n        [-0.2329, -0.2911,  0.5641,  0.5015],\n        [ 0.1688,  0.2252,  0.7251,  0.2530]], grad_fn=<TanhBackward0>), tensor([[-0.2541,  0.2460,  0.2297,  0.1014],\n        [-0.2329, -0.2911,  0.5641,  0.5015],\n        [ 0.1688,  0.2252,  0.7251,  0.2530]], grad_fn=<TanhBackward0>)) \n```", "```py\nclass MyDecisionGate([torch.nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def forward(self, [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        if [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").sum() > 0:\n            return [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n        else:\n            return -[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\nclass MyCell([torch.nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self, dg):\n        super([MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n        self.dg = dg\n        self.linear = [torch.nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(4, 4)\n\n    def forward(self, [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        new_h = [torch.tanh](https://pytorch.org/docs/stable/generated/torch.tanh.html#torch.tanh \"torch.tanh\")(self.dg(self.linear([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) + [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        return new_h, new_h\n\nmy_cell = [MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")([MyDecisionGate](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")())\ntraced_cell = [torch.jit.trace](https://pytorch.org/docs/stable/generated/torch.jit.trace.html#torch.jit.trace \"torch.jit.trace\")(my_cell, ([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n\nprint([traced_cell.dg.code](https://pytorch.org/docs/stable/generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule.code \"torch.jit.ScriptModule.code\"))\nprint([traced_cell.code](https://pytorch.org/docs/stable/generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule.code \"torch.jit.ScriptModule.code\")) \n```", "```py\n/var/lib/jenkins/workspace/beginner_source/Intro_to_TorchScript_tutorial.py:261: TracerWarning:\n\nConverting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!\n\ndef forward(self,\n    argument_1: Tensor) -> NoneType:\n  return None\n\ndef forward(self,\n    x: Tensor,\n    h: Tensor) -> Tuple[Tensor, Tensor]:\n  dg = self.dg\n  linear = self.linear\n  _0 = (linear).forward(x, )\n  _1 = (dg).forward(_0, )\n  _2 = torch.tanh(torch.add(_0, h))\n  return (_2, _2) \n```", "```py\nscripted_gate = [torch.jit.script](https://pytorch.org/docs/stable/generated/torch.jit.script.html#torch.jit.script \"torch.jit.script\")([MyDecisionGate](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")())\n\nmy_cell = [MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(scripted_gate)\nscripted_cell = [torch.jit.script](https://pytorch.org/docs/stable/generated/torch.jit.script.html#torch.jit.script \"torch.jit.script\")(my_cell)\n\nprint([scripted_gate.code](https://pytorch.org/docs/stable/generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule.code \"torch.jit.ScriptModule.code\"))\nprint([scripted_cell.code](https://pytorch.org/docs/stable/generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule.code \"torch.jit.ScriptModule.code\")) \n```", "```py\ndef forward(self,\n    x: Tensor) -> Tensor:\n  if bool(torch.gt(torch.sum(x), 0)):\n    _0 = x\n  else:\n    _0 = torch.neg(x)\n  return _0\n\ndef forward(self,\n    x: Tensor,\n    h: Tensor) -> Tuple[Tensor, Tensor]:\n  dg = self.dg\n  linear = self.linear\n  _0 = torch.add((dg).forward((linear).forward(x, ), ), h)\n  new_h = torch.tanh(_0)\n  return (new_h, new_h) \n```", "```py\n# New inputs\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 4), [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 4)\nprint(scripted_cell([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\n(tensor([[ 0.5679,  0.5762,  0.2506, -0.0734],\n        [ 0.5228,  0.7122,  0.6985, -0.0656],\n        [ 0.6187,  0.4487,  0.7456, -0.0238]], grad_fn=<TanhBackward0>), tensor([[ 0.5679,  0.5762,  0.2506, -0.0734],\n        [ 0.5228,  0.7122,  0.6985, -0.0656],\n        [ 0.6187,  0.4487,  0.7456, -0.0238]], grad_fn=<TanhBackward0>)) \n```", "```py\nclass MyRNNLoop([torch.nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super([MyRNNLoop](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n        self.cell = [torch.jit.trace](https://pytorch.org/docs/stable/generated/torch.jit.trace.html#torch.jit.trace \"torch.jit.trace\")([MyCell](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(scripted_gate), ([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n\n    def forward(self, xs):\n        [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), y = [torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")(3, 4), [torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")(3, 4)\n        for i in range(xs.size(0)):\n            y, [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = self.cell(xs[i], [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        return y, [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\nrnn_loop = [torch.jit.script](https://pytorch.org/docs/stable/generated/torch.jit.script.html#torch.jit.script \"torch.jit.script\")([MyRNNLoop](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")())\nprint([rnn_loop.code](https://pytorch.org/docs/stable/generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule.code \"torch.jit.ScriptModule.code\")) \n```", "```py\ndef forward(self,\n    xs: Tensor) -> Tuple[Tensor, Tensor]:\n  h = torch.zeros([3, 4])\n  y = torch.zeros([3, 4])\n  y0 = y\n  h0 = h\n  for i in range(torch.size(xs, 0)):\n    cell = self.cell\n    _0 = (cell).forward(torch.select(xs, 0, i), h0, )\n    y1, h1, = _0\n    y0, h0 = y1, h1\n  return (y0, h0) \n```", "```py\nclass WrapRNN([torch.nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super([WrapRNN](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n        self.loop = [torch.jit.script](https://pytorch.org/docs/stable/generated/torch.jit.script.html#torch.jit.script \"torch.jit.script\")([MyRNNLoop](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")())\n\n    def forward(self, xs):\n        y, [h](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = self.loop(xs)\n        return torch.relu(y)\n\ntraced = [torch.jit.trace](https://pytorch.org/docs/stable/generated/torch.jit.trace.html#torch.jit.trace \"torch.jit.trace\")([WrapRNN](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(), ([torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(10, 3, 4)))\nprint([traced.code](https://pytorch.org/docs/stable/generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule.code \"torch.jit.ScriptModule.code\")) \n```", "```py\ndef forward(self,\n    xs: Tensor) -> Tensor:\n  loop = self.loop\n  _0, y, = (loop).forward(xs, )\n  return torch.relu(y) \n```", "```py\n[traced.save](https://pytorch.org/docs/stable/generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule.save \"torch.jit.ScriptModule.save\")('wrapped_rnn.pt')\n\nloaded = [torch.jit.load](https://pytorch.org/docs/stable/generated/torch.jit.load.html#torch.jit.load \"torch.jit.load\")('wrapped_rnn.pt')\n\nprint(loaded)\nprint([loaded.code](https://pytorch.org/docs/stable/generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule.code \"torch.jit.ScriptModule.code\")) \n```", "```py\nRecursiveScriptModule(\n  original_name=WrapRNN\n  (loop): RecursiveScriptModule(\n    original_name=MyRNNLoop\n    (cell): RecursiveScriptModule(\n      original_name=MyCell\n      (dg): RecursiveScriptModule(original_name=MyDecisionGate)\n      (linear): RecursiveScriptModule(original_name=Linear)\n    )\n  )\n)\ndef forward(self,\n    xs: Tensor) -> Tensor:\n  loop = self.loop\n  _0, y, = (loop).forward(xs, )\n  return torch.relu(y) \n```"]