- en: Additive Synthesis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/tutorials/additive_synthesis_tutorial.html](https://pytorch.org/audio/stable/tutorials/additive_synthesis_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-tutorials-additive-synthesis-tutorial-py) to
    download the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '**Author**: [Moto Hira](mailto:moto%40meta.com)'
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial is the continuation of [Oscillator and ADSR Envelope](./oscillator_tutorial.html).
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial shows how to perform additive synthesis and subtractive synthesis
    using TorchAudio’s DSP functions.
  prefs: []
  type: TYPE_NORMAL
- en: Additive synthesis creates timbre by combining multiple waveform. Subtractive
    synthesis creates timbre by applying filters.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial requires prototype DSP features, which are available in nightly
    builds.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [https://pytorch.org/get-started/locally](https://pytorch.org/get-started/locally)
    for instructions for installing a nightly build.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Overview[](#overview "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating multiple frequency pitches[](#creating-multiple-frequency-pitches
    "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The core of additive synthesis is oscillator. We create a timbre by summing
    up the multiple waveforms generated by oscillator.
  prefs: []
  type: TYPE_NORMAL
- en: In [the oscillator tutorial](./oscillator_tutorial.html), we used [`oscillator_bank()`](../generated/torchaudio.prototype.functional.oscillator_bank.html#torchaudio.prototype.functional.oscillator_bank
    "torchaudio.prototype.functional.oscillator_bank") and [`adsr_envelope()`](../generated/torchaudio.prototype.functional.adsr_envelope.html#torchaudio.prototype.functional.adsr_envelope
    "torchaudio.prototype.functional.adsr_envelope") to generate various waveforms.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we use [`extend_pitch()`](../generated/torchaudio.prototype.functional.extend_pitch.html#torchaudio.prototype.functional.extend_pitch
    "torchaudio.prototype.functional.extend_pitch") to create a timbre from base frequency.
  prefs: []
  type: TYPE_NORMAL
- en: First, we define some constants and helper function that we use throughout the
    tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Harmonic Overtones[](#harmonic-overtones "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Harmonic overtones are frequency components that are an integer multiple of
    the fundamental frequency.
  prefs: []
  type: TYPE_NORMAL
- en: We look at how to generate the common waveforms that are used in synthesizers.
    That is,
  prefs: []
  type: TYPE_NORMAL
- en: Sawtooth wave
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Square wave
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Triangle wave
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Sawtooth wave[](#sawtooth-wave "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Sawtooth wave](https://en.wikipedia.org/wiki/Sawtooth_wave) can be expressed
    as the following. It contains all the integer harmonics, so it is commonly used
    in subtractive synthesis as well.'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{align*} y_t &= \sum_{k=1}^{K} A_k \sin ( 2 \pi f_k t ) \\ \text{where}
    \\ f_k &= k f_0 \\ A_k &= -\frac{ (-1) ^k }{k \pi} \end{align*}\]
  prefs: []
  type: TYPE_NORMAL
- en: The following function takes fundamental frequencies and amplitudes, and adds
    extend pitch in accordance with the formula above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now synthesize a waveform
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 46)](../Images/f9720f8c48393179934600ac2f65389d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to oscillate the base frequency to create a time-varying tone
    based on sawtooth wave.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 46)](../Images/f7f81fb888b8651e7597a2d93fca1647.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Square wave[](#square-wave "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Square wave](https://en.wikipedia.org/wiki/Square_wave) contains only odd-integer
    harmonics.'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{align*} y_t &= \sum_{k=0}^{K-1} A_k \sin ( 2 \pi f_k t ) \\ \text{where}
    \\ f_k &= n f_0 \\ A_k &= \frac{ 4 }{n \pi} \\ n &= 2k + 1 \end{align*}\]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 23)](../Images/34cee6f4901289e37a7b4caea5db81ec.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Triangle wave[](#triangle-wave "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Triangle wave](https://en.wikipedia.org/wiki/Triangle_wave) also only contains
    odd-integer harmonics.'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{align*} y_t &= \sum_{k=0}^{K-1} A_k \sin ( 2 \pi f_k t ) \\ \text{where}
    \\ f_k &= n f_0 \\ A_k &= (-1) ^ k \frac{8}{(n\pi) ^ 2} \\ n &= 2k + 1 \end{align*}\]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 23)](../Images/eef0b52ccbd6c4cf4e303036f0fc2863.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Inharmonic Paritials[](#inharmonic-paritials "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inharmonic partials refer to freqencies that are not integer multiple of fundamental
    frequency.
  prefs: []
  type: TYPE_NORMAL
- en: They are essential in re-creating realistic sound or making the result of synthesis
    more interesting.
  prefs: []
  type: TYPE_NORMAL
- en: Bell sound[](#bell-sound "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://computermusicresource.com/Simple.bell.tutorial.html](https://computermusicresource.com/Simple.bell.tutorial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 9)](../Images/4787059407ae32c1a6aaaa83903ac56b.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: As a comparison, the following is the harmonic version of the above. Only frequency
    values are different. The number of overtones and its amplitudes are same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 9)](../Images/73f01544734dc7809b6d987ccdae6c7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: References[](#references "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Additive_synthesis](https://en.wikipedia.org/wiki/Additive_synthesis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://computermusicresource.com/Simple.bell.tutorial.html](https://computermusicresource.com/Simple.bell.tutorial.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://computermusicresource.com/Definitions/additive.synthesis.html](https://computermusicresource.com/Definitions/additive.synthesis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 0 minutes 4.662 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: additive_synthesis_tutorial.py`](../_downloads/3b47d1fda1ff1ba89f9df8fcc2d3ba6d/additive_synthesis_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: additive_synthesis_tutorial.ipynb`](../_downloads/d2ec3ac999c9665c76413f1e36232990/additive_synthesis_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
