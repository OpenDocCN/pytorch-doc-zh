- en: torch.fx
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: torch.fx
- en: 原文：[https://pytorch.org/docs/stable/fx.html](https://pytorch.org/docs/stable/fx.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/docs/stable/fx.html](https://pytorch.org/docs/stable/fx.html)
- en: '## Overview'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '##概述'
- en: 'FX is a toolkit for developers to use to transform `nn.Module` instances. FX
    consists of three main components: a **symbolic tracer,** an **intermediate representation**,
    and **Python code generation**. A demonstration of these components in action:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: FX是开发人员用来转换`nn.Module`实例的工具包。FX由三个主要组件组成：**符号跟踪器**，**中间表示**和**Python代码生成**。这些组件的演示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The **symbolic tracer** performs “symbolic execution” of the Python code. It
    feeds fake values, called Proxies, through the code. Operations on theses Proxies
    are recorded. More information about symbolic tracing can be found in the [`symbolic_trace()`](#torch.fx.symbolic_trace
    "torch.fx.symbolic_trace") and [`Tracer`](#torch.fx.Tracer "torch.fx.Tracer")
    documentation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**符号跟踪器**执行Python代码的“符号执行”。它通过代码传递称为代理的虚拟值。对这些代理的操作被记录下来。有关符号跟踪的更多信息，请参阅[`symbolic_trace()`](#torch.fx.symbolic_trace
    "torch.fx.symbolic_trace")和[`Tracer`](#torch.fx.Tracer "torch.fx.Tracer")文档。'
- en: The **intermediate representation** is the container for the operations that
    were recorded during symbolic tracing. It consists of a list of Nodes that represent
    function inputs, callsites (to functions, methods, or [`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module") instances), and return values. More information about the IR
    can be found in the documentation for [`Graph`](#torch.fx.Graph "torch.fx.Graph").
    The IR is the format on which transformations are applied.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**中间表示**是在符号跟踪期间记录的操作的容器。它包含一系列代表函数输入、调用点（到函数、方法或[`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")实例）和返回值的节点。有关IR的更多信息，请参阅[`Graph`](#torch.fx.Graph "torch.fx.Graph")的文档。IR是应用变换的格式。'
- en: '**Python code generation** is what makes FX a Python-to-Python (or Module-to-Module)
    transformation toolkit. For each Graph IR, we can create valid Python code matching
    the Graph’s semantics. This functionality is wrapped up in [`GraphModule`](#torch.fx.GraphModule
    "torch.fx.GraphModule"), which is a [`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module") instance that holds a [`Graph`](#torch.fx.Graph "torch.fx.Graph")
    as well as a `forward` method generated from the Graph.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python代码生成**是使FX成为Python到Python（或模块到模块）转换工具包的关键。对于每个Graph IR，我们可以创建与Graph语义匹配的有效Python代码。这个功能被封装在[`GraphModule`](#torch.fx.GraphModule
    "torch.fx.GraphModule")中，它是一个包含[`Graph`](#torch.fx.Graph "torch.fx.Graph")以及从Graph生成的`forward`方法的[`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")实例。'
- en: Taken together, this pipeline of components (symbolic tracing -> intermediate
    representation -> transforms -> Python code generation) constitutes the Python-to-Python
    transformation pipeline of FX. In addition, these components can be used separately.
    For example, symbolic tracing can be used in isolation to capture a form of the
    code for analysis (and not transformation) purposes. Code generation can be used
    for programmatically generating models, for example from a config file. There
    are many uses for FX!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 综合起来，这些组件的流水线（符号跟踪->中间表示->变换->Python代码生成）构成了FX的Python到Python转换流水线。此外，这些组件也可以单独使用。例如，符号跟踪可以单独用于捕获代码的一种形式以进行分析（而不是转换）目的。代码生成可用于通过配置文件程序生成模型。FX有许多用途！
- en: 'Several example transformations can be found at the [examples](https://github.com/pytorch/examples/tree/master/fx)
    repository.  ## Writing Transformations[](#writing-transformations "Permalink
    to this heading")'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例](https://github.com/pytorch/examples/tree/master/fx)存储库中可以找到几个示例变换。##编写变换
- en: What is an FX transform? Essentially, it’s a function that looks like this.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是FX变换？基本上，它是一个看起来像这样的函数。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Your transform will take in a [`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module"), acquire a [`Graph`](#torch.fx.Graph "torch.fx.Graph") from
    it, do some modifications, and return a new [`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module"). You should think of the [`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module") that your FX transform returns as identical to a regular [`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module") – you can pass it to another FX transform, you can pass it
    to TorchScript, or you can run it. Ensuring that the inputs and outputs of your
    FX transform are a [`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module") will allow for composability.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您的变换将接受一个[`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")，从中获取一个[`Graph`](#torch.fx.Graph "torch.fx.Graph")，进行一些修改，然后返回一个新的[`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")。您应该将您的FX变换返回的[`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")视为与常规[`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")相同-您可以将其传递给另一个FX变换，可以将其传递给TorchScript，或者可以运行它。确保您的FX变换的输入和输出是[`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")将允许组合。
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'It is also possible to modify an existing [`GraphModule`](#torch.fx.GraphModule
    "torch.fx.GraphModule") instead of creating a new one, like so:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以修改现有的[`GraphModule`](#torch.fx.GraphModule "torch.fx.GraphModule")而不是创建一个新的，就像这样：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that you MUST call [`GraphModule.recompile()`](#torch.fx.GraphModule.recompile
    "torch.fx.GraphModule.recompile") to bring the generated `forward()` method on
    the `GraphModule` in sync with the modified [`Graph`](#torch.fx.Graph "torch.fx.Graph").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须调用[`GraphModule.recompile()`](#torch.fx.GraphModule.recompile "torch.fx.GraphModule.recompile")来使生成的`forward()`方法与修改后的[`Graph`](#torch.fx.Graph
    "torch.fx.Graph")同步。
- en: Given that you’ve passed in a [`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module") that has been traced into a [`Graph`](#torch.fx.Graph "torch.fx.Graph"),
    there are now two primary approaches you can take to building a new [`Graph`](#torch.fx.Graph
    "torch.fx.Graph").
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 给定您传入了一个已经被追踪到一个[`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")的[`Graph`](#torch.fx.Graph "torch.fx.Graph")，现在有两种主要方法可以用来构建一个新的[`Graph`](#torch.fx.Graph
    "torch.fx.Graph")。
- en: A Quick Primer on Graphs
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于图形的快速入门
- en: 'Full treatment of the semantics of graphs can be found in the [`Graph`](#torch.fx.Graph
    "torch.fx.Graph") documentation, but we are going to cover the basics here. A
    [`Graph`](#torch.fx.Graph "torch.fx.Graph") is a data structure that represents
    a method on a [`GraphModule`](#torch.fx.GraphModule "torch.fx.GraphModule"). The
    information that this requires is:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于图形语义的完整处理可以在[`Graph`](#torch.fx.Graph "torch.fx.Graph")文档中找到，但我们将在这里介绍基础知识。[`Graph`](#torch.fx.Graph
    "torch.fx.Graph")是表示[`GraphModule`](#torch.fx.GraphModule "torch.fx.GraphModule")上的方法的数据结构。这需要的信息是：
- en: What are the inputs to the method?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法的输入是什么？
- en: What are the operations that run inside the method?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法内部运行的操作是什么？
- en: What is the output (i.e. return) value from the method?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法的输出（即返回）值是什么？
- en: 'All three of these concepts are represented with [`Node`](#torch.fx.Node "torch.fx.Node")
    instances. Let’s see what we mean by that with a short example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个概念都用[`Node`](#torch.fx.Node "torch.fx.Node")实例表示。让我们通过一个简短的示例来看看我们的意思：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here we define a module `MyModule` for demonstration purposes, instantiate
    it, symbolically trace it, then call the [`Graph.print_tabular()`](#torch.fx.Graph.print_tabular
    "torch.fx.Graph.print_tabular") method to print out a table showing the nodes
    of this [`Graph`](#torch.fx.Graph "torch.fx.Graph"):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为演示目的定义了一个模块`MyModule`，实例化它，对其进行符号追踪，然后调用[`Graph.print_tabular()`](#torch.fx.Graph.print_tabular
    "torch.fx.Graph.print_tabular")方法来打印一个表格，显示这个[`Graph`](#torch.fx.Graph "torch.fx.Graph")的节点：
- en: '| opcode | name | target | args | kwargs |'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| opcode | name | target | args | kwargs |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| placeholder | x | x | () | {} |'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| placeholder | x | x | () | {} |'
- en: '| get_attr | linear_weight | linear.weight | () | {} |'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| get_attr | linear_weight | linear.weight | () | {} |'
- en: '| call_function | add_1 | <built-in function add> | (x, linear_weight) | {}
    |'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| call_function | add_1 | <built-in function add> | (x, linear_weight) | {}
    |'
- en: '| call_module | linear_1 | linear | (add_1,) | {} |'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| call_module | linear_1 | linear | (add_1,) | {} |'
- en: '| call_method | relu_1 | relu | (linear_1,) | {} |'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| call_method | relu_1 | relu | (linear_1,) | {} |'
- en: '| call_function | sum_1 | <built-in method sum …> | (relu_1,) | {‘dim’: -1}
    |'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| call_function | sum_1 | <built-in method sum …> | (relu_1,) | {‘dim’: -1}
    |'
- en: '| call_function | topk_1 | <built-in method topk …> | (sum_1, 3) | {} |'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| call_function | topk_1 | <built-in method topk …> | (sum_1, 3) | {} |'
- en: '| output | output | output | (topk_1,) | {} |'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| output | output | output | (topk_1,) | {} |'
- en: We can use this information to answer the questions we posed above.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这些信息来回答我们上面提出的问题。
- en: What are the inputs to the method? In FX, method inputs are specified via special
    `placeholder` nodes. In this case, we have a single `placeholder` node with a
    `target` of `x`, meaning we have a single (non-self) argument named x.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法的输入是什么？在FX中，方法的输入是通过特殊的`placeholder`节点指定的。在这种情况下，我们有一个带有`target`为`x`的单个`placeholder`节点，这意味着我们有一个名为x的单个（非self）参数。
- en: What are the operations within the method? The `get_attr`, `call_function`,
    `call_module`, and `call_method` nodes represent the operations in the method.
    A full treatment of the semantics of all of these can be found in the [`Node`](#torch.fx.Node
    "torch.fx.Node") documentation.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法内部的操作是什么？`get_attr`、`call_function`、`call_module`和`call_method`节点代表方法中的操作。关于所有这些操作的语义的完整处理可以在[`Node`](#torch.fx.Node
    "torch.fx.Node")文档中找到。
- en: What is the return value of the method? The return value in a [`Graph`](#torch.fx.Graph
    "torch.fx.Graph") is specified by a special `output` node.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法的返回值是什么？在[`Graph`](#torch.fx.Graph "torch.fx.Graph")中，返回值由一个特殊的`output`节点指定。
- en: Given that we now know the basics of how code is represented in FX, we can now
    explore how we would edit a [`Graph`](#torch.fx.Graph "torch.fx.Graph").
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们现在知道了FX中代码是如何表示的基础知识，我们现在可以探讨如何编辑一个[`Graph`](#torch.fx.Graph "torch.fx.Graph")。
- en: Graph Manipulation
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图形操作
- en: Direct Graph Manipulation
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 直接图形操作
- en: One approach to building this new [`Graph`](#torch.fx.Graph "torch.fx.Graph")
    is to directly manipulate your old one. To aid in this, we can simply take the
    [`Graph`](#torch.fx.Graph "torch.fx.Graph") we obtain from symbolic tracing and
    modify it. For example, let’s say we desire to replace [`torch.add()`](generated/torch.add.html#torch.add
    "torch.add") calls with [`torch.mul()`](generated/torch.mul.html#torch.mul "torch.mul")
    calls.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 构建这个新的[`Graph`](#torch.fx.Graph "torch.fx.Graph")的一种方法是直接操作您的旧[`Graph`](#torch.fx.Graph
    "torch.fx.Graph")。为了帮助这一点，我们可以简单地获取从符号追踪中获得的[`Graph`](#torch.fx.Graph "torch.fx.Graph")并对其进行修改。例如，假设我们希望用[`torch.mul()`](generated/torch.mul.html#torch.mul
    "torch.mul")调用替换[`torch.add()`](generated/torch.add.html#torch.add "torch.add")调用。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can also do more involved [`Graph`](#torch.fx.Graph "torch.fx.Graph") rewrites,
    such as deleting or appending nodes. To aid in these transformations, FX has utility
    functions for transforming the graph that can be found in the [`Graph`](#torch.fx.Graph
    "torch.fx.Graph") documentation. An example of using these APIs to append a `torch.relu()`
    call can be found below.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以进行更复杂的[`Graph`](#torch.fx.Graph "torch.fx.Graph")重写，比如删除或追加节点。为了帮助这些转换，FX有用于转换图形的实用函数，可以在[`Graph`](#torch.fx.Graph
    "torch.fx.Graph")文档中找到。下面是使用这些API追加`torch.relu()`调用的示例。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For simple transformations that only consist of substitutions, you can also
    make use of the [subgraph rewriter.](https://github.com/pytorch/pytorch/blob/main/torch/fx/subgraph_rewriter.py)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于只包含替换的简单转换，您也可以使用[subgraph rewriter.](https://github.com/pytorch/pytorch/blob/main/torch/fx/subgraph_rewriter.py)
- en: Subgraph Rewriting With replace_pattern()[](#subgraph-rewriting-with-replace-pattern
    "Permalink to this heading")
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用replace_pattern()进行子图重写
- en: FX also provides another level of automation on top of direct graph manipulation.
    The [`replace_pattern()`](#torch.fx.replace_pattern "torch.fx.replace_pattern")
    API is essentially a “find/replace” tool for editing [`Graph`](#torch.fx.Graph
    "torch.fx.Graph")s. It allows you to specify a `pattern` and `replacement` function
    and it will trace through those functions, find instances of the group of operations
    in the `pattern` graph, and replace those instances with copies of the `replacement`
    graph. This can help to greatly automate tedious graph manipulation code, which
    can get unwieldy as the transformations get more complex.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: FX还提供了另一种自动化级别，即在直接图操作之上。[`replace_pattern()`](#torch.fx.replace_pattern "torch.fx.replace_pattern")
    API本质上是一个用于编辑[`Graph`](#torch.fx.Graph "torch.fx.Graph")的“查找/替换”工具。它允许您指定一个`pattern`和一个`replacement`函数，然后将跟踪这些函数，查找`pattern`图中操作组的实例，并用`replacement`图的副本替换这些实例。这可以帮助大大自动化繁琐的图操作代码，随着转换变得更复杂，这些代码可能变得难以控制。
- en: Graph Manipulation Examples[](#graph-manipulation-examples "Permalink to this
    heading")
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 图操作示例[](#graph-manipulation-examples "跳转到此标题")
- en: '[Replace one op](https://github.com/pytorch/examples/blob/master/fx/replace_op.py)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[替换一个操作](https://github.com/pytorch/examples/blob/master/fx/replace_op.py)'
- en: '[Conv/Batch Norm fusion](https://github.com/pytorch/pytorch/blob/40cbf342d3c000712da92cfafeaca651b3e0bd3e/torch/fx/experimental/optimization.py#L50)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[卷积/批量归一化融合](https://github.com/pytorch/pytorch/blob/40cbf342d3c000712da92cfafeaca651b3e0bd3e/torch/fx/experimental/optimization.py#L50)'
- en: '[replace_pattern: Basic usage](https://github.com/pytorch/examples/blob/master/fx/subgraph_rewriter_basic_use.py)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[replace_pattern：基本用法](https://github.com/pytorch/examples/blob/master/fx/subgraph_rewriter_basic_use.py)'
- en: '[Quantization](https://pytorch.org/docs/main/quantization.html#prototype-fx-graph-mode-quantization)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[量化](https://pytorch.org/docs/main/quantization.html#prototype-fx-graph-mode-quantization)'
- en: '[Invert Transformation](https://github.com/pytorch/examples/blob/master/fx/invert.py)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[反转转换](https://github.com/pytorch/examples/blob/master/fx/invert.py)'
- en: Proxy/Retracing
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代理/重追踪
- en: Another way of manipulating [`Graph`](#torch.fx.Graph "torch.fx.Graph")s is
    by reusing the [`Proxy`](#torch.fx.Proxy "torch.fx.Proxy") machinery used in symbolic
    tracing. For example, let’s imagine that we wanted to write a transformation that
    decomposed PyTorch functions into smaller operations. It would transform every
    `F.relu(x)` call into `(x > 0) * x`. One possibility would be to perform the requisite
    graph rewriting to insert the comparison and multiplication after the `F.relu`,
    and then clean up the original `F.relu`. However, we can automate this process
    by using [`Proxy`](#torch.fx.Proxy "torch.fx.Proxy") objects to automatically
    record operations into the [`Graph`](#torch.fx.Graph "torch.fx.Graph").
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种操作[`Graph`](#torch.fx.Graph "torch.fx.Graph")的方法是重用符号跟踪中使用的[`Proxy`](#torch.fx.Proxy
    "torch.fx.Proxy")机制。例如，假设我们想要编写一个将PyTorch函数分解为较小操作的转换。它将每个`F.relu(x)`调用转换为`(x
    > 0) * x`。一种可能性是执行必要的图重写，将比较和乘法插入到`F.relu`之后，然后清理原始的`F.relu`。但是，我们可以通过使用[`Proxy`](#torch.fx.Proxy
    "torch.fx.Proxy")对象自动记录操作并将其附加到[`Graph`](#torch.fx.Graph "torch.fx.Graph")来自动化此过程。
- en: To use this method, we write the operations that we want inserted as regular
    PyTorch code and invoke that code with [`Proxy`](#torch.fx.Proxy "torch.fx.Proxy")
    objects as arguments. These [`Proxy`](#torch.fx.Proxy "torch.fx.Proxy") objects
    will capture the operations that are performed on them and append them to the
    [`Graph`](#torch.fx.Graph "torch.fx.Graph").
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此方法，我们编写要插入的操作作为常规PyTorch代码，并使用[`Proxy`](#torch.fx.Proxy "torch.fx.Proxy")对象作为参数调用该代码。这些[`Proxy`](#torch.fx.Proxy
    "torch.fx.Proxy")对象将捕获对它们执行的操作，并将它们附加到[`Graph`](#torch.fx.Graph "torch.fx.Graph")。
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In addition to avoiding explicit graph manipulation, using [`Proxy`](#torch.fx.Proxy
    "torch.fx.Proxy")s also allows you to specify your rewrite rules as native Python
    code. For transformations that require a large amount of rewrite rules (such as
    vmap or grad), this can often improve readability and maintainability of the rules.
    Note that while calling [`Proxy`](#torch.fx.Proxy "torch.fx.Proxy") we also passed
    a tracer pointing to the underlying variable graph. This is done so if in case
    the operations in graph are n-ary (e.g. add is a binary operator) the call to
    [`Proxy`](#torch.fx.Proxy "torch.fx.Proxy") does not create multiple instances
    of a graph tracer which can lead to unexpected runtime errors. We recommend this
    method of using [`Proxy`](#torch.fx.Proxy "torch.fx.Proxy") especially when the
    underlying operators can not be safely assumed to be unary.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 除了避免显式图操作外，使用[`Proxy`](#torch.fx.Proxy "torch.fx.Proxy")还允许您将重写规则指定为本机Python代码。对于需要大量重写规则的转换（如vmap或grad），这通常可以提高规则的可读性和可维护性。请注意，当调用[`Proxy`](#torch.fx.Proxy
    "torch.fx.Proxy")时，我们还传递了一个指向底层变量图的跟踪器。这样做是为了防止图中的操作是n元的情况（例如，add是一个二元运算符），对[`Proxy`](#torch.fx.Proxy
    "torch.fx.Proxy")的调用不会创建多个图跟踪器的实例，这可能导致意外的运行时错误。我们特别推荐在底层运算符不能安全地假定为一元运算符时使用[`Proxy`](#torch.fx.Proxy
    "torch.fx.Proxy")的这种方法。
- en: A worked example of using [`Proxy`](#torch.fx.Proxy "torch.fx.Proxy")s for [`Graph`](#torch.fx.Graph
    "torch.fx.Graph") manipulation can be found [here](https://github.com/pytorch/examples/blob/master/fx/proxy_based_graph_creation.py).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用[`Proxy`](#torch.fx.Proxy "torch.fx.Proxy")进行[`Graph`](#torch.fx.Graph "torch.fx.Graph")操作的示例可以在[这里](https://github.com/pytorch/examples/blob/master/fx/proxy_based_graph_creation.py)找到。
- en: The Interpreter Pattern
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释器模式
- en: 'A useful code organizational pattern in FX is to loop over all the [`Node`](#torch.fx.Node
    "torch.fx.Node")s in a [`Graph`](#torch.fx.Graph "torch.fx.Graph") and execute
    them. This can be used for several things including runtime analysis of values
    flowing through the graph or transformation of the code via retracing with [`Proxy`](#torch.fx.Proxy
    "torch.fx.Proxy")s. For example, suppose we want to run a [`GraphModule`](#torch.fx.GraphModule
    "torch.fx.GraphModule") and record the [`torch.Tensor`](tensors.html#torch.Tensor
    "torch.Tensor") shape and dtype properties on the nodes as we see them at runtime.
    That might look like:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: FX中一个有用的代码组织模式是循环遍历[`Graph`](#torch.fx.Graph "torch.fx.Graph")中的所有[`Node`](#torch.fx.Node
    "torch.fx.Node")并执行它们。这可以用于多种目的，包括通过使用[`Proxy`](#torch.fx.Proxy "torch.fx.Proxy")进行回溯来运行时分析流经图中的值或转换代码。例如，假设我们想要运行一个[`GraphModule`](#torch.fx.GraphModule
    "torch.fx.GraphModule")并在运行时记录节点上的[`torch.Tensor`](tensors.html#torch.Tensor "torch.Tensor")形状和dtype属性。可能看起来像这样：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, a full interpreter for FX is not that complicated but it can
    be very useful. To ease using this pattern, we provide the [`Interpreter`](#torch.fx.Interpreter
    "torch.fx.Interpreter") class, which encompasses the above logic in a way that
    certain aspects of the interpreter’s execution can be overridden via method overrides.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，FX的完整解释器并不复杂，但却非常有用。为了简化使用这种模式，我们提供了[`Interpreter`](#torch.fx.Interpreter
    "torch.fx.Interpreter")类，它以某种方式包含了上述逻辑，使得解释器执行的某些方面可以通过方法重写来覆盖。
- en: In addition to executing operations, we can also generate a new Graph by feeding
    [`Proxy`](#torch.fx.Proxy "torch.fx.Proxy") values through an interpreter. Similarly,
    we provide the [`Transformer`](#torch.fx.Transformer "torch.fx.Transformer") class
    to encompass this pattern. [`Transformer`](#torch.fx.Transformer "torch.fx.Transformer")
    behaves similarly to [`Interpreter`](#torch.fx.Interpreter "torch.fx.Interpreter"),
    but instead of calling the `run` method to get a concrete output value from the
    Module, you would call the [`Transformer.transform()`](#torch.fx.Transformer.transform
    "torch.fx.Transformer.transform") method to return a new [`GraphModule`](#torch.fx.GraphModule
    "torch.fx.GraphModule") which was subject to any transformation rules you installed
    as overridden methods.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了执行操作，我们还可以通过将[`Proxy`](#torch.fx.Proxy "torch.fx.Proxy")值通过解释器来生成一个新的Graph。类似地，我们提供了[`Transformer`](#torch.fx.Transformer
    "torch.fx.Transformer")类来包含这种模式。[`Transformer`](#torch.fx.Transformer "torch.fx.Transformer")的行为类似于[`Interpreter`](#torch.fx.Interpreter
    "torch.fx.Interpreter")，但是不是调用`run`方法从模块中获取具体的输出值，而是调用[`Transformer.transform()`](#torch.fx.Transformer.transform
    "torch.fx.Transformer.transform")方法返回一个经过您安装的任何转换规则的新的[`GraphModule`](#torch.fx.GraphModule
    "torch.fx.GraphModule")。
- en: Examples of the Interpreter Pattern[](#examples-of-the-interpreter-pattern "Permalink
    to this heading")
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解释器模式的示例[](#examples-of-the-interpreter-pattern "跳转到此标题")
- en: '[Shape Propagation](https://github.com/pytorch/pytorch/blob/master/torch/fx/passes/shape_prop.py)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[形状传播](https://github.com/pytorch/pytorch/blob/master/torch/fx/passes/shape_prop.py)'
- en: '[Performance Profiler](https://github.com/pytorch/tutorials/pull/1319)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[性能分析器](https://github.com/pytorch/tutorials/pull/1319)'
- en: Debugging
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: Introduction
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Often in the course of authoring transformations, our code will not be quite
    right. In this case, we may need to do some debugging. The key is to work backwards:
    first, check the results of invoking the generated module to prove or disprove
    correctness. Then, inspect and debug the generated code. Then, debug the process
    of transformations that led to the generated code.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写转换时，通常我们的代码不会完全正确。在这种情况下，我们可能需要进行一些调试。关键是要向后工作：首先，检查调用生成的模块的结果以证明或证伪正确性。然后，检查和调试生成的代码。然后，调试导致生成的代码的转换过程。
- en: If you’re not familiar with debuggers, please see the auxiliary section [Available
    Debuggers](#available-debuggers).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对调试器不熟悉，请参阅辅助部分[可用调试器](#available-debuggers)。
- en: Common Pitfalls in Transform Authoring[](#common-pitfalls-in-transform-authoring
    "Permalink to this heading")
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换作者常见的陷阱[](#common-pitfalls-in-transform-authoring "跳转到此标题")
- en: Nondeterministic `set` iteration order. In Python, the `set` datatype is unordered.
    Using `set` to contain collections of objects like `Node`s, for example, can cause
    unexpected nondeterminism. An example is iterating over a set of `Node`s to insert
    them into a `Graph`. Because the `set` data type is unordered, the ordering of
    the operations in the output program will be nondeterministic and can change across
    program invocations. The recommended alternative is to use a `dict` data type,
    which is [insertion ordered](https://mail.python.org/pipermail/python-dev/2017-December/151283.html)
    as of Python 3.7 (and as of cPython 3.6). A `dict` can be used equivalently to
    a set by storing values to be deduplicated in the keys of the `dict`.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非确定性的`set`迭代顺序。在Python中，`set`数据类型是无序的。例如，使用`set`来包含像`Node`这样的对象集合可能会导致意外的非确定性。一个例子是遍历一组`Node`并将它们插入到`Graph`中。因为`set`数据类型是无序的，输出程序中操作的顺序将是非确定性的，并且可能会在程序调用时发生变化。推荐的替代方案是使用`dict`数据类型，它在Python
    3.7（以及cPython 3.6）中是[插入有序的](https://mail.python.org/pipermail/python-dev/2017-December/151283.html)。可以通过将要去重的值存储在`dict`的键中来等效地使用`dict`来代替`set`。
- en: Checking Correctness of Modules[](#checking-correctness-of-modules "Permalink
    to this heading")
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查模块正确性[](#checking-correctness-of-modules "跳转到此标题")
- en: 'Because the output of most deep learning modules consists of floating point
    [`torch.Tensor`](tensors.html#torch.Tensor "torch.Tensor") instances, checking
    for equivalence between the results of two [`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module") is not as straightforward as doing a simple equality check.
    To motivate this, let’s use an example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数深度学习模块的输出由浮点[`torch.Tensor`](tensors.html#torch.Tensor "torch.Tensor")实例组成，检查两个[`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")的结果是否等价并不像进行简单的相等性检查那样直接。为了激励这一点，让我们举个例子：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we’ve tried to check equality of the values of two deep learning models
    with the `==` equality operator. However, this is not well- defined both due to
    the issue of that operator returning a tensor and not a bool, but also because
    comparison of floating point values should use a margin of error (or epsilon)
    to account for the non-commutativity of floating point operations (see [here](https://floating-point-gui.de/errors/comparison/)
    for more details). We can use [`torch.allclose()`](generated/torch.allclose.html#torch.allclose
    "torch.allclose") instead, which will give us an approximate comparison taking
    into account a relative and absolute tolerance threshold:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们尝试使用`==`等号操作符来检查两个深度学习模型的值是否相等。然而，这并不是很明确，因为该操作符返回一个张量而不是布尔值，而且由于浮点值的比较应该使用误差边界（或epsilon）来考虑浮点运算的非交换性（有关更多详细信息，请参见[这里](https://floating-point-gui.de/errors/comparison/)）。我们可以使用`torch.allclose()`来进行近似比较，考虑相对和绝对容差阈值：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is the first tool in our toolbox to check if transformed modules are behaving
    as we expect compared to a reference implementation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们工具箱中的第一个工具，用来检查转换后的模块是否与参考实现的行为一致。
- en: Debugging the Generated Code[](#debugging-the-generated-code "Permalink to this
    heading")
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试生成的代码
- en: Because FX generates the `forward()` function on [`GraphModule`](#torch.fx.GraphModule
    "torch.fx.GraphModule")s, using traditional debugging techniques like `print`
    statements or `pdb` is not as straightforward. Luckily, we have several techniques
    we can use for debugging the generated code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因为FX在`GraphModule`上生成`forward()`函数，所以使用传统的调试技术如`print`语句或`pdb`并不那么直接。幸运的是，我们有几种技术可以用来调试生成的代码。
- en: Use `pdb`
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`pdb`
- en: Invoke `pdb` to step into the running program. Although the code that represents
    the [`Graph`](#torch.fx.Graph "torch.fx.Graph") is not in any source file, we
    can still step into it manually using `pdb` when the forward pass is invoked.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`pdb`来步入运行中的程序。尽管代表`Graph`的代码不在任何源文件中，但当调用前向传递时，我们仍然可以使用`pdb`手动步入其中。
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '#### Print the Generated Code[](#print-the-generated-code "Permalink to this
    heading")'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 打印生成的代码
- en: If you’d like to run the same code multiple times, then it can be a bit tedious
    to step to the right code with `pdb`. In that case, one approach is to simply
    copy-paste the generated `forward` pass into your code and examine it from there.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想多次运行相同的代码，那么使用`pdb`逐步到正确的代码可能有点繁琐。在这种情况下，一个方法是简单地将生成的`forward`传递复制粘贴到您的代码中，并从那里检查它。
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Use the `to_folder` Function From `GraphModule`[](#use-the-to-folder-function-from-graphmodule
    "Permalink to this heading")
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`GraphModule`中的`to_folder`函数
- en: '[`GraphModule.to_folder()`](#torch.fx.GraphModule.to_folder "torch.fx.GraphModule.to_folder")
    is a method in `GraphModule` that allows you to dump out the generated FX code
    to a folder. Although copying the forward pass into the code often suffices as
    in [Print the Generated Code](#print-the-generated-code), it may be easier to
    examine modules and parameters using `to_folder`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`GraphModule.to_folder()`是`GraphModule`中的一个方法，允许您将生成的FX代码转储到一个文件夹中。尽管将前向传递复制到代码中通常足够，如[打印生成的代码](#print-the-generated-code)，但使用`to_folder`来检查模块和参数可能更容易。'
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After running the above example, we can then look at the code within `foo/module.py`
    and modify it as desired (e.g. adding `print` statements or using `pdb`) to debug
    the generated code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上面的示例之后，我们可以查看`foo/module.py`中的代码，并根据需要进行修改（例如添加`print`语句或使用`pdb`）来调试生成的代码。
- en: Debugging the Transformation[](#debugging-the-transformation "Permalink to this
    heading")
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试转换
- en: 'Now that we’ve identified that a transformation is creating incorrect code,
    it’s time to debug the transformation itself. First, we’ll check the [Limitations
    of Symbolic Tracing](#limitations-of-symbolic-tracing) section in the documentation.
    Once we verify that tracing is working as expected, the goal becomes figuring
    out what went wrong during our `GraphModule` transformation. There may be a quick
    answer in [Writing Transformations](#writing-transformations), but, if not, there
    are several ways to examine our traced module:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经确定一个转换正在创建不正确的代码，现在是时候调试转换本身了。首先，我们将在文档中检查[符号跟踪的限制](#limitations-of-symbolic-tracing)部分。一旦验证了跟踪工作正常，目标就是弄清楚在我们的`GraphModule`转换过程中出了什么问题。在[编写转换](#writing-transformations)中可能会有一个快速答案，但如果没有，有几种方法可以检查我们跟踪的模块：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using the utility functions above, we can compare our traced Module before and
    after we’ve applied our transformations. Sometimes, a simple visual comparison
    is enough to trace down a bug. If it’s still not clear what’s going wrong, a debugger
    like `pdb` can be a good next step.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上面的实用函数，我们可以比较在应用转换之前和之后的跟踪模块。有时，简单的视觉比较就足以追踪错误。如果仍然不清楚出了什么问题，调试器如`pdb`可能是一个不错的下一步。
- en: 'Going off of the example above, consider the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上面的示例，考虑以下代码：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using the above example, let’s say that the call to `print(traced)` showed us
    that there was an error in our transforms. We want to find what goes wrong using
    a debugger. We start a `pdb` session. We can see what’s happening during the transform
    by breaking on `transform_graph(traced)`, then pressing `s` to “step into” the
    call to `transform_graph(traced)`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上面的示例，假设调用`print(traced)`显示我们的转换中存在错误。我们想要使用调试器找出问题所在。我们启动一个`pdb`会话。我们可以通过在`transform_graph(traced)`上设置断点，然后按`s`键“步入”调用`transform_graph(traced)`来查看转换过程中发生了什么。
- en: We may also have good luck by editing the `print_tabular` method to print different
    attributes of the Nodes in the Graph. (For example, we might want to see the Node’s
    `input_nodes` and `users`.)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过编辑`print_tabular`方法来打印图中节点的不同属性来获得好运气。（例如，我们可能想要查看节点的`input_nodes`和`users`。）
- en: '### Available Debuggers'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '### 可用的调试器'
- en: The most common Python debugger is [pdb](https://docs.python.org/3/library/pdb.html).
    You can start your program in “debug mode” with `pdb` by typing `python -m pdb
    FILENAME.py` into the command line, where `FILENAME` is the name of the file you
    want to debug. After that, you can use the `pdb` [debugger commands](https://docs.python.org/3/library/pdb.html#debugger-commands)
    to move through your running program stepwise. It’s common to set a breakpoint
    (`b LINE-NUMBER`) when you start `pdb`, then call `c` to run the program until
    that point. This prevents you from having to step through each line of execution
    (using `s` or `n`) to get to the part of the code you want to examine. Alternatively,
    you can write `import pdb; pdb.set_trace()` before the line you want to break
    at. If you add `pdb.set_trace()`, your program will automatically start in debug
    mode when you run it. (In other words, you can just type `python FILENAME.py`
    into the command line instead of `python -m pdb FILENAME.py`.) Once you’re running
    your file in debug mode, you can step through the code and examine your program’s
    internal state using certain commands. There are many excellent tutorials on `pdb`
    online, including RealPython’s [“Python Debugging With Pdb”](https://realpython.com/python-debugging-pdb/).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的Python调试器是[pdb](https://docs.python.org/3/library/pdb.html)。您可以通过在命令行中键入`python
    -m pdb FILENAME.py`来以`pdb`的“调试模式”启动程序，其中`FILENAME`是您要调试的文件的名称。之后，您可以使用`pdb`[调试器命令](https://docs.python.org/3/library/pdb.html#debugger-commands)逐步浏览正在运行的程序。当您启动`pdb`时设置断点（`b
    LINE-NUMBER`）是很常见的，然后调用`c`运行程序直到那一点。这样可以避免您必须逐行执行（使用`s`或`n`）以到达您想要检查的代码部分。或者，您可以在要中断的行之前写入`import
    pdb; pdb.set_trace()`。如果添加了`pdb.set_trace()`，当您运行程序时，它将自动以调试模式启动。 （换句话说，您只需在命令行中键入`python
    FILENAME.py`，而不是`python -m pdb FILENAME.py`。）运行文件时，您可以通过使用特定命令逐步执行代码并检查程序的内部状态。有许多关于`pdb`的优秀教程在线，包括RealPython的[“使用Pdb进行Python调试”](https://realpython.com/python-debugging-pdb/)。
- en: 'IDEs like PyCharm or VSCode usually have a debugger built in. In your IDE,
    you can choose to either a) use `pdb` by pulling up a terminal window in your
    IDE (e.g. View → Terminal in VSCode), or b) use the built-in debugger (usually
    a graphical wrapper around `pdb`).  ## Limitations of Symbolic Tracing[](#limitations-of-symbolic-tracing
    "Permalink to this heading")'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 像PyCharm或VSCode这样的IDE通常内置了调试器。在您的IDE中，您可以选择要么a）通过在IDE中打开终端窗口（例如在VSCode中选择View
    → Terminal）使用`pdb`，要么b）使用内置调试器（通常是围绕`pdb`的图形包装器）。## 符号跟踪的限制[](#limitations-of-symbolic-tracing
    "跳转到此标题的永久链接")
- en: FX uses a system of **symbolic tracing** (a.k.a [symbolic execution](https://en.wikipedia.org/wiki/Symbolic_execution))
    to capture the semantics of programs in a transformable/analyzable form. The system
    is **tracing** in that it executes the program (really a [`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module") or function) to record operations. It is **symbolic** in that
    the data flowing through the program during this execution is not real data, but
    rather symbols ([`Proxy`](#torch.fx.Proxy "torch.fx.Proxy") in FX parlance).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: FX使用一种**符号跟踪**系统（也称为[符号执行](https://en.wikipedia.org/wiki/Symbolic_execution)）来以可转换/可分析的形式捕获程序的语义。该系统是**跟踪**的，因为它执行程序（实际上是一个[`torch.nn.Module`](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")或函数）以记录操作。它是**符号**的，因为在执行过程中流经程序的数据不是真实数据，而是符号（FX术语中的[`Proxy`](#torch.fx.Proxy
    "torch.fx.Proxy")）。
- en: Although symbolic tracing works for most neural net code, it has some limitations.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管符号跟踪适用于大多数神经网络代码，但它也有一些限制。
- en: Dynamic Control Flow
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态控制流
- en: The main limitation of symbolic tracing is it does not currently support *dynamic
    control flow*. That is, loops or `if` statements where the condition may depend
    on the input values of the program.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 符号跟踪的主要限制是它目前不支持*动态控制流*。也就是说，循环或`if`语句的条件可能取决于程序的输入值。
- en: 'For example, let’s examine the following program:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们来看下面的程序：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The condition to the `if` statement relies on the value of `x.sum()`, which
    relies on the value of `x`, a function input. Since `x` can change (i.e. if you
    pass a new input tensor to the traced function), this is *dynamic control flow*.
    The traceback walks back up through your code to show you where this situation
    happens.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句的条件取决于`x.sum()`的值，而`x`的值取决于函数输入。由于`x`可能会改变（即如果您向被追踪的函数传递一个新的输入张量），这就是*动态控制流*。回溯会沿着您的代码向上走，以显示这种情况发生的位置。'
- en: Static Control Flow
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 静态控制流
- en: 'On the other hand, so-called *static control flow* is supported. Static control
    flow is loops or `if` statements whose value cannot change across invocations.
    Typically, in PyTorch programs, this control flow arises for code making decisions
    about a model’s architecture based on hyper-parameters. As a concrete example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，所谓的*静态控制流*是受支持的。静态控制流是循环或`if`语句，其值在调用之间不会改变。通常，在PyTorch程序中，这种控制流是基于超参数对模型架构做出决策的代码。举个具体的例子：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The if-statement `if self.do_activation` does not depend on any function inputs,
    thus it is static. `do_activation` can be considered to be a hyper-parameter,
    and the traces of different instances of `MyModule` with different values for
    that parameter have different code. This is a valid pattern that is supported
    by symbolic tracing.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`if self.do_activation`语句不依赖于任何函数输入，因此它是静态的。`do_activation`可以被视为超参数，具有不同参数值的`MyModule`实例的跟踪代码是不同的。这是一种受符号跟踪支持的有效模式。'
- en: 'Many instances of dynamic control flow are semantically static control flow.
    These instances can be made to support symbolic tracing by removing the data dependencies
    on input values, for example by moving values to `Module` attributes or by binding
    concrete values to arguments during symbolic tracing:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 许多动态控制流的实例在语义上是静态控制流。通过消除对输入值的数据依赖关系，例如将值移动到`Module`属性或在符号跟踪期间将具体值绑定到参数，可以使这些实例支持符号跟踪：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the case of truly dynamic control flow, the sections of the program that
    contain this code can be traced as calls to the Method (see [Customizing Tracing
    with the Tracer class](#customizing-tracing)) or function (see [`wrap()`](#torch.fx.wrap
    "torch.fx.wrap")) rather than tracing through them.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在真正动态控制流的情况下，包含此代码的程序部分可以被追踪为对方法的调用（参见[使用Tracer类自定义追踪](#customizing-tracing)）或函数的调用（参见[`wrap()`](#torch.fx.wrap
    "torch.fx.wrap")）而不是通过追踪它们。
- en: Non-`torch` Functions
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非`torch`函数
- en: 'FX uses `__torch_function__` as the mechanism by which it intercepts calls
    (see the [technical overview](https://github.com/pytorch/pytorch/blob/master/torch/fx/OVERVIEW.md#technical-details)
    for more information about this). Some functions, such as builtin Python functions
    or those in the `math` module, are not covered by `__torch_function__`, but we
    would still like to capture them in symbolic tracing. For example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: FX使用`__torch_function__`作为拦截调用的机制（有关更多信息，请参阅[技术概述](https://github.com/pytorch/pytorch/blob/master/torch/fx/OVERVIEW.md#technical-details)）。一些函数，如内置的Python函数或`math`模块中的函数，不受`__torch_function__`覆盖，但我们仍希望在符号追踪中捕获它们。例如：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The error tells us that the built-in function `len` is not supported. We can
    make it so that functions like this are recorded in the trace as direct calls
    using the [`wrap()`](#torch.fx.wrap "torch.fx.wrap") API:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 错误告诉我们内置函数`len`不受支持。我们可以通过使用[`wrap()`](#torch.fx.wrap "torch.fx.wrap") API使这样的函数在追踪中记录为直接调用：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '### Customizing Tracing with the `Tracer` class[](#customizing-tracing-with-the-tracer-class
    "Permalink to this heading")'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用`Tracer`类自定义追踪[](#customizing-tracing-with-the-tracer-class "跳转到此标题")'
- en: 'The [`Tracer`](#torch.fx.Tracer "torch.fx.Tracer") class is the class that
    underlies the implementation of `symbolic_trace`. The behavior of tracing can
    be customized by subclassing Tracer, like so:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Tracer`](#torch.fx.Tracer "torch.fx.Tracer")类是`symbolic_trace`实现的基础类。通过对Tracer进行子类化，可以自定义追踪的行为，如下所示：'
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Leaf Modules
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 叶子模块
- en: 'Leaf Modules are the modules that appear as calls in the symbolic trace rather
    than being traced through. The default set of leaf modules is the set of standard
    `torch.nn` module instances. For example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 叶子模块是在符号追踪中显示为调用而不是被追踪的模块。默认的叶子模块集是标准`torch.nn`模块实例的集合。例如：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The set of leaf modules can be customized by overriding [`Tracer.is_leaf_module()`](#torch.fx.Tracer.is_leaf_module
    "torch.fx.Tracer.is_leaf_module").
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过覆盖[`Tracer.is_leaf_module()`](#torch.fx.Tracer.is_leaf_module "torch.fx.Tracer.is_leaf_module")来自定义叶子模块的集合。
- en: Miscellanea
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: Tensor constructors (e.g. `torch.zeros`, `torch.ones`, `torch.rand`, `torch.randn`,
    `torch.sparse_coo_tensor`) are currently not traceable.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 张量构造函数（例如`torch.zeros`，`torch.ones`，`torch.rand`，`torch.randn`，`torch.sparse_coo_tensor`）目前不可追踪。
- en: The deterministic constructors (`zeros`, `ones`) can be used and the value they
    produce will be embedded in the trace as a constant. This is only problematic
    if the arguments to these constructors refers to dynamic input sizes. In this
    case, `ones_like` or `zeros_like` may be a viable substitute.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定性构造函数（`zeros`，`ones`）可以使用，并且它们产生的值将嵌入到追踪中作为常量。只有当这些构造函数的参数引用动态输入大小时才会出现问题。在这种情况下，`ones_like`或`zeros_like`可能是一个可行的替代品。
- en: Nondeterministic constructors (`rand`, `randn`) will have a single random value
    embedded in the trace. This is likely not the intended behavior. One workaround
    is to wrap `torch.randn` in a `torch.fx.wrap` function and call that instead.
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非确定性构造函数（`rand`，`randn`）将在追踪中嵌入一个随机值。这可能不是预期的行为。一个解决方法是将`torch.randn`包装在`torch.fx.wrap`函数中，并调用该函数。
- en: '[PRE22]'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This behavior may be fixed in a future release.
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种行为可能在未来的版本中被修复。
- en: Type annotations
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型注解
- en: 'Python 3-style type annotations (e.g. `func(x : torch.Tensor, y : int) -> torch.Tensor`)
    are supported and will be preserved by symbolic tracing.'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '支持Python 3风格的类型注解（例如`func(x : torch.Tensor, y : int) -> torch.Tensor`），并且将被符号追踪保留。'
- en: 'Python 2-style comment type annotations `# type: (torch.Tensor, int) -> torch.Tensor`
    are not currently supported.'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python 2风格的注释类型注解`# type: (torch.Tensor, int) -> torch.Tensor`目前不受支持。'
- en: Annotations on local names within a function are not currently supported.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前不支持函数内部局部名称的注释。
- en: Gotcha around `training` flag and submodules
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`training`标志和子模块的注意事项
- en: When using functionals like `torch.nn.functional.dropout`, it will be common
    for the training argument to be passed in as `self.training`. During FX tracing,
    this will likely be baked in as a constant value.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用像`torch.nn.functional.dropout`这样的函数时，通常会将训练参数作为`self.training`传入。在FX追踪期间，这可能会被固定为一个常量值。
- en: '[PRE23]'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE23]'
- en: However, when the standard `nn.Dropout()` submodule is used, the training flag
    is encapsulated and–because of the preservation of the `nn.Module` object model–can
    be changed.
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，当使用标准的`nn.Dropout()`子模块时，训练标志被封装，并且由于`nn.Module`对象模型的保留，可以被更改。
- en: '[PRE24]'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Because of this difference, consider marking modules that interact with the
    `training` flag dynamically as leaf modules.
  id: totrans-146
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于这种差异，请考虑将与`training`标志动态交互的模块标记为叶子模块。
- en: API Reference
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API参考
- en: '[PRE25]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Symbolic tracing API
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 符号追踪API
- en: Given an `nn.Module` or function instance `root`, this function will return
    a `GraphModule` constructed by recording operations seen while tracing through
    `root`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个`nn.Module`或函数实例`root`，此函数将返回一个通过记录在`root`中追踪到的操作而构建的`GraphModule`。
- en: '`concrete_args` allows you to partially specialize your function, whether it’s
    to remove control flow or data structures.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`concrete_args`允许您部分特化您的函数，无论是为了删除控制流还是数据结构。'
- en: 'For example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE26]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'FX can typically not trace through this due to the presence of control flow.
    However, we can use concrete_args to specialize on the value of b to trace through
    this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在控制流，FX通常无法追踪到这一点。但是，我们可以使用concrete_args来专门针对b的值进行追踪：
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that although you can still pass in different values of b, they will be
    ignored.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管您仍然可以传入不同的b值，但它们将被忽略。
- en: 'We can also use concrete_args to eliminate data-structure handling from our
    function. This will use pytrees to flatten your input. To avoid overspecializing,
    pass in fx.PH for values that shouldn’t be specialized. For example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用concrete_args来消除函数中的数据结构处理。这将使用pytrees来展平您的输入。为了避免过度特化，传递fx.PH以表示不应特化的值。例如：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Parameters
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**root** (*Union**[*[*torch.nn.Module*](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")*,* *Callable**]*) – Module or function to be traced and converted
    into a Graph representation.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**root**（*Union**[*[*torch.nn.Module*](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")*,* *Callable**]*) - 要跟踪并转换为图形表示的模块或函数。'
- en: '**concrete_args** (*Optional**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *any**]**]*) – Inputs to be partially specialized'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**concrete_args**（*可选**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)")*,* *any**]**]*) - 要部分特化的输入'
- en: Returns
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: a Module created from the recorded operations from `root`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从`root`记录的操作创建的模块。
- en: Return type
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[GraphModule](#torch.fx.GraphModule "torch.fx.GraphModule")'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[GraphModule](#torch.fx.GraphModule "torch.fx.GraphModule")'
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This function can be called at module-level scope to register fn_or_name as
    a “leaf function”. A “leaf function” will be preserved as a CallFunction node
    in the FX trace instead of being traced through:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数可以在模块级别范围内调用，将fn_or_name注册为“叶函数”。 “叶函数”将作为CallFunction节点保留在FX跟踪中，而不是被跟踪通过：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This function can also equivalently be used as a decorator:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也可以等效地用作装饰器：
- en: '[PRE31]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: A wrapped function can be thought of a “leaf function”, analogous to the concept
    of “leaf modules”, that is, they are functions that are left as calls in the FX
    trace rather than traced through.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 包装函数可以被视为“叶函数”，类似于“叶模块”的概念，即它们是在FX跟踪中作为调用保留的函数，而不是被跟踪。
- en: Parameters
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**fn_or_name** (*Union**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Callable**]*) – The function or name of the global function
    to insert into the graph when it’s called'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**fn_or_name**（*Union**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)")*,* *Callable**]*) - 要在调用时插入到图中的全局函数或名称'
- en: Note
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE32]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: GraphModule is an nn.Module generated from an fx.Graph. Graphmodule has a `graph`
    attribute, as well as `code` and `forward` attributes generated from that `graph`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: GraphModule是从fx.Graph生成的nn.Module。Graphmodule具有`graph`属性，以及从该`graph`生成的`code`和`forward`属性。
- en: Warning
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When `graph` is reassigned, `code` and `forward` will be automatically regenerated.
    However, if you edit the contents of the `graph` without reassigning the `graph`
    attribute itself, you must call `recompile()` to update the generated code.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当重新分配`graph`时，`code`和`forward`将自动生成。但是，如果您编辑`graph`的内容而不重新分配`graph`属性本身，则必须调用`recompile()`以更新生成的代码。
- en: Note
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE33]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Construct a GraphModule.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个GraphModule。
- en: Parameters
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**root** (*Union**[*[*torch.nn.Module*](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")*,* *Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Any**]*) – `root` can either be an nn.Module instance
    or a Dict mapping strings to any attribute type. In the case that `root` is a
    Module, any references to Module-based objects (via qualified name) in the Graph’s
    Nodes’ `target` field will be copied over from the respective place within `root`’s
    Module hierarchy into the GraphModule’s module hierarchy. In the case that `root`
    is a dict, the qualified name found in a Node’s `target` will be looked up directly
    in the dict’s keys. The object mapped to by the Dict will be copied over into
    the appropriate place within the GraphModule’s module hierarchy.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**root**（*Union**[*[*torch.nn.Module*](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")*,* *Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)")*,* *Any**]*) - `root`可以是nn.Module实例或将字符串映射到任何属性类型的字典。如果`root`是一个Module，那么Graph的Nodes的`target`字段中对Module-based对象（通过限定名称）的任何引用将从`root`的Module层次结构中的相应位置复制到GraphModule的模块层次结构中。如果`root`是一个字典，那么在Node的`target`中找到的限定名称将直接在字典的键中查找。字典映射到的对象将被复制到GraphModule的模块层次结构中的适当位置。'
- en: '**graph** ([*Graph*](#torch.fx.Graph "torch.fx.Graph")) – `graph` contains
    the nodes this GraphModule should use for code generation'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**graph**（[*Graph*](#torch.fx.Graph "torch.fx.Graph")） - `graph`包含此GraphModule应用于代码生成的节点'
- en: '**class_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – `name` denotes the name of this GraphModule for debugging
    purposes. If it’s unset, all error messages will report as originating from `GraphModule`.
    It may be helpful to set this to `root`’s original name or a name that makes sense
    within the context of your transform.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**class_name**（[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)")） - `name`表示此GraphModule的名称，用于调试目的。如果未设置，所有错误消息将报告为源自`GraphModule`。将此设置为`root`的原始名称或在转换上下文中有意义的名称可能有助于。'
- en: Note
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE34]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Adds the given submodule to `self`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的子模块添加到`self`。
- en: This installs empty Modules where none exist yet if they are subpaths of `target`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们是`target`的子路径，将安装空的Modules。
- en: Parameters
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – The fully-qualified string name of the new submodule (See example
    in `nn.Module.get_submodule` for how to specify a fully-qualified string.)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12中)")） - 新子模块的完全限定字符串名称（请参阅`nn.Module.get_submodule`中的示例，了解如何指定完全限定字符串。）'
- en: '**m** ([*Module*](generated/torch.nn.Module.html#torch.nn.Module "torch.nn.modules.module.Module"))
    – The submodule itself; the actual object we want to install in the current Module'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**m**（[*Module*](generated/torch.nn.Module.html#torch.nn.Module "torch.nn.modules.module.Module")）
    - 子模块本身；我们要安装在当前Module中的实际对象'
- en: Returns
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Whether or not the submodule could be inserted. For
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 子模块是否可以插入。对于
- en: this method to return True, each object in the chain denoted by `target` must
    either a) not exist yet, or b) reference an `nn.Module` (not a parameter or other
    attribute)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使此方法返回True，`target`表示的链中的每个对象必须是a)尚不存在，或b)引用`nn.Module`（而不是参数或其他属性）
- en: Return type
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(在Python v3.12中)")'
- en: Note
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: '[PRE35]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Return the Python code generated from the `Graph` underlying this `GraphModule`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从支持此`GraphModule`的`Graph`生成的Python代码。
- en: '[PRE36]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Deletes all unused submodules from `self`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 从`self`中删除所有未使用的子模块。
- en: 'A Module is considered “used” if any one of the following is true: 1\. It has
    children that are used 2\. Its forward is called directly via a `call_module`
    node 3\. It has a non-Module attribute that is used from a `get_attr` node'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果满足以下任一条件，则将模块视为“已使用”：1. 其子模块已被使用 2. 其forward直接通过`call_module`节点调用 3. 它具有一个从`get_attr`节点使用的非Module属性
- en: This method can be called to clean up an `nn.Module` without manually calling
    `delete_submodule` on each unused submodule.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 可以调用此方法来清理`nn.Module`，而无需手动在每个未使用的子模块上调用`delete_submodule`。
- en: Note
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Deletes the given submodule from `self`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 从`self`中删除给定的子模块。
- en: The module will not be deleted if `target` is not a valid target.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`target`不是有效目标，则不会删除模块。
- en: Parameters
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – The fully-qualified string name of the new submodule (See example
    in `nn.Module.get_submodule` for how to specify a fully-qualified string.)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**target**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12中)")） – 新子模块的完全限定字符串名称（请参阅`nn.Module.get_submodule`中的示例，了解如何指定完全限定字符串。）'
- en: Returns
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Whether or not the target string referenced a
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 无论目标字符串是否引用了
- en: submodule we want to delete. A return value of `False` means that the `target`
    was not a valid reference to a submodule.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要删除的子模块。返回值为`False`表示`target`不是对子模块的有效引用。
- en: Return type
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(在Python v3.12中)")'
- en: Note
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: '[PRE38]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Return the `Graph` underlying this `GraphModule`
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此`GraphModule`的基础`Graph`
- en: '[PRE39]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Return the Python code generated for current GraphModule and its children GraphModules
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 返回为当前`GraphModule`及其子`GraphModule`生成的Python代码
- en: Warning
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This API is experimental and is *NOT* backward-compatible.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此API是实验性的，*不*向后兼容。
- en: '[PRE40]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Recompile this GraphModule from its `graph` attribute. This should be called
    after editing the contained `graph`, otherwise the generated code of this `GraphModule`
    will be out of date.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 重新编译此`GraphModule`从其`graph`属性。在编辑包含的`graph`后应调用此方法，否则此`GraphModule`的生成代码将过时。
- en: Note
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: Return type
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '*PythonCode*'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '*PythonCode*'
- en: '[PRE41]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Dumps out module to `folder` with `module_name` so that it can be
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 将模块转储到带有`module_name`的`folder`中，以便可以
- en: imported with `from <folder> import <module_name>`
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`from <folder> import <module_name>`导入
- en: 'Args:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: 'folder (Union[str, os.PathLike]): The folder to write the code out to'
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: folder（Union[str, os.PathLike]）：要将代码写入的文件夹
- en: ''
  id: totrans-242
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'module_name (str): Top-level name to use for the `Module` while'
  id: totrans-243
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: module_name（str）：用于`Module`的顶级名称
- en: ''
  id: totrans-244
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: writing out the code
  id: totrans-245
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 写出代码
- en: Warning
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This API is experimental and is *NOT* backward-compatible.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 此API是实验性的，*不*向后兼容。
- en: '[PRE42]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '`Graph` is the main data structure used in the FX Intermediate Representation.
    It consists of a series of `Node` s, each representing callsites (or other syntactic
    constructs). The list of `Node` s, taken together, constitute a valid Python function.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`Graph`是FX中间表示中使用的主要数据结构。它由一系列`Node`组成，每个`Node`代表调用点（或其他语法结构）。一起取出的`Node`列表构成一个有效的Python函数。'
- en: For example, the following code
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码
- en: '[PRE43]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Will produce the following Graph:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成以下图表：
- en: '[PRE44]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: For the semantics of operations represented in the `Graph`, please see [`Node`](#torch.fx.Node
    "torch.fx.Node").
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在`Graph`中表示的操作的语义，请参见[`Node`](#torch.fx.Node "torch.fx.Node")。
- en: Note
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: '[PRE46]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Construct an empty Graph.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个空的图表。
- en: Note
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: '[PRE47]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Insert a `call_function` `Node` into the `Graph`. A `call_function` node represents
    a call to a Python callable, specified by `the_function`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 将`call_function` `Node`插入`Graph`。`call_function`节点表示对由`the_function`指定的Python可调用对象的调用。
- en: Parameters
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**the_function** (*Callable**[**...**,* *Any**]*) – The function to be called.
    Can be any PyTorch operator, Python function, or member of the `builtins` or `operator`
    namespaces.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**the_function**（*Callable**[**...**,* *Any**]*) – 要调用的函数。可以是任何PyTorch运算符、Python函数或`builtins`或`operator`命名空间的成员。'
- en: '**args** (*Optional**[**Tuple**[**Argument**,* *...**]**]*) – The positional
    arguments to be passed to the called function.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args**（*可选**[**Tuple**[**Argument**,* *...**]**]*) – 要传递给调用函数的位置参数。'
- en: '**kwargs** (*Optional**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Argument**]**]*) – The keyword arguments to be passed
    to the called function'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs**（*可选**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)")*,* *Argument**]**]*) – 要传递给调用函数的关键字参数'
- en: '**type_expr** (*Optional**[**Any**]*) – an optional type annotation representing
    the Python type the output of this node will have.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**type_expr**（*可选**[**Any**]*) – 一个可选的类型注释，表示此节点的输出将具有的Python类型。'
- en: Returns
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The newly created and inserted `call_function` node.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建并插入的`call_function`节点。
- en: Return type
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
- en: Note
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The same insertion point and type expression rules apply for this method as
    [`Graph.create_node()`](#torch.fx.Graph.create_node "torch.fx.Graph.create_node").
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的插入点和类型表达式规则与[`Graph.create_node()`](#torch.fx.Graph.create_node "torch.fx.Graph.create_node")相同。
- en: Note
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE48]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Insert a `call_method` `Node` into the `Graph`. A `call_method` node represents
    a call to a given method on the 0th element of `args`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 将`call_method` `Node`插入`Graph`中。`call_method`节点表示在`args`的第0个元素上调用给定方法。
- en: Parameters
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**method_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – The name of the method to apply to the self argument.
    For example, if args[0] is a `Node` representing a `Tensor`, then to call `relu()`
    on that `Tensor`, pass `relu` to `method_name`.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**method_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – 要应用于self参数的方法的名称。例如，如果args[0]是表示`Tensor`的`Node`，则要在该`Tensor`上调用`relu()`，请将`relu`传递给`method_name`。'
- en: '**args** (*Optional**[**Tuple**[**Argument**,* *...**]**]*) – The positional
    arguments to be passed to the called method. Note that this *should* include a
    `self` argument.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args** (*Optional**[**Tuple**[**Argument**,* *...**]**]*) – 要传递给调用方法的位置参数。请注意，这*应该*包括一个`self`参数。'
- en: '**kwargs** (*Optional**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Argument**]**]*) – The keyword arguments to be passed
    to the called method'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs** (*Optional**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Argument**]**]*) – 要传递给调用方法的关键字参数'
- en: '**type_expr** (*Optional**[**Any**]*) – an optional type annotation representing
    the Python type the output of this node will have.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**type_expr** (*Optional**[**Any**]*) – 一个可选的类型注释，表示此节点的输出将具有的Python类型。'
- en: Returns
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The newly created and inserted `call_method` node.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建并插入的`call_method`节点。
- en: Return type
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
- en: Note
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The same insertion point and type expression rules apply for this method as
    [`Graph.create_node()`](#torch.fx.Graph.create_node "torch.fx.Graph.create_node").
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的插入点和类型表达式规则与[`Graph.create_node()`](#torch.fx.Graph.create_node "torch.fx.Graph.create_node")相同。
- en: Note
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE49]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Insert a `call_module` `Node` into the `Graph`. A `call_module` node represents
    a call to the forward() function of a `Module` in the `Module` hierarchy.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 将`call_module` `Node`插入`Graph`中。`call_module`节点表示在`Module`层次结构中的`Module`的forward()函数的调用。
- en: Parameters
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**module_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – The qualified name of the `Module` in the `Module` hierarchy
    to be called. For example, if the traced `Module` has a submodule named `foo`,
    which has a submodule named `bar`, the qualified name `foo.bar` should be passed
    as `module_name` to call that module.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**module_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – 要调用的`Module`层次结构中的`Module`的限定名称。例如，如果被跟踪的`Module`有一个名为`foo`的子模块，该子模块有一个名为`bar`的子模块，则应将限定名称`foo.bar`作为`module_name`传递以调用该模块。'
- en: '**args** (*Optional**[**Tuple**[**Argument**,* *...**]**]*) – The positional
    arguments to be passed to the called method. Note that this should *not* include
    a `self` argument.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args** (*Optional**[**Tuple**[**Argument**,* *...**]**]*) – 要传递给调用方法的位置参数。请注意，这不应该包括一个`self`参数。'
- en: '**kwargs** (*Optional**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Argument**]**]*) – The keyword arguments to be passed
    to the called method'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs** (*Optional**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Argument**]**]*) – 要传递给调用方法的关键字参数'
- en: '**type_expr** (*Optional**[**Any**]*) – an optional type annotation representing
    the Python type the output of this node will have.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**type_expr** (*Optional**[**Any**]*) – 一个可选的类型注释，表示此节点的输出将具有的Python类型。'
- en: Returns
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The newly-created and inserted `call_module` node.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建并插入的`call_module`节点。
- en: Return type
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
- en: Note
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The same insertion point and type expression rules apply for this method as
    [`Graph.create_node()`](#torch.fx.Graph.create_node "torch.fx.Graph.create_node").
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的插入点和类型表达式规则与[`Graph.create_node()`](#torch.fx.Graph.create_node "torch.fx.Graph.create_node")相同。
- en: Note
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE50]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Create a `Node` and add it to the `Graph` at the current insert-point. Note
    that the current insert-point can be set via [`Graph.inserting_before()`](#torch.fx.Graph.inserting_before
    "torch.fx.Graph.inserting_before") and [`Graph.inserting_after()`](#torch.fx.Graph.inserting_after
    "torch.fx.Graph.inserting_after").
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`Node`并将其添加到当前插入点的`Graph`。请注意，当前插入点可以通过[`Graph.inserting_before()`](#torch.fx.Graph.inserting_before
    "torch.fx.Graph.inserting_before")和[`Graph.inserting_after()`](#torch.fx.Graph.inserting_after
    "torch.fx.Graph.inserting_after")进行设置。
- en: Parameters
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**op** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")) – the opcode for this Node. One of ‘call_function’, ‘call_method’, ‘get_attr’,
    ‘call_module’, ‘placeholder’, or ‘output’. The semantics of these opcodes are
    described in the `Graph` docstring.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**op** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")) – 此节点的操作码。其中之一是‘call_function’、‘call_method’、‘get_attr’、‘call_module’、‘placeholder’或‘output’。这些操作码的语义在`Graph`文档中有描述。'
- en: '**args** (*Optional**[**Tuple**[**Argument**,* *...**]**]*) – is a tuple of
    arguments to this node.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args** (*Optional**[**Tuple**[**Argument**,* *...**]**]*) – 这是传递给此节点的参数元组。'
- en: '**kwargs** (*Optional**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Argument**]**]*) – the kwargs of this Node'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs** (*Optional**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Argument**]**]*) – 此节点的关键字参数'
- en: '**name** (*Optional**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]*) – an optional string name for the `Node`. This will influence
    the name of the value assigned to in the Python generated code.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name** (*Optional**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]*) – `Node`的可选字符串名称。这将影响在Python生成的代码中分配给值的名称。'
- en: '**type_expr** (*Optional**[**Any**]*) – an optional type annotation representing
    the Python type the output of this node will have.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**type_expr**（*Optional**[**Any**]*） - 表示此节点输出的Python类型的可选类型注释。'
- en: Returns
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The newly-created and inserted node.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建并插入的节点。
- en: Return type
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
- en: Note
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE51]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Remove all dead code from the graph, based on each node’s number of users, and
    whether the nodes have any side effects. The graph must be topologically sorted
    before calling.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 从图中删除所有死代码，基于每个节点的用户数量以及节点是否具有任何副作用。在调用之前，图必须进行拓扑排序。
- en: Returns
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Whether the graph was changed as a result of the pass.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图是否因此传递而更改。
- en: Return type
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
- en: 'Example:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: Before dead code is eliminated, a from a = x + 1 below has no users and thus
    can be eliminated from the graph without having an effect.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在消除死代码之前，下面的a = x + 1没有用户，因此可以从图中消除而不产生影响。
- en: '[PRE52]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: After dead code is eliminated, a = x + 1 has been removed, and the rest of forward
    remains.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 消除死代码后，a = x + 1已被移除，前进的其余部分保留。
- en: '[PRE53]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Warning
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Dead code elimination has some heuristics to avoid removing side-effectful nodes
    (see Node.is_impure) but in general coverage is very bad, so you should assume
    that this method is not sound to call unless you know that your FX graph consists
    entirely of functional operations.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 死代码消除具有一些启发式方法，以避免删除具有副作用的节点（请参见Node.is_impure），但总体覆盖率非常差，因此您应该假设除非您知道您的FX图完全由功能操作组成，否则不应调用此方法。
- en: Note
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE54]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Erases a `Node` from the `Graph`. Throws an exception if there are still users
    of that node in the `Graph`.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 从`Graph`中擦除`Node`。如果在`Graph`中仍然有该节点的用户，则会引发异常。
- en: Parameters
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**to_erase** ([*Node*](#torch.fx.Node "torch.fx.Node")) – The `Node` to erase
    from the `Graph`.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**to_erase**（[*Node*](#torch.fx.Node "torch.fx.Node")） - 要从`Graph`中删除的`Node`。'
- en: Note
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE55]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Insert a `get_attr` node into the Graph. A `get_attr` `Node` represents the
    fetch of an attribute from the `Module` hierarchy.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 将`get_attr`节点插入图中。`get_attr` `Node`表示从`Module`层次结构中获取属性。
- en: Parameters
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**qualified_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – the fully-qualified name of the attribute to be retrieved.
    For example, if the traced Module has a submodule named `foo`, which has a submodule
    named `bar`, which has an attribute named `baz`, the qualified name `foo.bar.baz`
    should be passed as `qualified_name`.'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qualified_name**（[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")） - 要检索的属性的完全限定名称。例如，如果被跟踪的模块有一个名为`foo`的子模块，该子模块有一个名为`bar`的子模块，该子模块有一个名为`baz`的属性，则应将限定名称`foo.bar.baz`作为`qualified_name`传递。'
- en: '**type_expr** (*Optional**[**Any**]*) – an optional type annotation representing
    the Python type the output of this node will have.'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**type_expr**（*Optional**[**Any**]*） - 表示此节点输出的Python类型的可选类型注释。'
- en: Returns
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The newly-created and inserted `get_attr` node.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建并插入的`get_attr`节点。
- en: Return type
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
- en: Note
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The same insertion point and type expression rules apply for this method as
    `Graph.create_node`.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Graph.create_node`方法相同的插入点和类型表达式规则适用于此方法。
- en: Note
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE56]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Copy all nodes from a given graph into `self`.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定图中的所有节点复制到`self`中。
- en: Parameters
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**g** ([*Graph*](#torch.fx.Graph "torch.fx.Graph")) – The source graph from
    which to copy Nodes.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**g**（[*Graph*](#torch.fx.Graph "torch.fx.Graph")） - 要将节点从中复制到`self`的源图。'
- en: '**val_map** (*Dict**[*[*Node*](#torch.fx.Node "torch.fx.Node")*,* [*Node*](#torch.fx.Node
    "torch.fx.Node")*]*) – a dictionary that will be populated with a mapping from
    nodes in `g` to nodes in `self`. Note that `val_map` can be passed in with values
    in it already to override copying of certain values.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**val_map**（*Dict**[*[*Node*](#torch.fx.Node "torch.fx.Node")*,* [*Node*](#torch.fx.Node
    "torch.fx.Node")*]*） - 一个将从`g`中的节点映射到`self`中的节点的映射的字典。请注意，`val_map`可以传入已经具有值的值，以覆盖某些值的复制。'
- en: Returns
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The value in `self` that is now equivalent to the output value in `g`, if `g`
    had an `output` node. `None` otherwise.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`self`中的值等同于`g`中的输出值，如果`g`有一个`output`节点。否则为`None`。
- en: Return type
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")[[*Union*](https://docs.python.org/3/library/typing.html#typing.Union
    "(in Python v3.12)")[[*Tuple*](https://docs.python.org/3/library/typing.html#typing.Tuple
    "(in Python v3.12)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)"), …], [*List*](https://docs.python.org/3/library/typing.html#typing.List
    "(in Python v3.12)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")], [*Dict*](https://docs.python.org/3/library/typing.html#typing.Dict
    "(in Python v3.12)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)"), [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")], [slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), [range](https://docs.python.org/3/library/stdtypes.html#range
    "(in Python v3.12)"), [Node](#torch.fx.Node "torch.fx.Node"), [str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)"), [int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)"), [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)"), [bool](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)"), [complex](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.12)"), [*dtype*](tensor_attributes.html#torch.dtype "torch.dtype"),
    [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"), [*device*](tensor_attributes.html#torch.device
    "torch.device"), [*memory_format*](tensor_attributes.html#torch.memory_format
    "torch.memory_format"), [*layout*](tensor_attributes.html#torch.layout "torch.layout"),
    *OpOverload*]]'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(在Python v3.12中)")[[*Union*](https://docs.python.org/3/library/typing.html#typing.Union
    "(在Python v3.12中)")[[*Tuple*](https://docs.python.org/3/library/typing.html#typing.Tuple
    "(在Python v3.12中)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(在Python v3.12中)"), …], [*List*](https://docs.python.org/3/library/typing.html#typing.List
    "(在Python v3.12中)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(在Python v3.12中)")], [*Dict*](https://docs.python.org/3/library/typing.html#typing.Dict
    "(在Python v3.12中)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)"), [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(在Python v3.12中)")], [slice](https://docs.python.org/3/library/functions.html#slice
    "(在Python v3.12中)"), [range](https://docs.python.org/3/library/stdtypes.html#range
    "(在Python v3.12中)"), [Node](#torch.fx.Node "torch.fx.Node"), [str](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)"), [int](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12中)"), [float](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12中)"), [bool](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.12中)"), [complex](https://docs.python.org/3/library/functions.html#complex
    "(在Python v3.12中)"), [*dtype*](tensor_attributes.html#torch.dtype "torch.dtype"),
    [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"), [*device*](tensor_attributes.html#torch.device
    "torch.device"), [*memory_format*](tensor_attributes.html#torch.memory_format
    "torch.memory_format"), [*layout*](tensor_attributes.html#torch.layout "torch.layout"),
    *OpOverload*]]'
- en: Note
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE57]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Set the point at which create_node and companion methods will insert into the
    graph.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 设置create_node和companion方法将插入到图中的位置。
- en: 'When used within a ‘with’ statement, this will temporary set the insert point
    and then restore it when the with statement exits:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在‘with’语句中使用时，这将临时设置插入点，然后在退出with语句时恢复它：
- en: '[PRE58]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Args:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: 'n (Optional[Node]): The node before which to insert. If None this will insert
    after'
  id: totrans-371
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: n（可选[节点]）：要插入的节点之前。如果为None，则将在其之后插入
- en: ''
  id: totrans-372
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the beginning of the entire graph.
  id: totrans-373
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 整个图的开始。
- en: 'Returns:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: A resource manager that will restore the insert point on `__exit__`.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 将在`__exit__`上恢复插入点的资源管理器。
- en: Note
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE59]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Set the point at which create_node and companion methods will insert into the
    graph.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 设置create_node和companion方法将插入到图中的位置。
- en: 'When used within a ‘with’ statement, this will temporary set the insert point
    and then restore it when the with statement exits:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在‘with’语句中使用时，这将临时设置插入点，然后在退出with语句时恢复它：
- en: '[PRE60]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Args:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: 'n (Optional[Node]): The node before which to insert. If None this will insert
    before'
  id: totrans-383
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: n（可选[节点]）：要插入的节点之前。如果为None，则将在其之前插入
- en: ''
  id: totrans-384
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the beginning of the entire graph.
  id: totrans-385
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 整个图的开始。
- en: 'Returns:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: A resource manager that will restore the insert point on `__exit__`.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 将在`__exit__`上恢复插入点的资源管理器。
- en: Note
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE61]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Runs various checks on this Graph to make sure it is well-formed. In particular:
    - Checks Nodes have correct ownership (owned by this graph) - Checks Nodes appear
    in topological order - If this Graph has an owning GraphModule, checks that targets
    exist in that GraphModule'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 对此图运行各种检查，以确保其形式良好。特别是：-检查节点具有正确的所有权（由此图拥有）-检查节点按拓扑顺序出现-如果此图具有拥有的GraphModule，则检查目标是否存在于该GraphModule中
- en: Note
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE62]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Copy a node from one graph into another. `arg_transform` needs to transform
    arguments from the graph of node to the graph of self. Example:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个图中的节点复制到另一个图中。`arg_transform`需要将节点图中的参数转换为self图中的参数。例如：
- en: '[PRE63]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Parameters
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**node** ([*Node*](#torch.fx.Node "torch.fx.Node")) – The node to copy into
    `self`.'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**node**（[*Node*](#torch.fx.Node "torch.fx.Node")）–要复制到`self`中的节点。'
- en: '**arg_transform** (*Callable**[**[*[*Node*](#torch.fx.Node "torch.fx.Node")*]**,*
    *Argument**]*) – A function that transforms `Node` arguments in node’s `args`
    and `kwargs` into the equivalent argument in `self`. In the simplest case, this
    should retrieve a value out of a table mapping Nodes in the original graph to
    `self`.'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**arg_transform**（*Callable**[**[*[*Node*](#torch.fx.Node "torch.fx.Node")*]**,*
    *Argument**]*) – 一个函数，将节点的`args`和`kwargs`中的`Node`参数转换为`self`中的等效参数。在最简单的情况下，这应该从将原始图中的节点映射到`self`的表中检索值。'
- en: Return type
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
- en: Note
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE64]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Get the list of Nodes that constitute this Graph.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 获取构成此图的节点列表。
- en: Note that this `Node` list representation is a doubly-linked list. Mutations
    during iteration (e.g. delete a Node, add a Node) are safe.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此`Node`列表表示是一个双向链表。在迭代期间进行突变（例如删除节点，添加节点）是安全的。
- en: Returns
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: A doubly-linked list of Nodes. Note that `reversed` can be called on this list
    to switch iteration order.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 节点的双向链表。请注意，可以在此列表上调用`reversed`以切换迭代顺序。
- en: '[PRE65]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Register a transformer function when python code is generated
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成Python代码时注册一个转换器函数
- en: 'Args:'
  id: totrans-411
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 参数：
- en: ''
  id: totrans-412
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'make_transformer (Callable[[Optional[TransformCodeFunc]], TransformCodeFunc]):'
  id: totrans-413
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: make_transformer（Callable[[Optional[TransformCodeFunc]], TransformCodeFunc]）：
- en: ''
  id: totrans-414
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a function that returns a code transformer to be registered. This function is
    called by on_generate_code to obtain the code transformer.
  id: totrans-415
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 返回一个要注册的代码转换器的函数。此函数由on_generate_code调用以获取代码转换器。
- en: ''
  id: totrans-416
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This function is also given as its input the currently registered code transformer
    (or None if nothing is registered), in case it is not desirable to overwrite it.
    This is useful to chain code transformers together.
  id: totrans-417
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此函数还将当前注册的代码转换器（如果没有注册任何内容，则为None）作为其输入，以防不希望覆盖它。这对于链接代码转换器很有用。
- en: ''
  id: totrans-418
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-419
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 返回：
- en: ''
  id: totrans-420
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a context manager that when used in a with statement, to automatically restore
    the previously registered code transformer.
  id: totrans-421
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个上下文管理器，当在with语句中使用时，自动恢复先前注册的代码转换器。
- en: ''
  id: totrans-422
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-423
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例子：
- en: ''
  id: totrans-424
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-425
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE66]'
- en: ''
  id: totrans-426
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This function can also be used as a context manager, with the benefit to automatically
    restores the previously registered code transformer:'
  id: totrans-427
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此函数也可以作为上下文管理器使用，有助于自动恢复先前注册的代码转换器：
- en: ''
  id: totrans-428
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-429
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Warning
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This API is experimental and is *NOT* backward-compatible.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 此API是实验性的，*不*向后兼容。
- en: '[PRE68]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Insert an `output` `Node` into the `Graph`. An `output` node represents a `return`
    statement in Python code. `result` is the value that should be returned.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 将`output` `Node`插入`Graph`。`output`节点表示Python代码中的`return`语句。`result`是应该返回的值。
- en: Parameters
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**result** (*Argument*) – The value to be returned.'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**result**（*Argument*） - 要返回的值。'
- en: '**type_expr** (*Optional**[**Any**]*) – an optional type annotation representing
    the Python type the output of this node will have.'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**type_expr**（*Optional**[**Any**]*） - 表示此节点输出的Python类型的可选类型注释。'
- en: Note
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The same insertion point and type expression rules apply for this method as
    `Graph.create_node`.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Graph.create_node`方法相同的插入点和类型表达式规则适用于此方法。
- en: Note
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE69]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Insert a `placeholder` node into the Graph. A `placeholder` represents a function
    input.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 将`placeholder`节点插入Graph。`placeholder`表示函数输入。
- en: Parameters
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – A name for the input value. This corresponds to the name of
    the positional argument to the function this `Graph` represents.'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12中)")） - 输入值的名称。这对应于此`Graph`表示的函数的位置参数的名称。'
- en: '**type_expr** (*Optional**[**Any**]*) – an optional type annotation representing
    the Python type the output of this node will have. This is needed in some cases
    for proper code generation (e.g. when the function is used subsequently in TorchScript
    compilation).'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**type_expr**（*Optional**[**Any**]*） - 表示此节点输出的Python类型的可选类型注释。在某些情况下，这是必要的，以便进行正确的代码生成（例如，当函数随后在TorchScript编译中使用时）。'
- en: '**default_value** (*Any*) – The default value this function argument should
    take on. NOTE: to allow for None as a default value, inspect.Signature.empty should
    be passed as this argument to specify that the parameter does _not_ have a default
    value.'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**default_value**（*Any*） - 此函数参数应该采用的默认值。注意：为了允许None作为默认值，应将inspect.Signature.empty作为此参数传递，以指定该参数没有默认值。'
- en: Return type
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
- en: Note
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The same insertion point and type expression rules apply for this method as
    `Graph.create_node`.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Graph.create_node`方法相同的插入点和类型表达式规则适用于此方法。
- en: Note
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE70]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Prints the intermediate representation of the graph in tabular format. Note
    that this API requires the `tabulate` module to be installed.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 以表格形式打印图的中间表示。请注意，此API需要安装`tabulate`模块。
- en: Note
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE71]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Processes args so that they can be passed to the FX graph.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 处理参数，以便它们可以传递给FX图。
- en: Warning
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This API is experimental and is *NOT* backward-compatible.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 此API是实验性的，*不*向后兼容。
- en: '[PRE72]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Warning
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This API is experimental and is *NOT* backward-compatible.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 此API是实验性的，*不*向后兼容。
- en: '[PRE73]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Turn this `Graph` into valid Python code.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 将此`Graph`转换为有效的Python代码。
- en: Parameters
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**root_module** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – The name of the root module on which to look-up qualified
    name targets. This is usually ‘self’.'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '**root_module**（[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)")） - 要查找限定名称目标的根模块的名称。通常为“self”。'
- en: Returns
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'src: the Python source code representing the object globals: a dictionary of
    global names in src -> the objects that they reference.'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: src：表示对象全局名称的Python源代码 globals：src中的全局名称的字典->它们引用的对象。
- en: Return type
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: A PythonCode object, consisting of two fields
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 一个PythonCode对象，由两个字段组成
- en: Note
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE74]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Warning
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This API is experimental and is *NOT* backward-compatible.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 此API是实验性的，*不*向后兼容。
- en: '[PRE75]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '`Node` is the data structure that represents individual operations within a
    `Graph`. For the most part, Nodes represent callsites to various entities, such
    as operators, methods, and Modules (some exceptions include nodes that specify
    function inputs and outputs). Each `Node` has a function specified by its `op`
    property. The `Node` semantics for each value of `op` are as follows:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '`Node`是表示`Graph`中各个操作的数据结构。在大多数情况下，节点表示对各种实体的调用点，例如运算符、方法和模块（一些例外包括指定函数输入和输出的节点）。每个`Node`都有一个由其`op`属性指定的函数。对于`op`的每个值，`Node`的语义如下：'
- en: '`placeholder` represents a function input. The `name` attribute specifies the
    name this value will take on. `target` is similarly the name of the argument.
    `args` holds either: 1) nothing, or 2) a single argument denoting the default
    parameter of the function input. `kwargs` is don’t-care. Placeholders correspond
    to the function parameters (e.g. `x`) in the graph printout.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`placeholder` 代表一个函数输入。`name` 属性指定此值将采用的名称。`target` 同样是参数的名称。`args` 包含：1) 什么都没有，或者
    2) 一个表示函数输入的默认参数的单个参数。`kwargs` 不重要。占位符对应于图形打印输出中的函数参数（例如 `x`）。'
- en: '`get_attr` retrieves a parameter from the module hierarchy. `name` is similarly
    the name the result of the fetch is assigned to. `target` is the fully-qualified
    name of the parameter’s position in the module hierarchy. `args` and `kwargs`
    are don’t-care'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_attr` 从模块层次结构中检索参数。`name` 同样是结果的名称。`target` 是参数在模块层次结构中的完全限定名称。`args`
    和 `kwargs` 不重要。'
- en: '`call_function` applies a free function to some values. `name` is similarly
    the name of the value to assign to. `target` is the function to be applied. `args`
    and `kwargs` represent the arguments to the function, following the Python calling
    convention'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`call_function` 将一个自由函数应用到一些值上。`name` 同样是要分配的值的名称。`target` 是要应用的函数。`args` 和
    `kwargs` 代表函数的参数，遵循 Python 的调用约定。'
- en: '`call_module` applies a module in the module hierarchy’s `forward()` method
    to given arguments. `name` is as previous. `target` is the fully-qualified name
    of the module in the module hierarchy to call. `args` and `kwargs` represent the
    arguments to invoke the module on, *excluding the self argument*.'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`call_module` 将模块在模块层次结构的 `forward()` 方法中应用到给定的参数上。`name` 与之前相同。`target` 是要调用的模块在模块层次结构中的完全限定名称。`args`
    和 `kwargs` 代表要在模块上调用的参数，*不包括 self 参数*。'
- en: '`call_method` calls a method on a value. `name` is as similar. `target` is
    the string name of the method to apply to the `self` argument. `args` and `kwargs`
    represent the arguments to invoke the module on, *including the self argument*'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`call_method` 在一个值上调用一个方法。`name` 与之前相似。`target` 是要应用于 `self` 参数的方法的字符串名称。`args`
    和 `kwargs` 代表要在模块上调用的参数，*包括 self 参数*。'
- en: '`output` contains the output of the traced function in its `args[0]` attribute.
    This corresponds to the “return” statement in the Graph printout.'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output` 包含跟踪函数的输出，在其 `args[0]` 属性中。这对应于图形打印输出中的“return”语句。'
- en: Note
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 的向后兼容性是有保证的。
- en: '[PRE76]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Return all Nodes that are inputs to this Node. This is equivalent to iterating
    over `args` and `kwargs` and only collecting the values that are Nodes.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 返回是此节点的输入的所有节点。这相当于迭代 `args` 和 `kwargs` 并仅收集是节点的值。
- en: Returns
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: List of `Nodes` that appear in the `args` and `kwargs` of this `Node`, in that
    order.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 `Node` 的 `args` 和 `kwargs` 中出现的 `Nodes` 列表，按顺序排列。
- en: '[PRE77]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Insert `x` after this node in the list of nodes in the graph. Equivalent to
    `self.next.prepend(x)`
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 在此节点后插入 `x` 到图中的节点列表中。等同于 `self.next.prepend(x)`
- en: Parameters
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**x** ([*Node*](#torch.fx.Node "torch.fx.Node")) – The node to put after this
    node. Must be a member of the same graph.'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '**x** ([*Node*](#torch.fx.Node "torch.fx.Node")) – 要在此节点后放置的节点。必须是同一图中的成员。'
- en: Note
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 的向后兼容性是有保证的。
- en: '[PRE78]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The tuple of arguments to this `Node`. The interpretation of arguments depends
    on the node’s opcode. See the [`Node`](#torch.fx.Node "torch.fx.Node") docstring
    for more information.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `Node` 的参数元组。参数的解释取决于节点的操作码。查看 [`Node`](#torch.fx.Node "torch.fx.Node") 文档字符串以获取更多信息。
- en: Assignment to this property is allowed. All accounting of uses and users is
    updated automatically on assignment.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 允许对此属性进行赋值。在赋值时，所有使用和用户的计数都会自动更新。
- en: '[PRE79]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Return a descriptive string representation of `self`.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `self` 的描述性字符串表示。
- en: This method can be used with no arguments as a debugging utility.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可以作为调试工具而无需参数使用。
- en: This function is also used internally in the `__str__` method of `Graph`. Together,
    the strings in `placeholder_names` and `maybe_return_typename` make up the signature
    of the autogenerated `forward` function in this Graph’s surrounding GraphModule.
    `placeholder_names` and `maybe_return_typename` should not be used otherwise.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '此函数还在 `Graph` 的 `__str__` 方法中内部使用。`placeholder_names` 和 `maybe_return_typename`
    中的字符串一起构成了此 Graph 的周围 GraphModule 中自动生成的 `forward` 函数的签名。否则不应使用 `placeholder_names`
    和 `maybe_return_typename`。 '
- en: Parameters
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**placeholder_names** ([*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")*[*[*List*](https://docs.python.org/3/library/typing.html#typing.List
    "(in Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]**]*) – A list that will store formatted strings representing
    the placeholders in the generated `forward` function. Internal use only.'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**placeholder_names** ([*可选*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(在 Python v3.12)")*[*[*List*](https://docs.python.org/3/library/typing.html#typing.List
    "(在 Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12)")*]**]*) – 一个列表，将存储表示生成的 `forward` 函数中占位符的格式化字符串。仅供内部使用。'
- en: '**maybe_return_typename** ([*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")*[*[*List*](https://docs.python.org/3/library/typing.html#typing.List
    "(in Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]**]*) – A single-element list that will store a formatted
    string representing the output of the generated `forward` function. Internal use
    only.'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**maybe_return_typename** ([*可选*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(在 Python v3.12)")*[*[*List*](https://docs.python.org/3/library/typing.html#typing.List
    "(在 Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12)")*]**]*) – 一个单元素列表，将存储表示生成的 `forward` 函数输出的格式化字符串。仅供内部使用。'
- en: Returns
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: If 1) we’re using `format_node` as an internal helper
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 1) 我们在内部使用 `format_node` 作为辅助函数
- en: in the `__str__` method of `Graph`, and 2) `self` is a placeholder Node, return
    `None`. Otherwise, return a descriptive string representation of the current Node.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Graph`的`__str__`方法中，以及2）`self`是占位符节点，则返回`None`。否则，返回当前Node的描述性字符串表示。
- en: Return type
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '[str](https://docs.python.org/3/library/stdtypes.html#str "(在Python v3.12)")'
- en: Note
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE80]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Insert an positional argument to the argument list with given index.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定索引处向参数列表中插入一个位置参数。
- en: Parameters
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**idx** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – The index of the element in `self.args` to be inserted before.'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**idx**（[*int*](https://docs.python.org/3/library/functions.html#int "(在Python
    v3.12)")）-要在`self.args`中插入的元素的索引。'
- en: '**arg** (*Argument*) – The new argument value to insert into `args`'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**arg**（*参数*）-要插入`args`的新参数值'
- en: Note
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE81]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Returns whether this op is impure, i.e. if its op is a placeholder or output,
    or if a call_function or call_module which is impure.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此操作是否不纯净，即其操作是占位符或输出，或者是不纯净的call_function或call_module。
- en: Returns
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: If the op is impure or not.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作是不纯净的。
- en: Return type
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(在Python v3.12)")'
- en: Warning
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This API is experimental and is *NOT* backward-compatible.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 此API是实验性的，*不*向后兼容。
- en: '[PRE82]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The dict of keyword arguments to this `Node`. The interpretation of arguments
    depends on the node’s opcode. See the [`Node`](#torch.fx.Node "torch.fx.Node")
    docstring for more information.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字参数的字典到此`Node`。参数的解释取决于节点的操作码。有关更多信息，请参阅[`Node`](#torch.fx.Node "torch.fx.Node")文档字符串。
- en: Assignment to this property is allowed. All accounting of uses and users is
    updated automatically on assignment.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 允许对此属性进行赋值。所有使用和用户的计算都会在分配时自动更新。
- en: '[PRE83]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Returns the next `Node` in the linked list of Nodes.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 返回链接列表中的下一个`Node`。
- en: Returns
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The next `Node` in the linked list of Nodes.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 链接列表中的下一个`Node`。
- en: '[PRE84]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Returns normalized arguments to Python targets. This means that args/kwargs
    will be matched up to the module/functional’s signature and return exclusively
    kwargs in positional order if normalize_to_only_use_kwargs is true. Also populates
    default values. Does not support positional-only parameters or varargs parameters.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数标准化为Python目标的参数。这意味着args/kwargs将与模块/功能的签名匹配，并且如果normalize_to_only_use_kwargs为true，则仅以位置顺序返回kwargs。还填充默认值。不支持仅位置参数或可变参数。
- en: Supports module calls.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 支持模块调用。
- en: May require arg_types and kwarg_types in order to disambiguate overloads.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要arg_types和kwarg_types以消除重载。
- en: Parameters
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**root** ([*torch.nn.Module*](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")) – Module upon which to resolve module targets.'
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**root**（[*torch.nn.Module*](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")）-要解析模块目标的模块。'
- en: '**arg_types** (*Optional**[**Tuple**[**Any**]**]*) – Tuple of arg types for
    the args'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**arg_types**（*可选**[**Tuple**[**Any**]**]*)-args的参数类型元组'
- en: '**kwarg_types** (*Optional**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Any**]**]*) – Dict of arg types for the kwargs'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwarg_types**（*可选**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12)")*,* *Any**]**]*)-kwargs的参数类型字典'
- en: '**normalize_to_only_use_kwargs** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – Whether to normalize to only use kwargs.'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**normalize_to_only_use_kwargs**（[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.12)")）-是否规范化为仅使用kwargs。'
- en: Returns
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Returns NamedTuple ArgsKwargsPair, or None if not successful.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 返回命名元组ArgsKwargsPair，如果不成功则返回None。
- en: Return type
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")[*ArgsKwargsPair*]'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '[*可选*](https://docs.python.org/3/library/typing.html#typing.Optional "(在Python
    v3.12)")[*ArgsKwargsPair*]'
- en: Warning
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This API is experimental and is *NOT* backward-compatible.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 此API是实验性的，*不*向后兼容。
- en: '[PRE85]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Insert x before this node in the list of nodes in the graph. Example:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中的节点列表中的此节点之前插入x。示例：
- en: '[PRE86]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Parameters
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**x** ([*Node*](#torch.fx.Node "torch.fx.Node")) – The node to put before this
    node. Must be a member of the same graph.'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**（[*Node*](#torch.fx.Node "torch.fx.Node")）-要在此节点之前放置的节点。必须是同一图的成员。'
- en: Note
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE87]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Returns the previous `Node` in the linked list of Nodes.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 返回链接列表中的上一个`Node`。
- en: Returns
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The previous `Node` in the linked list of Nodes.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 链接列表中的上一个`Node`。
- en: '[PRE88]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Replace all uses of `self` in the Graph with the Node `replace_with`.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 用Node`replace_with`替换图中所有`self`的使用。
- en: Parameters
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**replace_with** ([*Node*](#torch.fx.Node "torch.fx.Node")) – The node to replace
    all uses of `self` with.'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**replace_with**（[*Node*](#torch.fx.Node "torch.fx.Node")）-要用`self`替换所有使用的节点。'
- en: '**delete_user_cb** (*Callable*) – Callback that is called to determine whether
    a given user of the self node should be removed.'
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**delete_user_cb**（*可调用*）-用于确定是否应删除self节点的给定用户的回调。'
- en: '**propagate_meta** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – Whether or not to copy all properties on the .meta field
    of the original node onto the replacement node. For safety, this is only valid
    to do if the replacement node doesn’t already have an existing .meta field.'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**propagate_meta**（[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.12)")）-是否复制原始节点的.meta字段上的所有属性到替换节点。出于安全考虑，只有在替换节点尚未具有现有.meta字段时才能这样做。'
- en: Returns
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The list of Nodes on which this change was made.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 进行此更改的节点列表。
- en: Return type
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*List*](https://docs.python.org/3/library/typing.html#typing.List "(in Python
    v3.12)")[[*Node*](#torch.fx.Node "torch.fx.node.Node")]'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '[*列表*](https://docs.python.org/3/library/typing.html#typing.List "(在Python
    v3.12)")[[*Node*](#torch.fx.Node "torch.fx.node.Node")]'
- en: Note
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE89]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Loop through input nodes of `self`, and replace all instances of `old_input`
    with `new_input`.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 循环遍历`self`的输入节点，并用`new_input`替换所有`old_input`的实例。
- en: Parameters
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**old_input** ([*Node*](#torch.fx.Node "torch.fx.Node")) – The old input node
    to be replaced.'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**old_input**（[*Node*](#torch.fx.Node "torch.fx.Node")）-要替换的旧输入节点。'
- en: '**new_input** ([*Node*](#torch.fx.Node "torch.fx.Node")) – The new input node
    to replace `old_input`.'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**new_input**（[*Node*](#torch.fx.Node "torch.fx.Node")）-要替换`old_input`的新输入节点。'
- en: Note
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE90]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Return the Python stack trace that was recorded during tracing, if any. When
    traced with fx.Tracer, this property is usually populated by Tracer.create_proxy.
    To record stack traces during tracing for debug purposes, set record_stack_traces
    = True on the Tracer instance. When traced with dynamo, this property will be
    populated by default by OutputGraph.create_proxy.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在跟踪期间记录的Python堆栈跟踪，如果有的话。使用fx.Tracer跟踪时，此属性通常由Tracer.create_proxy填充。为了记录跟踪期间的堆栈跟踪以进行调试，可以在Tracer实例上设置record_stack_traces
    = True。使用dynamo跟踪时，此属性将默认由OutputGraph.create_proxy填充。
- en: stack_trace would have the innermost frame at the end of the string.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: stack_trace将在字符串末尾具有最内部的帧。
- en: '[PRE91]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Update an existing positional argument to contain the new value `arg`. After
    calling, `self.args[idx] == arg`.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 更新现有的位置参数以包含新值`arg`。调用后，`self.args[idx] == arg`。
- en: Parameters
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**idx** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – The index into `self.args` of the element to update'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**idx**（[*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.12)")）-要更新的元素在`self.args`中的索引'
- en: '**arg** (*Argument*) – The new argument value to write into `args`'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**arg**（*参数*）-要写入`args`的新参数值'
- en: Note
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE92]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Update an existing keyword argument to contain the new value `arg`. After calling,
    `self.kwargs[key] == arg`.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 更新现有的关键字参数以包含新值`arg`。调用后，`self.kwargs[key] == arg`。
- en: Parameters
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**key** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")) – The key in `self.kwargs` of the element to update'
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**key**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")）-要更新的元素在`self.kwargs`中的键'
- en: '**arg** (*Argument*) – The new argument value to write into `kwargs`'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**arg**（*参数*）-要写入`kwargs`的新参数值'
- en: Note
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE93]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '`Tracer` is the class that implements the symbolic tracing functionality of
    `torch.fx.symbolic_trace`. A call to `symbolic_trace(m)` is equivalent to `Tracer().trace(m)`.'
  id: totrans-599
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Tracer`是实现`torch.fx.symbolic_trace`的符号跟踪功能的类。对`symbolic_trace(m)`的调用等效于`Tracer().trace(m)`。'
- en: ''
  id: totrans-600
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tracer can be subclassed to override various behaviors of the tracing process.
    The different behaviors that can be overridden are described in the docstrings
    of the methods on this class.
  id: totrans-601
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 跟踪器可以被子类化以覆盖跟踪过程的各种行为。可以覆盖的不同行为在此类的方法的文档字符串中描述。
- en: Note
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE94]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Method that specifies the behavior of this `Tracer` when it encounters a call
    to an `nn.Module` instance.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 指定此`Tracer`在遇到对`nn.Module`实例的调用时的行为的方法。
- en: By default, the behavior is to check if the called module is a leaf module via
    `is_leaf_module`. If it is, emit a `call_module` node referring to `m` in the
    `Graph`. Otherwise, call the `Module` normally, tracing through the operations
    in its `forward` function.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，行为是检查所调用的模块是否是叶模块，通过`is_leaf_module`。如果是，则在`Graph`中引用`m`发出`call_module`节点。否则，正常调用`Module`，跟踪其`forward`函数中的操作。
- en: This method can be overridden to–for example–create nested traced GraphModules,
    or any other behavior you would want while tracing across `Module` boundaries.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 可以重写此方法，例如创建嵌套的跟踪GraphModules，或者在跨`Module`边界跟踪时希望的任何其他行为。
- en: Parameters
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**m** ([*Module*](generated/torch.nn.Module.html#torch.nn.Module "torch.nn.Module"))
    – The module for which a call is being emitted'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**m**（[*Module*](generated/torch.nn.Module.html#torch.nn.Module "torch.nn.Module")）-正在发出调用的模块'
- en: '**forward** (*Callable*) – The forward() method of the `Module` to be invoked'
  id: totrans-610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**forward**（*可调用*）-要调用的`Module`的forward()方法'
- en: '**args** (*Tuple*) – args of the module callsite'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args**（*元组*）-模块调用站点的args'
- en: '**kwargs** (*Dict*) – kwargs of the module callsite'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs**（*Dict*）-模块调用站点的kwargs'
- en: Returns
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The return value from the Module call. In the case that a `call_module` node
    was emitted, this is a `Proxy` value. Otherwise, it is whatever value was returned
    from the `Module` invocation.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 模块调用的返回值。在发出`call_module`节点的情况下，这是一个`Proxy`值。否则，它是从`Module`调用返回的任何值。
- en: Return type
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)")'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)")'
- en: Note
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE95]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: A method to specify the behavior of tracing when preparing values to be used
    as arguments to nodes in the `Graph`.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法，用于指定在准备将值用作图中节点的参数时跟踪的行为。
- en: 'By default, the behavior includes:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，行为包括：
- en: Iterate through collection types (e.g. tuple, list, dict) and recursively call
    `create_args` on the elements.
  id: totrans-622
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历集合类型（例如元组、列表、字典）并在元素上递归调用`create_args`。
- en: Given a Proxy object, return a reference to the underlying IR `Node`
  id: totrans-623
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定一个代理对象，返回对底层IR`Node`的引用
- en: 'Given a non-Proxy Tensor object, emit IR for various cases:'
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定一个非代理张量对象，发出各种情况的IR：
- en: For a Parameter, emit a `get_attr` node referring to that Parameter
  id: totrans-625
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于参数，发出引用该参数的`get_attr`节点
- en: ''
  id: totrans-626
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-627
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: For a non-Parameter Tensor, store the Tensor away in a special attribute referring
    to that attribute.
  id: totrans-628
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于非参数张量，将张量存储在一个特殊属性中，该属性指向该属性。
- en: This method can be overridden to support more types.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 可以重写此方法以支持更多类型。
- en: Parameters
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**a** (*Any*) – The value to be emitted as an `Argument` in the `Graph`.'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '**a**（*任意*）-要在`Graph`中作为`Argument`发出的值。'
- en: Returns
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The value `a` converted into the appropriate `Argument`
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 将值`a`转换为适当的`Argument`
- en: Return type
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")[[*Union*](https://docs.python.org/3/library/typing.html#typing.Union
    "(in Python v3.12)")[[*Tuple*](https://docs.python.org/3/library/typing.html#typing.Tuple
    "(in Python v3.12)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)"), …], [*List*](https://docs.python.org/3/library/typing.html#typing.List
    "(in Python v3.12)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")], [*Dict*](https://docs.python.org/3/library/typing.html#typing.Dict
    "(in Python v3.12)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)"), [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")], [slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), [range](https://docs.python.org/3/library/stdtypes.html#range
    "(in Python v3.12)"), [Node](#torch.fx.Node "torch.fx.Node"), [str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)"), [int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)"), [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)"), [bool](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)"), [complex](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.12)"), [*dtype*](tensor_attributes.html#torch.dtype "torch.dtype"),
    [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"), [*device*](tensor_attributes.html#torch.device
    "torch.device"), [*memory_format*](tensor_attributes.html#torch.memory_format
    "torch.memory_format"), [*layout*](tensor_attributes.html#torch.layout "torch.layout"),
    *OpOverload*]]'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")[[*Union*](https://docs.python.org/3/library/typing.html#typing.Union
    "(in Python v3.12)")[[*Tuple*](https://docs.python.org/3/library/typing.html#typing.Tuple
    "(in Python v3.12)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)"), …], [*List*](https://docs.python.org/3/library/typing.html#typing.List
    "(in Python v3.12)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")], [*Dict*](https://docs.python.org/3/library/typing.html#typing.Dict
    "(in Python v3.12)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)"), [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")], [slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), [range](https://docs.python.org/3/library/stdtypes.html#range
    "(in Python v3.12)"), [Node](#torch.fx.Node "torch.fx.Node"), [str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)"), [int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)"), [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)"), [bool](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)"), [complex](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.12)"), [*dtype*](tensor_attributes.html#torch.dtype "torch.dtype"),
    [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"), [*device*](tensor_attributes.html#torch.device
    "torch.device"), [*memory_format*](tensor_attributes.html#torch.memory_format
    "torch.memory_format"), [*layout*](tensor_attributes.html#torch.layout "torch.layout"),
    *OpOverload*]]'
- en: Note
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已经得到保证。
- en: '[PRE96]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Create `placeholder` nodes corresponding to the signature of the `root` Module.
    This method introspects root’s signature and emits those nodes accordingly, also
    supporting `*args` and `**kwargs`.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 创建与`root`模块的签名对应的`placeholder`节点。此方法审查root的签名并相应地发出这些节点，还支持`*args`和`**kwargs`。
- en: Warning
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This API is experimental and is *NOT* backward-compatible.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 此API是实验性的，*不*向后兼容。
- en: '[PRE97]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Inserts a graph node given target, args, kwargs, and name.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 插入一个给定目标、args、kwargs和名称的图节点。
- en: This method can be overridden to do extra checking, validation, or modification
    of values used in node creation. For example, one might want to disallow in-place
    operations from being recorded.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 可以重写此方法以执行额外的检查、验证或修改用于节点创建的值。例如，可能希望禁止记录原地操作。
- en: Note
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已经得到保证。
- en: Return type
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Node*](#torch.fx.Node "torch.fx.node.Node")'
- en: '[PRE98]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Create a Node from the given arguments, then return the Node wrapped in a Proxy
    object.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定的参数创建一个节点，然后返回包装在代理对象中的节点。
- en: If kind = ‘placeholder’, then we’re creating a Node that represents the parameter
    of a function. If we need to encode a default parameter, we use the `args` tuple.
    `args` is otherwise empty for `placeholder` Nodes.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 如果kind = ‘placeholder’，那么我们正在创建一个代表函数参数的节点。如果我们需要编码默认参数，我们使用`args`元组。对于`placeholder`节点，`args`否则为空。
- en: Note
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已经得到保证。
- en: '[PRE99]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Method that specifies the behavior of this `Tracer` when we call getattr on
    a call to an `nn.Module` instance.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 指定当我们在调用`nn.Module`实例的`getattr`时，此`Tracer`的行为的方法。
- en: By default, the behavior is to return a proxy value for the attribute. It also
    stores the proxy value in the `parameter_proxy_cache`, so that future calls will
    reuse the proxy rather than creating a new one.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，行为是返回属性的代理值。它还将代理值存储在`parameter_proxy_cache`中，以便将来的调用将重用代理而不是创建新的代理。
- en: This method can be overridden to –for example– not return proxies when querying
    parameters.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 可以重写此方法，例如，在查询参数时不返回代理。
- en: Parameters
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**attr** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – The name of the attribute being queried'
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**attr** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – 正在查询的属性的名称'
- en: '**attr_val** (*Any*) – The value of the attribute'
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**attr_val** (*Any*) – 属性的值'
- en: '**parameter_proxy_cache** (*Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Any**]*) – A cache of attr names to proxies'
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**parameter_proxy_cache** (*Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Any**]*) – 一个属性名称到代理的缓存'
- en: Returns
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The return value from the getattr call.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 从getattr调用的返回值。
- en: Warning
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This API is experimental and is *NOT* backward-compatible.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 此API是实验性的，*不*向后兼容。
- en: '[PRE100]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: A method to specify whether a given `nn.Module` is a “leaf” module.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 指定给定的`nn.Module`是否是“叶子”模块的方法。
- en: Leaf modules are the atomic units that appear in the IR, referenced by `call_module`
    calls. By default, Modules in the PyTorch standard library namespace (torch.nn)
    are leaf modules. All other modules are traced through and their constituent ops
    are recorded, unless specified otherwise via this parameter.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 叶模块是出现在IR中的原子单位，由`call_module`调用引用。默认情况下，PyTorch标准库命名空间（torch.nn）中的模块是叶模块。除非通过此参数另有规定，否则将跟踪所有其他模块，并记录其组成操作。
- en: Parameters
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**m** ([*Module*](generated/torch.nn.Module.html#torch.nn.Module "torch.nn.Module"))
    – The module being queried about'
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**m**（[*Module*](generated/torch.nn.Module.html#torch.nn.Module "torch.nn.Module")）
    - 被查询的模块'
- en: '**module_qualified_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – The path to root of this module. For example, if you have
    a module hierarchy where submodule `foo` contains submodule `bar`, which contains
    submodule `baz`, that module will appear with the qualified name `foo.bar.baz`
    here.'
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**module_qualified_name**（[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")） - 此模块的根路径。例如，如果您有一个模块层次结构，其中子模块`foo`包含子模块`bar`，后者包含子模块`baz`，那么该模块将以限定名称`foo.bar.baz`显示在此处。'
- en: Return type
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
- en: Note
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE101]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Called when a proxy object is being iterated over, such as
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理对象被迭代时调用，例如
- en: when used in control flow. Normally we don’t know what to do because we don’t
    know the value of the proxy, but a custom tracer can attach more information to
    the graph node using create_node and can choose to return an iterator.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制流中使用时。通常我们不知道该做什么，因为我们不知道代理的值，但是自定义跟踪器可以使用create_node附加更多信息到图节点，并选择返回一个迭代器。
- en: Note
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: Return type
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Iterator*](https://docs.python.org/3/library/typing.html#typing.Iterator
    "(in Python v3.12)")'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Iterator*](https://docs.python.org/3/library/typing.html#typing.Iterator
    "(in Python v3.12)")'
- en: '[PRE102]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Called when a proxy object is has the keys() method called.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理对象调用keys()方法时调用。
- en: This is what happens when ** is called on a proxy. This should return an iterator
    it ** is suppose to work in your custom tracer.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在代理上调用**时发生的情况。这应该返回一个迭代器，**应该在您的自定义跟踪器中起作用。
- en: Note
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: Return type
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)")'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)")'
- en: '[PRE103]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Helper method to find the qualified name of `mod` in the Module hierarchy of
    `root`. For example, if `root` has a submodule named `foo`, which has a submodule
    named `bar`, passing `bar` into this function will return the string “foo.bar”.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 在`root`的模块层次结构中查找`mod`的限定名称的辅助方法。例如，如果`root`有一个名为`foo`的子模块，其中有一个名为`bar`的子模块，将`bar`传递给此函数将返回字符串“foo.bar”。
- en: Parameters
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**mod** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")) – The `Module` to retrieve the qualified name for.'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '**mod**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")） - 要检索限定名称的`Module`。'
- en: Return type
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")'
- en: Note
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE104]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Note
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: Return type
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Proxy*](#torch.fx.Proxy "torch.fx.proxy.Proxy")'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Proxy*](#torch.fx.Proxy "torch.fx.proxy.Proxy")'
- en: '[PRE105]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Called when a proxy object is being converted to a boolean, such as
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理对象被转换为布尔值时调用，例如
- en: when used in control flow. Normally we don’t know what to do because we don’t
    know the value of the proxy, but a custom tracer can attach more information to
    the graph node using create_node and can choose to return a value.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制流中使用时。通常我们不知道该做什么，因为我们不知道代理的值，但是自定义跟踪器可以使用create_node附加更多信息到图节点，并选择返回一个值。
- en: Note
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: Return type
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
- en: '[PRE106]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Trace `root` and return the corresponding FX `Graph` representation. `root`
    can either be an `nn.Module` instance or a Python callable.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪`root`并返回相应的FX`Graph`表示。`root`可以是`nn.Module`实例或Python可调用对象。
- en: Note that after this call, `self.root` may be different from the `root` passed
    in here. For example, when a free function is passed to `trace()`, we will create
    an `nn.Module` instance to use as the root and add embedded constants to.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此调用之后，`self.root`可能与此处传入的`root`不同。例如，当将自由函数传递给`trace()`时，我们将创建一个`nn.Module`实例用作根，并添加嵌入常量。
- en: Parameters
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**root** (*Union**[*[*Module*](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")*,* *Callable**]*) – Either a `Module` or a function to be traced
    through. Backwards-compatibility for this parameter is guaranteed.'
  id: totrans-714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**root**（*Union**[*[*Module*](generated/torch.nn.Module.html#torch.nn.Module
    "torch.nn.Module")*,* *Callable**]*) - 要跟踪的`Module`或函数。此参数的向后兼容性得到保证。'
- en: '**concrete_args** (*Optional**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *any**]**]*) – Concrete arguments that should not be treated
    as Proxies. This parameter is experimental and its backwards-compatibility is
    *NOT* guaranteed.'
  id: totrans-715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**concrete_args**（*可选**[**Dict**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *any**]**]*) - 不应视为代理的具体参数。此参数是实验性的，不保证向后兼容。'
- en: Returns
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: A `Graph` representing the semantics of the passed-in `root`.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 表示传入`root`语义的`Graph`。
- en: Return type
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Graph*](#torch.fx.Graph "torch.fx.graph.Graph")'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Graph*](#torch.fx.Graph "torch.fx.graph.Graph")'
- en: Note
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性得到保证。
- en: '[PRE107]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '`Proxy` objects are `Node` wrappers that flow through the program during symbolic
    tracing and record all the operations (`torch` function calls, method calls, operators)
    that they touch into the growing FX Graph.'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '`Proxy`对象是`Node`包装器，它们在符号跟踪期间流经程序，并记录它们触及的所有操作（`torch`函数调用，方法调用，运算符）到不断增长的FX图中。'
- en: If you’re doing graph transforms, you can wrap your own `Proxy` method around
    a raw `Node` so that you can use the overloaded operators to add additional things
    to a `Graph`.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在进行图形转换，可以将自己的`Proxy`方法包装在原始`Node`周围，以便您可以使用重载的运算符向`Graph`添加其他内容。
- en: '`Proxy` objects cannot be iterated. In other words, the symbolic tracer will
    throw an error if a `Proxy` is used in a loop or as an `*args`/`**kwargs` function
    argument.'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '`Proxy`对象无法迭代。换句话说，如果在循环中使用`Proxy`或作为`*args`/`**kwargs`函数参数，则符号跟踪器将抛出错误。'
- en: 'There are two main ways around this: 1\. Factor out the untraceable logic into
    a top-level function and use `fx.wrap` on it. 2\. If the control flow is static
    (i.e. the loop trip count is based on some hyperparameter), the code can be kept
    in its original position and refactored into something like:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种主要方法可以解决这个问题：1. 将无法跟踪的逻辑提取到顶层函数中，并在其上使用`fx.wrap`。2. 如果控制流是静态的（即循环次数基于某些超参数），则可以将代码保留在原始位置并重构为类似以下内容：
- en: '[PRE108]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: For a more detailed description into the Proxy internals, check out the “Proxy”
    section in torch/fx/OVERVIEW.md
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Proxy内部更详细的描述，请查看torch/fx/OVERVIEW.md中的“Proxy”部分
- en: Note
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: '[PRE109]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: An Interpreter executes an FX graph Node-by-Node. This pattern can be useful
    for many things, including writing code transformations as well as analysis passes.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: Interpreter逐节点执行FX图。这种模式对于许多事情都很有用，包括编写代码转换以及分析传递。
- en: 'Methods in the Interpreter class can be overridden to customize the behavior
    of execution. The map of overrideable methods in terms of call hierarchy:'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: Interpreter类中的方法可以被重写以自定义执行行为。在调用层次结构方面，可以重写的方法映射如下：
- en: '[PRE110]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Example
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Suppose we want to swap all instances of `torch.neg` with `torch.sigmoid` and
    vice versa (including their `Tensor` method equivalents). We could subclass Interpreter
    like so:'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要交换所有`torch.neg`的实例与`torch.sigmoid`以及反之（包括它们的`Tensor`方法等效）。我们可以像这样子类化Interpreter：
- en: '[PRE111]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Parameters
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**module** ([*GraphModule*](#torch.fx.GraphModule "torch.fx.GraphModule"))
    – The module to be executed'
  id: totrans-739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**module**（[*GraphModule*](#torch.fx.GraphModule "torch.fx.GraphModule")）-
    要执行的模块'
- en: '**garbage_collect_values** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – Whether to delete values after their last use within the
    Module’s execution. This ensures optimal memory usage during execution. This can
    be disabled to, for example, examine all of the intermediate values in the execution
    by looking at the `Interpreter.env` attribute.'
  id: totrans-740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**garbage_collect_values**（[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.12中)")）- 是否在模块执行后删除值。这可以确保执行期间的最佳内存使用。可以禁用此功能，例如，通过查看`Interpreter.env`属性来检查执行中的所有中间值。'
- en: Note
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: '[PRE112]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Run module via interpretation and return the result. This uses the “boxed” calling
    convention, where you pass a list of arguments, which will be cleared by the interpreter.
    This ensures that input tensors are promptly deallocated.
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解释运行模块并返回结果。这使用“封装”调用约定，您传递一个参数列表，该列表将被解释器清除。这确保输入张量会被及时释放。
- en: Note
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: '[PRE113]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Execute a `call_function` node and return the result.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`call_function`节点并返回结果。
- en: Parameters
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** (*Target*) – The call target for this node. See [Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)
    for details on semantics'
  id: totrans-750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target**（*Target*）- 此节点的调用目标。有关语义的详细信息，请参见[Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)'
- en: '**args** (*Tuple*) – Tuple of positional args for this invocation'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args**（*Tuple*）- 该调用的位置参数元组'
- en: '**kwargs** (*Dict*) – Dict of keyword arguments for this invocation'
  id: totrans-752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs**（*Dict*）- 该调用的关键字参数字典'
- en: Return type
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)")'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(在Python
    v3.12中)")'
- en: Return
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'Any: The value returned by the function invocation'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 任何：函数调用返回的值
- en: Note
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: '[PRE114]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Execute a `call_method` node and return the result.
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`call_method`节点并返回结果。
- en: Parameters
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** (*Target*) – The call target for this node. See [Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)
    for details on semantics'
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target**（*Target*）- 此节点的调用目标。有关语义的详细信息，请参见[Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)'
- en: '**args** (*Tuple*) – Tuple of positional args for this invocation'
  id: totrans-763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args**（*Tuple*）- 该调用的位置参数元组'
- en: '**kwargs** (*Dict*) – Dict of keyword arguments for this invocation'
  id: totrans-764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs**（*Dict*）- 该调用的关键字参数字典'
- en: Return type
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)")'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(在Python
    v3.12中)")'
- en: Return
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'Any: The value returned by the method invocation'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 任何：方法调用返回的值
- en: Note
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
- en: '[PRE115]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Execute a `call_module` node and return the result.
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`call_module`节点并返回结果。
- en: Parameters
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** (*Target*) – The call target for this node. See [Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)
    for details on semantics'
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target**（*Target*）- 此节点的调用目标。有关语义的详细信息，请参见[Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)'
- en: '**args** (*Tuple*) – Tuple of positional args for this invocation'
  id: totrans-775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args**（*Tuple*）- 该调用的位置参数元组'
- en: '**kwargs** (*Dict*) – Dict of keyword arguments for this invocation'
  id: totrans-776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs**（*Dict*）- 该调用的关键字参数字典'
- en: Return type
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)")'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(在Python
    v3.12中)")'
- en: Return
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'Any: The value returned by the module invocation'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 任何：模块调用返回的值
- en: Note
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE116]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Fetch the concrete values of `args` and `kwargs` of node `n` from the current
    execution environment.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 从当前执行环境中获取节点`n`的`args`和`kwargs`的具体值。
- en: Parameters
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**n** ([*Node*](#torch.fx.Node "torch.fx.Node")) – The node for which `args`
    and `kwargs` should be fetched.'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**（[*Node*](#torch.fx.Node "torch.fx.Node")）- 应该获取`args`和`kwargs`的节点。'
- en: Returns
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`args` and `kwargs` with concrete values for `n`.'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 具体值为`n`的`args`和`kwargs`。
- en: Return type
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: Tuple[Tuple, Dict]
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: Tuple[Tuple, Dict]
- en: Note
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE117]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Fetch an attribute from the `Module` hierarchy of `self.module`.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 从`self.module`的`Module`层次结构中提取属性。
- en: Parameters
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – The fully-qualified name of the attribute to fetch'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '**target**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12)")）- 要获取的属性的完全限定名称'
- en: Returns
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The value of the attribute.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 属性的值。
- en: Return type
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: Any
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 任何
- en: Note
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE118]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Execute a `get_attr` node. Will retrieve an attribute value from the `Module`
    hierarchy of `self.module`.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一个`get_attr`节点。将从`self.module`的`Module`层次结构中检索属性值。
- en: Parameters
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** (*Target*) – The call target for this node. See [Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)
    for details on semantics'
  id: totrans-806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target**（*Target*）- 此节点的调用目标。有关语义的详细信息，请参见[Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)'
- en: '**args** (*Tuple*) – Tuple of positional args for this invocation'
  id: totrans-807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args**（*Tuple*）- 用于此调用的位置参数元组'
- en: '**kwargs** (*Dict*) – Dict of keyword arguments for this invocation'
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs**（*Dict*）- 用于此调用的关键字参数字典'
- en: Returns
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The value of the attribute that was retrieved
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 检索到的属性值
- en: Return type
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: Any
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 任何
- en: Note
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE119]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Recursively descend through `args` and look up the concrete value for each `Node`
    in the current execution environment.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 递归地遍历`args`并查找当前执行环境中每个`Node`的具体值。
- en: Parameters
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**args** (*Argument*) – Data structure within which to look up concrete values'
  id: totrans-818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args**（*Argument*）- 用于查找具体值的数据结构'
- en: '**n** ([*Node*](#torch.fx.Node "torch.fx.Node")) – Node to which `args` belongs.
    This is only used for error reporting.'
  id: totrans-819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**n**（[*Node*](#torch.fx.Node "torch.fx.Node")）- `args`所属的节点。仅用于错误报告。'
- en: Return type
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")[[*Union*](https://docs.python.org/3/library/typing.html#typing.Union
    "(in Python v3.12)")[[*Tuple*](https://docs.python.org/3/library/typing.html#typing.Tuple
    "(in Python v3.12)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)"), …], [*List*](https://docs.python.org/3/library/typing.html#typing.List
    "(in Python v3.12)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")], [*Dict*](https://docs.python.org/3/library/typing.html#typing.Dict
    "(in Python v3.12)")[[str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)"), [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")], [slice](https://docs.python.org/3/library/functions.html#slice
    "(in Python v3.12)"), [range](https://docs.python.org/3/library/stdtypes.html#range
    "(in Python v3.12)"), [*Node*](#torch.fx.Node "torch.fx.node.Node"), [str](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)"), [int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)"), [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)"), [bool](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)"), [complex](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.12)"), [*dtype*](tensor_attributes.html#torch.dtype "torch.dtype"),
    [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"), [*device*](tensor_attributes.html#torch.device
    "torch.device"), [*memory_format*](tensor_attributes.html#torch.memory_format
    "torch.memory_format"), [*layout*](tensor_attributes.html#torch.layout "torch.layout"),
    *OpOverload*]]'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(在Python v3.12)")[[*Union*](https://docs.python.org/3/library/typing.html#typing.Union
    "(在Python v3.12)")[[*Tuple*](https://docs.python.org/3/library/typing.html#typing.Tuple
    "(在Python v3.12)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(在Python v3.12)"), …], [*List*](https://docs.python.org/3/library/typing.html#typing.List
    "(在Python v3.12)")[[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(在Python v3.12)")], [*Dict*](https://docs.python.org/3/library/typing.html#typing.Dict
    "(在Python v3.12)")[[str](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12)"), [*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(在Python
    v3.12)")], [slice](https://docs.python.org/3/library/functions.html#slice "(在Python
    v3.12)"), [range](https://docs.python.org/3/library/stdtypes.html#range "(在Python
    v3.12)"), [*Node*](#torch.fx.Node "torch.fx.node.Node"), [str](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12)"), [int](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12)"), [float](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12)"), [bool](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.12)"), [complex](https://docs.python.org/3/library/functions.html#complex
    "(在Python v3.12)"), [*dtype*](tensor_attributes.html#torch.dtype "torch.dtype"),
    [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"), [*device*](tensor_attributes.html#torch.device
    "torch.device"), [*memory_format*](tensor_attributes.html#torch.memory_format
    "torch.memory_format"), [*layout*](tensor_attributes.html#torch.layout "torch.layout"),
    *OpOverload*]]'
- en: Note
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE120]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Execute an `output` node. This really just retrieves the value referenced by
    the `output` node and returns it.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一个`output`节点。这只是检索由`output`节点引用的值并返回它。
- en: Parameters
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** (*Target*) – The call target for this node. See [Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)
    for details on semantics'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target**（*Target*）- 此节点的调用目标。有关语义的详细信息，请参见[Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)'
- en: '**args** (*Tuple*) – Tuple of positional args for this invocation'
  id: totrans-828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args**（*Tuple*）- 用于此调用的位置参数元组'
- en: '**kwargs** (*Dict*) – Dict of keyword arguments for this invocation'
  id: totrans-829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs**（*Dict*）- 用于此调用的关键字参数字典'
- en: Returns
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The return value referenced by the output node
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 由输出节点引用的返回值
- en: Return type
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: Any
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 任何
- en: Note
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE121]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Execute a `placeholder` node. Note that this is stateful: `Interpreter` maintains
    an internal iterator over arguments passed to `run` and this method returns next()
    on that iterator.'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`placeholder`节点。请注意，这是有状态的：`Interpreter`在传递给`run`的参数上维护一个内部迭代器，此方法在该迭代器上返回next()。
- en: Parameters
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** (*Target*) – The call target for this node. See [Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)
    for details on semantics'
  id: totrans-839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target** (*目标*) – 此节点的调用目标。有关语义详情，请参见[Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)'
- en: '**args** (*Tuple*) – Tuple of positional args for this invocation'
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args** (*元组*) – 该调用的位置参数元组'
- en: '**kwargs** (*Dict*) – Dict of keyword arguments for this invocation'
  id: totrans-841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs** (*字典*) – 该调用的关键字参数字典'
- en: Returns
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The argument value that was retrieved.
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 检索到的参数值。
- en: Return type
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: Any
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 任何
- en: Note
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE122]'
  id: totrans-848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Run module via interpretation and return the result.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解释运行模块并返回结果。
- en: Parameters
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '***args** – The arguments to the Module to run, in positional order'
  id: totrans-851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***args** – 要运行的模块的参数，按位置顺序排列'
- en: '**initial_env** (*Optional**[**Dict**[*[*Node*](#torch.fx.Node "torch.fx.Node")*,*
    *Any**]**]*) – An optional starting environment for execution. This is a dict
    mapping Node to any value. This can be used, for example, to pre-populate results
    for certain Nodes so as to do only partial evaluation within the interpreter.'
  id: totrans-852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**initial_env** (*可选**[**字典**[*[*Node*](#torch.fx.Node "torch.fx.Node")*,*
    *任何**]***) – 执行的可选起始环境。这是一个将节点映射到任何值的字典。例如，可以用来预先填充某些节点的结果，以便在解释器中仅进行部分评估。'
- en: '**enable_io_processing** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If true, we process the inputs and outputs with graph’s
    process_inputs and process_outputs function first before using them.'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**enable_io_processing** ([*布尔*](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.12中)")) – 如果为真，则在使用它们之前，我们首先使用图的process_inputs和process_outputs函数处理输入和输出。'
- en: Returns
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The value returned from executing the Module
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 执行模块后返回的值
- en: Return type
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: Any
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 任何
- en: Note
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE123]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Run a specific node `n` and return the result. Calls into placeholder, get_attr,
    call_function, call_method, call_module, or output depending on `node.op`
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 运行特定节点`n`并返回结果。根据`node.op`调用占位符、get_attr、call_function、call_method、call_module或输出
- en: Parameters
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**n** ([*Node*](#torch.fx.Node "torch.fx.Node")) – The Node to execute'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: '**n** ([*Node*](#torch.fx.Node "torch.fx.Node")) – 要执行的节点'
- en: Returns
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: The result of executing `n`
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`n`的结果
- en: Return type
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: Any
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 任何
- en: Note
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE124]'
  id: totrans-870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '`Transformer` is a special type of interpreter that produces a new `Module`.
    It exposes a `transform()` method that returns the transformed `Module`. `Transformer`
    does not require arguments to run, as `Interpreter` does. `Transformer` works
    entirely symbolically.'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transformer`是一种特殊类型的解释器，它生成一个新的`Module`。它公开了一个返回转换后`Module`的`transform()`方法。`Transformer`不需要参数来运行，而`Interpreter`需要。`Transformer`完全以符号方式工作。'
- en: Example
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Suppose we want to swap all instances of `torch.neg` with `torch.sigmoid` and
    vice versa (including their `Tensor` method equivalents). We could subclass `Transformer`
    like so:'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要将所有`torch.neg`的实例与`torch.sigmoid`互换，反之亦然（包括它们的`Tensor`方法等效）。我们可以像这样子类化`Transformer`：
- en: '[PRE125]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Parameters
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**module** ([*GraphModule*](#torch.fx.GraphModule "torch.fx.GraphModule"))
    – The `Module` to be transformed.'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '**module** ([*GraphModule*](#torch.fx.GraphModule "torch.fx.GraphModule"))
    – 要转换的`Module`。'
- en: Note
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE126]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Note
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: Return type
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)")'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: '[*任何*](https://docs.python.org/3/library/typing.html#typing.Any "(在Python v3.12中)")'
- en: '[PRE127]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Note
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: Return type
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)")'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '[*任何*](https://docs.python.org/3/library/typing.html#typing.Any "(在Python v3.12中)")'
- en: '[PRE128]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Execute a `get_attr` node. In `Transformer`, this is overridden to insert a
    new `get_attr` node into the output graph.
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`get_attr`节点。在`Transformer`中，这被重写为将一个新的`get_attr`节点插入输出图中。
- en: Parameters
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** (*Target*) – The call target for this node. See [Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)
    for details on semantics'
  id: totrans-892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target** (*目标*) – 此节点的调用目标。有关语义详情，请参见[Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)'
- en: '**args** (*Tuple*) – Tuple of positional args for this invocation'
  id: totrans-893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args** (*元组*) – 该调用的位置参数元组'
- en: '**kwargs** (*Dict*) – Dict of keyword arguments for this invocation'
  id: totrans-894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs** (*字典*) – 该调用的关键字参数字典'
- en: Return type
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Proxy*](#torch.fx.Proxy "torch.fx.proxy.Proxy")'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: '[*代理*](#torch.fx.Proxy "torch.fx.proxy.Proxy")'
- en: Note
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE129]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Execute a `placeholder` node. In `Transformer`, this is overridden to insert
    a new `placeholder` into the output graph.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`placeholder`节点。在`Transformer`中，这被重写为将一个新的`placeholder`插入输出图中。
- en: Parameters
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**target** (*Target*) – The call target for this node. See [Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)
    for details on semantics'
  id: totrans-902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target** (*目标*) – 此节点的调用目标。有关语义详情，请参见[Node](https://pytorch.org/docs/master/fx.html#torch.fx.Node)'
- en: '**args** (*Tuple*) – Tuple of positional args for this invocation'
  id: totrans-903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args** (*元组*) – 该调用的位置参数元组'
- en: '**kwargs** (*Dict*) – Dict of keyword arguments for this invocation'
  id: totrans-904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs** (*字典*) – 该调用的关键字参数字典'
- en: Return type
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Proxy*](#torch.fx.Proxy "torch.fx.proxy.Proxy")'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '[*代理*](#torch.fx.Proxy "torch.fx.proxy.Proxy")'
- en: Note
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: '[PRE130]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Transform `self.module` and return the transformed `GraphModule`.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 转换`self.module`并返回转换后的`GraphModule`。
- en: Note
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性已得到保证。
- en: Return type
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*GraphModule*](#torch.fx.GraphModule "torch.fx.graph_module.GraphModule")'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: '[*GraphModule*](#torch.fx.GraphModule "torch.fx.graph_module.GraphModule")'
- en: '[PRE131]'
  id: totrans-915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Matches all possible non-overlapping sets of operators and their data dependencies
    (`pattern`) in the Graph of a GraphModule (`gm`), then replaces each of these
    matched subgraphs with another subgraph (`replacement`).
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 在GraphModule（`gm`）的图中匹配所有可能的非重叠运算符及其数据依赖关系（`pattern`），然后用另一个子图（`replacement`）替换这些匹配的子图。
- en: Parameters
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**gm** ([*GraphModule*](#torch.fx.GraphModule "torch.fx.graph_module.GraphModule"))
    – The GraphModule that wraps the Graph to operate on'
  id: totrans-918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gm** ([*GraphModule*](#torch.fx.GraphModule "torch.fx.graph_module.GraphModule"))
    – 包装要操作的图的GraphModule'
- en: '**pattern** ([*Union*](https://docs.python.org/3/library/typing.html#typing.Union
    "(in Python v3.12)")*[*[*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*,* [*GraphModule*](#torch.fx.GraphModule "torch.fx.graph_module.GraphModule")*]*)
    – The subgraph to match in `gm` for replacement'
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pattern** ([*Union*](https://docs.python.org/3/library/typing.html#typing.Union
    "(在Python v3.12中)")*[*[*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(在Python v3.12中)")*,* [*GraphModule*](#torch.fx.GraphModule "torch.fx.graph_module.GraphModule")*]*)
    – 要在`gm`中匹配以进行替换的子图'
- en: '**replacement** ([*Union*](https://docs.python.org/3/library/typing.html#typing.Union
    "(in Python v3.12)")*[*[*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*,* [*GraphModule*](#torch.fx.GraphModule "torch.fx.graph_module.GraphModule")*]*)
    – The subgraph to replace `pattern` with'
  id: totrans-920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**replacement** ([*Union*](https://docs.python.org/3/library/typing.html#typing.Union
    "(在Python v3.12中)")*[*[*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(在Python v3.12中)")*,* [*GraphModule*](#torch.fx.GraphModule "torch.fx.graph_module.GraphModule")*]*)
    – 用于替换`pattern`的子图'
- en: Returns
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'A list of `Match` objects representing the places in the original graph that
    `pattern` was matched to. The list is empty if there are no matches. `Match` is
    defined as:'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表示`pattern`在原始图中匹配的位置的`Match`对象列表。如果没有匹配项，则列表为空。`Match`被定义为：
- en: '[PRE132]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Return type
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: List[Match]
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: List[Match]
- en: 'Examples:'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE133]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: The above code will first match `pattern` in the `forward` method of `traced_module`.
    Pattern-matching is done based on use-def relationships, not node names. For example,
    if you had `p = torch.cat([a, b])` in `pattern`, you could match `m = torch.cat([a,
    b])` in the original `forward` function, despite the variable names being different
    (`p` vs `m`).
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将首先在`traced_module`的`forward`方法中匹配`pattern`。模式匹配是基于使用-def关系而不是节点名称的。例如，如果在`pattern`中有`p
    = torch.cat([a, b])`，则可以在原始`forward`函数中匹配`m = torch.cat([a, b])`，尽管变量名称不同（`p`与`m`）。
- en: The `return` statement in `pattern` is matched based on its value only; it may
    or may not match to the `return` statement in the larger graph. In other words,
    the pattern doesn’t have to extend to the end of the larger graph.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: '`pattern`中的`return`语句仅基于其值匹配；它可能匹配也可能不匹配较大图中的`return`语句。换句话说，模式不必延伸到较大图的末尾。'
- en: When the pattern is matched, it will be removed from the larger function and
    replaced by `replacement`. If there are multiple matches for `pattern` in the
    larger function, each non-overlapping match will be replaced. In the case of a
    match overlap, the first found match in the set of overlapping matches will be
    replaced. (“First” here being defined as the first in a topological ordering of
    the Nodes’ use-def relationships. In most cases, the first Node is the parameter
    that appears directly after `self`, while the last Node is whatever the function
    returns.)
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 当匹配模式时，它将从较大函数中移除，并被`replacement`替换。如果在较大函数中有多个`pattern`的匹配项，每个不重叠的匹配项将被替换。在匹配重叠的情况下，将替换在重叠匹配集中找到的第一个匹配项。（这里的“第一个”被定义为节点使用-def关系的拓扑排序中的第一个。在大多数情况下，第一个节点是直接在`self`之后出现的参数，而最后一个节点是函数返回的内容。）
- en: One important thing to note is that the parameters of the `pattern` Callable
    must be used in the Callable itself, and the parameters of the `replacement` Callable
    must match the pattern. The first rule is why, in the above code block, the `forward`
    function has parameters `x, w1, w2`, but the `pattern` function only has parameters
    `w1, w2`. `pattern` doesn’t use `x`, so it shouldn’t specify `x` as a parameter.
    As an example of the second rule, consider replacing
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的事情要注意的是`pattern` Callable的参数必须在Callable本身中使用，而`replacement` Callable的参数必须与模式匹配。第一个规则是为什么在上面的代码块中，`forward`函数具有参数`x,
    w1, w2`，但`pattern`函数只有参数`w1, w2`。`pattern`不使用`x`，所以不应该将`x`指定为参数。作为第二条规则的示例，考虑替换
- en: '[PRE134]'
  id: totrans-932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: with
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 与
- en: '[PRE135]'
  id: totrans-934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: In this case, `replacement` needs the same number of parameters as `pattern`
    (both `x` and `y`), even though the parameter `y` isn’t used in `replacement`.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`replacement`需要与`pattern`（`x`和`y`）具有相同数量的参数，即使`replacement`中没有使用参数`y`。
- en: 'After calling `subgraph_rewriter.replace_pattern`, the generated Python code
    looks like this:'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`subgraph_rewriter.replace_pattern`后，生成的Python代码如下：
- en: '[PRE136]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Note
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Backwards-compatibility for this API is guaranteed.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 此API的向后兼容性是有保证的。
