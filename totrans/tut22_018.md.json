["```py\n# %matplotlib inline\n\nimport torch\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport math \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.linspace](https://pytorch.org/docs/stable/generated/torch.linspace.html#torch.linspace \"torch.linspace\")(0., 2. * math.pi, steps=25, requires_grad=True)\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([0.0000, 0.2618, 0.5236, 0.7854, 1.0472, 1.3090, 1.5708, 1.8326, 2.0944,\n        2.3562, 2.6180, 2.8798, 3.1416, 3.4034, 3.6652, 3.9270, 4.1888, 4.4506,\n        4.7124, 4.9742, 5.2360, 5.4978, 5.7596, 6.0214, 6.2832],\n       requires_grad=True) \n```", "```py\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.sin](https://pytorch.org/docs/stable/generated/torch.sin.html#torch.sin \"torch.sin\")([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nplt.plot([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").detach(), [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").detach()) \n```", "```py\n[<matplotlib.lines.Line2D object at 0x7f7f4ccf6f50>] \n```", "```py\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([ 0.0000e+00,  2.5882e-01,  5.0000e-01,  7.0711e-01,  8.6603e-01,\n         9.6593e-01,  1.0000e+00,  9.6593e-01,  8.6603e-01,  7.0711e-01,\n         5.0000e-01,  2.5882e-01, -8.7423e-08, -2.5882e-01, -5.0000e-01,\n        -7.0711e-01, -8.6603e-01, -9.6593e-01, -1.0000e+00, -9.6593e-01,\n        -8.6603e-01, -7.0711e-01, -5.0000e-01, -2.5882e-01,  1.7485e-07],\n       grad_fn=<SinBackward0>) \n```", "```py\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = 2 * [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + 1\nprint([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([ 0.0000e+00,  5.1764e-01,  1.0000e+00,  1.4142e+00,  1.7321e+00,\n         1.9319e+00,  2.0000e+00,  1.9319e+00,  1.7321e+00,  1.4142e+00,\n         1.0000e+00,  5.1764e-01, -1.7485e-07, -5.1764e-01, -1.0000e+00,\n        -1.4142e+00, -1.7321e+00, -1.9319e+00, -2.0000e+00, -1.9319e+00,\n        -1.7321e+00, -1.4142e+00, -1.0000e+00, -5.1764e-01,  3.4969e-07],\n       grad_fn=<MulBackward0>)\ntensor([ 1.0000e+00,  1.5176e+00,  2.0000e+00,  2.4142e+00,  2.7321e+00,\n         2.9319e+00,  3.0000e+00,  2.9319e+00,  2.7321e+00,  2.4142e+00,\n         2.0000e+00,  1.5176e+00,  1.0000e+00,  4.8236e-01, -3.5763e-07,\n        -4.1421e-01, -7.3205e-01, -9.3185e-01, -1.0000e+00, -9.3185e-01,\n        -7.3205e-01, -4.1421e-01,  4.7684e-07,  4.8236e-01,  1.0000e+00],\n       grad_fn=<AddBackward0>) \n```", "```py\n[out](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").sum()\nprint([out](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor(25., grad_fn=<SumBackward0>) \n```", "```py\nprint('d:')\nprint([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad_fn)\nprint([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad_fn.next_functions)\nprint([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad_fn.next_functions[0][0].next_functions)\nprint([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad_fn.next_functions[0][0].next_functions[0][0].next_functions)\nprint([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad_fn.next_functions[0][0].next_functions[0][0].next_functions[0][0].next_functions)\nprint('\\nc:')\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad_fn)\nprint('\\nb:')\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad_fn)\nprint('\\na:')\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad_fn) \n```", "```py\nd:\n<AddBackward0 object at 0x7f7f4ccf6ef0>\n((<MulBackward0 object at 0x7f7f2c9c6650>, 0), (None, 0))\n((<SinBackward0 object at 0x7f7f4ccf6ef0>, 0), (None, 0))\n((<AccumulateGrad object at 0x7f7f2c9c6650>, 0),)\n()\n\nc:\n<MulBackward0 object at 0x7f7f4ccf6ef0>\n\nb:\n<SinBackward0 object at 0x7f7f4ccf6ef0>\n\na:\nNone \n```", "```py\n[out.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad)\nplt.plot([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").detach(), [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad.detach()) \n```", "```py\ntensor([ 2.0000e+00,  1.9319e+00,  1.7321e+00,  1.4142e+00,  1.0000e+00,\n         5.1764e-01, -8.7423e-08, -5.1764e-01, -1.0000e+00, -1.4142e+00,\n        -1.7321e+00, -1.9319e+00, -2.0000e+00, -1.9319e+00, -1.7321e+00,\n        -1.4142e+00, -1.0000e+00, -5.1764e-01,  2.3850e-08,  5.1764e-01,\n         1.0000e+00,  1.4142e+00,  1.7321e+00,  1.9319e+00,  2.0000e+00])\n\n[<matplotlib.lines.Line2D object at 0x7f7f4cd6aa40>] \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.linspace](https://pytorch.org/docs/stable/generated/torch.linspace.html#torch.linspace \"torch.linspace\")(0., 2. * math.pi, steps=25, requires_grad=True)\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.sin](https://pytorch.org/docs/stable/generated/torch.sin.html#torch.sin \"torch.sin\")([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = 2 * [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n[d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + 1\n[out](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").sum() \n```", "```py\nBATCH_SIZE = 16\nDIM_IN = 1000\nHIDDEN_SIZE = 100\nDIM_OUT = 10\n\nclass TinyModel([torch.nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n\n    def __init__(self):\n        super([TinyModel](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n\n        self.layer1 = [torch.nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(1000, 100)\n        self.relu = [torch.nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")()\n        self.layer2 = [torch.nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(100, 10)\n\n    def forward(self, [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = self.layer1([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = self.relu([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = self.layer2([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        return [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\n[some_input](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(BATCH_SIZE, DIM_IN, requires_grad=False)\n[ideal_output](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(BATCH_SIZE, DIM_OUT, requires_grad=False)\n\nmodel = [TinyModel](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")() \n```", "```py\nprint([model.layer2.weight](https://pytorch.org/docs/stable/generated/torch.nn.parameter.Parameter.html#torch.nn.parameter.Parameter \"torch.nn.parameter.Parameter\")[0][0:10]) # just a small slice\nprint([model.layer2.weight.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([ 0.0920,  0.0916,  0.0121,  0.0083, -0.0055,  0.0367,  0.0221, -0.0276,\n        -0.0086,  0.0157], grad_fn=<SliceBackward0>)\nNone \n```", "```py\n[optimizer](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = [torch.optim.SGD](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")([model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(), lr=0.001)\n\n[prediction](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = model([some_input](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = ([ideal_output](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") - [prediction](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")).pow(2).sum()\nprint([loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor(211.2634, grad_fn=<SumBackward0>) \n```", "```py\n[loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\nprint([model.layer2.weight](https://pytorch.org/docs/stable/generated/torch.nn.parameter.Parameter.html#torch.nn.parameter.Parameter \"torch.nn.parameter.Parameter\")[0][0:10])\nprint([model.layer2.weight.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0][0:10]) \n```", "```py\ntensor([ 0.0920,  0.0916,  0.0121,  0.0083, -0.0055,  0.0367,  0.0221, -0.0276,\n        -0.0086,  0.0157], grad_fn=<SliceBackward0>)\ntensor([12.8997,  2.9572,  2.3021,  1.8887,  5.0710,  7.3192,  3.5169,  2.4319,\n         0.1732, -5.3835]) \n```", "```py\n[optimizer.step](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.step \"torch.optim.SGD.step\")()\nprint([model.layer2.weight](https://pytorch.org/docs/stable/generated/torch.nn.parameter.Parameter.html#torch.nn.parameter.Parameter \"torch.nn.parameter.Parameter\")[0][0:10])\nprint([model.layer2.weight.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0][0:10]) \n```", "```py\ntensor([ 0.0791,  0.0886,  0.0098,  0.0064, -0.0106,  0.0293,  0.0186, -0.0300,\n        -0.0088,  0.0211], grad_fn=<SliceBackward0>)\ntensor([12.8997,  2.9572,  2.3021,  1.8887,  5.0710,  7.3192,  3.5169,  2.4319,\n         0.1732, -5.3835]) \n```", "```py\nprint([model.layer2.weight.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0][0:10])\n\nfor i in range(0, 5):\n    [prediction](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = model([some_input](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n    [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = ([ideal_output](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") - [prediction](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")).pow(2).sum()\n    [loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\n\nprint([model.layer2.weight.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0][0:10])\n\n[optimizer.zero_grad](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.zero_grad \"torch.optim.SGD.zero_grad\")(set_to_none=False)\n\nprint([model.layer2.weight.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0][0:10]) \n```", "```py\ntensor([12.8997,  2.9572,  2.3021,  1.8887,  5.0710,  7.3192,  3.5169,  2.4319,\n         0.1732, -5.3835])\ntensor([ 19.2095, -15.9459,   8.3306,  11.5096,   9.5471,   0.5391,  -0.3370,\n          8.6386,  -2.5141, -30.1419])\ntensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 3, requires_grad=True)\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[b1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = 2 * [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\nprint([b1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").requires_grad = False\n[b2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = 2 * [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\nprint([b2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[1., 1., 1.],\n        [1., 1., 1.]], requires_grad=True)\ntensor([[2., 2., 2.],\n        [2., 2., 2.]], grad_fn=<MulBackward0>)\ntensor([[2., 2., 2.],\n        [2., 2., 2.]]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 3, requires_grad=True) * 2\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 3, requires_grad=True) * 3\n\n[c1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\nprint([c1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\nwith [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n    [c2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\nprint([c2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[c3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\nprint([c3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[5., 5., 5.],\n        [5., 5., 5.]], grad_fn=<AddBackward0>)\ntensor([[5., 5., 5.],\n        [5., 5., 5.]])\ntensor([[6., 6., 6.],\n        [6., 6., 6.]], grad_fn=<MulBackward0>) \n```", "```py\ndef add_tensors1([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    return [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\n@torch.no_grad()\ndef add_tensors2([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    return [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 3, requires_grad=True) * 2\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 3, requires_grad=True) * 3\n\n[c1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = add_tensors1([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([c1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[c2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = add_tensors2([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([c2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[5., 5., 5.],\n        [5., 5., 5.]], grad_fn=<AddBackward0>)\ntensor([[5., 5., 5.],\n        [5., 5., 5.]]) \n```", "```py\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(5, requires_grad=True)\n[y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").detach()\n\nprint([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([0.0670, 0.3890, 0.7264, 0.3559, 0.6584], requires_grad=True)\ntensor([0.0670, 0.3890, 0.7264, 0.3559, 0.6584]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.linspace](https://pytorch.org/docs/stable/generated/torch.linspace.html#torch.linspace \"torch.linspace\")(0., 2. * math.pi, steps=25, requires_grad=True)\ntorch.sin_([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n[device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\") = [torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")('cpu')\nrun_on_gpu = False\nif [torch.cuda.is_available](https://pytorch.org/docs/stable/generated/torch.cuda.is_available.html#torch.cuda.is_available \"torch.cuda.is_available\")():\n    [device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\") = [torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")('cuda')\n    run_on_gpu = True\n\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(2, 3, requires_grad=True)\n[y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 3, requires_grad=True)\n[z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 3, requires_grad=True)\n\nwith [torch.autograd.profiler.profile](https://pytorch.org/docs/stable/autograd.html#torch.autograd.profiler.profile \"torch.autograd.profiler.profile\")(use_cuda=run_on_gpu) as [prf](https://pytorch.org/docs/stable/autograd.html#torch.autograd.profiler.profile \"torch.autograd.profiler.profile\"):\n    for _ in range(1000):\n        [z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = ([z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") / [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) * [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\nprint([prf.key_averages](https://pytorch.org/docs/stable/generated/torch.autograd.profiler.profile.key_averages.html#torch.autograd.profiler.profile.key_averages \"torch.autograd.profiler.profile.key_averages\")().table(sort_by='self_cpu_time_total')) \n```", "```py\n-------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------\n                     Name    Self CPU %      Self CPU   CPU total %     CPU total  CPU time avg     Self CUDA   Self CUDA %    CUDA total  CUDA time avg    # of Calls\n-------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------\n          cudaEventRecord        43.53%       8.673ms        43.53%       8.673ms       2.168us       0.000us         0.00%       0.000us       0.000us          4000\n                aten::div        28.70%       5.719ms        28.70%       5.719ms       5.719us      16.108ms        50.04%      16.108ms      16.108us          1000\n                aten::mul        27.69%       5.518ms        27.69%       5.518ms       5.518us      16.083ms        49.96%      16.083ms      16.083us          1000\n    cudaDeviceSynchronize         0.08%      15.000us         0.08%      15.000us      15.000us       0.000us         0.00%       0.000us       0.000us             1\n-------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------\nSelf CPU time total: 19.925ms\nSelf CUDA time total: 32.191ms \n```", "```py\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(3, requires_grad=True)\n\n[y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * 2\nwhile [y.data.norm](https://pytorch.org/docs/stable/generated/torch.Tensor.norm.html#torch.Tensor.norm \"torch.Tensor.norm\")() < 1000:\n    [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * 2\n\nprint([y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([  299.4868,   425.4009, -1082.9885], grad_fn=<MulBackward0>) \n```", "```py\n[v](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([0.1, 1.0, 0.0001], dtype=[torch.float](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\")) # stand-in for gradients\n[y.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")([v](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\nprint([x.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([1.0240e+02, 1.0240e+03, 1.0240e-01]) \n```", "```py\ndef exp_adder([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    return 2 * [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").exp() + 3 * [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\n[inputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = ([torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(1), [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(1)) # arguments for the function\nprint([inputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[torch.autograd.functional.jacobian](https://pytorch.org/docs/stable/generated/torch.autograd.functional.jacobian.html#torch.autograd.functional.jacobian \"torch.autograd.functional.jacobian\")(exp_adder, [inputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n(tensor([0.7212]), tensor([0.2079]))\n\n(tensor([[4.1137]]), tensor([[3.]])) \n```", "```py\n[inputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = ([torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3), [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3)) # arguments for the function\nprint([inputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[torch.autograd.functional.jacobian](https://pytorch.org/docs/stable/generated/torch.autograd.functional.jacobian.html#torch.autograd.functional.jacobian \"torch.autograd.functional.jacobian\")(exp_adder, [inputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n(tensor([0.2080, 0.2604, 0.4415]), tensor([0.5220, 0.9867, 0.4288]))\n\n(tensor([[2.4623, 0.0000, 0.0000],\n        [0.0000, 2.5950, 0.0000],\n        [0.0000, 0.0000, 3.1102]]), tensor([[3., 0., 0.],\n        [0., 3., 0.],\n        [0., 0., 3.]])) \n```", "```py\ndef do_some_doubling([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * 2\n    while [y.data.norm](https://pytorch.org/docs/stable/generated/torch.Tensor.norm.html#torch.Tensor.norm \"torch.Tensor.norm\")() < 1000:\n        [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * 2\n    return [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\n[inputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(3)\n[my_gradients](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([0.1, 1.0, 0.0001])\n[torch.autograd.functional.vjp](https://pytorch.org/docs/stable/generated/torch.autograd.functional.vjp.html#torch.autograd.functional.vjp \"torch.autograd.functional.vjp\")(do_some_doubling, [inputs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [v](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")=[my_gradients](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n(tensor([-665.7186, -866.7054,  -58.4194]), tensor([1.0240e+02, 1.0240e+03, 1.0240e-01])) \n```"]