["```py\nfrom pathlib import Path\nimport requests\n\nDATA_PATH = Path(\"data\")\nPATH = DATA_PATH / \"mnist\"\n\nPATH.mkdir(parents=True, exist_ok=True)\n\nURL = \"https://github.com/pytorch/tutorials/raw/main/_static/\"\nFILENAME = \"mnist.pkl.gz\"\n\nif not (PATH / FILENAME).exists():\n        content = requests.get(URL + FILENAME).content\n        (PATH / FILENAME).open(\"wb\").write(content) \n```", "```py\nimport pickle\nimport gzip\n\nwith gzip.open((PATH / FILENAME).as_posix(), \"rb\") as f:\n        (([x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), ([x_valid](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_valid](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), _) = pickle.load(f, encoding=\"latin-1\") \n```", "```py\nfrom matplotlib import pyplot\nimport numpy as np\n\npyplot.imshow([x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0].reshape((28, 28)), cmap=\"gray\")\n# ``pyplot.show()`` only if not on Colab\ntry:\n    import google.colab\nexcept ImportError:\n    pyplot.show()\nprint([x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape) \n```", "```py\n(50000, 784) \n```", "```py\nimport torch\n\n[x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x_valid](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_valid](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = map(\n    [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\"), ([x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x_valid](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_valid](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n)\nn, c = [x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape\nprint([x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").min(), [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").max()) \n```", "```py\ntensor([[0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.]]) tensor([5, 0, 4,  ..., 8, 4, 8])\ntorch.Size([50000, 784])\ntensor(0) tensor(9) \n```", "```py\nimport math\n\n[weights](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(784, 10) / math.sqrt(784)\n[weights](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").requires_grad_()\n[bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")(10, requires_grad=True) \n```", "```py\ndef log_softmax(x):\n    return x - x.exp().sum(-1).log().unsqueeze(-1)\n\ndef model([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    return log_softmax([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") @ [weights](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nbs = 64  # batch size\n\n[xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:bs]  # a mini-batch from x\n[preds](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))  # predictions\n[preds](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], [preds](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape\nprint([preds](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], [preds](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape) \n```", "```py\ntensor([-2.5452, -2.0790, -2.1832, -2.6221, -2.3670, -2.3854, -2.9432, -2.4391,\n        -1.8657, -2.0355], grad_fn=<SelectBackward0>) torch.Size([64, 10]) \n```", "```py\ndef nll(input, target):\n    return -input[range(target.shape[0]), target].mean()\n\nloss_func = nll \n```", "```py\n[yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:bs]\nprint(loss_func([preds](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(2.4020, grad_fn=<NegBackward0>) \n```", "```py\ndef accuracy(out, [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    [preds](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.argmax](https://pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax \"torch.argmax\")(out, dim=1)\n    return ([preds](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") == [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")).float().mean() \n```", "```py\nprint(accuracy([preds](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(0.0938) \n```", "```py\nfrom IPython.core.debugger import set_trace\n\nlr = 0.5  # learning rate\nepochs = 2  # how many epochs to train for\n\nfor epoch in range(epochs):\n    for i in range((n - 1) // bs + 1):\n        #         set_trace()\n        start_i = i * bs\n        end_i = start_i + bs\n        [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[start_i:end_i]\n        [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[start_i:end_i]\n        [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = loss_func([pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n        [loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\n        with [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n            [weights](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") -= [weights.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * lr\n            [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") -= [bias.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * lr\n            [weights.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").zero_()\n            [bias.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").zero_() \n```", "```py\nprint(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), accuracy([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(0.0813, grad_fn=<NegBackward0>) tensor(1.) \n```", "```py\nimport torch.nn.functional as F\n\nloss_func = [F.cross_entropy](https://pytorch.org/docs/stable/generated/torch.nn.functional.cross_entropy.html#torch.nn.functional.cross_entropy \"torch.nn.functional.cross_entropy\")\n\ndef model([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    return [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") @ [weights](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") \n```", "```py\nprint(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), accuracy([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(0.0813, grad_fn=<NllLossBackward0>) tensor(1.) \n```", "```py\nfrom torch import nn\n\nclass Mnist_Logistic([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super().__init__()\n        self.[weights](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [nn.Parameter](https://pytorch.org/docs/stable/generated/torch.nn.parameter.Parameter.html#torch.nn.parameter.Parameter \"torch.nn.parameter.Parameter\")([torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(784, 10) / math.sqrt(784))\n        self.[bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [nn.Parameter](https://pytorch.org/docs/stable/generated/torch.nn.parameter.Parameter.html#torch.nn.parameter.Parameter \"torch.nn.parameter.Parameter\")([torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")(10))\n\n    def forward(self, [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        return [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") @ self.[weights](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + self.[bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") \n```", "```py\n[model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\") = [Mnist_Logistic](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")() \n```", "```py\nprint(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(2.3096, grad_fn=<NllLossBackward0>) \n```", "```py\nwith [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n    [weights](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") -= [weights.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * lr\n    [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") -= [bias.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * lr\n    [weights.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").zero_()\n    [bias.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").zero_() \n```", "```py\nwith [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n    for p in [model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(): p -= p.grad * lr\n    [model.zero_grad](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.zero_grad \"torch.nn.Module.zero_grad\")() \n```", "```py\ndef fit():\n    for epoch in range(epochs):\n        for i in range((n - 1) // bs + 1):\n            start_i = i * bs\n            end_i = start_i + bs\n            [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[start_i:end_i]\n            [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[start_i:end_i]\n            [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n            [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = loss_func([pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n            [loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\n            with [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n                for p in [model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")():\n                    p -= p.grad * lr\n                [model.zero_grad](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.zero_grad \"torch.nn.Module.zero_grad\")()\n\nfit() \n```", "```py\nprint(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(0.0821, grad_fn=<NllLossBackward0>) \n```", "```py\nclass Mnist_Logistic([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super().__init__()\n        self.lin = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(784, 10)\n\n    def forward(self, [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        return self.lin([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n[model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\") = [Mnist_Logistic](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\nprint(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(2.3313, grad_fn=<NllLossBackward0>) \n```", "```py\nfit()\n\nprint(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(0.0819, grad_fn=<NllLossBackward0>) \n```", "```py\nwith [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n    for p in [model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(): p -= p.grad * lr\n    [model.zero_grad](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.zero_grad \"torch.nn.Module.zero_grad\")() \n```", "```py\n[opt.step](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.step \"torch.optim.SGD.step\")()\n[opt.zero_grad](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.zero_grad \"torch.optim.SGD.zero_grad\")() \n```", "```py\nfrom torch import optim \n```", "```py\ndef get_model():\n    [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\") = [Mnist_Logistic](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\n    return [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), [optim.SGD](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")([model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(), lr=lr)\n\n[model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = get_model()\nprint(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n\nfor epoch in range(epochs):\n    for i in range((n - 1) // bs + 1):\n        start_i = i * bs\n        end_i = start_i + bs\n        [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[start_i:end_i]\n        [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[start_i:end_i]\n        [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = loss_func([pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n        [loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\n        [opt.step](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.step \"torch.optim.SGD.step\")()\n        [opt.zero_grad](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.zero_grad \"torch.optim.SGD.zero_grad\")()\n\nprint(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(2.2659, grad_fn=<NllLossBackward0>)\ntensor(0.0810, grad_fn=<NllLossBackward0>) \n```", "```py\nfrom torch.utils.data import [TensorDataset](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\") \n```", "```py\n[train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\") = [TensorDataset](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\")([x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n[xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[start_i:end_i]\n[yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[start_i:end_i] \n```", "```py\n[xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"),[yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\")[i*bs : i*bs+bs] \n```", "```py\n[model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = get_model()\n\nfor epoch in range(epochs):\n    for i in range((n - 1) // bs + 1):\n        [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\")[i * bs: i * bs + bs]\n        [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = loss_func([pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n        [loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\n        [opt.step](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.step \"torch.optim.SGD.step\")()\n        [opt.zero_grad](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.zero_grad \"torch.optim.SGD.zero_grad\")()\n\nprint(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(0.0826, grad_fn=<NllLossBackward0>) \n```", "```py\nfrom torch.utils.data import [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")\n\n[train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\") = [TensorDataset](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\")([x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\ntrain_dl = [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")([train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), batch_size=bs) \n```", "```py\nfor i in range((n-1)//bs + 1):\n    [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"),[yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\")[i*bs : i*bs+bs]\n    [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nfor [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"),[yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") in train_dl:\n    [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n[model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = get_model()\n\nfor epoch in range(epochs):\n    for [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") in train_dl:\n        [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = loss_func([pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n        [loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\n        [opt.step](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.step \"torch.optim.SGD.step\")()\n        [opt.zero_grad](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.zero_grad \"torch.optim.SGD.zero_grad\")()\n\nprint(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) \n```", "```py\ntensor(0.0818, grad_fn=<NllLossBackward0>) \n```", "```py\n[train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\") = [TensorDataset](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\")([x_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_train](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\ntrain_dl = [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")([train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), batch_size=bs, shuffle=True)\n\n[valid_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\") = [TensorDataset](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\")([x_valid](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y_valid](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nvalid_dl = [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")([valid_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), batch_size=bs * 2) \n```", "```py\n[model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = get_model()\n\nfor epoch in range(epochs):\n    [model.train](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.train \"torch.nn.Module.train\")()\n    for [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") in train_dl:\n        [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = loss_func([pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n        [loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\n        [opt.step](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.step \"torch.optim.SGD.step\")()\n        [opt.zero_grad](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.zero_grad \"torch.optim.SGD.zero_grad\")()\n\n    [model.eval](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.eval \"torch.nn.Module.eval\")()\n    with [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n        [valid_loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = sum(loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) for [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") in valid_dl)\n\n    print(epoch, [valid_loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") / len(valid_dl)) \n```", "```py\n0 tensor(0.3048)\n1 tensor(0.2872) \n```", "```py\ndef loss_batch([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), loss_func, [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")=None):\n    [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = loss_func([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n    if [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") is not None:\n        [loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\n        [opt.step](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.step \"torch.optim.SGD.step\")()\n        [opt.zero_grad](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.zero_grad \"torch.optim.SGD.zero_grad\")()\n\n    return [loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").item(), len([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nimport numpy as np\n\ndef fit(epochs, [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), loss_func, [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\"), train_dl, valid_dl):\n    for epoch in range(epochs):\n        [model.train](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.train \"torch.nn.Module.train\")()\n        for [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") in train_dl:\n            loss_batch([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), loss_func, [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\"))\n\n        [model.eval](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.eval \"torch.nn.Module.eval\")()\n        with [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n            losses, nums = zip(\n                *[loss_batch([model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), loss_func, [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) for [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [yb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") in valid_dl]\n            )\n        val_loss = np.sum(np.multiply(losses, nums)) / np.sum(nums)\n\n        print(epoch, val_loss) \n```", "```py\ndef get_data([train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), [valid_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), bs):\n    return (\n        [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")([train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), batch_size=bs, shuffle=True),\n        [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")([valid_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), batch_size=bs * 2),\n    ) \n```", "```py\ntrain_dl, valid_dl = get_data([train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), [valid_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), bs)\n[model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = get_model()\nfit(epochs, [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), loss_func, [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\"), train_dl, valid_dl) \n```", "```py\n0 0.2939354367017746\n1 0.3258970756947994 \n```", "```py\nclass Mnist_CNN([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(1, 16, kernel_size=3, stride=2, padding=1)\n        self.conv2 = [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(16, 16, kernel_size=3, stride=2, padding=1)\n        self.conv3 = [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(16, 10, kernel_size=3, stride=2, padding=1)\n\n    def forward(self, [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").view(-1, 1, 28, 28)\n        [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.conv1([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n        [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.conv2([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n        [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.conv3([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n        [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [F.avg_pool2d](https://pytorch.org/docs/stable/generated/torch.nn.functional.avg_pool2d.html#torch.nn.functional.avg_pool2d \"torch.nn.functional.avg_pool2d\")([xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), 4)\n        return [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").view(-1, [xb](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").size(1))\n\nlr = 0.1 \n```", "```py\n[model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\") = [Mnist_CNN](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\n[opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = [optim.SGD](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")([model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(), lr=lr, momentum=0.9)\n\nfit(epochs, [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), loss_func, [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\"), train_dl, valid_dl) \n```", "```py\n0 0.35247018008232117\n1 0.25782823679447175 \n```", "```py\nclass Lambda([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self, func):\n        super().__init__()\n        self.func = func\n\n    def forward(self, x):\n        return self.func(x)\n\ndef preprocess(x):\n    return x.view(-1, 1, 28, 28) \n```", "```py\n[model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\") = [nn.Sequential](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")(\n    [Lambda](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(preprocess),\n    [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(1, 16, kernel_size=3, stride=2, padding=1),\n    [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(),\n    [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(16, 16, kernel_size=3, stride=2, padding=1),\n    [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(),\n    [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(16, 10, kernel_size=3, stride=2, padding=1),\n    [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(),\n    [nn.AvgPool2d](https://pytorch.org/docs/stable/generated/torch.nn.AvgPool2d.html#torch.nn.AvgPool2d \"torch.nn.AvgPool2d\")(4),\n    [Lambda](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(lambda x: x.view(x.size(0), -1)),\n)\n\n[opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = [optim.SGD](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")([model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(), lr=lr, momentum=0.9)\n\nfit(epochs, [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), loss_func, [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\"), train_dl, valid_dl) \n```", "```py\n0 0.3226209937572479\n1 0.2234949318766594 \n```", "```py\ndef preprocess(x, y):\n    return x.view(-1, 1, 28, 28), y\n\nclass WrappedDataLoader:\n    def __init__(self, dl, func):\n        self.dl = dl\n        self.func = func\n\n    def __len__(self):\n        return len(self.dl)\n\n    def __iter__(self):\n        for b in self.dl:\n            yield (self.func(*b))\n\ntrain_dl, valid_dl = get_data([train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), [valid_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), bs)\ntrain_dl = WrappedDataLoader(train_dl, preprocess)\nvalid_dl = WrappedDataLoader(valid_dl, preprocess) \n```", "```py\n[model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\") = [nn.Sequential](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")(\n    [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(1, 16, kernel_size=3, stride=2, padding=1),\n    [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(),\n    [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(16, 16, kernel_size=3, stride=2, padding=1),\n    [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(),\n    [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(16, 10, kernel_size=3, stride=2, padding=1),\n    [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(),\n    [nn.AdaptiveAvgPool2d](https://pytorch.org/docs/stable/generated/torch.nn.AdaptiveAvgPool2d.html#torch.nn.AdaptiveAvgPool2d \"torch.nn.AdaptiveAvgPool2d\")(1),\n    [Lambda](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(lambda x: x.view(x.size(0), -1)),\n)\n\n[opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = [optim.SGD](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")([model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(), lr=lr, momentum=0.9) \n```", "```py\nfit(epochs, [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), loss_func, [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\"), train_dl, valid_dl) \n```", "```py\n0 0.3148617018699646\n1 0.20678156037330628 \n```", "```py\nprint([torch.cuda.is_available](https://pytorch.org/docs/stable/generated/torch.cuda.is_available.html#torch.cuda.is_available \"torch.cuda.is_available\")()) \n```", "```py\nTrue \n```", "```py\n[dev](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\") = [torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")(\n    \"cuda\") if [torch.cuda.is_available](https://pytorch.org/docs/stable/generated/torch.cuda.is_available.html#torch.cuda.is_available \"torch.cuda.is_available\")() else [torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")(\"cpu\") \n```", "```py\ndef preprocess(x, y):\n    return x.view(-1, 1, 28, 28).to([dev](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")), y.to([dev](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\"))\n\ntrain_dl, valid_dl = get_data([train_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), [valid_ds](https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset \"torch.utils.data.TensorDataset\"), bs)\ntrain_dl = WrappedDataLoader(train_dl, preprocess)\nvalid_dl = WrappedDataLoader(valid_dl, preprocess) \n```", "```py\n[model.to](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.to \"torch.nn.Module.to\")([dev](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\"))\n[opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = [optim.SGD](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")([model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(), lr=lr, momentum=0.9) \n```", "```py\nfit(epochs, [model](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\"), loss_func, [opt](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\"), train_dl, valid_dl) \n```", "```py\n0 0.17924857176542283\n1 0.17124842552542688 \n```"]