- en: Oscillator and ADSR envelope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/tutorials/oscillator_tutorial.html](https://pytorch.org/audio/stable/tutorials/oscillator_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-tutorials-oscillator-tutorial-py) to download
    the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '**Author**: [Moto Hira](mailto:moto%40meta.com)'
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial shows how to synthesize various waveforms using [`oscillator_bank()`](../generated/torchaudio.prototype.functional.oscillator_bank.html#torchaudio.prototype.functional.oscillator_bank
    "torchaudio.prototype.functional.oscillator_bank") and [`adsr_envelope()`](../generated/torchaudio.prototype.functional.adsr_envelope.html#torchaudio.prototype.functional.adsr_envelope
    "torchaudio.prototype.functional.adsr_envelope").
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial requires prototype DSP features, which are available in nightly
    builds.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [https://pytorch.org/get-started/locally](https://pytorch.org/get-started/locally)
    for instructions for installing a nightly build.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Oscillator Bank[](#oscillator-bank "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sinusoidal oscillator generates sinusoidal waveforms from given amplitudes and
    frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: \[x_t = A_t \sin \theta_t\]
  prefs: []
  type: TYPE_NORMAL
- en: Where the phase \(\theta_t\) is found by integrating the instantaneous frequency
    \(f_t\).
  prefs: []
  type: TYPE_NORMAL
- en: \[\theta_t = \sum_{k=1}^{t} f_k\]
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Why integrate the frequencies? Instantaneous frequency represents the velocity
    of oscillation at given time. So integrating the instantaneous frequency gives
    the displacement of the phase of the oscillation, since the start. In discrete-time
    signal processing, integration becomes accumulation. In PyTorch, accumulation
    can be computed using [`torch.cumsum()`](https://pytorch.org/docs/stable/generated/torch.cumsum.html#torch.cumsum
    "(in PyTorch v2.1)").
  prefs: []
  type: TYPE_NORMAL
- en: '[`torchaudio.prototype.functional.oscillator_bank()`](../generated/torchaudio.prototype.functional.oscillator_bank.html#torchaudio.prototype.functional.oscillator_bank
    "torchaudio.prototype.functional.oscillator_bank") generates a bank of sinsuoidal
    waveforms from amplitude envelopes and instantaneous frequencies.'
  prefs: []
  type: TYPE_NORMAL
- en: Simple Sine Wave[](#simple-sine-wave "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start with simple case.
  prefs: []
  type: TYPE_NORMAL
- en: First, we generate sinusoidal wave that has constant frequency and amplitude
    everywhere, that is, a regular sine wave.
  prefs: []
  type: TYPE_NORMAL
- en: We define some constants and helper function that we use for the rest of the
    tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now we synthesize the audio with constant frequency and amplitude
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 1)](../Images/85cdb13ee98cbd3eb3cd714f3fbdc73b.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Combining multiple sine waves[](#combining-multiple-sine-waves "Permalink to
    this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`oscillator_bank()`](../generated/torchaudio.prototype.functional.oscillator_bank.html#torchaudio.prototype.functional.oscillator_bank
    "torchaudio.prototype.functional.oscillator_bank") can combine an arbitrary number
    of sinusoids to generate a waveform.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 3)](../Images/cb9d8b5d8ac2ebcad500082adba8683c.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Changing Frequencies across time[](#changing-frequencies-across-time "Permalink
    to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s change the frequency over time. Here, we change the frequency from zero
    to the Nyquist frequency (half of the sample rate) in log-scale so that it is
    easy to see the change in waveform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 1)](../Images/7533eae9ba1a1de4063506e20c82e055.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: We can also oscillate frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 1)](../Images/547b774a06d14d1224331f668583ea51.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: ADSR Envelope[](#adsr-envelope "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we change the amplitude over time. A common technique to model amplitude
    is ADSR Envelope.
  prefs: []
  type: TYPE_NORMAL
- en: ADSR stands for Attack, Decay, Sustain, and Release.
  prefs: []
  type: TYPE_NORMAL
- en: Attack is the time it takes to reach from zero to the top level.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Decay is the time it takes from the top to reach sustain level.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Sustain is the level at which the level stays constant.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Release is the time it takes to drop to zero from sustain level.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many variants of ADSR model, additionally, some models have the following
    properties
  prefs: []
  type: TYPE_NORMAL
- en: 'Hold: The time the level stays at the top level after attack.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'non-linear decay/release: The decay and release take non-linear change.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`adsr_envelope`](../generated/torchaudio.prototype.functional.adsr_envelope.html#torchaudio.prototype.functional.adsr_envelope
    "torchaudio.prototype.functional.adsr_envelope") supports hold and polynomial
    decay.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 1)](../Images/4789085b178435e62eee0891d8078e2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look into some examples of how ADSR envelope can be used to create
    different sounds.
  prefs: []
  type: TYPE_NORMAL
- en: The following examples are inspired by [this article](https://www.edmprod.com/adsr-envelopes/).
  prefs: []
  type: TYPE_NORMAL
- en: Drum Beats[](#drum-beats "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 2)](../Images/7f44ab460db72c3cabb29d40a967b5ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Pluck[](#pluck "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 1)](../Images/f88d084896c58d7b6748c1cb0df85d15.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Riser[](#riser "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Oscillator bank (bank size: 6)](../Images/4cfe895ddb84e32efc0c4926938d9fa3.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: References[](#references "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.edmprod.com/adsr-envelopes/](https://www.edmprod.com/adsr-envelopes/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://pages.mtu.edu/~suits/notefreq432.html](https://pages.mtu.edu/~suits/notefreq432.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://alijamieson.co.uk/2021/12/19/forgive-me-lord-for-i-have-synth-a-guide-to-subtractive-synthesis/](https://alijamieson.co.uk/2021/12/19/forgive-me-lord-for-i-have-synth-a-guide-to-subtractive-synthesis/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 0 minutes 2.975 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: oscillator_tutorial.py`](../_downloads/5479a6afc671384df1c364f38943e580/oscillator_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: oscillator_tutorial.ipynb`](../_downloads/c3b45fd5e3c80988ff7e06619382f4bb/oscillator_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
