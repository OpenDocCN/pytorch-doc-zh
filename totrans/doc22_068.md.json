["```py\ntorch.nn.init.calculate_gain(nonlinearity, param=None)\u00b6\n```", "```py\n>>> gain = nn.init.calculate_gain('leaky_relu', 0.2)  # leaky_relu with negative_slope=0.2 \n```", "```py\ntorch.nn.init.uniform_(tensor, a=0.0, b=1.0, generator=None)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.uniform_(w) \n```", "```py\ntorch.nn.init.normal_(tensor, mean=0.0, std=1.0, generator=None)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.normal_(w) \n```", "```py\ntorch.nn.init.constant_(tensor, val)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.constant_(w, 0.3) \n```", "```py\ntorch.nn.init.ones_(tensor)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.ones_(w) \n```", "```py\ntorch.nn.init.zeros_(tensor)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.zeros_(w) \n```", "```py\ntorch.nn.init.eye_(tensor)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.eye_(w) \n```", "```py\ntorch.nn.init.dirac_(tensor, groups=1)\u00b6\n```", "```py\n>>> w = torch.empty(3, 16, 5, 5)\n>>> nn.init.dirac_(w)\n>>> w = torch.empty(3, 24, 5, 5)\n>>> nn.init.dirac_(w, 3) \n```", "```py\ntorch.nn.init.xavier_uniform_(tensor, gain=1.0, generator=None)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.xavier_uniform_(w, gain=nn.init.calculate_gain('relu')) \n```", "```py\ntorch.nn.init.xavier_normal_(tensor, gain=1.0, generator=None)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.xavier_normal_(w) \n```", "```py\ntorch.nn.init.kaiming_uniform_(tensor, a=0, mode='fan_in', nonlinearity='leaky_relu', generator=None)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.kaiming_uniform_(w, mode='fan_in', nonlinearity='relu') \n```", "```py\ntorch.nn.init.kaiming_normal_(tensor, a=0, mode='fan_in', nonlinearity='leaky_relu', generator=None)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.kaiming_normal_(w, mode='fan_out', nonlinearity='relu') \n```", "```py\ntorch.nn.init.trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0, generator=None)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.trunc_normal_(w) \n```", "```py\ntorch.nn.init.orthogonal_(tensor, gain=1, generator=None)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.orthogonal_(w) \n```", "```py\ntorch.nn.init.sparse_(tensor, sparsity, std=0.01, generator=None)\u00b6\n```", "```py\n>>> w = torch.empty(3, 5)\n>>> nn.init.sparse_(w, sparsity=0.1) \n```"]