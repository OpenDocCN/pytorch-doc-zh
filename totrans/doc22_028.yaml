- en: C++
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/docs/stable/cpp_index.html](https://pytorch.org/docs/stable/cpp_index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking for the PyTorch C++ API docs, directly go [here](https://pytorch.org/cppdocs/).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'PyTorch provides several features for working with C++, and it’s best to choose
    from them based on your needs. At a high level, the following support is available:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: TorchScript C++ API
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[TorchScript](https://pytorch.org/docs/stable/jit.html) allows PyTorch models
    defined in Python to be serialized and then loaded and run in C++ capturing the
    model code via compilation or tracing its execution. You can learn more in the
    [Loading a TorchScript Model in C++ tutorial](https://pytorch.org/tutorials/advanced/cpp_export.html).
    This means you can define your models in Python as much as possible, but subsequently
    export them via TorchScript for doing no-Python execution in production or embedded
    environments. The TorchScript C++ API is used to interact with these models and
    the TorchScript execution engine, including:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Loading serialized TorchScript models saved from Python
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing simple model modifications if needed (e.g. pulling out submodules)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing the input and doing preprocessing using C++ Tensor API
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending PyTorch and TorchScript with C++ Extensions[](#extending-pytorch-and-torchscript-with-c-extensions
    "Permalink to this heading")
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TorchScript can be augmented with user-supplied code through custom operators
    and custom classes. Once registered with TorchScript, these operators and classes
    can be invoked in TorchScript code run from Python or from C++ as part of a serialized
    TorchScript model. The [Extending TorchScript with Custom C++ Operators](https://pytorch.org/tutorials/advanced/torch_script_custom_ops.html)
    tutorial walks through interfacing TorchScript with OpenCV. In addition to wrapping
    a function call with a custom operator, C++ classes and structs can be bound into
    TorchScript through a pybind11-like interface which is explained in the [Extending
    TorchScript with Custom C++ Classes](https://pytorch.org/tutorials/advanced/torch_script_custom_classes.html)
    tutorial.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Tensor and Autograd in C++
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the tensor and autograd operations in PyTorch Python API are also available
    in the C++ API. These include:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '`torch::Tensor` methods such as `add` / `reshape` / `clone`. For the full list
    of methods available, please see: [https://pytorch.org/cppdocs/api/classat_1_1_tensor.html](https://pytorch.org/cppdocs/api/classat_1_1_tensor.html)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'C++ tensor indexing API that looks and behaves the same as the Python API.
    For details on its usage, please see: [https://pytorch.org/cppdocs/notes/tensor_indexing.html](https://pytorch.org/cppdocs/notes/tensor_indexing.html)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The tensor autograd APIs and the `torch::autograd` package that are crucial
    for building dynamic neural networks in C++ frontend. For more details, please
    see: [https://pytorch.org/tutorials/advanced/cpp_autograd.html](https://pytorch.org/tutorials/advanced/cpp_autograd.html)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authoring Models in C++
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The “author in TorchScript, infer in C++” workflow requires model authoring
    to be done in TorchScript. However, there might be cases where the model has to
    be authored in C++ (e.g. in workflows where a Python component is undesirable).
    To serve such use cases, we provide the full capability of authoring and training
    a neural net model purely in C++, with familiar components such as `torch::nn`
    / `torch::nn::functional` / `torch::optim` that closely resemble the Python API.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'For an overview of the PyTorch C++ model authoring and training API, please
    see: [https://pytorch.org/cppdocs/frontend.html](https://pytorch.org/cppdocs/frontend.html)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a detailed tutorial on how to use the API, please see: [https://pytorch.org/tutorials/advanced/cpp_frontend.html](https://pytorch.org/tutorials/advanced/cpp_frontend.html)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docs for components such as `torch::nn` / `torch::nn::functional` / `torch::optim`
    can be found at: [https://pytorch.org/cppdocs/api/library_root.html](https://pytorch.org/cppdocs/api/library_root.html)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关诸如`torch::nn` / `torch::nn::functional` / `torch::optim`等组件的文档，请访问：[https://pytorch.org/cppdocs/api/library_root.html](https://pytorch.org/cppdocs/api/library_root.html)
- en: Packaging for C++
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C++包装
- en: 'For guidance on how to install and link with libtorch (the library that contains
    all of the above C++ APIs), please see: [https://pytorch.org/cppdocs/installing.html](https://pytorch.org/cppdocs/installing.html).
    Note that on Linux there are two types of libtorch binaries provided: one compiled
    with GCC pre-cxx11 ABI and the other with GCC cxx11 ABI, and you should make the
    selection based on the GCC ABI your system is using.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何安装和链接libtorch（包含所有上述C++ API的库）的指导，请参阅：[https://pytorch.org/cppdocs/installing.html](https://pytorch.org/cppdocs/installing.html)。请注意，在Linux上提供了两种类型的libtorch二进制文件：一种是使用GCC
    pre-cxx11 ABI编译的，另一种是使用GCC cxx11 ABI编译的，您应该根据系统使用的GCC ABI进行选择。
