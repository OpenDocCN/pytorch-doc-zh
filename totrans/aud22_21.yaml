- en: Accelerated video encoding with NVENC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/tutorials/nvenc_tutorial.html](https://pytorch.org/audio/stable/tutorials/nvenc_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-tutorials-nvenc-tutorial-py) to download the
    full example code
  prefs: []
  type: TYPE_NORMAL
- en: '**Author**: [Moto Hira](mailto:moto%40meta.com)'
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial shows how to use NVIDIA’s hardware video encoder (NVENC) with
    TorchAudio, and how it improves the performance of video encoding.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial requires FFmpeg libraries compiled with HW acceleration enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [Enabling GPU video decoder/encoder](../build.ffmpeg.html#enabling-hw-decoder)
    for how to build FFmpeg with HW acceleration.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Most modern GPUs have both HW decoder and encoder, but some highend GPUs like
    A100 and H100 do not have HW encoder. Please refer to the following for the availability
    and format coverage. [https://developer.nvidia.com/video-encode-and-decode-gpu-support-matrix-new](https://developer.nvidia.com/video-encode-and-decode-gpu-support-matrix-new)
  prefs: []
  type: TYPE_NORMAL
- en: Attempting to use HW encoder on these GPUs fails with an error message like
    `Generic error in an external library`. You can enable debug log with [`torchaudio.utils.ffmpeg_utils.set_log_level()`](../generated/torchaudio.utils.ffmpeg_utils.html#torchaudio.utils.ffmpeg_utils.set_log_level
    "torchaudio.utils.ffmpeg_utils.set_log_level") to see more detailed error messages
    issued along the way.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Check the prerequisites[](#check-the-prerequisites "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we check that TorchAudio correctly detects FFmpeg libraries that support
    HW decoder/encoder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We use the following helper function to generate test frame data. For the detail
    of synthetic video generation please refer to [StreamReader Advanced Usage](streamreader_advanced_tutorial.html#lavfi).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Encoding videos with NVENC[](#encoding-videos-with-nvenc "Permalink to this
    heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use HW video encoder, you need to specify the HW encoder when defining the
    output video stream by providing `encoder` option to `add_video_stream()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Similar to the HW decoder, by default, the encoder expects the frame data to
    be on CPU memory. To send data from CUDA memory, you need to specify `hw_accel`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the video tag.
  prefs: []
  type: TYPE_NORMAL
- en: Benchmark NVENC with StreamWriter[](#benchmark-nvenc-with-streamwriter "Permalink
    to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we compare the performance of software encoder and hardware encoder.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the benchmark in NVDEC, we process the videos of different resolution,
    and measure the time it takes to encode them.
  prefs: []
  type: TYPE_NORMAL
- en: We also measure the size of resulting video file.
  prefs: []
  type: TYPE_NORMAL
- en: The following function encodes the given frames and measure the time it takes
    to encode and the size of the resulting video data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We conduct the tests for the following configurations
  prefs: []
  type: TYPE_NORMAL
- en: Software encoder with the number of threads 1, 4, 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware encoder with and without `hw_accel` option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: And we change the resolution of videos to see how these measurement change.
  prefs: []
  type: TYPE_NORMAL
- en: 360P[](#p "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 720P[](#id1 "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 1080P[](#id2 "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now we plot the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![Time to encode videos with different resolutions, The size of encoded videos](../Images/376815bfe125a4d371e6b820662ee208.png)'
  prefs: []
  type: TYPE_IMG
- en: Result[](#result "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We observe couple of things;
  prefs: []
  type: TYPE_NORMAL
- en: The time to encode video grows as the resolution becomes larger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of software encoding, increasing the number of threads helps reduce
    the decoding time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The gain from extra threads diminishes around 8.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware encoding is faster than software encoding in general.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `hw_accel` does not improve the speed of encoding itself as much.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The size of the resulting videos grow as the resolution becomes larger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware encoder produces smaller video file at larger resolution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last point is somewhat strange to the author (who is not an expert in production
    of videos.) It is often said that hardware decoders produce larger video compared
    to software encoders. Some says that software encoders allow fine-grained control
    over encoding configuration, so the resulting video is more optimal. Meanwhile,
    hardware encoders are optimized for performance, thus does not provide as much
    control over quality and binary size.
  prefs: []
  type: TYPE_NORMAL
- en: Quality Spotcheck[](#quality-spotcheck "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, how are the quality of videos produced with hardware encoders? A quick spot
    check of high resolution videos uncovers that they have more noticeable artifacts
    on higher resolution. Which might be an explanation of the smaller binary size.
    (meaning, it is not allocating enough bits to produce quality output.)
  prefs: []
  type: TYPE_NORMAL
- en: The following images are raw frames of videos encoded with hardware encoders.
  prefs: []
  type: TYPE_NORMAL
- en: 360P[](#id3 "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![NVENC sample 360P](../Images/0d390a20e0d981befe81d5b3393e1c1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 720P[](#id4 "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![NVENC sample 720P](../Images/a685497b060cb3b2ca5a611ae2d70a86.png)'
  prefs: []
  type: TYPE_IMG
- en: 1080P[](#id5 "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![NVENC sample 1080P](../Images/87dc3b5de645b4f546370eb194db054a.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that there are more artifacts at higher resolution, which are noticeable.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps one might be able to reduce these using `encoder_options` arguments.
    We did not try, but if you try that and find a better quality setting, feel free
    to let us know. ;)
  prefs: []
  type: TYPE_NORMAL
- en: 'Tag: [`torchaudio.io`](../io.html#module-torchaudio.io "torchaudio.io")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 0 minutes 21.517 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: nvenc_tutorial.py`](../_downloads/e3bf18fcd5249a6baebd826b65b5dbc8/nvenc_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: nvenc_tutorial.ipynb`](../_downloads/1d8405f279e33daa9dc3c74332e88711/nvenc_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
