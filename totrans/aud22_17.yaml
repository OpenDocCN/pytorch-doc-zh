- en: StreamReader Advanced Usages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/tutorials/streamreader_advanced_tutorial.html](https://pytorch.org/audio/stable/tutorials/streamreader_advanced_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-tutorials-streamreader-advanced-tutorial-py)
    to download the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '**Author**: [Moto Hira](mailto:moto%40meta.com)'
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial is the continuation of [StreamReader Basic Usages](./streamreader_basic_tutorial.html).
  prefs: []
  type: TYPE_NORMAL
- en: This shows how to use [`StreamReader`](../generated/torchaudio.io.StreamReader.html#torchaudio.io.StreamReader
    "torchaudio.io.StreamReader") for
  prefs: []
  type: TYPE_NORMAL
- en: Device inputs, such as microphone, webcam and screen recording
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating synthetic audio / video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying preprocessing with custom filter expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Audio / Video device input[](#audio-video-device-input "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Accelerated Video Decoding with NVDEC](../hw_acceleration_tutorial.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Online ASR with Emformer RNN-T](./online_asr_tutorial.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Device ASR with Emformer RNN-T](./device_asr.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given that the system has proper media devices and libavdevice is configured
    to use the devices, the streaming API can pull media streams from these devices.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we pass additional parameters `format` and `option` to the constructor.
    `format` specifies the device component and `option` dictionary is specific to
    the specified component.
  prefs: []
  type: TYPE_NORMAL
- en: The exact arguments to be passed depend on the system configuration. Please
    refer to [https://ffmpeg.org/ffmpeg-devices.html](https://ffmpeg.org/ffmpeg-devices.html)
    for the detail.
  prefs: []
  type: TYPE_NORMAL
- en: The following example illustrates how one can do this on MacBook Pro.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to check the available devices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We use FaceTime HD Camera as video device (index 0) and MacBook Pro Microphone
    as audio device (index 0).
  prefs: []
  type: TYPE_NORMAL
- en: If we do not pass any `option`, the device uses its default configuration. The
    decoder might not support the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By providing `option`, we can change the format that the device streams to a
    format supported by decoder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '## Synthetic source streams[](#synthetic-source-streams "Permalink to this
    heading")'
  prefs: []
  type: TYPE_NORMAL
- en: As a part of device integration, ffmpeg provides a “virtual device” interface.
    This interface provides synthetic audio / video data generation using libavfilter.
  prefs: []
  type: TYPE_NORMAL
- en: To use this, we set `format=lavfi` and provide a filter description to `src`.
  prefs: []
  type: TYPE_NORMAL
- en: The detail of filter description can be found at [https://ffmpeg.org/ffmpeg-filters.html](https://ffmpeg.org/ffmpeg-filters.html)
  prefs: []
  type: TYPE_NORMAL
- en: Audio Examples[](#audio-examples "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sine wave[](#sine-wave "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://ffmpeg.org/ffmpeg-filters.html#sine](https://ffmpeg.org/ffmpeg-filters.html#sine)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <https://download.pytorch.org/torchaudio/tutorial-assets/stream-api/sine.wav>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4951828f6e6cb4ef7945b4445da896af.png)'
  prefs: []
  type: TYPE_IMG
- en: Signal with arbitral expression[](#signal-with-arbitral-expression "Permalink
    to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://ffmpeg.org/ffmpeg-filters.html#aevalsrc](https://ffmpeg.org/ffmpeg-filters.html#aevalsrc)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <https://download.pytorch.org/torchaudio/tutorial-assets/stream-api/aevalsrc.wav>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fdbb3facca115030372b67b2e0a87035.png)'
  prefs: []
  type: TYPE_IMG
- en: Noise[](#noise "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://ffmpeg.org/ffmpeg-filters.html#anoisesrc](https://ffmpeg.org/ffmpeg-filters.html#anoisesrc)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <https://download.pytorch.org/torchaudio/tutorial-assets/stream-api/anoisesrc.wav>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/221138e798d8d14f09df7f8607a3082b.png)'
  prefs: []
  type: TYPE_IMG
- en: Video Examples[](#video-examples "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cellular automaton[](#cellular-automaton "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://ffmpeg.org/ffmpeg-filters.html#cellauto](https://ffmpeg.org/ffmpeg-filters.html#cellauto)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <https://download.pytorch.org/torchaudio/tutorial-assets/stream-api/cellauto.mp4>
  prefs: []
  type: TYPE_NORMAL
- en: Mandelbrot[](#mandelbrot "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://ffmpeg.org/ffmpeg-filters.html#cellauto](https://ffmpeg.org/ffmpeg-filters.html#cellauto)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <https://download.pytorch.org/torchaudio/tutorial-assets/stream-api/mandelbrot.mp4>
  prefs: []
  type: TYPE_NORMAL
- en: MPlayer Test patterns[](#mplayer-test-patterns "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://ffmpeg.org/ffmpeg-filters.html#mptestsrc](https://ffmpeg.org/ffmpeg-filters.html#mptestsrc)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <https://download.pytorch.org/torchaudio/tutorial-assets/stream-api/mptestsrc.mp4>
  prefs: []
  type: TYPE_NORMAL
- en: John Conway’s life game[](#john-conway-s-life-game "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://ffmpeg.org/ffmpeg-filters.html#life](https://ffmpeg.org/ffmpeg-filters.html#life)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: <https://download.pytorch.org/torchaudio/tutorial-assets/stream-api/life.mp4>
  prefs: []
  type: TYPE_NORMAL
- en: Sierpinski carpet/triangle fractal[](#sierpinski-carpet-triangle-fractal "Permalink
    to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://ffmpeg.org/ffmpeg-filters.html#sierpinski](https://ffmpeg.org/ffmpeg-filters.html#sierpinski)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: <https://download.pytorch.org/torchaudio/tutorial-assets/stream-api/sierpinski.mp4>
  prefs: []
  type: TYPE_NORMAL
- en: Custom filters[](#custom-filters "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When defining an output stream, you can use `add_audio_stream()` and `add_video_stream()`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: These methods take `filter_desc` argument, which is a string formatted according
    to ffmpeg’s [filter expression](https://ffmpeg.org/ffmpeg-filters.html).
  prefs: []
  type: TYPE_NORMAL
- en: The difference between `add_basic_(audio|video)_stream` and `add_(audio|video)_stream`
    is that `add_basic_(audio|video)_stream` constructs the filter expression and
    passes it to the same underlying implementation. Everything `add_basic_(audio|video)_stream`
    can be achieved with `add_(audio|video)_stream`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When applying custom filters, the client code must convert the audio/video stream
    to one of the formats that torchaudio can convert to tensor format. This can be
    achieved, for example, by applying `format=pix_fmts=rgb24` to video stream and
    `aformat=sample_fmts=fltp` to audio stream.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each output stream has separate filter graph. Therefore, it is not possible
    to use different input/output streams for a filter expression. However, it is
    possible to split one input stream into multiple of them, and merge them later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio Examples[](#id1 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Original[](#original "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![streamreader advanced tutorial](../Images/9422f36c7502b1bcef0f877aa913b653.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Highpass / lowpass filter[](#highpass-lowpass-filter "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![streamreader advanced tutorial](../Images/265b57356aac35df68450a1af7d44461.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: FFT filter - Robot 🤖[](#fft-filter-robot "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![streamreader advanced tutorial](../Images/29cba5f8e6ece9a91c532b94bbd19c2a.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: FFT filter - Whisper[](#fft-filter-whisper "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![streamreader advanced tutorial](../Images/406d88c3a3f285f209ced7de7719ea34.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Video Examples[](#id2 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Original[](#id3 "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![streamreader advanced tutorial](../Images/e52ccb510fecdebbce6ae360b991f85d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Mirror[](#mirror "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![streamreader advanced tutorial](../Images/0b38768351c328de5fdaae90f7fe7066.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Edge detection[](#edge-detection "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![streamreader advanced tutorial](../Images/c9366a2d9e62e5faacc20268e77ce566.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Random rotation[](#random-rotation "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![streamreader advanced tutorial](../Images/9bcd668d0694dbc4b90b7d448cc142da.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Pixel manipulation[](#pixel-manipulation "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![streamreader advanced tutorial](../Images/f5b57739b74a653aec75310af2f57814.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Tag: [`torchaudio.io`](../io.html#module-torchaudio.io "torchaudio.io")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 0 minutes 17.260 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: streamreader_advanced_tutorial.py`](../_downloads/21502c17878277ad648c064df573f05e/streamreader_advanced_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: streamreader_advanced_tutorial.ipynb`](../_downloads/f3b1cbeaf1ae66d226233d2ca3d0ef3d/streamreader_advanced_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
