- en: Save and Load the Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/tutorials/beginner/basics/saveloadrun_tutorial.html](https://pytorch.org/tutorials/beginner/basics/saveloadrun_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-beginner-basics-saveloadrun-tutorial-py) to
    download the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '[Learn the Basics](intro.html) || [Quickstart](quickstart_tutorial.html) ||
    [Tensors](tensorqs_tutorial.html) || [Datasets & DataLoaders](data_tutorial.html)
    || [Transforms](transforms_tutorial.html) || [Build Model](buildmodel_tutorial.html)
    || [Autograd](autogradqs_tutorial.html) || [Optimization](optimization_tutorial.html)
    || **Save & Load Model**'
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will look at how to persist model state with saving, loading
    and running model predictions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Saving and Loading Model Weights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PyTorch models store the learned parameters in an internal state dictionary,
    called `state_dict`. These can be persisted via the `torch.save` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To load model weights, you need to create an instance of the same model first,
    and then load the parameters using `load_state_dict()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to call `model.eval()` method before inferencing to set the dropout
    and batch normalization layers to evaluation mode. Failing to do this will yield
    inconsistent inference results.
  prefs: []
  type: TYPE_NORMAL
- en: Saving and Loading Models with Shapes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When loading model weights, we needed to instantiate the model class first,
    because the class defines the structure of a network. We might want to save the
    structure of this class together with the model, in which case we can pass `model`
    (and not `model.state_dict()`) to the saving function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then load the model like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This approach uses Python [pickle](https://docs.python.org/3/library/pickle.html)
    module when serializing the model, thus it relies on the actual class definition
    to be available when loading the model.
  prefs: []
  type: TYPE_NORMAL
- en: Related Tutorials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Saving and Loading a General Checkpoint in PyTorch](https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tips for loading an nn.Module from a checkpoint](https://pytorch.org/tutorials/recipes/recipes/module_load_state_dict_tips.html?highlight=loading%20nn%20module%20from%20checkpoint)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 0 minutes 9.335 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: saveloadrun_tutorial.py`](../../_downloads/3648b0dccaebca71b234070fe2124770/saveloadrun_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: saveloadrun_tutorial.ipynb`](../../_downloads/11f1adacb7d237f2041ce267ac38abb6/saveloadrun_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
