- en: Extending TorchScript with Custom C++ Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义C++类扩展TorchScript
- en: 原文：[https://pytorch.org/tutorials/advanced/torch_script_custom_classes.html](https://pytorch.org/tutorials/advanced/torch_script_custom_classes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/tutorials/advanced/torch_script_custom_classes.html](https://pytorch.org/tutorials/advanced/torch_script_custom_classes.html)
- en: This tutorial is a follow-on to the [custom operator](torch_script_custom_ops.html)
    tutorial, and introduces the API we’ve built for binding C++ classes into TorchScript
    and Python simultaneously. The API is very similar to [pybind11](https://github.com/pybind/pybind11),
    and most of the concepts will transfer over if you’re familiar with that system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程是[自定义运算符](torch_script_custom_ops.html)教程的后续，介绍了我们为将C++类绑定到TorchScript和Python中构建的API。该API与[pybind11](https://github.com/pybind/pybind11)非常相似，如果您熟悉该系统，大部分概念都会转移到这里。
- en: Implementing and Binding the Class in C++
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在C++中实现和绑定类
- en: For this tutorial, we are going to define a simple C++ class that maintains
    persistent state in a member variable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将定义一个简单的C++类，该类在成员变量中维护持久状态。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are several things to note:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有几点需要注意：
- en: '`torch/custom_class.h` is the header you need to include to extend TorchScript
    with your custom class.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`torch/custom_class.h`是您需要包含的头文件，以便使用自定义类扩展TorchScript。'
- en: Notice that whenever we are working with instances of the custom class, we do
    it via instances of `c10::intrusive_ptr<>`. Think of `intrusive_ptr` as a smart
    pointer like `std::shared_ptr`, but the reference count is stored directly in
    the object, as opposed to a separate metadata block (as is done in `std::shared_ptr`.
    `torch::Tensor` internally uses the same pointer type; and custom classes have
    to also use this pointer type so that we can consistently manage different object
    types.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，每当我们使用自定义类的实例时，我们都是通过`c10::intrusive_ptr<>`的实例来进行的。将`intrusive_ptr`视为类似于`std::shared_ptr`的智能指针，但引用计数直接存储在对象中，而不是存储在单独的元数据块中（就像在`std::shared_ptr`中所做的那样）。`torch::Tensor`内部使用相同的指针类型；自定义类也必须使用这种指针类型，以便我们可以一致地管理不同的对象类型。
- en: The second thing to notice is that the user-defined class must inherit from
    `torch::CustomClassHolder`. This ensures that the custom class has space to store
    the reference count.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二件要注意的事情是，用户定义的类必须继承自`torch::CustomClassHolder`。这确保了自定义类有空间来存储引用计数。
- en: 'Now let’s take a look at how we will make this class visible to TorchScript,
    a process called *binding* the class:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使这个类对TorchScript可见，这个过程称为*绑定*类：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Building the Example as a C++ Project With CMake
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CMake将示例构建为C++项目
- en: 'Now, we’re going to build the above C++ code with the [CMake](https://cmake.org)
    build system. First, take all the C++ code we’ve covered so far and place it in
    a file called `class.cpp`. Then, write a simple `CMakeLists.txt` file and place
    it in the same directory. Here is what `CMakeLists.txt` should look like:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用[CMake](https://cmake.org)构建系统构建上述C++代码。首先，将我们迄今为止涵盖的所有C++代码放入一个名为`class.cpp`的文件中。然后，编写一个简单的`CMakeLists.txt`文件并将其放在同一目录中。`CMakeLists.txt`应该如下所示：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also, create a `build` directory. Your file tree should look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，创建一个`build`目录。您的文件树应该如下所示：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We assume you’ve setup your environment in the same way as described in the
    [previous tutorial](torch_script_custom_ops.html). Go ahead and invoke cmake and
    then make to build the project:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经按照[上一个教程](torch_script_custom_ops.html)中描述的方式设置了环境。继续调用cmake，然后进行构建：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'What you’ll find is there is now (among other things) a dynamic library file
    present in the build directory. On Linux, this is probably named `libcustom_class.so`.
    So the file tree should look like:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现现在（除其他内容外）在构建目录中存在一个动态库文件。在Linux上，这个文件可能被命名为`libcustom_class.so`。因此，文件树应该如下所示：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the C++ Class from Python and TorchScript
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Python和TorchScript中使用C++类
- en: 'Now that we have our class and its registration compiled into an `.so` file,
    we can load that .so into Python and try it out. Here’s a script that demonstrates
    that:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将我们的类及其注册编译到一个`.so`文件中，我们可以将该.so加载到Python中并尝试它。以下是演示这一点的脚本：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Saving, Loading, and Running TorchScript Code Using Custom Classes
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义类保存、加载和运行TorchScript代码
- en: 'We can also use custom-registered C++ classes in a C++ process using libtorch.
    As an example, let’s define a simple `nn.Module` that instantiates and calls a
    method on our MyStackClass class:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在C++进程中使用自定义注册的C++类使用libtorch。例如，让我们定义一个简单的`nn.Module`，该模块实例化并调用我们的MyStackClass类的方法：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`foo.pt` in our filesystem now contains the serialized TorchScript program
    we’ve just defined.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的文件系统中的`foo.pt`现在包含了我们刚刚定义的序列化的TorchScript程序。
- en: Now, we’re going to define a new CMake project to show how you can load this
    model and its required .so file. For a full treatment of how to do this, please
    have a look at the [Loading a TorchScript Model in C++ Tutorial](https://pytorch.org/tutorials/advanced/cpp_export.html).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将定义一个新的CMake项目，以展示如何加载这个模型及其所需的.so文件。有关如何执行此操作的完整说明，请查看[在C++中加载TorchScript模型的教程](https://pytorch.org/tutorials/advanced/cpp_export.html)。
- en: 'Similarly to before, let’s create a file structure containing the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前类似，让我们创建一个包含以下内容的文件结构：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice we’ve copied over the serialized `foo.pt` file, as well as the source
    tree from the `custom_class_project` above. We will be adding the `custom_class_project`
    as a dependency to this C++ project so that we can build the custom class into
    the binary.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经复制了序列化的`foo.pt`文件，以及上面的`custom_class_project`的源代码树。我们将把`custom_class_project`作为这个C++项目的依赖项，以便我们可以将自定义类构建到二进制文件中。
- en: 'Let’s populate `infer.cpp` with the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用以下内容填充`infer.cpp`：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And similarly let’s define our CMakeLists.txt file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，让我们定义我们的CMakeLists.txt文件：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You know the drill: `cd build`, `cmake`, and `make`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您知道该怎么做：`cd build`，`cmake`，然后`make`：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And now we can run our exciting C++ binary:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行我们令人兴奋的C++二进制文件了：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Incredible!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 令人难以置信！
- en: Moving Custom Classes To/From IValues
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将自定义类移动到/从IValues
- en: 'It’s also possible that you may need to move custom classes into or out of
    `IValue``s, such as when you take or return ``IValue``s from TorchScript methods
    or you want to instantiate a custom class attribute in C++. For creating an ``IValue`
    from a custom C++ class instance:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还可能需要将自定义类移入或移出`IValue`，例如当您从TorchScript方法中获取或返回`IValue`时，或者您想在C++中实例化自定义类属性时。要从自定义C++类实例创建`IValue`：
- en: '`torch::make_custom_class<T>()` provides an API similar to c10::intrusive_ptr<T>
    in that it will take whatever set of arguments you provide to it, call the constructor
    of T that matches that set of arguments, and wrap that instance up and return
    it. However, instead of returning just a pointer to a custom class object, it
    returns an `IValue` wrapping the object. You can then pass this `IValue` directly
    to TorchScript.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`torch::make_custom_class<T>()`提供了类似于c10::intrusive_ptr<T>的API，它将接受您提供的一组参数，调用与该参数集匹配的T的构造函数，并将该实例包装起来并返回。但是，与仅返回自定义类对象的指针不同，它返回包装对象的`IValue`。然后，您可以直接将此`IValue`传递给TorchScript。'
- en: In the event that you already have an `intrusive_ptr` pointing to your class,
    you can directly construct an IValue from it using the constructor `IValue(intrusive_ptr<T>)`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您已经有一个指向您的类的`intrusive_ptr`，则可以直接使用构造函数`IValue(intrusive_ptr<T>)`从中构造一个IValue。
- en: 'For converting `IValue` back to custom classes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将`IValue`转换回自定义类：
- en: '`IValue::toCustomClass<T>()` will return an `intrusive_ptr<T>` pointing to
    the custom class that the `IValue` contains. Internally, this function is checking
    that `T` is registered as a custom class and that the `IValue` does in fact contain
    a custom class. You can check whether the `IValue` contains a custom class manually
    by calling `isCustomClass()`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IValue::toCustomClass<T>()`将返回指向`IValue`包含的自定义类的`intrusive_ptr<T>`。在内部，此函数正在检查`T`是否已注册为自定义类，并且`IValue`确实包含自定义类。您可以通过调用`isCustomClass()`手动检查`IValue`是否包含自定义类。'
- en: Defining Serialization/Deserialization Methods for Custom C++ Classes
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为自定义C++类定义序列化/反序列化方法
- en: 'If you try to save a `ScriptModule` with a custom-bound C++ class as an attribute,
    you’ll get the following error:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试将具有自定义绑定的C++类作为属性保存为`ScriptModule`，将会收到以下错误：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is because TorchScript cannot automatically figure out what information
    save from your C++ class. You must specify that manually. The way to do that is
    to define `__getstate__` and `__setstate__` methods on the class using the special
    `def_pickle` method on `class_`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为TorchScript无法自动确定从您的C++类中保存哪些信息。您必须手动指定。方法是在类上使用`class_`的特殊`def_pickle`方法定义`__getstate__`和`__setstate__`方法。
- en: Note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The semantics of `__getstate__` and `__setstate__` in TorchScript are equivalent
    to that of the Python pickle module. You can [read more](https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/docs/serialization.md#getstate-and-setstate)
    about how we use these methods.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript中`__getstate__`和`__setstate__`的语义与Python pickle模块的相同。您可以[阅读更多](https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/docs/serialization.md#getstate-and-setstate)关于我们如何使用这些方法。
- en: 'Here is an example of the `def_pickle` call we can add to the registration
    of `MyStackClass` to include serialization methods:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们可以添加到`MyStackClass`注册中的`def_pickle`调用的示例，以包含序列化方法：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We take a different approach from pybind11 in the pickle API. Whereas pybind11
    as a special function `pybind11::pickle()` which you pass into `class_::def()`,
    we have a separate method `def_pickle` for this purpose. This is because the name
    `torch::jit::pickle` was already taken, and we didn’t want to cause confusion.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在pickle API中采用了与pybind11不同的方法。而pybind11有一个特殊函数`pybind11::pickle()`，您可以将其传递给`class_::def()`，我们为此目的有一个单独的方法`def_pickle`。这是因为名称`torch::jit::pickle`已经被使用，我们不想引起混淆。
- en: 'Once we have defined the (de)serialization behavior in this way, our script
    can now run successfully:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦以这种方式定义了（反）序列化行为，我们的脚本现在可以成功运行：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Defining Custom Operators that Take or Return Bound C++ Classes
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义接受或返回绑定的C++类的自定义运算符
- en: 'Once you’ve defined a custom C++ class, you can also use that class as an argument
    or return from a custom operator (i.e. free functions). Suppose you have the following
    free function:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了自定义C++类，您还可以将该类用作自定义运算符（即自由函数）的参数或返回值。假设您有以下自由函数：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can register it running the following code inside your `TORCH_LIBRARY`
    block:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`TORCH_LIBRARY`块内运行以下代码来注册它：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Refer to the [custom op tutorial](https://pytorch.org/tutorials/advanced/torch_script_custom_ops.html)
    for more details on the registration API.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有关注册API的更多详细信息，请参考[自定义操作教程](https://pytorch.org/tutorials/advanced/torch_script_custom_ops.html)。
- en: 'Once this is done, you can use the op like the following example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以像以下示例一样使用该运算符：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Registration of an operator that takes a C++ class as an argument requires that
    the custom class has already been registered. You can enforce this by making sure
    the custom class registration and your free function definitions are in the same
    `TORCH_LIBRARY` block, and that the custom class registration comes first. In
    the future, we may relax this requirement, so that these can be registered in
    any order.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接受C++类作为参数的运算符的注册要求自定义类已经注册。您可以通过确保自定义类注册和您的自由函数定义位于同一个`TORCH_LIBRARY`块中，并且自定义类注册位于首位来强制执行此要求。在未来，我们可能会放宽此要求，以便可以以任何顺序注册这些内容。
- en: Conclusion
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: This tutorial walked you through how to expose a C++ class to TorchScript (and
    by extension Python), how to register its methods, how to use that class from
    Python and TorchScript, and how to save and load code using the class and run
    that code in a standalone C++ process. You are now ready to extend your TorchScript
    models with C++ classes that interface with third party C++ libraries or implement
    any other use case that requires the lines between Python, TorchScript and C++
    to blend smoothly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程向您展示了如何将一个C++类暴露给TorchScript（以及Python），如何注册其方法，如何从Python和TorchScript中使用该类，以及如何使用该类保存和加载代码，并在独立的C++进程中运行该代码。现在，您可以准备使用与第三方C++库进行交互的C++类来扩展您的TorchScript模型，或者实现任何其他需要在Python、TorchScript和C++之间平滑过渡的用例。
- en: As always, if you run into any problems or have questions, you can use our [forum](https://discuss.pytorch.org/)
    or [GitHub issues](https://github.com/pytorch/pytorch/issues) to get in touch.
    Also, our [frequently asked questions (FAQ) page](https://pytorch.org/cppdocs/notes/faq.html)
    may have helpful information.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如常，如果您遇到任何问题或有疑问，您可以使用我们的[论坛](https://discuss.pytorch.org/)或[GitHub问题页面](https://github.com/pytorch/pytorch/issues)联系我们。此外，我们的[常见问题（FAQ）页面](https://pytorch.org/cppdocs/notes/faq.html)可能包含有用的信息。
