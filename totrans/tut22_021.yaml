- en: Training with PyTorch
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/tutorials/beginner/introyt/trainingyt.html](https://pytorch.org/tutorials/beginner/introyt/trainingyt.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-beginner-introyt-trainingyt-py) to download
    the full example code
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[Introduction](introyt1_tutorial.html) || [Tensors](tensors_deeper_tutorial.html)
    || [Autograd](autogradyt_tutorial.html) || [Building Models](modelsyt_tutorial.html)
    || [TensorBoard Support](tensorboardyt_tutorial.html) || **Training Models** ||
    [Model Understanding](captumyt.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Follow along with the video below or on [youtube](https://www.youtube.com/watch?v=jF43_wj_DCQ).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/embed/jF43_wj_DCQ](https://www.youtube.com/embed/jF43_wj_DCQ)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In past videos, we’ve discussed and demonstrated:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Building models with the neural network layers and functions of the torch.nn
    module
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mechanics of automated gradient computation, which is central to gradient-based
    model training
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using TensorBoard to visualize training progress and other activities
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this video, we’ll be adding some new tools to your inventory:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: We’ll get familiar with the dataset and dataloader abstractions, and how they
    ease the process of feeding data to your model during a training loop
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll discuss specific loss functions and when to use them
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll look at PyTorch optimizers, which implement algorithms to adjust model
    weights based on the outcome of a loss function
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we’ll pull all of these together and see a full PyTorch training loop
    in action.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Dataset and DataLoader
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Dataset` and `DataLoader` classes encapsulate the process of pulling your
    data from storage and exposing it to your training loop in batches.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The `Dataset` is responsible for accessing and processing single instances of
    data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: The `DataLoader` pulls instances of data from the `Dataset` (either automatically
    or with a sampler that you define), collects them in batches, and returns them
    for consumption by your training loop. The `DataLoader` works with all kinds of
    datasets, regardless of the type of data they contain.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: For this tutorial, we’ll be using the Fashion-MNIST dataset provided by TorchVision.
    We use `torchvision.transforms.Normalize()` to zero-center and normalize the distribution
    of the image tile content, and download both training and validation data splits.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As always, let’s visualize the data as a sanity check:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![trainingyt](../Images/c62745d33703f5977e18e6e3956d7fe6.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The Model
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model we’ll use in this example is a variant of LeNet-5 - it should be familiar
    if you’ve watched the previous videos in this series.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Loss Function
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, we’ll be using a cross-entropy loss. For demonstration purposes,
    we’ll create batches of dummy output and label values, run them through the loss
    function, and examine the result.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Optimizer
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, we’ll be using simple [stochastic gradient descent](https://pytorch.org/docs/stable/optim.html)
    with momentum.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be instructive to try some variations on this optimization scheme:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Learning rate determines the size of the steps the optimizer takes. What does
    a different learning rate do to the your training results, in terms of accuracy
    and convergence time?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Momentum nudges the optimizer in the direction of strongest gradient over multiple
    steps. What does changing this value do to your results?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try some different optimization algorithms, such as averaged SGD, Adagrad, or
    Adam. How do your results differ?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The Training Loop
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Below, we have a function that performs one training epoch. It enumerates data
    from the DataLoader, and on each pass of the loop does the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Gets a batch of training data from the DataLoader
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zeros the optimizer’s gradients
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performs an inference - that is, gets predictions from the model for an input
    batch
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculates the loss for that set of predictions vs. the labels on the dataset
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculates the backward gradients over the learning weights
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tells the optimizer to perform one learning step - that is, adjust the model’s
    learning weights based on the observed gradients for this batch, according to
    the optimization algorithm we chose
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 告诉优化器执行一个学习步骤 - 即根据我们选择的优化算法，根据这一批次的观察梯度调整模型的学习权重
- en: It reports on the loss for every 1000 batches.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它报告每1000批次的损失。
- en: Finally, it reports the average per-batch loss for the last 1000 batches, for
    comparison with a validation run
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，它报告了最后1000批次的平均每批次损失，以便与验证运行进行比较
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Per-Epoch Activity
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每轮活动
- en: 'There are a couple of things we’ll want to do once per epoch:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每轮我们都要做一些事情：
- en: Perform validation by checking our relative loss on a set of data that was not
    used for training, and report this
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过检查在训练中未使用的一组数据上的相对损失来执行验证，并报告此结果
- en: Save a copy of the model
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存模型的副本
- en: Here, we’ll do our reporting in TensorBoard. This will require going to the
    command line to start TensorBoard, and opening it in another browser tab.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在TensorBoard中进行报告。这将需要转到命令行启动TensorBoard，并在另一个浏览器选项卡中打开它。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To load a saved version of the model:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模型的保存版本：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once you’ve loaded the model, it’s ready for whatever you need it for - more
    training, inference, or analysis.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模型后，它已准备好用于您需要的任何操作 - 更多训练，推断或分析。
- en: Note that if your model has constructor parameters that affect model structure,
    you’ll need to provide them and configure the model identically to the state in
    which it was saved.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您的模型具有影响模型结构的构造函数参数，您需要提供它们并将模型配置为与保存时的状态相同。
- en: Other Resources
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他资源
- en: Docs on the [data utilities](https://pytorch.org/docs/stable/data.html), including
    Dataset and DataLoader, at pytorch.org
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch中的[数据工具](https://pytorch.org/docs/stable/data.html)文档，包括Dataset和DataLoader
- en: A [note on the use of pinned memory](https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning)
    for GPU training
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于在GPU训练中使用固定内存的说明
- en: Documentation on the datasets available in [TorchVision](https://pytorch.org/vision/stable/datasets.html),
    [TorchText](https://pytorch.org/text/stable/datasets.html), and [TorchAudio](https://pytorch.org/audio/stable/datasets.html)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TorchVision](https://pytorch.org/vision/stable/datasets.html)，[TorchText](https://pytorch.org/text/stable/datasets.html)和[TorchAudio](https://pytorch.org/audio/stable/datasets.html)中可用数据集的文档'
- en: Documentation on the [loss functions](https://pytorch.org/docs/stable/nn.html#loss-functions)
    available in PyTorch
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch中可用的[损失函数](https://pytorch.org/docs/stable/nn.html#loss-functions)的文档
- en: Documentation on the [torch.optim package](https://pytorch.org/docs/stable/optim.html),
    which includes optimizers and related tools, such as learning rate scheduling
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[torch.optim包的文档](https://pytorch.org/docs/stable/optim.html)，其中包括优化器和相关工具，如学习率调度'
- en: A detailed [tutorial on saving and loading models](https://pytorch.org/tutorials/beginner/saving_loading_models.html)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关保存和加载模型的详细[教程](https://pytorch.org/tutorials/beginner/saving_loading_models.html)
- en: The [Tutorials section of pytorch.org](https://pytorch.org/tutorials/) contains
    tutorials on a broad variety of training tasks, including classification in different
    domains, generative adversarial networks, reinforcement learning, and more
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pytorch.org的教程部分](https://pytorch.org/tutorials/)包含广泛的训练任务教程，包括不同领域的分类，生成对抗网络，强化学习等'
- en: '**Total running time of the script:** ( 5 minutes 4.557 seconds)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本的总运行时间：**（5分钟4.557秒）'
- en: '[`Download Python source code: trainingyt.py`](../../_downloads/9f7a57e14d8a2ebf975344f34d6ef247/trainingyt.py)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Python源代码：trainingyt.py`](../../_downloads/9f7a57e14d8a2ebf975344f34d6ef247/trainingyt.py)'
- en: '[`Download Jupyter notebook: trainingyt.ipynb`](../../_downloads/770632dd3941d2a51b831c52ded57aa2/trainingyt.ipynb)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Jupyter笔记本：trainingyt.ipynb`](../../_downloads/770632dd3941d2a51b831c52ded57aa2/trainingyt.ipynb)'
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sphinx-Gallery生成的图库](https://sphinx-gallery.github.io)'
