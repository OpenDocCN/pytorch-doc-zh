["```py\nimport torch\nimport torchaudio\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n\nimport matplotlib.pyplot as plt\nfrom torchaudio.io import StreamReader\n\n[base_url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = \"https://download.pytorch.org/torchaudio/tutorial-assets\"\n[AUDIO_URL](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = f\"{[base_url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\"\n[VIDEO_URL](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = f\"{[base_url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}/stream-api/NASAs_Most_Scientifically_Complex_Space_Observatory_Requires_Precision-MP4.mp4\" \n```", "```py\n2.2.0\n2.2.0 \n```", "```py\nStreamReader([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")=\"audio.wav\")\n\nStreamReader([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")=\"audio.mp3\") \n```", "```py\n# Still image\nStreamReader([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")=\"image.jpeg\")\n\n# Video file\nStreamReader([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")=\"video.mpeg\") \n```", "```py\n# Video on remote server\nStreamReader([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")=\"https://example.com/video.mp4\")\n\n# Playlist format\nStreamReader([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")=\"https://example.com/playlist.m3u\")\n\n# RTMP\nStreamReader([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")=\"rtmp://example.com:1935/live/app\") \n```", "```py\n# Open as fileobj with seek support\nwith open(\"input.mp4\", \"rb\") as [src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"):\n    StreamReader([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")=[src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\nclass UnseekableWrapper:\n    def __init__(self, obj):\n        self.obj = obj\n\n    def read(self, n):\n        return self.obj.read(n) \n```", "```py\nimport requests\n\nresponse = requests.get(\"https://example.com/video.mp4\", stream=True)\ns = StreamReader(UnseekableWrapper(response.raw)) \n```", "```py\nimport boto3\n\nresponse = boto3.client(\"s3\").get_object(Bucket=\"my_bucket\", Key=\"key\")\ns = StreamReader(UnseekableWrapper(response[\"Body\"])) \n```", "```py\n# Headerless, 16-bit signed integer PCM, resampled at 16k Hz.\n$ sox original.wav -r 16000 raw.s2 \n```", "```py\nStreamReader([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")=\"raw.s2\", format=\"s16le\", option={\"sample_rate\": \"16000\"}) \n```", "```py\nstreamer = StreamReader([AUDIO_URL](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\nprint(\"The number of source streams:\", streamer.num_src_streams)\nprint(streamer.get_src_stream_info(0)) \n```", "```py\nThe number of source streams: 1\nSourceAudioStream(media_type='audio', codec='pcm_s16le', codec_long_name='PCM signed 16-bit little-endian', format='s16', bit_rate=256000, num_frames=0, bits_per_sample=0, metadata={}, sample_rate=16000.0, num_channels=1) \n```", "```py\n[src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = \"https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8\"\nstreamer = StreamReader([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\nprint(\"The number of source streams:\", streamer.num_src_streams)\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in range(streamer.num_src_streams):\n    print(streamer.get_src_stream_info([i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))) \n```", "```py\nThe number of source streams: 27\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=335457, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:39.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '2177116'}, width=960, height=540, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=1351204, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:42.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '8001098'}, width=1920, height=1080, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=1019347, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:48.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '6312875'}, width=1920, height=1080, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=750899, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:54.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '4943747'}, width=1920, height=1080, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=513057, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:59.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '3216424'}, width=1280, height=720, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=185749, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:38:03.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '1268994'}, width=768, height=432, frame_rate=30.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=111939, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:38:06.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '902298'}, width=640, height=360, frame_rate=30.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=59938, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:38:07.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '541052'}, width=480, height=270, frame_rate=30.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=335457, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:39.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '2399619'}, width=960, height=540, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=1351204, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:42.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '8223601'}, width=1920, height=1080, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=1019347, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:48.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '6535378'}, width=1920, height=1080, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=750899, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:54.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '5166250'}, width=1920, height=1080, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=513057, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:59.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '3438927'}, width=1280, height=720, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=185749, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:38:03.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '1491497'}, width=768, height=432, frame_rate=30.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=111939, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:38:06.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '1124801'}, width=640, height=360, frame_rate=30.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=59938, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:38:07.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '763555'}, width=480, height=270, frame_rate=30.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=335457, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:39.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '2207619'}, width=960, height=540, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=1351204, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:42.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '8031601'}, width=1920, height=1080, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=1019347, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:48.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '6343378'}, width=1920, height=1080, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=750899, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:54.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '4974250'}, width=1920, height=1080, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=513057, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:37:59.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '3246927'}, width=1280, height=720, frame_rate=60.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=185749, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:38:03.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '1299497'}, width=768, height=432, frame_rate=30.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=111939, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:38:06.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '932801'}, width=640, height=360, frame_rate=30.0)\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=59938, num_frames=0, bits_per_sample=8, metadata={'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T21:38:07.000000Z', 'major_brand': 'mp42', 'minor_version': '1', 'variant_bitrate': '571555'}, width=480, height=270, frame_rate=30.0)\nSourceAudioStream(media_type='audio', codec='aac', codec_long_name='AAC (Advanced Audio Coding)', format='fltp', bit_rate=60076, num_frames=0, bits_per_sample=0, metadata={'comment': 'English', 'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T22:14:57.000000Z', 'language': 'en', 'major_brand': 'mp42', 'minor_version': '1'}, sample_rate=48000.0, num_channels=2)\nSourceAudioStream(media_type='audio', codec='ac3', codec_long_name='ATSC A/52A (AC-3)', format='fltp', bit_rate=384000, num_frames=0, bits_per_sample=0, metadata={'comment': 'English', 'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T22:15:46.000000Z', 'language': 'en', 'major_brand': 'mp42', 'minor_version': '1'}, sample_rate=48000.0, num_channels=6)\nSourceAudioStream(media_type='audio', codec='eac3', codec_long_name='ATSC A/52B (AC-3, E-AC-3)', format='fltp', bit_rate=192000, num_frames=0, bits_per_sample=0, metadata={'comment': 'English', 'compatible_brands': 'mp41mp42isomhlsf', 'creation_time': '2016-12-21T22:16:17.000000Z', 'language': 'en', 'major_brand': 'mp42', 'minor_version': '1'}, sample_rate=48000.0, num_channels=6) \n```", "```py\nstreamer = StreamReader(...)\n\n# Stream audio from default audio source stream\n# 256 frames at a time, keeping the original sampling rate.\nstreamer.add_basic_audio_stream(\n    frames_per_chunk=256,\n)\n\n# Stream audio from source stream `i`.\n# Resample audio to 8k Hz, stream 256 frames at each\nstreamer.add_basic_audio_stream(\n    frames_per_chunk=256,\n    stream_index=[i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    sample_rate=8000,\n) \n```", "```py\n# Stream video from default video source stream.\n# 10 frames at a time, at 30 FPS\n# RGB color channels.\nstreamer.add_basic_video_stream(\n    frames_per_chunk=10,\n    frame_rate=30,\n    format=\"rgb24\"\n)\n\n# Stream video from source stream `j`,\n# 10 frames at a time, at 30 FPS\n# BGR color channels with rescaling to 128x128\nstreamer.add_basic_video_stream(\n    frames_per_chunk=10,\n    stream_index=[j](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    frame_rate=30,\n    width=128,\n    height=128,\n    format=\"bgr24\"\n) \n```", "```py\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in range(streamer.num_out_streams):\n    print(streamer.get_out_stream_info([i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))) \n```", "```py\n# Removes the first output stream.\nstreamer.remove_stream(0) \n```", "```py\nstreamer = StreamReader(...)\nstreamer.add_basic_audio_stream(...)\nstreamer.add_basic_video_stream(...)\n\nfor chunks in streamer.stream():\n    audio_chunk, video_chunk = chunks\n    ... \n```", "```py\nstreamer = StreamReader([VIDEO_URL](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in range(streamer.num_src_streams):\n    print(streamer.get_src_stream_info([i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))) \n```", "```py\nSourceVideoStream(media_type='video', codec='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', format='yuv420p', bit_rate=9958354, num_frames=6175, bits_per_sample=8, metadata={'creation_time': '2018-07-24T17:40:48.000000Z', 'encoder': 'AVC Coding', 'handler_name': '\\x1fMainconcept Video Media Handler', 'language': 'eng', 'vendor_id': '[0][0][0][0]'}, width=1920, height=1080, frame_rate=29.97002997002997)\nSourceAudioStream(media_type='audio', codec='aac', codec_long_name='AAC (Advanced Audio Coding)', format='fltp', bit_rate=317375, num_frames=9658, bits_per_sample=0, metadata={'creation_time': '2018-07-24T17:40:48.000000Z', 'handler_name': '#Mainconcept MP4 Sound Media Handler', 'language': 'eng', 'vendor_id': '[0][0][0][0]'}, sample_rate=48000.0, num_channels=2) \n```", "```py\n# fmt: off\n# Audio stream with 8k Hz\nstreamer.add_basic_audio_stream(\n    frames_per_chunk=8000,\n    sample_rate=8000,\n)\n\n# Audio stream with 16k Hz\nstreamer.add_basic_audio_stream(\n    frames_per_chunk=16000,\n    sample_rate=16000,\n)\n\n# Video stream with 960x540 at 1 FPS.\nstreamer.add_basic_video_stream(\n    frames_per_chunk=1,\n    frame_rate=1,\n    width=960,\n    height=540,\n    format=\"rgb24\",\n)\n\n# Video stream with 320x320 (stretched) at 3 FPS, grayscale\nstreamer.add_basic_video_stream(\n    frames_per_chunk=3,\n    frame_rate=3,\n    width=320,\n    height=320,\n    format=\"gray\",\n)\n# fmt: on \n```", "```py\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in range(streamer.num_out_streams):\n    print(streamer.get_out_stream_info([i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))) \n```", "```py\nOutputAudioStream(source_index=1, filter_description='aresample=8000,aformat=sample_fmts=fltp', media_type='audio', format='fltp', sample_rate=8000.0, num_channels=2)\nOutputAudioStream(source_index=1, filter_description='aresample=16000,aformat=sample_fmts=fltp', media_type='audio', format='fltp', sample_rate=16000.0, num_channels=2)\nOutputVideoStream(source_index=0, filter_description='fps=1,scale=width=960:height=540,format=pix_fmts=rgb24', media_type='video', format='rgb24', width=960, height=540, frame_rate=1.0)\nOutputVideoStream(source_index=0, filter_description='fps=3,scale=width=320:height=320,format=pix_fmts=gray', media_type='video', format='gray', width=320, height=320, frame_rate=3.0) \n```", "```py\nstreamer.remove_stream(1)\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in range(streamer.num_out_streams):\n    print(streamer.get_out_stream_info([i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))) \n```", "```py\nOutputAudioStream(source_index=1, filter_description='aresample=8000,aformat=sample_fmts=fltp', media_type='audio', format='fltp', sample_rate=8000.0, num_channels=2)\nOutputVideoStream(source_index=0, filter_description='fps=1,scale=width=960:height=540,format=pix_fmts=rgb24', media_type='video', format='rgb24', width=960, height=540, frame_rate=1.0)\nOutputVideoStream(source_index=0, filter_description='fps=3,scale=width=320:height=320,format=pix_fmts=gray', media_type='video', format='gray', width=320, height=320, frame_rate=3.0) \n```", "```py\nstreamer.seek(10.0) \n```", "```py\n[n_ite](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 3\n[waveforms](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [vids1](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [vids2](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = [], [], []\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), (waveform, vid1, vid2) in enumerate(streamer.stream()):\n    [waveforms](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\").append(waveform)\n    [vids1](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\").append(vid1)\n    [vids2](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\").append(vid2)\n    if [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + 1 == [n_ite](https://docs.python.org/3/library/functions.html#int \"builtins.int\"):\n        break \n```", "```py\nprint([waveforms](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[0].shape)\nprint([vids1](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[0].shape)\nprint([vids2](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[0].shape) \n```", "```py\ntorch.Size([8000, 2])\ntorch.Size([1, 3, 540, 960])\ntorch.Size([3, 1, 320, 320]) \n```", "```py\n[k](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 3\nfig = plt.figure()\ngs = fig.add_gridspec(3, [k](https://docs.python.org/3/library/functions.html#int \"builtins.int\") * [n_ite](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), waveform in enumerate([waveforms](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")):\n    ax = fig.add_subplot(gs[0, [k](https://docs.python.org/3/library/functions.html#int \"builtins.int\") * [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") : [k](https://docs.python.org/3/library/functions.html#int \"builtins.int\") * ([i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + 1)])\n    ax.specgram(waveform[:, 0], Fs=8000)\n    ax.set_yticks([])\n    ax.set_xticks([])\n    ax.set_title(f\"Iteration {[i](https://docs.python.org/3/library/functions.html#int \"builtins.int\")}\")\n    if [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") == 0:\n        ax.set_ylabel(\"Stream 0\")\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), vid in enumerate([vids1](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")):\n    ax = fig.add_subplot(gs[1, [k](https://docs.python.org/3/library/functions.html#int \"builtins.int\") * [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") : [k](https://docs.python.org/3/library/functions.html#int \"builtins.int\") * ([i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + 1)])\n    ax.imshow(vid[0].permute(1, 2, 0))  # NCHW->HWC\n    ax.set_yticks([])\n    ax.set_xticks([])\n    if [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") == 0:\n        ax.set_ylabel(\"Stream 1\")\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), vid in enumerate([vids2](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")):\n    for [j](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in range(3):\n        ax = fig.add_subplot(gs[2, [k](https://docs.python.org/3/library/functions.html#int \"builtins.int\") * [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + [j](https://docs.python.org/3/library/functions.html#int \"builtins.int\") : [k](https://docs.python.org/3/library/functions.html#int \"builtins.int\") * [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + [j](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + 1])\n        ax.imshow(vid[[j](https://docs.python.org/3/library/functions.html#int \"builtins.int\")].permute(1, 2, 0), cmap=\"gray\")\n        ax.set_yticks([])\n        ax.set_xticks([])\n        if [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") == 0 and [j](https://docs.python.org/3/library/functions.html#int \"builtins.int\") == 0:\n            ax.set_ylabel(\"Stream 2\")\nplt.tight_layout() \n```"]