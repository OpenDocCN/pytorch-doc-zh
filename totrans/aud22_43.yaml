- en: Speech Enhancement with MVDR Beamforming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/tutorials/mvdr_tutorial.html](https://pytorch.org/audio/stable/tutorials/mvdr_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-tutorials-mvdr-tutorial-py) to download the
    full example code
  prefs: []
  type: TYPE_NORMAL
- en: '**Author**: [Zhaoheng Ni](mailto:zni%40meta.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Overview[](#overview "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a tutorial on applying Minimum Variance Distortionless Response (MVDR)
    beamforming to estimate enhanced speech with TorchAudio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate an ideal ratio mask (IRM) by dividing the clean/noise magnitude by
    the mixture magnitude.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Estimate power spectral density (PSD) matrices using [`torchaudio.transforms.PSD()`](../generated/torchaudio.transforms.PSD.html#torchaudio.transforms.PSD
    "torchaudio.transforms.PSD").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Estimate enhanced speech using MVDR modules ([`torchaudio.transforms.SoudenMVDR()`](../generated/torchaudio.transforms.SoudenMVDR.html#torchaudio.transforms.SoudenMVDR
    "torchaudio.transforms.SoudenMVDR") and [`torchaudio.transforms.RTFMVDR()`](../generated/torchaudio.transforms.RTFMVDR.html#torchaudio.transforms.RTFMVDR
    "torchaudio.transforms.RTFMVDR")).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benchmark the two methods ([`torchaudio.functional.rtf_evd()`](../generated/torchaudio.functional.rtf_evd.html#torchaudio.functional.rtf_evd
    "torchaudio.functional.rtf_evd") and [`torchaudio.functional.rtf_power()`](../generated/torchaudio.functional.rtf_power.html#torchaudio.functional.rtf_power
    "torchaudio.functional.rtf_power")) for computing the relative transfer function
    (RTF) matrix of the reference microphone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Preparation[](#preparation "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2.1\. Import the packages[](#import-the-packages "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, we install and import the necessary packages.
  prefs: []
  type: TYPE_NORMAL
- en: '`mir_eval`, `pesq`, and `pystoi` packages are required for evaluating the speech
    enhancement performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 2.2\. Download audio data[](#download-audio-data "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The multi-channel audio example is selected from [ConferencingSpeech](https://github.com/ConferencingSpeech/ConferencingSpeech2021)
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: The original filename is
  prefs: []
  type: TYPE_NORMAL
- en: '`SSB07200001\#noise-sound-bible-0038\#7.86_6.16_3.00_3.14_4.84_134.5285_191.7899_0.4735\#15217\#25.16333303751458\#0.2101221178590021.wav`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'which was generated with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SSB07200001.wav` from [AISHELL-3](https://www.openslr.org/93/) (Apache License
    v.2.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`noise-sound-bible-0038.wav` from [MUSAN](http://www.openslr.org/17/) (Attribution
    4.0 International — CC BY 4.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 2.3\. Helper functions[](#helper-functions "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Generate Ideal Ratio Masks (IRMs)[](#generate-ideal-ratio-masks-irms "Permalink
    to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 3.1\. Load audio data[](#load-audio-data "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: To improve computational robustness, it is recommended to represent the
    waveforms as double-precision floating point (`torch.float64` or `torch.double`)
    values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 3.2\. Compute STFT coefficients[](#compute-stft-coefficients "Permalink to
    this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 3.2.1\. Visualize mixture speech[](#visualize-mixture-speech "Permalink to
    this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We evaluate the quality of the mixture speech or the enhanced speech using
    the following three metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: signal-to-distortion ratio (SDR)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scale-invariant signal-to-noise ratio (Si-SNR, or Si-SDR in some papers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perceptual Evaluation of Speech Quality (PESQ)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also evaluate the intelligibility of the speech with the Short-Time Objective
    Intelligibility (STOI) metric.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Spectrogram of Mixture Speech (dB)](../Images/649354a23fa7ffa055a7ebbc4cc794ee.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.2\. Visualize clean speech[](#visualize-clean-speech "Permalink to this
    heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Spectrogram of Clean Speech (dB)](../Images/8c0ec6c7b70ba3381f01f4ca1aa64cc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.3\. Visualize noise[](#visualize-noise "Permalink to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Spectrogram of Noise (dB)](../Images/6fcdfd90b4d1cf9de948387124b33fbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3\. Define the reference microphone[](#define-the-reference-microphone "Permalink
    to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We choose the first microphone in the array as the reference channel for demonstration.
    The selection of the reference channel may depend on the design of the microphone
    array.
  prefs: []
  type: TYPE_NORMAL
- en: You can also apply an end-to-end neural network which estimates both the reference
    channel and the PSD matrices, then obtains the enhanced STFT coefficients by the
    MVDR module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 3.4\. Compute IRMs[](#compute-irms "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 3.4.1\. Visualize IRM of target speech[](#visualize-irm-of-target-speech "Permalink
    to this heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![IRM of the Target Speech](../Images/554c74b7aceb3610533b6c17013955ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 3.4.2\. Visualize IRM of noise[](#visualize-irm-of-noise "Permalink to this
    heading")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![IRM of the Noise](../Images/f8e3d909efad92e7bbf8a4a89c77afe9.png)'
  prefs: []
  type: TYPE_IMG
- en: 4\. Compute PSD matrices[](#compute-psd-matrices "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`torchaudio.transforms.PSD()`](../generated/torchaudio.transforms.PSD.html#torchaudio.transforms.PSD
    "torchaudio.transforms.PSD") computes the time-invariant PSD matrix given the
    multi-channel complex-valued STFT coefficients of the mixture speech and the time-frequency
    mask.'
  prefs: []
  type: TYPE_NORMAL
- en: The shape of the PSD matrix is (…, freq, channel, channel).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Beamforming using SoudenMVDR[](#beamforming-using-soudenmvdr "Permalink
    to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 5.1\. Apply beamforming[](#apply-beamforming "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`torchaudio.transforms.SoudenMVDR()`](../generated/torchaudio.transforms.SoudenMVDR.html#torchaudio.transforms.SoudenMVDR
    "torchaudio.transforms.SoudenMVDR") takes the multi-channel complexed-valued STFT
    coefficients of the mixture speech, PSD matrices of target speech and noise, and
    the reference channel inputs.'
  prefs: []
  type: TYPE_NORMAL
- en: The output is a single-channel complex-valued STFT coefficients of the enhanced
    speech. We can then obtain the enhanced waveform by passing this output to the
    [`torchaudio.transforms.InverseSpectrogram()`](../generated/torchaudio.transforms.InverseSpectrogram.html#torchaudio.transforms.InverseSpectrogram
    "torchaudio.transforms.InverseSpectrogram") module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 5.2\. Result for SoudenMVDR[](#result-for-soudenmvdr "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![Enhanced Spectrogram by SoudenMVDR (dB)](../Images/538460f3f3101c43956f055d758c19d8.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Beamforming using RTFMVDR[](#beamforming-using-rtfmvdr "Permalink to this
    heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 6.1\. Compute RTF[](#compute-rtf "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'TorchAudio offers two methods for computing the RTF matrix of a target speech:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`torchaudio.functional.rtf_evd()`](../generated/torchaudio.functional.rtf_evd.html#torchaudio.functional.rtf_evd
    "torchaudio.functional.rtf_evd"), which applies eigenvalue decomposition to the
    PSD matrix of target speech to get the RTF matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`torchaudio.functional.rtf_power()`](../generated/torchaudio.functional.rtf_power.html#torchaudio.functional.rtf_power
    "torchaudio.functional.rtf_power"), which applies the power iteration method.
    You can specify the number of iterations with argument `n_iter`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 6.2\. Apply beamforming[](#id1 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`torchaudio.transforms.RTFMVDR()`](../generated/torchaudio.transforms.RTFMVDR.html#torchaudio.transforms.RTFMVDR
    "torchaudio.transforms.RTFMVDR") takes the multi-channel complexed-valued STFT
    coefficients of the mixture speech, RTF matrix of target speech, PSD matrix of
    noise, and the reference channel inputs.'
  prefs: []
  type: TYPE_NORMAL
- en: The output is a single-channel complex-valued STFT coefficients of the enhanced
    speech. We can then obtain the enhanced waveform by passing this output to the
    [`torchaudio.transforms.InverseSpectrogram()`](../generated/torchaudio.transforms.InverseSpectrogram.html#torchaudio.transforms.InverseSpectrogram
    "torchaudio.transforms.InverseSpectrogram") module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 6.3\. Result for RTFMVDR with rtf_evd[](#result-for-rtfmvdr-with-rtf-evd "Permalink
    to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![Enhanced Spectrogram by RTFMVDR and F.rtf_evd (dB)](../Images/370db6cebd6277dbdb20615483979e75.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: 6.4\. Result for RTFMVDR with rtf_power[](#result-for-rtfmvdr-with-rtf-power
    "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![Enhanced Spectrogram by RTFMVDR and F.rtf_power (dB)](../Images/1c0783f4375432452c0ab411fa8bb3a5.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 0 minutes 1.792 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: mvdr_tutorial.py`](../_downloads/50de4231f2cfe5d85bac91915f27f92c/mvdr_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: mvdr_tutorial.ipynb`](../_downloads/ad8cfe3c85e0370f75a48f091e5a301d/mvdr_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
