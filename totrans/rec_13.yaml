- en: torchrec.sparse
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: torchrec.sparse
- en: 原文：[https://pytorch.org/torchrec/torchrec.sparse.html](https://pytorch.org/torchrec/torchrec.sparse.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/torchrec/torchrec.sparse.html](https://pytorch.org/torchrec/torchrec.sparse.html)
- en: Torchrec Jagged Tensors
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Torchrec Jagged Tensors
- en: 'It has 3 classes: JaggedTensor, KeyedJaggedTensor, KeyedTensor.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 它有3个类：JaggedTensor，KeyedJaggedTensor，KeyedTensor。
- en: JaggedTensor
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JaggedTensor
- en: It represents an (optionally weighted) jagged tensor. A JaggedTensor is a tensor
    with a jagged dimension which is dimension whose slices may be of different lengths.
    See KeyedJaggedTensor docstring for full example and further information.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 它表示一个（可选加权）不规则张量。JaggedTensor是一个具有不规则维度的张量，其切片可能具有不同的长度。请参考KeyedJaggedTensor
    docstring以获取完整示例和更多信息。
- en: KeyedJaggedTensor
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedJaggedTensor
- en: KeyedJaggedTensor has additional “Key” information. Keyed on first dimesion,
    and jagged on last dimension. Please refer to KeyedJaggedTensor docstring for
    full example and further information.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedJaggedTensor具有额外的“Key”信息。以第一维为键，最后一维为不规则。请参考KeyedJaggedTensor docstring以获取完整示例和更多信息。
- en: KeyedTensor
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedTensor
- en: KeyedTensor holds a concatenated list of dense tensors each of which can be
    accessed by a key. Keyed dimension can be variable length (length_per_key). Common
    use cases uses include storage of pooled embeddings of different dimensions. Please
    refer to KeyedTensor docstring for full example and further information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedTensor保存了一个可以通过键访问的密集张量列表，每个张量可以通过键访问。键维度可以是可变长度（每个键的长度）。常见用例包括存储不同维度的池化嵌入。请参考KeyedTensor
    docstring以获取完整示例和更多信息。
- en: '## torchrec.sparse.jagged_tensor[](#module-torchrec.sparse.jagged_tensor "Permalink
    to this heading")'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '## torchrec.sparse.jagged_tensor[](#module-torchrec.sparse.jagged_tensor "Permalink
    to this heading")'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Bases: `Module`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`Module`
- en: 'Converts a dict of JaggedTensors to KeyedJaggedTensor. Args:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将JaggedTensors的字典转换为KeyedJaggedTensor。参数：
- en: 'Example: passing in jt_dict'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：传入jt_dict
- en: '{'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '“Feature0”: JaggedTensor([[V0,V1],None,V2]), “Feature1”: JaggedTensor([V3,V4,[V5,V6,V7]]),'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “Feature0”：JaggedTensor([[V0,V1],None,V2]），“Feature1”：JaggedTensor([V3,V4,[V5,V6,V7]]），
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Returns:: kjt with content: # 0 1 2 <– dim_1 # “Feature0” [V0,V1] None [V2]
    # “Feature1” [V3] [V4] [V5,V6,V7] # ^ # dim_0'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '返回：带有内容的kjt：# 0 1 2 <– dim_1 # “Feature0” [V0,V1] None [V2] # “Feature1” [V3]
    [V4] [V5,V6,V7] # ^ # dim_0'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Parameters:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**jt_dict** – a dict of JaggedTensor'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**jt_dict** – 一个JaggedTensor的字典'
- en: 'Returns:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: KeyedJaggedTensor
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedJaggedTensor
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Bases: `Module`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`Module`
- en: Converts a KeyedJaggedTensor to a dict of JaggedTensors.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将KeyedJaggedTensor转换为JaggedTensors的字典。
- en: 'Args:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: 'Example::'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '0 1 2 <– dim_1 # “Feature0” [V0,V1] None [V2] # “Feature1” [V3] [V4] [V5,V6,V7]
    # ^ # dim_0'
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '0 1 2 <– dim_1 # “Feature0” [V0,V1] None [V2] # “Feature1” [V3] [V4] [V5,V6,V7]
    # ^ # dim_0'
- en: would return
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将返回
- en: '{'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '“Feature0”: JaggedTensor([[V0,V1],None,V2]), “Feature1”: JaggedTensor([V3,V4,[V5,V6,V7]]),'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “Feature0”：JaggedTensor([[V0,V1],None,V2]），“Feature1”：JaggedTensor([V3,V4,[V5,V6,V7]]），
- en: '}'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Converts a KeyedJaggedTensor into a dict of JaggedTensors.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将KeyedJaggedTensor转换为JaggedTensors的字典。
- en: 'Parameters:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**keyed_jagged_tensor** ([*KeyedJaggedTensor*](#torchrec.sparse.jagged_tensor.KeyedJaggedTensor
    "torchrec.sparse.jagged_tensor.KeyedJaggedTensor")) – tensor to convert'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**keyed_jagged_tensor** ([*KeyedJaggedTensor*](#torchrec.sparse.jagged_tensor.KeyedJaggedTensor
    "torchrec.sparse.jagged_tensor.KeyedJaggedTensor")) – 要转换的张量'
- en: 'Returns:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: Dict[str, JaggedTensor]
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Dict[str, JaggedTensor]
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Bases: `Pipelineable`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`Pipelineable`
- en: Represents an (optionally weighted) jagged tensor.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个（可选加权）不规则张量。
- en: A JaggedTensor is a tensor with a *jagged dimension* which is dimension whose
    slices may be of different lengths. See KeyedJaggedTensor for full example.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: JaggedTensor是一个具有*不规则维度*的张量，其切片可能具有不同的长度。请参考KeyedJaggedTensor以获取完整示例。
- en: Implementation is torch.jit.script-able.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可以进行torch.jit.script。
- en: Note
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will NOT do input validation as it’s expensive, you should always pass in
    the valid lengths, offsets, etc.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会进行输入验证，因为这很昂贵，您应该始终传入有效的长度、偏移等。
- en: 'Parameters:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**values** (*torch.Tensor*) – values tensor in dense representation.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**values**（*torch.Tensor*）– 密集表示中的值张量。'
- en: '**weights** (*Optional**[**torch.Tensor**]*) – if values have weights. Tensor
    with same shape as values.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**weights**（*可选**[**torch.Tensor**]）– 如果值有权重。形状与值相同的张量。'
- en: '**lengths** (*Optional**[**torch.Tensor**]*) – jagged slices, represented as
    lengths.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lengths**（*可选**[**torch.Tensor**]）– 切片，表示为长度。'
- en: '**offsets** (*Optional**[**torch.Tensor**]*) – jagged slices, represented as
    cumulative offsets.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**offsets**（*可选**[**torch.Tensor**]）– 切片，表示为累积偏移。'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Constructs JaggedTensor from dense values/weights of shape (B, N,).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从形状为(B, N,)的密集值/权重构建JaggedTensor。
- en: Note that lengths and offsets are still of shape (B,).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，长度和偏移仍然是形状为(B,)的。
- en: 'Parameters:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**values** (*List**[**torch.Tensor**]*) – a list of tensors for dense representation'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**values**（*List**[**torch.Tensor**]）– 用于密集表示的张量列表'
- en: '**weights** (*Optional**[**List**[**torch.Tensor**]**]*) – if values have weights,
    tensor with the same shape as values.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**weights**（*可选**[**List**[**torch.Tensor**]**]）– 如果值有权重，形状与值相同的张量。'
- en: 'Returns:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: JaggedTensor created from 2D dense tensor.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从2D密集张量创建的JaggedTensor。
- en: 'Return type:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: '[JaggedTensor](#torchrec.sparse.jagged_tensor.JaggedTensor "torchrec.sparse.jagged_tensor.JaggedTensor")'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[JaggedTensor](#torchrec.sparse.jagged_tensor.JaggedTensor "torchrec.sparse.jagged_tensor.JaggedTensor")'
- en: 'Example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Constructs JaggedTensor from dense values/weights of shape (B, N,).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从形状为(B, N,)的密集值/权重构建JaggedTensor。
- en: Note that lengths is still of shape (B,).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，长度仍然是形状为(B,)的。
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See [https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html](https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html](https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html)
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Please be aware that according to [https://pytorch.org/docs/stable/generated/torch.Tensor.to.html](https://pytorch.org/docs/stable/generated/torch.Tensor.to.html),
    to might return self or a copy of self. So please remember to use to with the
    assignment operator, for example, in = in.to(new_device).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，根据[https://pytorch.org/docs/stable/generated/torch.Tensor.to.html](https://pytorch.org/docs/stable/generated/torch.Tensor.to.html)，to可能返回self或self的副本。因此，请记住要使用赋值运算符to，例如，in
    = in.to(new_device)。
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Constructs a dense-representation of the JT’s values.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 构建JT值的密集表示。
- en: 'Returns:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: list of tensors.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 张量列表。
- en: 'Return type:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: List[torch.Tensor]
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 列表[torch.Tensor]
- en: 'Example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Constructs a dense-representation of the JT’s weights.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 构造JT的权重的稠密表示。
- en: 'Returns:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: list of tensors, None if no weights.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 张量列表，如果没有权重则为None。
- en: 'Return type:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: Optional[List[torch.Tensor]]
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 可选[列表[torch.Tensor]]
- en: 'Example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Constructs a 2D dense tensor from the JT’s values of shape (B, N,).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 从JT的值构造一个形状为(B, N,)的2D稠密张量。
- en: Note that B is the length of self.lengths() and N is the longest feature length
    or desired_length.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，B是self.lengths()的长度，N是最长的特征长度或desired_length。
- en: If desired_length > length we will pad with padding_value, otherwise we will
    select the last value at desired_length.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果desired_length > length，则将使用padding_value进行填充，否则将选择desired_length处的最后一个值。
- en: 'Parameters:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**desired_length** (*int*) – the length of the tensor.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**desired_length** (*整数*) - 张量的长度。'
- en: '**padding_value** (*float*) – padding value if we need to pad.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**填充值** (*浮点数*) - 如果需要填充的填充值。'
- en: 'Returns:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 2d dense tensor.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 2d稠密张量。
- en: 'Return type:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: torch.Tensor
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: torch.Tensor
- en: 'Example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Constructs a 2D dense tensor from the JT’s weights of shape (B, N,).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从JT的权重构造一个形状为(B, N,)的2D稠密张量。
- en: Note that B is the length of self.lengths() and N is the longest feature length
    or desired_length.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，B是self.lengths()的长度，N是最长的特征长度或desired_length。
- en: If desired_length > length we will pad with padding_value, otherwise we will
    select the last value at desired_length.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果desired_length > length，则将使用padding_value进行填充，否则将选择desired_length处的最后一个值。
- en: 'Parameters:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**desired_length** (*int*) – the length of the tensor.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**desired_length** (*整数*) - 张量的长度。'
- en: '**padding_value** (*float*) – padding value if we need to pad.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**padding_value** (*浮点数*) - 如果需要填充的填充值。'
- en: 'Returns:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 2d dense tensor, None if no weights.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 2d稠密张量，如果没有权重则为None。
- en: 'Return type:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: Optional[torch.Tensor]
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 可选[torch.Tensor]
- en: 'Example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Bases: `ABCMeta`, `ProxyableClassMeta`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`ABCMeta`，`ProxyableClassMeta`
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Bases: `Pipelineable`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`Pipelineable`
- en: Represents an (optionally weighted) keyed jagged tensor.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个（可选加权）键控不规则张量。
- en: A KeyedJaggedTensor is a tensor with a *jagged dimension* which is dimension
    whose slices may be of different lengths. Keyed on first dimension and jagged
    on the last dimension.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedJaggedTensor是一个具有*jagged dimension*的张量，其切片可能具有不同的长度。在第一维上键入，在最后一维上不规则。
- en: Implementation is torch.jit.script-able.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 实现为torch.jit.script-able。
- en: 'Parameters:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**keys** (*List**[**str**]*) – keys to the jagged Tensor.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**keys** (*列表**[**字符串**]*) - Jagged Tensor的键。'
- en: '**values** (*torch.Tensor*) – values tensor in dense representation.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**values** (*torch.Tensor*) - 稠密表示中的值张量。'
- en: '**weights** (*Optional**[**torch.Tensor**]*) – if the values have weights.
    Tensor with the same shape as values.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**weights** (*可选**[**torch.Tensor**]*) - 如果值有权重。形状与值相同的张量。'
- en: '**lengths** (*Optional**[**torch.Tensor**]*) – jagged slices, represented as
    lengths.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lengths** (*可选**[**torch.Tensor**]*) - 不规则切片，表示为长度。'
- en: '**offsets** (*Optional**[**torch.Tensor**]*) – jagged slices, represented as
    cumulative offsets.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**offsets** (*可选**[**torch.Tensor**]*) - 不规则切片，表示为累积偏移量。'
- en: '**stride** (*Optional**[**int**]*) – number of examples per batch.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**stride** (*可选**[**整数**]*) - 每批的示例数。'
- en: '**stride_per_key_per_rank** (*Optional**[**List**[**List**[**int**]**]**]*)
    – batch size (number of examples) per key per rank, with the outer list representing
    the keys and the inner list representing the values. Each value in the inner list
    represents the number of examples in the batch from the rank of its index in a
    distributed context.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**stride_per_key_per_rank** (*可选**[**列表**[**列表**[**整数**]**]**]*) - 每个等级的每个键的批次大小（示例数），外部列表表示键，内部列表表示值。内部列表中的每个值表示批次中来自其索引在分布上下文中的等级的数量。'
- en: '**length_per_key** (*Optional**[**List**[**int**]**]*) – start length for each
    key.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**length_per_key** (*可选**[**列表**[**整数**]**]*) - 每个键的起始长度。'
- en: '**offset_per_key** (*Optional**[**List**[**int**]**]*) – start offset for each
    key and final offset.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**offset_per_key** (*可选**[**列表**[**整数**]**]*) - 每个键和最终偏移的起始偏移量。'
- en: '**index_per_key** (*Optional**[**Dict**[**str**,* *int**]**]*) – index for
    each key.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**index_per_key** (*可选**[**字典**[**字符串**,* *整数**]**]*) - 每个键的索引。'
- en: '**jt_dict** (*Optional**[**Dict**[**str**,* [*JaggedTensor*](#torchrec.sparse.jagged_tensor.JaggedTensor
    "torchrec.sparse.jagged_tensor.JaggedTensor")*]**]*) –'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jt_dict** (*可选**[**字典**[**字符串**,* [*JaggedTensor*](#torchrec.sparse.jagged_tensor.JaggedTensor
    "torchrec.sparse.jagged_tensor.JaggedTensor")*]**]*) -'
- en: '**inverse_indices** (*Optional**[**Tuple**[**List**[**str**]**,* *torch.Tensor**]**]*)
    – inverse indices to expand deduplicated embedding output for variable stride
    per key.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**inverse_indices** (*可选**[**元组**[**列表**[**字符串**]**,* *torch.Tensor**]**]*)
    - 用于为每个键的可变步幅扩展去重嵌入输出的逆索引。'
- en: 'Example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Constructs a KeyedJaggedTensor from a Dict[str, JaggedTensor], but this function
    will ONLY work if the JaggedTensors all have the same “implicit” batch_size dimension.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从Dict[str, JaggedTensor]构造一个KeyedJaggedTensor，但是如果JaggedTensors都具有相同的“隐式”batch_size维度，则此函数将仅起作用。
- en: Basically, we can visualize JaggedTensors as 2-D tensors of the format of [batch_size
    x variable_feature_dim]. In case, we have some batch without a feature value,
    the input JaggedTensor could just not include any values.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们可以将JaggedTensors可视化为格式为[batch_size x variable_feature_dim]的2-D张量。如果有一些批次没有特征值，输入的JaggedTensor可以不包含任何值。
- en: But KeyedJaggedTensor (by default) typically pad “None” so that all the JaggedTensors
    stored in the KeyedJaggedTensor have the same batch_size dimension. That is, in
    the case, the JaggedTensor input didn’t automatically pad for the empty batches,
    this function would error / not work.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 但KeyedJaggedTensor（默认情况下）通常会填充“None”，以便存储在KeyedJaggedTensor中的所有JaggedTensors具有相同的batch_size维度。也就是说，在这种情况下，JaggedTensor输入没有自动为空批次填充，此函数将出错/无法工作。
- en: 'Consider the visualization of the following KeyedJaggedTensor: # 0 1 2 <– dim_1
    # “Feature0” [V0,V1] None [V2] # “Feature1” [V3] [V4] [V5,V6,V7] # ^ # dim_0'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '考虑以下KeyedJaggedTensor的可视化：# 0 1 2 <– dim_1 # “Feature0” [V0,V1] None [V2] #
    “Feature1” [V3] [V4] [V5,V6,V7] # ^ # dim_0'
- en: 'Notice that the inputs for this KeyedJaggedTensor would have looked like:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个KeyedJaggedTensor的输入看起来像：
- en: 'values: torch.Tensor = [V0, V1, V2, V3, V4, V5, V6, V7] # V == any tensor datatype
    weights: torch.Tensor = [W0, W1, W2, W3, W4, W5, W6, W7] # W == any tensor datatype
    lengths: torch.Tensor = [2, 0, 1, 1, 1, 3] # representing the jagged slice offsets:
    torch.Tensor = [0, 2, 2, 3, 4, 5, 8] # offsets from 0 for each jagged slice keys:
    List[str] = [“Feature0”, “Feature1”] # correspond to each value of dim_0 index_per_key:
    Dict[str, int] = {“Feature0”: 0, “Feature1”: 1} # index for each key offset_per_key:
    List[int] = [0, 3, 8] # start offset for each key and final offset'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 'values: torch.Tensor = [V0, V1, V2, V3, V4, V5, V6, V7] # V == 任何张量数据类型 weights:
    torch.Tensor = [W0, W1, W2, W3, W4, W5, W6, W7] # W == 任何张量数据类型 lengths: torch.Tensor
    = [2, 0, 1, 1, 1, 3] # 表示Jagged切片的偏移量: torch.Tensor = [0, 2, 2, 3, 4, 5, 8] #
    每个Jagged切片的偏移量从0开始 keys: List[str] = [“Feature0”, “Feature1”] # 对应于dim_0索引的每个值
    index_per_key: Dict[str, int] = {“Feature0”: 0, “Feature1”: 1} # 每个键的索引 offset_per_key:
    List[int] = [0, 3, 8] # 每个键的起始偏移和最终偏移'
- en: Now if the input jt_dict = {
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果输入jt_dict = {
- en: '“Feature0” [V0,V1] [V2] # “Feature1” [V3] [V4] [V5,V6,V7]'
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '“Feature0” [V0,V1] [V2] # “Feature1” [V3] [V4] [V5,V6,V7]'
- en: '} and the “None” is left out from each JaggedTensor, then this function would
    fail as we would not correctly be able to pad “None” as it does not technically
    know the correct batch / place to pad within the JaggedTensor.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '}并且每个JaggedTensor中都省略了“None”，那么此函数将失败，因为我们无法正确地填充“None”，因为它在技术上不知道在JaggedTensor中正确的批次/位置进行填充。'
- en: Essentially, the lengths Tensor inferred by this function would be [2, 1, 1,
    1, 3] indicating variable batch_size dim_1 violates the existing assumption /
    precondition that KeyedJaggedTensor’s should have fixed batch_size dimension.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，此函数推断的长度张量将是[2, 1, 1, 1, 3]，表示可变的batch_size dim_1违反了现有的假设/前提，即KeyedJaggedTensor应该具有固定的batch_size维度。
- en: '[PRE41]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: See [https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html](https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html](https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html)
- en: '[PRE58]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Please be aware that according to [https://pytorch.org/docs/stable/generated/torch.Tensor.to.html](https://pytorch.org/docs/stable/generated/torch.Tensor.to.html),
    to might return self or a copy of self. So please remember to use to with the
    assignment operator, for example, in = in.to(new_device).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，根据[https://pytorch.org/docs/stable/generated/torch.Tensor.to.html](https://pytorch.org/docs/stable/generated/torch.Tensor.to.html)，to可能返回self或self的副本。因此，请记住使用赋值运算符to，例如，in
    = in.to(new_device)。
- en: '[PRE64]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Bases: `Pipelineable`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`Pipelineable`
- en: KeyedTensor holds a concatenated list of dense tensors, each of which can be
    accessed by a key.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedTensor保存了一个稠密张量的连接列表，每个张量可以通过一个键访问。
- en: The keyed dimension can be of variable length (length_per_key). Common use cases
    uses include storage of pooled embeddings of different dimensions.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 键维度可以是可变长度（length_per_key）。常见用例包括存储不同维度的池化嵌入。
- en: Implementation is torch.jit.script-able.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 实现为torch.jit.script-able。
- en: 'Parameters:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**keys** (*List**[**str**]*) – list of keys.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**keys**（*List**[**str**]*） - 键列表。'
- en: '**length_per_key** (*List**[**int**]*) – length of each key along key dimension.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**length_per_key**（*List**[**int**]*） - 沿键维度的每个键的长度。'
- en: '**values** (*torch.Tensor*) – dense tensor, concatenated typically along key
    dimension.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**values**（*torch.Tensor*） - 稠密张量，通常沿键维度连接。'
- en: '**key_dim** (*int*) – key dimension, zero indexed - defaults to 1 (typically
    B is 0-dimension).'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**key_dim**（*int*） - 键维度，从零开始索引，默认为1（通常B是0维）。'
- en: 'Example:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE71]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: See [https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html](https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html](https://pytorch.org/docs/stable/generated/torch.Tensor.record_stream.html)
- en: '[PRE78]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Please be aware that according to [https://pytorch.org/docs/stable/generated/torch.Tensor.to.html](https://pytorch.org/docs/stable/generated/torch.Tensor.to.html),
    to might return self or a copy of self. So please remember to use to with the
    assignment operator, for example, in = in.to(new_device).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，根据[https://pytorch.org/docs/stable/generated/torch.Tensor.to.html](https://pytorch.org/docs/stable/generated/torch.Tensor.to.html)，to可能返回self或self的副本。因此，请记住使用赋值运算符to，例如，in
    = in.to(new_device)。
- en: '[PRE81]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: This function checks if two JaggedTensors are equal by comparing their internal
    representations. The comparison is done by comparing the values of the internal
    representations themselves. For optional fields, None values are treated as equal.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数通过比较它们的内部表示来检查两个JaggedTensors是否相等。比较是通过比较内部表示的值来完成的。对于可选字段，将None值视为相等。
- en: 'Parameters:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**jt_1** ([*JaggedTensor*](#torchrec.sparse.jagged_tensor.JaggedTensor "torchrec.sparse.jagged_tensor.JaggedTensor"))
    – the first JaggedTensor'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jt_1**（[*JaggedTensor*](#torchrec.sparse.jagged_tensor.JaggedTensor "torchrec.sparse.jagged_tensor.JaggedTensor"）
    - 第一个JaggedTensor'
- en: '**jt_2** ([*JaggedTensor*](#torchrec.sparse.jagged_tensor.JaggedTensor "torchrec.sparse.jagged_tensor.JaggedTensor"))
    – the second JaggedTensor'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jt_2**（[*JaggedTensor*](#torchrec.sparse.jagged_tensor.JaggedTensor "torchrec.sparse.jagged_tensor.JaggedTensor"）
    - 第二个JaggedTensor'
- en: 'Returns:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: True if both JaggedTensors have the same values
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个JaggedTensors具有相同的值，则返回True
- en: 'Return type:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: bool
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值
- en: '[PRE84]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: This function checks if two KeyedJaggedTensors are equal by comparing their
    internal representations. The comparison is done by comparing the values of the
    internal representations themselves. For optional fields, None values are treated
    as equal. We compare the keys by ensuring that they have the same length and that
    the corresponding keys are the same order and same values.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数通过比较它们的内部表示来检查两个KeyedJaggedTensors是否相等。比较是通过比较内部表示的值来完成的。对于可选字段，将None值视为相等。我们通过确保它们具有相同长度并且相应的键是相同顺序和相同值来比较键。
- en: 'Parameters:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**kjt_1** ([*KeyedJaggedTensor*](#torchrec.sparse.jagged_tensor.KeyedJaggedTensor
    "torchrec.sparse.jagged_tensor.KeyedJaggedTensor")) – the first KeyedJaggedTensor'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kjt_1**（[*KeyedJaggedTensor*](#torchrec.sparse.jagged_tensor.KeyedJaggedTensor
    "torchrec.sparse.jagged_tensor.KeyedJaggedTensor"） - 第一个KeyedJaggedTensor'
- en: '**kjt_2** ([*KeyedJaggedTensor*](#torchrec.sparse.jagged_tensor.KeyedJaggedTensor
    "torchrec.sparse.jagged_tensor.KeyedJaggedTensor")) – the second KeyedJaggedTensor'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kjt_2**（[*KeyedJaggedTensor*](#torchrec.sparse.jagged_tensor.KeyedJaggedTensor
    "torchrec.sparse.jagged_tensor.KeyedJaggedTensor"） - 第二个KeyedJaggedTensor'
- en: 'Returns:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: True if both KeyedJaggedTensors have the same values
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个KeyedJaggedTensors具有相同的值，则为True
- en: 'Return type:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: 'bool  ## Module contents[](#module-0 "Permalink to this heading")'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 'bool  ## 模块内容[]（＃module-0“此标题的永久链接”）'
- en: Torchrec Jagged Tensors
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Torchrec不规则张量
- en: 'It has 3 classes: JaggedTensor, KeyedJaggedTensor, KeyedTensor.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 它有3个类：JaggedTensor，KeyedJaggedTensor，KeyedTensor。
- en: JaggedTensor
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: JaggedTensor
- en: It represents an (optionally weighted) jagged tensor. A JaggedTensor is a tensor
    with a jagged dimension which is dimension whose slices may be of different lengths.
    See KeyedJaggedTensor docstring for full example and further information.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 它表示一个（可选加权）不规则张量。 JaggedTensor是一个具有不规则维度的张量，其切片可能具有不同的长度。 请参考KeyedJaggedTensor文档字符串以获取完整示例和更多信息。
- en: KeyedJaggedTensor
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedJaggedTensor
- en: KeyedJaggedTensor has additional “Key” information. Keyed on first dimesion,
    and jagged on last dimension. Please refer to KeyedJaggedTensor docstring for
    full example and further information.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedJaggedTensor具有额外的“Key”信息。 键在第一个维度上，最后一个维度上是不规则的。 请参考KeyedJaggedTensor文档字符串以获取完整示例和更多信息。
- en: KeyedTensor
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedTensor
- en: KeyedTensor holds a concatenated list of dense tensors each of which can be
    accessed by a key. Keyed dimension can be variable length (length_per_key). Common
    use cases uses include storage of pooled embeddings of different dimensions. Please
    refer to KeyedTensor docstring for full example and further information.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: KeyedTensor保存了一个连接的密集张量列表，每个张量可以通过键访问。 键的维度可以是可变长度（每个键的长度）。 常见用例包括存储不同维度的池化嵌入。
    请参考KeyedTensor文档字符串以获取完整示例和更多信息。
