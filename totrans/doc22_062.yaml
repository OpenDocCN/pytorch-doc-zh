- en: torch.monitor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/docs/stable/monitor.html](https://pytorch.org/docs/stable/monitor.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This module is a prototype release, and its interfaces and functionality may
    change without warning in future PyTorch releases.
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.monitor` provides an interface for logging events and counters from
    PyTorch.'
  prefs: []
  type: TYPE_NORMAL
- en: The stat interfaces are designed to be used for tracking high level metrics
    that are periodically logged out to be used for monitoring system performance.
    Since the stats aggregate with a specific window size you can log to them from
    critical loops with minimal performance impact.
  prefs: []
  type: TYPE_NORMAL
- en: For more infrequent events or values such as loss, accuracy, usage tracking
    the event interface can be directly used.
  prefs: []
  type: TYPE_NORMAL
- en: Event handlers can be registered to handle the events and pass them to an external
    event sink.
  prefs: []
  type: TYPE_NORMAL
- en: '## API Reference'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: These are types of aggregations that can be used to accumulate stats.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Members:'
  prefs: []
  type: TYPE_NORMAL
- en: 'VALUE :'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: VALUE returns the last value to be added.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'MEAN :'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: MEAN computes the arithmetic mean of all the added values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'COUNT :'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: COUNT returns the total number of added values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'SUM :'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SUM returns the sum of the added values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'MAX :'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: MAX returns the max of the added values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'MIN :'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: MIN returns the min of the added values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Stat is used to compute summary statistics in a performant way over fixed intervals.
    Stat logs the statistics as an Event once every `window_size` duration. When the
    window closes the stats are logged via the event handlers as a `torch.monitor.Stat`
    event.
  prefs: []
  type: TYPE_NORMAL
- en: '`window_size` should be set to something relatively high to avoid a huge number
    of events being logged. Ex: 60s. Stat uses millisecond precision.'
  prefs: []
  type: TYPE_NORMAL
- en: If `max_samples` is set, the stat will cap the number of samples per window
    by discarding add calls once `max_samples` adds have occurred. If it’s not set,
    all `add` calls during the window will be included. This is an optional field
    to make aggregations more directly comparable across windows when the number of
    samples might vary.
  prefs: []
  type: TYPE_NORMAL
- en: When the Stat is destructed it will log any remaining data even if the window
    hasn’t elapsed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Constructs the `Stat`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adds a value to the stat to be aggregated according to the configured stat type
    and aggregations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Number of data points that have currently been collected. Resets once the event
    has been logged.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returns the current value of the stat, primarily for testing purposes. If the
    stat has logged and no additional values have been added this will be zero.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The name of the stat that was set during creation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: data_value_t is one of `str`, `float`, `int`, `bool`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Event represents a specific typed event to be logged. This can represent high-level
    data points such as loss or accuracy per epoch or more low-level aggregations
    such as through the Stats provided through this library.
  prefs: []
  type: TYPE_NORMAL
- en: All Events of the same type should have the same name so downstream handlers
    can correctly process them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Constructs the `Event`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The structured data contained within the `Event`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The name of the `Event`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The timestamp when the `Event` happened.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: EventHandlerHandle is a wrapper type returned by `register_event_handler` used
    to unregister the handler via `unregister_event_handler`. This cannot be directly
    initialized.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: log_event logs the specified event to all of the registered event handlers.
    It’s up to the event handlers to log the event out to the corresponding event
    sink.
  prefs: []
  type: TYPE_NORMAL
- en: If there are no event handlers registered this method is a no-op.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: register_event_handler registers a callback to be called whenever an event is
    logged via `log_event`. These handlers should avoid blocking the main thread since
    that may interfere with training as they run during the `log_event` call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: unregister_event_handler unregisters the `EventHandlerHandle` returned after
    calling `register_event_handler`. After this returns the event handler will no
    longer receive events.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: TensorboardEventHandler is an event handler that will write known events to
    the provided SummaryWriter.
  prefs: []
  type: TYPE_NORMAL
- en: This currently only supports `torch.monitor.Stat` events which are logged as
    scalars.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Constructs the `TensorboardEventHandler`.
  prefs: []
  type: TYPE_NORMAL
