- en: torch.library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: torch.library
- en: 原文：[https://pytorch.org/docs/stable/library.html](https://pytorch.org/docs/stable/library.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/docs/stable/library.html](https://pytorch.org/docs/stable/library.html)
- en: torch.library is a collection of APIs for extending PyTorch’s core library of
    operators. It contains utilities for creating new custom operators as well as
    extending operators defined with PyTorch’s C++ operator registration APIs (e.g.
    aten operators).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: torch.library是一组用于扩展PyTorch核心运算符库的API。它包含用于创建新的自定义运算符以及扩展使用PyTorch的C++运算符注册API（例如aten运算符）定义的运算符的实用程序。
- en: For a detailed guide on effectively using these APIs, please see [this gdoc](https://docs.google.com/document/d/1W--T6wz8IY8fOI0Vm8BF44PdBgs283QvpelJZWieQWQ/edit)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有关有效使用这些API的详细指南，请参阅[此gdoc](https://docs.google.com/document/d/1W--T6wz8IY8fOI0Vm8BF44PdBgs283QvpelJZWieQWQ/edit)
- en: Use [`torch.library.define()`](#torch.library.define "torch.library.define")
    to define new custom operators. Use the impl methods, such as [`torch.library.impl()`](#torch.library.impl
    "torch.library.impl") and func:torch.library.impl_abstract, to add implementations
    for any operators (they may have been created using [`torch.library.define()`](#torch.library.define
    "torch.library.define") or via PyTorch’s C++ operator registration APIs).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`torch.library.define()`](#torch.library.define "torch.library.define")来定义新的自定义运算符。使用impl方法，例如[`torch.library.impl()`](#torch.library.impl
    "torch.library.impl")和func:torch.library.impl_abstract，为任何运算符添加实现（它们可以使用[`torch.library.define()`](#torch.library.define
    "torch.library.define")创建，或通过PyTorch的C++运算符注册API创建）。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Defines a new operator.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个新的运算符。
- en: 'In PyTorch, defining an op (short for “operator”) is a two step-process: -
    we need to define the op (by providing an operator name and schema) - we need
    to implement behavior for how the operator interacts with various PyTorch subsystems,
    like CPU/CUDA Tensors, Autograd, etc.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyTorch中，定义一个op（即“运算符”）是一个两步过程：- 我们需要定义op（提供运算符名称和模式）- 我们需要实现运算符与各种PyTorch子系统（如CPU/CUDA张量，Autograd等）交互的行为。
- en: This entrypoint defines the custom operator (the first step) you must then perform
    the second step by calling various `impl_*` APIs, like [`torch.library.impl()`](#torch.library.impl
    "torch.library.impl") or [`torch.library.impl_abstract()`](#torch.library.impl_abstract
    "torch.library.impl_abstract").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此入口点定义了自定义运算符（第一步），然后您必须通过调用各种`impl_*` API（如[`torch.library.impl()`](#torch.library.impl
    "torch.library.impl")或[`torch.library.impl_abstract()`](#torch.library.impl_abstract
    "torch.library.impl_abstract")）执行第二步。
- en: Parameters
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**qualname** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – The qualified name for the operator. Should be a string that
    looks like “namespace::name”, e.g. “aten::sin”. Operators in PyTorch need a namespace
    to avoid name collisions; a given operator may only be created once. If you are
    writing a Python library, we recommend the namespace to be the name of your top-level
    module.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qualname**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12)")) - 运算符的限定名称。应该是一个看起来像“namespace::name”的字符串，例如“aten::sin”。PyTorch中的运算符需要一个命名空间以避免名称冲突；给定的运算符只能创建一次。如果您正在编写Python库，我们建议命名空间为顶级模块的名称。'
- en: '**schema** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – The schema of the operator. E.g. “(Tensor x) -> Tensor” for
    an op that accepts one Tensor and returns one Tensor. It does not contain the
    operator name (that is passed in `qualname`).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**schema**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12)")) - 运算符的模式。例如，对于一个接受一个张量并返回一个张量的op，“（张量x）->张量”。它不包含运算符名称（传递给`qualname`）。'
- en: '**lib** (*Optional**[*[*Library*](#torch.library.Library "torch.library.Library")*]*)
    – If provided, the lifetime of this operator will be tied to the lifetime of the
    Library object.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lib**（*可选**[*[*Library*](#torch.library.Library "torch.library.Library")*]）-
    如果提供，此运算符的生命周期将与Library对象的生命周期绑定。'
- en: '**tags** ([*Tag*](torch.html#torch.Tag "torch.Tag") *|* *Sequence**[*[*Tag*](torch.html#torch.Tag
    "torch.Tag")*]*) – one or more torch.Tag to apply to this operator. Tagging an
    operator changes the operator’s behavior under various PyTorch subsystems; please
    read the docs for the torch.Tag carefully before applying it.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**（[*标签*](torch.html#torch.Tag "torch.Tag") *|* *序列**[*[*标签*](torch.html#torch.Tag
    "torch.Tag")*]）- 一个或多个torch.Tag，应用于此运算符。对运算符进行标记会改变运算符在各种PyTorch子系统下的行为；请在应用之前仔细阅读torch.Tag的文档。'
- en: 'Example::'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '示例::'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Register an implementation for a device type for this operator.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为此运算符的设备类型注册一个实现。
- en: You may pass “default” for `types` to register this implementation as the default
    implementation for ALL device types. Please only use this if the implementation
    truly supports all device types; for example, this is true if it is a composition
    of built-in PyTorch operators.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将“default”传递给`types`，以将此实现注册为所有设备类型的默认实现。只有在实现真正支持所有设备类型时才使用此选项；例如，如果它是内置PyTorch运算符的组合，则为真。
- en: 'Some valid types are: “cpu”, “cuda”, “xla”, “mps”, “ipu”, “xpu”.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有效的类型是：“cpu”，“cuda”，“xla”，“mps”，“ipu”，“xpu”。
- en: Parameters
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**qualname** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – Should be a string that looks like “namespace::operator_name”.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qualname**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12)")) - 应该是一个看起来像“namespace::operator_name”的字符串。'
- en: '**types** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)") *|* *Sequence**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]*) – The device types to register an impl to.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**types**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12)") *|* *序列**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12)")*]）- 要注册实现的设备类型。'
- en: '**lib** (*Optional**[*[*Library*](#torch.library.Library "torch.library.Library")*]*)
    – If provided, the lifetime of this registration will be tied to the lifetime
    of the Library object.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lib**（*可选**[*[*Library*](#torch.library.Library "torch.library.Library")*]）-
    如果提供，此注册的生命周期将与Library对象的生命周期绑定。'
- en: Examples
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Register an abstract implementation for this operator.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为此运算符注册一个抽象实现。
- en: An “abstract implementation” specifies the behavior of this operator on Tensors
    that carry no data. Given some input Tensors with certain properties (sizes/strides/storage_offset/device),
    it specifies what the properties of the output Tensors are.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “抽象实现”指定了在携带无数据的张量上的操作符的行为。给定具有某些属性（大小/步幅/存储偏移/设备）的输入张量，它指定了输出张量的属性是什么。
- en: The abstract implementation has the same signature as the operator. It is run
    for both FakeTensors and meta tensors. To write an abstract implementation, assume
    that all Tensor inputs to the operator are regular CPU/CUDA/Meta tensors, but
    they do not have storage, and you are trying to return regular CPU/CUDA/Meta tensor(s)
    as output. The abstract implementation must consist of only PyTorch operations
    (and may not directly access the storage or data of any input or intermediate
    Tensors).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象实现与操作符具有相同的签名。它适用于FakeTensors和元张量。要编写抽象实现，请假设操作符的所有张量输入都是常规的CPU/CUDA/Meta张量，但它们没有存储，并且您正在尝试返回常规的CPU/CUDA/Meta张量作为输出。抽象实现必须仅包含PyTorch操作（不能直接访问任何输入或中间张量的存储或数据）。
- en: This API may be used as a decorator (see examples).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此API可以用作装饰器（请参阅示例）。
- en: For a detailed guide on custom ops, please see [https://docs.google.com/document/d/1W–T6wz8IY8fOI0Vm8BF44PdBgs283QvpelJZWieQWQ/edit](https://docs.google.com/document/d/1W--T6wz8IY8fOI0Vm8BF44PdBgs283QvpelJZWieQWQ/edit)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有关自定义操作的详细指南，请参阅[https://docs.google.com/document/d/1W--T6wz8IY8fOI0Vm8BF44PdBgs283QvpelJZWieQWQ/edit](https://docs.google.com/document/d/1W--T6wz8IY8fOI0Vm8BF44PdBgs283QvpelJZWieQWQ/edit)
- en: Examples
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: get_ctx() returns the current AbstractImplCtx object.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: get_ctx()返回当前的AbstractImplCtx对象。
- en: Calling `get_ctx()` is only valid inside of an abstract impl (see [`torch.library.impl_abstract()`](#torch.library.impl_abstract
    "torch.library.impl_abstract") for more usage details.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在抽象实现内部调用`get_ctx()`才有效（有关更多用法细节，请参见[`torch.library.impl_abstract()`](#torch.library.impl_abstract
    "torch.library.impl_abstract")）。
- en: Return type
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '*AbstractImplCtx*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*AbstractImplCtx*'
- en: Low-level APIs
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低级API
- en: The following APIs are direct bindings to PyTorch’s C++ low-level operator registration
    APIs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下API是直接绑定到PyTorch的C++低级操作符注册API。
- en: Warning
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The low-level operator registration APIs and the PyTorch Dispatcher are a complicated
    PyTorch concept. We recommend you use the higher level APIs above (that do not
    require a torch.library.Library object) when possible. This blog post <[http://blog.ezyang.com/2020/09/lets-talk-about-the-pytorch-dispatcher/](http://blog.ezyang.com/2020/09/lets-talk-about-the-pytorch-dispatcher/)>`_
    is a good starting point to learn about the PyTorch Dispatcher.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 低级操作符注册API和PyTorch调度程序是一个复杂的PyTorch概念。我们建议在可能的情况下使用上面的更高级API（不需要torch.library.Library对象）。这篇博文<[http://blog.ezyang.com/2020/09/lets-talk-about-the-pytorch-dispatcher/](http://blog.ezyang.com/2020/09/lets-talk-about-the-pytorch-dispatcher/)>`_
    是了解PyTorch调度程序的好起点。
- en: A tutorial that walks you through some examples on how to use this API is available
    on [Google Colab](https://colab.research.google.com/drive/1RRhSfk7So3Cn02itzLWE9K4Fam-8U011?usp=sharing).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用此API的一些示例的教程可在[Google Colab](https://colab.research.google.com/drive/1RRhSfk7So3Cn02itzLWE9K4Fam-8U011?usp=sharing)上找到。
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A class to create libraries that can be used to register new operators or override
    operators in existing libraries from Python. A user can optionally pass in a dispatch
    keyname if they only want to register kernels corresponding to only one specific
    dispatch key.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于创建库的类，可以用于注册新操作符或从Python中覆盖现有库中的操作符。用户可以选择传递调度键名称，如果他们只想注册与特定调度键对应的内核。
- en: To create a library to override operators in an existing library (with name
    ns), set the kind to “IMPL”. To create a new library (with name ns) to register
    new operators, set the kind to “DEF”. To create a fragment of a possibly existing
    library to register operators (and bypass the limitation that there is only one
    library for a given namespace), set the kind to “FRAGMENT”.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个库以覆盖现有库中的操作符（名称为ns），将kind设置为“IMPL”。要创建一个新库（名称为ns）以注册新操作符，请将kind设置为“DEF”。要创建一个可能存在的库的片段以注册操作符（并绕过只有一个给定命名空间的库的限制），将kind设置为“FRAGMENT”。
- en: Parameters
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**ns** – library name'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ns** – 库名称'
- en: '**kind** – “DEF”, “IMPL” (default: “IMPL”), “FRAGMENT”'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kind** – “DEF”, “IMPL”（默认：“IMPL”）, “FRAGMENT”'
- en: '**dispatch_key** – PyTorch dispatch key (default: “”)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dispatch_key** – PyTorch调度键（默认：“”）'
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Defines a new operator and its semantics in the ns namespace.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在ns命名空间中定义一个新操作符及其语义。
- en: Parameters
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**schema** – function schema to define a new operator.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**schema** – 定义新操作符的函数模式。'
- en: '**alias_analysis** (*optional*) – Indicates if the aliasing properties of the
    operator arguments can be inferred from the schema (default behavior) or not (“CONSERVATIVE”).'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**alias_analysis** (*可选*) – 指示是否可以从模式推断操作符参数的别名属性（默认行为）或不可以（“CONSERVATIVE”）。'
- en: '**tags** ([*Tag*](torch.html#torch.Tag "torch.Tag") *|* *Sequence**[*[*Tag*](torch.html#torch.Tag
    "torch.Tag")*]*) – one or more torch.Tag to apply to this operator. Tagging an
    operator changes the operator’s behavior under various PyTorch subsystems; please
    read the docs for the torch.Tag carefully before applying it.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tags** ([*Tag*](torch.html#torch.Tag "torch.Tag") *|* *Sequence**[*[*Tag*](torch.html#torch.Tag
    "torch.Tag")*]*) – 一个或多个torch.Tag，应用于此操作符。对操作符进行标记会更改操作符在各种PyTorch子系统下的行为；请在应用之前仔细阅读torch.Tag的文档。'
- en: Returns
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: name of the operator as inferred from the schema.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从模式推断的操作符名称。
- en: 'Example::'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '示例::'
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Registers the function implementation for an operator defined in the library.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为库中定义的操作符注册函数实现。
- en: Parameters
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**op_name** – operator name (along with the overload) or OpOverload object.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**op_name** – 操作符名称（连同重载）或OpOverload对象。'
- en: '**fn** – function that’s the operator implementation for the input dispatch
    key or [`fallthrough_kernel()`](#torch.library.fallthrough_kernel "torch.library.fallthrough_kernel")
    to register a fallthrough.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fn** – 作为输入调度键的操作符实现的函数或[`fallthrough_kernel()`](#torch.library.fallthrough_kernel
    "torch.library.fallthrough_kernel")以注册一个fallthrough。 '
- en: '**dispatch_key** – dispatch key that the input function should be registered
    for. By default, it uses the dispatch key that the library was created with.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dispatch_key** - 输入函数应注册的调度键。默认情况下，它使用创建库时使用的调度键。'
- en: 'Example::'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A dummy function to pass to `Library.impl` in order to register a fallthrough.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个虚拟函数，传递给`Library.impl`以注册一个默认情况。
