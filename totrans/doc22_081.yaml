- en: torch.testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: torch.testing
- en: 原文：[https://pytorch.org/docs/stable/testing.html](https://pytorch.org/docs/stable/testing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://pytorch.org/docs/stable/testing.html](https://pytorch.org/docs/stable/testing.html)'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Asserts that `actual` and `expected` are close.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 断言`actual`和`expected`是接近的。
- en: If `actual` and `expected` are strided, non-quantized, real-valued, and finite,
    they are considered close if
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`actual`和`expected`是分步、非量化、实值且有限的，则它们被视为接近，如果
- en: $\lvert \text{actual} - \text{expected} \rvert \le \texttt{atol} + \texttt{rtol}
    \cdot \lvert \text{expected} \rvert$∣actual−expected∣≤atol+rtol⋅∣expected∣
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: $\lvert \text{actual} - \text{expected} \rvert \le \texttt{atol} + \texttt{rtol}
    \cdot \lvert \text{expected} \rvert$∣actual−expected∣≤atol+rtol⋅∣expected∣
- en: Non-finite values (`-inf` and `inf`) are only considered close if and only if
    they are equal. `NaN`’s are only considered equal to each other if `equal_nan`
    is `True`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 非有限值（`-inf`和`inf`）仅在它们相等时才被视为接近。只有当`equal_nan`为`True`时，`NaN`才被视为相等。
- en: In addition, they are only considered close if they have the same
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，只有当它们相同时才被视为接近
- en: '[`device`](generated/torch.Tensor.device.html#torch.Tensor.device "torch.Tensor.device")
    (if `check_device` is `True`),'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`device`](generated/torch.Tensor.device.html#torch.Tensor.device "torch.Tensor.device")（如果`check_device`为`True`），'
- en: '`dtype` (if `check_dtype` is `True`),'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtype`（如果`check_dtype`为`True`），'
- en: '`layout` (if `check_layout` is `True`), and'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layout`（如果`check_layout`为`True`），和'
- en: stride (if `check_stride` is `True`).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步幅（如果`check_stride`为`True`）。
- en: If either `actual` or `expected` is a meta tensor, only the attribute checks
    will be performed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`actual`或`expected`是元张量，则仅执行属性检查。
- en: If `actual` and `expected` are sparse (either having COO, CSR, CSC, BSR, or
    BSC layout), their strided members are checked individually. Indices, namely `indices`
    for COO, `crow_indices` and `col_indices` for CSR and BSR, or `ccol_indices` and
    `row_indices` for CSC and BSC layouts, respectively, are always checked for equality
    whereas the values are checked for closeness according to the definition above.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`actual`和`expected`是稀疏的（具有COO、CSR、CSC、BSR或BSC布局），它们的分步成员将被单独检查。索引，即COO的`indices`，CSR和BSR的`crow_indices`和`col_indices`，或CSC和BSC布局的`ccol_indices`和`row_indices`，始终被检查是否相等，而值根据上述定义被视为接近。
- en: If `actual` and `expected` are quantized, they are considered close if they
    have the same [`qscheme()`](generated/torch.Tensor.qscheme.html#torch.Tensor.qscheme
    "torch.Tensor.qscheme") and the result of [`dequantize()`](generated/torch.Tensor.dequantize.html#torch.Tensor.dequantize
    "torch.Tensor.dequantize") is close according to the definition above.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`actual`和`expected`是量化的，则它们被视为接近，如果它们具有相同的[`qscheme()`](generated/torch.Tensor.qscheme.html#torch.Tensor.qscheme
    "torch.Tensor.qscheme")并且[`dequantize()`](generated/torch.Tensor.dequantize.html#torch.Tensor.dequantize
    "torch.Tensor.dequantize")的结果根据上述定义接近。
- en: '`actual` and `expected` can be [`Tensor`](tensors.html#torch.Tensor "torch.Tensor")’s
    or any tensor-or-scalar-likes from which [`torch.Tensor`](tensors.html#torch.Tensor
    "torch.Tensor")’s can be constructed with [`torch.as_tensor()`](generated/torch.as_tensor.html#torch.as_tensor
    "torch.as_tensor"). Except for Python scalars the input types have to be directly
    related. In addition, `actual` and `expected` can be [`Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")’s or [`Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")’s in which case they are considered close if their structure
    matches and all their elements are considered close according to the above definition.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`actual`和`expected`可以是[`Tensor`](tensors.html#torch.Tensor "torch.Tensor")或任何张量或标量，可以使用[`torch.as_tensor()`](generated/torch.as_tensor.html#torch.as_tensor
    "torch.as_tensor")构造[`torch.Tensor`](tensors.html#torch.Tensor "torch.Tensor")。除了Python标量外，输入类型必须直接相关。此外，`actual`和`expected`可以是[`Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(在Python v3.12中)")或[`Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(在Python v3.12中)")，在这种情况下，如果它们的结构匹配并且所有元素根据上述定义被视为接近，则它们被视为接近。'
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Python scalars are an exception to the type relation requirement, because their
    `type()`, i.e. [`int`](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)"), [`float`](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)"), and [`complex`](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.12)"), is equivalent to the `dtype` of a tensor-like. Thus, Python
    scalars of different types can be checked, but require `check_dtype=False`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python标量是类型关系要求的一个例外，因为它们的`type()`，即[`int`](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12中)")，[`float`](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12中)")和[`complex`](https://docs.python.org/3/library/functions.html#complex
    "(在Python v3.12中)")，等同于张量类的`dtype`。因此，不同类型的Python标量可以被检查，但需要`check_dtype=False`。
- en: Parameters
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**actual** (*Any*) – Actual input.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**actual**（*任意*）- 实际输入。'
- en: '**expected** (*Any*) – Expected input.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**expected**（*任意*）- 预期输入。'
- en: '**allow_subclasses** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True` (default) and except for Python scalars, inputs
    of directly related types are allowed. Otherwise type equality is required.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**allow_subclasses**（[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.12中)")）- 如果为`True`（默认）并且除了Python标量之外，直接相关类型的输入是允许的。否则需要类型相等。'
- en: '**rtol** (*Optional**[*[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")*]*) – Relative tolerance. If specified `atol` must also be
    specified. If omitted, default values based on the `dtype` are selected with the
    below table.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rtol**（*可选**[*[*float*](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12中)")*]*) - 相对容差。如果指定了`atol`，必须同时指定。如果省略，默认值基于`dtype`从下表中选择。'
- en: '**atol** (*Optional**[*[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")*]*) – Absolute tolerance. If specified `rtol` must also be
    specified. If omitted, default values based on the `dtype` are selected with the
    below table.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**atol**（*可选**[*[*float*](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12中)")*]*) - 绝对容差。如果指定了`rtol`，必须同时指定。如果省略，默认值基于`dtype`从下表中选择。'
- en: '**equal_nan** (*Union**[*[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]*) – If `True`, two `NaN` values will be considered equal.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**equal_nan** (*Union**[*[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]*) – 如果为`True`，则认为两个`NaN`值相等。'
- en: '**check_device** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True` (default), asserts that corresponding tensors
    are on the same [`device`](generated/torch.Tensor.device.html#torch.Tensor.device
    "torch.Tensor.device"). If this check is disabled, tensors on different [`device`](generated/torch.Tensor.device.html#torch.Tensor.device
    "torch.Tensor.device")’s are moved to the CPU before being compared.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**check_device** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – 如果为`True`（默认），则断言相应的张量位于相同的[`device`](generated/torch.Tensor.device.html#torch.Tensor.device
    "torch.Tensor.device")上。如果禁用此检查，则位于不同[`device`](generated/torch.Tensor.device.html#torch.Tensor.device
    "torch.Tensor.device")上的张量在比较之前将移动到CPU。'
- en: '**check_dtype** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True` (default), asserts that corresponding tensors
    have the same `dtype`. If this check is disabled, tensors with different `dtype`’s
    are promoted to a common `dtype` (according to [`torch.promote_types()`](generated/torch.promote_types.html#torch.promote_types
    "torch.promote_types")) before being compared.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**check_dtype** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – 如果为`True`（默认），则断言相应的张量具有相同的`dtype`。如果禁用此检查，则在比较之前将具有不同`dtype`的张量提升为公共`dtype`（根据[`torch.promote_types()`](generated/torch.promote_types.html#torch.promote_types
    "torch.promote_types")）。'
- en: '**check_layout** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True` (default), asserts that corresponding tensors
    have the same `layout`. If this check is disabled, tensors with different `layout`’s
    are converted to strided tensors before being compared.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**check_layout** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – 如果为`True`（默认），则断言相应的张量具有相同的`layout`。如果禁用此检查，则在比较之前将具有不同`layout`的张量转换为分步张量。'
- en: '**check_stride** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True` and corresponding tensors are strided, asserts
    that they have the same stride.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**check_stride** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – 如果为`True`且相应的张量是分步的，则断言它们具有相同的步幅。'
- en: '**msg** (*Optional**[**Union**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Callable**[**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]**,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]**]**]*) – Optional error message to use in case a failure
    occurs during the comparison. Can also passed as callable in which case it will
    be called with the generated message and should return the new message.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**msg** (*Optional**[**Union**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *Callable**[**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]**,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]**]**]*) – 在比较过程中发生失败时使用的可选错误消息。也可以作为可调用对象传递，此时将使用生成的消息并应返回新消息。'
- en: Raises
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 引发
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.12)") – If no [`torch.Tensor`](tensors.html#torch.Tensor "torch.Tensor")
    can be constructed from an input.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.12)") – 如果无法从输入构造[`torch.Tensor`](tensors.html#torch.Tensor "torch.Tensor")。'
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.12)") – If only `rtol` or `atol` is specified.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.12)") – 如果只指定了`rtol`或`atol`。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If corresponding inputs are not Python scalars and are
    not directly related.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – 如果相应的输入不是Python标量且不直接相关。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If `allow_subclasses` is `False`, but corresponding inputs
    are not Python scalars and have different types.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – 如果`allow_subclasses`为`False`，但相应的输入不是Python标量并且类型不同。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If the inputs are [`Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")’s, but their length does not match.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – 如果输入是[`Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")，但它们的长度不匹配。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If the inputs are [`Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")’s, but their set of keys do not match.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – 如果输入是[`Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
    "(in Python v3.12)")，但它们的键集不匹配。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If corresponding tensors do not have the same [`shape`](generated/torch.Tensor.shape.html#torch.Tensor.shape
    "torch.Tensor.shape").'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – 如果相应的张量的[`shape`](generated/torch.Tensor.shape.html#torch.Tensor.shape
    "torch.Tensor.shape")不相同。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If `check_layout` is `True`, but corresponding tensors
    do not have the same `layout`.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – 如果`check_layout`为`True`，但相应的张量的`layout`不相同。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If only one of corresponding tensors is quantized.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(在 Python v3.12 中)") – 如果仅有一组相应的张量被量化。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If corresponding tensors are quantized, but have different
    [`qscheme()`](generated/torch.Tensor.qscheme.html#torch.Tensor.qscheme "torch.Tensor.qscheme")’s.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(在 Python v3.12 中)") – 如果相应的张量被量化，但具有不同的[`qscheme()`](generated/torch.Tensor.qscheme.html#torch.Tensor.qscheme
    "torch.Tensor.qscheme")。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If `check_device` is `True`, but corresponding tensors
    are not on the same [`device`](generated/torch.Tensor.device.html#torch.Tensor.device
    "torch.Tensor.device").'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(在 Python v3.12 中)") – 如果`check_device`为`True`，但相应的张量不在相同的[`device`](generated/torch.Tensor.device.html#torch.Tensor.device
    "torch.Tensor.device")上。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If `check_dtype` is `True`, but corresponding tensors do
    not have the same `dtype`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(在 Python v3.12 中)") – 如果`check_dtype`为`True`，但相应的张量的`dtype`不相同。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If `check_stride` is `True`, but corresponding strided
    tensors do not have the same stride.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(在 Python v3.12 中)") – 如果`check_stride`为`True`，但相应的步进张量的步幅不相同。'
- en: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(in Python v3.12)") – If the values of corresponding tensors are not close according
    to the definition above.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**AssertionError**](https://docs.python.org/3/library/exceptions.html#AssertionError
    "(在 Python v3.12 中)") – 如果相应张量的值根据上述定义不接近。'
- en: The following table displays the default `rtol` and `atol` for different `dtype`’s.
    In case of mismatching `dtype`’s, the maximum of both tolerances is used.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表显示了不同`dtype`的默认`rtol`和`atol`。在`dtype`不匹配的情况下，使用两个容差中的最大值。
- en: '| `dtype` | `rtol` | `atol` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `dtype` | `rtol` | `atol` |'
- en: '| --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `float16` | `1e-3` | `1e-5` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `float16` | `1e-3` | `1e-5` |'
- en: '| `bfloat16` | `1.6e-2` | `1e-5` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `bfloat16` | `1.6e-2` | `1e-5` |'
- en: '| `float32` | `1.3e-6` | `1e-5` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `float32` | `1.3e-6` | `1e-5` |'
- en: '| `float64` | `1e-7` | `1e-7` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `float64` | `1e-7` | `1e-7` |'
- en: '| `complex32` | `1e-3` | `1e-5` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `complex32` | `1e-3` | `1e-5` |'
- en: '| `complex64` | `1.3e-6` | `1e-5` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `complex64` | `1.3e-6` | `1e-5` |'
- en: '| `complex128` | `1e-7` | `1e-7` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `complex128` | `1e-7` | `1e-7` |'
- en: '| `quint8` | `1.3e-6` | `1e-5` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `quint8` | `1.3e-6` | `1e-5` |'
- en: '| `quint2x4` | `1.3e-6` | `1e-5` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `quint2x4` | `1.3e-6` | `1e-5` |'
- en: '| `quint4x2` | `1.3e-6` | `1e-5` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `quint4x2` | `1.3e-6` | `1e-5` |'
- en: '| `qint8` | `1.3e-6` | `1e-5` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `qint8` | `1.3e-6` | `1e-5` |'
- en: '| `qint32` | `1.3e-6` | `1e-5` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `qint32` | `1.3e-6` | `1e-5` |'
- en: '| other | `0.0` | `0.0` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 其他 | `0.0` | `0.0` |'
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`assert_close()`](#torch.testing.assert_close "torch.testing.assert_close")
    is highly configurable with strict default settings. Users are encouraged to [`partial()`](https://docs.python.org/3/library/functools.html#functools.partial
    "(in Python v3.12)") it to fit their use case. For example, if an equality check
    is needed, one might define an `assert_equal` that uses zero tolerances for every
    `dtype` by default:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assert_close()`](#torch.testing.assert_close "torch.testing.assert_close")
    具有严格的默认设置，可以高度配置。鼓励用户使用[`partial()`](https://docs.python.org/3/library/functools.html#functools.partial
    "(在 Python v3.12 中)") 来适应其用例。例如，如果需要进行相等性检查，可以定义一个`assert_equal`，默认情况下对每个`dtype`使用零容差：'
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Examples
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creates a tensor with the given `shape`, `device`, and `dtype`, and filled with
    values uniformly drawn from `[low, high)`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建具有给定`shape`、`device`和`dtype`的张量，并用从`[low, high)`均匀抽取的值填充。
- en: If `low` or `high` are specified and are outside the range of the `dtype`’s
    representable finite values then they are clamped to the lowest or highest representable
    finite value, respectively. If `None`, then the following table describes the
    default values for `low` and `high`, which depend on `dtype`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了`low`或`high`，并且超出了`dtype`的可表示有限值范围，则它们将被夹紧到最低或最高可表示有限值，分别。如果为`None`，则以下表格描述了`low`和`high`的默认值，这取决于`dtype`。
- en: '| `dtype` | `low` | `high` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `dtype` | `low` | `high` |'
- en: '| --- | --- | --- |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| boolean type | `0` | `2` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 布尔类型 | `0` | `2` |'
- en: '| unsigned integral type | `0` | `10` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 无符号整数类型 | `0` | `10` |'
- en: '| signed integral types | `-9` | `10` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 有符号整数类型 | `-9` | `10` |'
- en: '| floating types | `-9` | `9` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 浮点类型 | `-9` | `9` |'
- en: '| complex types | `-9` | `9` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 复数类型 | `-9` | `9` |'
- en: Parameters
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**shape** (*Tuple**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*) – Single integer or a sequence of integers defining
    the shape of the output tensor.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**shape** (*元组**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*,* *...**]*) – 定义输出张量形状的单个整数或整数序列。'
- en: '**dtype** ([`torch.dtype`](tensor_attributes.html#torch.dtype "torch.dtype"))
    – The data type of the returned tensor.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dtype** ([`torch.dtype`](tensor_attributes.html#torch.dtype "torch.dtype"))
    – 返回张量的数据类型。'
- en: '**device** (*Union**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* [*torch.device*](tensor_attributes.html#torch.device "torch.device")*]*)
    – The device of the returned tensor.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**device** (*Union**[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12 中)")*,* [*torch.device*](tensor_attributes.html#torch.device
    "torch.device")*]*) – 返回张量的设备。'
- en: '**low** (*Optional**[**Number**]*) – Sets the lower limit (inclusive) of the
    given range. If a number is provided it is clamped to the least representable
    finite value of the given dtype. When `None` (default), this value is determined
    based on the `dtype` (see the table above). Default: `None`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**low** (*可选**[**数字**]*) – 设置给定范围的下限（包括）。如果提供了一个数字，它将被夹紧到给定dtype的最小可表示有限值。当为`None`（默认）时，此值根据`dtype`（见上表）确定。默认值：`None`。'
- en: '**high** (*Optional**[**Number**]*) –'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**high** (*可选**[**数字**]*) –'
- en: 'Sets the upper limit (exclusive) of the given range. If a number is provided
    it is clamped to the greatest representable finite value of the given dtype. When
    `None` (default) this value is determined based on the `dtype` (see the table
    above). Default: `None`.'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置给定范围的上限（不包括）。如果提供了一个数字，则它将被夹紧到给定 dtype 的最大可表示有限值。当为 `None`（默认）时，此值基于 `dtype`
    决定（参见上表）。默认值：`None`。
- en: 'Deprecated since version 2.1: Passing `low==high` to [`make_tensor()`](#torch.testing.make_tensor
    "torch.testing.make_tensor") for floating or complex types is deprecated since
    2.1 and will be removed in 2.3\. Use [`torch.full()`](generated/torch.full.html#torch.full
    "torch.full") instead.'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 2.1 起已弃用：对于浮点或复数类型，将 `low==high` 传递给 [`make_tensor()`](#torch.testing.make_tensor
    "torch.testing.make_tensor") 自 2.1 版本起已弃用，并将在 2.3 版本中移除。请改用 [`torch.full()`](generated/torch.full.html#torch.full
    "torch.full")。
- en: '**requires_grad** (*Optional**[*[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*]*) – If autograd should record operations on the returned
    tensor. Default: `False`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**requires_grad**（*可选**[*[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(在 Python v3.12 中)")*]*) – 如果 autograd 应记录返回的张量上的操作。默认值：`False`。'
- en: '**noncontiguous** (*Optional**[*[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*]*) – If True, the returned tensor will be noncontiguous.
    This argument is ignored if the constructed tensor has fewer than two elements.
    Mutually exclusive with `memory_format`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**noncontiguous**（*可选**[*[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(在 Python v3.12 中)")*]*) – 如果为 True，则返回的张量将是非连续的。如果构造的张量少于两个元素，则忽略此参数。与 `memory_format`
    互斥。'
- en: '**exclude_zero** (*Optional**[*[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*]*) – If `True` then zeros are replaced with the dtype’s
    small positive value depending on the `dtype`. For bool and integer types zero
    is replaced with one. For floating point types it is replaced with the dtype’s
    smallest positive normal number (the “tiny” value of the `dtype`’s `finfo()` object),
    and for complex types it is replaced with a complex number whose real and imaginary
    parts are both the smallest positive normal number representable by the complex
    type. Default `False`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**exclude_zero**（*可选**[*[*bool*](https://docs.python.org/3/library/functions.html#bool
    "(在 Python v3.12 中)")*]*) – 如果为 `True`，则零将被替换为依赖于 `dtype` 的小正值。对于布尔和整数类型，零将被替换为一。对于浮点类型，它将被替换为
    `dtype` 的最小正常数（`dtype` 的 `finfo()` 对象的“微小”值），对于复数类型，它将被替换为一个实部和虚部都是复数类型可表示的最小正常数的复数。默认为
    `False`。'
- en: '**memory_format** (*Optional**[*[*torch.memory_format*](tensor_attributes.html#torch.memory_format
    "torch.memory_format")*]*) – The memory format of the returned tensor. Mutually
    exclusive with `noncontiguous`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**memory_format**（*可选**[*[*torch.memory_format*](tensor_attributes.html#torch.memory_format
    "torch.memory_format")*]*) – 返回张量的内存格式。与 `noncontiguous` 互斥。'
- en: Raises
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 引发
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.12)") – If `requires_grad=True` is passed for integral dtype'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(在 Python v3.12 中)") – 如果为整数 dtype 传递了 `requires_grad=True`。'
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.12)") – If `low >= high`.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(在 Python v3.12 中)") – 如果 `low >= high`。'
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.12)") – If either `low` or `high` is `nan`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(在 Python v3.12 中)") – 如果 `low` 或 `high` 中有一个为 `nan`。'
- en: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(in Python v3.12)") – If both `noncontiguous` and `memory_format` are passed.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError
    "(在 Python v3.12 中)") – 如果同时传递了 `noncontiguous` 和 `memory_format`。'
- en: '[**TypeError**](https://docs.python.org/3/library/exceptions.html#TypeError
    "(in Python v3.12)") – If `dtype` isn’t supported by this function.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**TypeError**](https://docs.python.org/3/library/exceptions.html#TypeError
    "(在 Python v3.12 中)") – 如果 `dtype` 不受此函数支持。'
- en: Return type
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
- en: Examples
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Warning
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '[`torch.testing.assert_allclose()`](#torch.testing.assert_allclose "torch.testing.assert_allclose")
    is deprecated since `1.12` and will be removed in a future release. Please use
    [`torch.testing.assert_close()`](#torch.testing.assert_close "torch.testing.assert_close")
    instead. You can find detailed upgrade instructions [here](https://github.com/pytorch/pytorch/issues/61844).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[`torch.testing.assert_allclose()`](#torch.testing.assert_allclose "torch.testing.assert_allclose")
    自 `1.12` 版本起已被弃用，并将在将来的版本中移除。请改用 [`torch.testing.assert_close()`](#torch.testing.assert_close
    "torch.testing.assert_close")。您可以在[此处](https://github.com/pytorch/pytorch/issues/61844)找到详细的升级说明。'
