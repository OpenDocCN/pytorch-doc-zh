["```py\nimport torch\nimport numpy as np \n```", "```py\ndata = [[1, 2],[3, 4]]\n[x_data](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")(data) \n```", "```py\nnp_array = np.array(data)\n[x_np](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.from_numpy](https://pytorch.org/docs/stable/generated/torch.from_numpy.html#torch.from_numpy \"torch.from_numpy\")(np_array) \n```", "```py\n[x_ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones_like](https://pytorch.org/docs/stable/generated/torch.ones_like.html#torch.ones_like \"torch.ones_like\")([x_data](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) # retains the properties of x_data\nprint(f\"Ones Tensor: \\n  {[x_ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}  \\n\")\n\n[x_rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand_like](https://pytorch.org/docs/stable/generated/torch.rand_like.html#torch.rand_like \"torch.rand_like\")([x_data](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), dtype=[torch.float](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\")) # overrides the datatype of x_data\nprint(f\"Random Tensor: \\n  {[x_rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}  \\n\") \n```", "```py\nOnes Tensor:\n tensor([[1, 1],\n        [1, 1]])\n\nRandom Tensor:\n tensor([[0.8823, 0.9150],\n        [0.3829, 0.9593]]) \n```", "```py\nshape = (2,3,)\n[rand_tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(shape)\n[ones_tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(shape)\n[zeros_tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")(shape)\n\nprint(f\"Random Tensor: \\n  {[rand_tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}  \\n\")\nprint(f\"Ones Tensor: \\n  {[ones_tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}  \\n\")\nprint(f\"Zeros Tensor: \\n  {[zeros_tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}\") \n```", "```py\nRandom Tensor:\n tensor([[0.3904, 0.6009, 0.2566],\n        [0.7936, 0.9408, 0.1332]])\n\nOnes Tensor:\n tensor([[1., 1., 1.],\n        [1., 1., 1.]])\n\nZeros Tensor:\n tensor([[0., 0., 0.],\n        [0., 0., 0.]]) \n```", "```py\n[tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3,4)\n\nprint(f\"Shape of tensor: {[tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape}\")\nprint(f\"Datatype of tensor: {[tensor.dtype](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\")}\")\nprint(f\"Device tensor is stored on: {[tensor.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")}\") \n```", "```py\nShape of tensor: torch.Size([3, 4])\nDatatype of tensor: torch.float32\nDevice tensor is stored on: cpu \n```", "```py\n# We move our tensor to the GPU if available\nif [torch.cuda.is_available](https://pytorch.org/docs/stable/generated/torch.cuda.is_available.html#torch.cuda.is_available \"torch.cuda.is_available\")():\n    [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").to(\"cuda\") \n```", "```py\n[tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(4, 4)\nprint(f\"First row: {[tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}\")\nprint(f\"First column: {[tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[:,  0]}\")\nprint(f\"Last column: {[tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[...,  -1]}\")\n[tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[:,1] = 0\nprint([tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nFirst row: tensor([1., 1., 1., 1.])\nFirst column: tensor([1., 1., 1., 1.])\nLast column: tensor([1., 1., 1., 1.])\ntensor([[1., 0., 1., 1.],\n        [1., 0., 1., 1.],\n        [1., 0., 1., 1.],\n        [1., 0., 1., 1.]]) \n```", "```py\n[t1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.cat](https://pytorch.org/docs/stable/generated/torch.cat.html#torch.cat \"torch.cat\")([[tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")], dim=1)\nprint([t1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],\n        [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],\n        [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],\n        [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.]]) \n```", "```py\n# This computes the matrix multiplication between two tensors. y1, y2, y3 will have the same value\n# ``tensor.T`` returns the transpose of a tensor\n[y1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") @ [tensor.T](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n[y2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").matmul([tensor.T](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[y3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand_like](https://pytorch.org/docs/stable/generated/torch.rand_like.html#torch.rand_like \"torch.rand_like\")([y1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[torch.matmul](https://pytorch.org/docs/stable/generated/torch.matmul.html#torch.matmul \"torch.matmul\")([tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [tensor.T](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), out=[y3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n# This computes the element-wise product. z1, z2, z3 will have the same value\n[z1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n[z2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").mul([tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[z3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand_like](https://pytorch.org/docs/stable/generated/torch.rand_like.html#torch.rand_like \"torch.rand_like\")([tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[torch.mul](https://pytorch.org/docs/stable/generated/torch.mul.html#torch.mul \"torch.mul\")([tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), out=[z3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[1., 0., 1., 1.],\n        [1., 0., 1., 1.],\n        [1., 0., 1., 1.],\n        [1., 0., 1., 1.]]) \n```", "```py\n[agg](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").sum()\nagg_item = [agg](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").item()\nprint(agg_item, type(agg_item)) \n```", "```py\n12.0 <class 'float'> \n```", "```py\nprint(f\"{[tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}  \\n\")\n[tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").add_(5)\nprint([tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[1., 0., 1., 1.],\n        [1., 0., 1., 1.],\n        [1., 0., 1., 1.],\n        [1., 0., 1., 1.]])\n\ntensor([[6., 5., 6., 6.],\n        [6., 5., 6., 6.],\n        [6., 5., 6., 6.],\n        [6., 5., 6., 6.]]) \n```", "```py\n[t](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(5)\nprint(f\"t: {[t](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}\")\nn = [t](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()\nprint(f\"n: {n}\") \n```", "```py\nt: tensor([1., 1., 1., 1., 1.])\nn: [1\\. 1\\. 1\\. 1\\. 1.] \n```", "```py\n[t](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").add_(1)\nprint(f\"t: {[t](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}\")\nprint(f\"n: {n}\") \n```", "```py\nt: tensor([2., 2., 2., 2., 2.])\nn: [2\\. 2\\. 2\\. 2\\. 2.] \n```", "```py\nn = np.ones(5)\n[t](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.from_numpy](https://pytorch.org/docs/stable/generated/torch.from_numpy.html#torch.from_numpy \"torch.from_numpy\")(n) \n```", "```py\nnp.add(n, 1, out=n)\nprint(f\"t: {[t](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}\")\nprint(f\"n: {n}\") \n```", "```py\nt: tensor([2., 2., 2., 2., 2.], dtype=torch.float64)\nn: [2\\. 2\\. 2\\. 2\\. 2.] \n```"]