- en: Probability distributions - torch.distributions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概率分布 - torch.distributions
- en: 原文：[https://pytorch.org/docs/stable/distributions.html](https://pytorch.org/docs/stable/distributions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/docs/stable/distributions.html](https://pytorch.org/docs/stable/distributions.html)
- en: The `distributions` package contains parameterizable probability distributions
    and sampling functions. This allows the construction of stochastic computation
    graphs and stochastic gradient estimators for optimization. This package generally
    follows the design of the [TensorFlow Distributions](https://arxiv.org/abs/1711.10604)
    package.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`distributions`包含可参数化的概率分布和采样函数。这允许构建用于优化的随机计算图和随机梯度估计器。该包通常遵循[TensorFlow Distributions](https://arxiv.org/abs/1711.10604)包的设计。'
- en: It is not possible to directly backpropagate through random samples. However,
    there are two main methods for creating surrogate functions that can be backpropagated
    through. These are the score function estimator/likelihood ratio estimator/REINFORCE
    and the pathwise derivative estimator. REINFORCE is commonly seen as the basis
    for policy gradient methods in reinforcement learning, and the pathwise derivative
    estimator is commonly seen in the reparameterization trick in variational autoencoders.
    Whilst the score function only requires the value of samples $f(x)$f(x), the pathwise
    derivative requires the derivative $f'(x)$f′(x). The next sections discuss these
    two in a reinforcement learning example. For more details see [Gradient Estimation
    Using Stochastic Computation Graphs](https://arxiv.org/abs/1506.05254) .
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无法直接通过随机样本进行反向传播。但是，有两种主要方法可以创建可以通过反向传播的替代函数。这些是得分函数估计器/似然比估计器/REINFORCE和路径导数估计器。REINFORCE通常被视为强化学习中策略梯度方法的基础，而路径导数估计器通常在变分自动编码器中的重参数化技巧中看到。虽然得分函数只需要样本值$f(x)$f(x)，但路径导数需要导数$f'(x)$f′(x)。接下来的部分将讨论强化学习示例中的这两种方法。有关更多详细信息，请参见[使用随机计算图进行梯度估计](https://arxiv.org/abs/1506.05254)。
- en: Score function
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 得分函数
- en: 'When the probability density function is differentiable with respect to its
    parameters, we only need `sample()` and `log_prob()` to implement REINFORCE:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当概率密度函数相对于其参数可微时，我们只需要`sample()`和`log_prob()`来实现REINFORCE：
- en: $\Delta\theta = \alpha r \frac{\partial\log p(a|\pi^\theta(s))}{\partial\theta}$Δθ=αr∂θ∂logp(a∣πθ(s))​
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: $\Delta\theta = \alpha r \frac{\partial\log p(a|\pi^\theta(s))}{\partial\theta}$Δθ=αr∂θ∂logp(a∣πθ(s))​
- en: where $\theta$θ are the parameters, $\alpha$α is the learning rate, $r$r is
    the reward and $p(a|\pi^\theta(s))$p(a∣πθ(s)) is the probability of taking action
    $a$a in state $s$s given policy $\pi^\theta$πθ.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 其中$\theta$θ是参数，$\alpha$α是学习率，$r$r是奖励，$p(a|\pi^\theta(s))$p(a∣πθ(s))是在状态$s$s中根据策略$\pi^\theta$πθ采取行动$a$a的概率。
- en: 'In practice we would sample an action from the output of a network, apply this
    action in an environment, and then use `log_prob` to construct an equivalent loss
    function. Note that we use a negative because optimizers use gradient descent,
    whilst the rule above assumes gradient ascent. With a categorical policy, the
    code for implementing REINFORCE would be as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，我们会从网络的输出中采样一个动作，在环境中应用此动作，然后使用`log_prob`构建等效的损失函数。请注意，我们使用负号，因为优化器使用梯度下降，而上述规则假定梯度上升。对于分类策略，实现REINFORCE的代码如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Pathwise derivative
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路径导数
- en: 'The other way to implement these stochastic/policy gradients would be to use
    the reparameterization trick from the `rsample()` method, where the parameterized
    random variable can be constructed via a parameterized deterministic function
    of a parameter-free random variable. The reparameterized sample therefore becomes
    differentiable. The code for implementing the pathwise derivative would be as
    follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这些随机/策略梯度的另一种方法是使用`rsample()`方法中的重参数化技巧，其中参数化的随机变量可以通过无参数随机变量的参数化确定性函数构造。因此，重参数化样本变得可微。实现路径导数的代码如下：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Distribution
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Bases: [`object`](https://docs.python.org/3/library/functions.html#object "(in
    Python v3.12)")'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`object`](https://docs.python.org/3/library/functions.html#object "(in Python
    v3.12)")
- en: Distribution is the abstract base class for probability distributions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Distribution是概率分布的抽象基类。
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Returns a dictionary from argument names to [`Constraint`](#torch.distributions.constraints.Constraint
    "torch.distributions.constraints.Constraint") objects that should be satisfied
    by each argument of this distribution. Args that are not tensors need not appear
    in this dict.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个从参数名到应满足该分布每个参数的[`Constraint`](#torch.distributions.constraints.Constraint
    "torch.distributions.constraints.Constraint")对象的字典。不需要出现在此字典中的非张量参数。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Returns the shape over which parameters are batched.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 返回参数批处理的形状。
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Returns the cumulative density/mass function evaluated at value.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在值处评估的累积密度/质量函数。
- en: Parameters
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**value** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) –'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**value** ([*张量*](tensors.html#torch.Tensor "torch.Tensor")) –'
- en: Return type
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[*张量*](tensors.html#torch.Tensor "torch.Tensor")'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Returns entropy of distribution, batched over batch_shape.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分布的熵，批处理在批形状上。
- en: Returns
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Tensor of shape batch_shape.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 形状为批形状的张量。
- en: Return type
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[*张量*](tensors.html#torch.Tensor "torch.Tensor")'
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Returns tensor containing all values supported by a discrete distribution. The
    result will enumerate over dimension 0, so the shape of the result will be (cardinality,)
    + batch_shape + event_shape (where event_shape = () for univariate distributions).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含离散分布支持的所有值的张量。结果将枚举维度0，因此结果的形状将是（基数，）+批形状+事件形状（其中事件形状=（）表示单变量分布）。
- en: Note that this enumerates over all batched tensors in lock-step [[0, 0], [1,
    1], …]. With expand=False, enumeration happens along dim 0, but with the remaining
    batch dimensions being singleton dimensions, [[0], [1], ...
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这会枚举所有批处理张量[[0, 0]，[1, 1]，…]。使用expand=False，枚举沿dim 0进行，但剩余的批处理维度是单例维度，[[0]，[1]，...
- en: To iterate over the full Cartesian product use itertools.product(m.enumerate_support()).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要遍历完整的笛卡尔积，请使用itertools.product(m.enumerate_support())。
- en: Parameters
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**expand** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – whether to expand the support over the batch dims to match
    the distribution’s batch_shape.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**expand**（[*bool*](https://docs.python.org/3/library/functions.html#bool "(在Python
    v3.12中)")）- 是否扩展支持以匹配分布的批量形状。'
- en: Returns
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Tensor iterating over dimension 0.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在维度0上迭代的张量。
- en: Return type
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Returns the shape of a single sample (without batching).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 返回单个样本的形状（不包含批处理）。
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Returns a new distribution instance (or populates an existing instance provided
    by a derived class) with batch dimensions expanded to batch_shape. This method
    calls [`expand`](generated/torch.Tensor.expand.html#torch.Tensor.expand "torch.Tensor.expand")
    on the distribution’s parameters. As such, this does not allocate new memory for
    the expanded distribution instance. Additionally, this does not repeat any args
    checking or parameter broadcasting in __init__.py, when an instance is first created.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的分布实例（或填充由派生类提供的现有实例），其批量维度扩展到batch_shape。此方法在分布的参数上调用[`expand`](generated/torch.Tensor.expand.html#torch.Tensor.expand
    "torch.Tensor.expand")。因此，这不会为扩展的分布实例分配新内存。此外，在首次创建实例时，这不会重复任何args检查或参数广播在__init__.py中。
- en: Parameters
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**batch_shape** (*torch.Size*) – the desired expanded size.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量形状（*torch.Size*）- 所需的扩展大小。
- en: '**_instance** – new instance provided by subclasses that need to override .expand.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**_instance** - 子类提供的新实例，需要覆盖.expand。'
- en: Returns
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: New distribution instance with batch dimensions expanded to batch_size.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 具有批量维度扩展到batch_size的新分布实例。
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Returns the inverse cumulative density/mass function evaluated at value.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在值处评估的累积密度/质量函数的逆函数。
- en: Parameters
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**value** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) –'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**value**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）-'
- en: Return type
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Returns the log of the probability density/mass function evaluated at value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在值处评估的概率密度/质量函数的对数。
- en: Parameters
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**value** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) –'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**value**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）-'
- en: Return type
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Returns the mean of the distribution.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分布的均值。
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Returns the mode of the distribution.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分布的模式。
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Returns perplexity of distribution, batched over batch_shape.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分布的困惑度，批量化到批量形状。
- en: Returns
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Tensor of shape batch_shape.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 形状为batch_shape的张量。
- en: Return type
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Generates a sample_shape shaped reparameterized sample or sample_shape shaped
    batch of reparameterized samples if the distribution parameters are batched.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个sample_shape形状的重参数化样本或者如果分布参数是批量的，则生成一个sample_shape形状的重参数化样本批次。
- en: Return type
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Generates a sample_shape shaped sample or sample_shape shaped batch of samples
    if the distribution parameters are batched.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个sample_shape形状的样本或者如果分布参数是批量的，则生成一个sample_shape形状的样本批次。
- en: Return type
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Generates n samples or n batches of samples if the distribution parameters are
    batched.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 生成n个样本或者如果分布参数是批量的，则生成n个样本批次。
- en: Return type
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Sets whether validation is enabled or disabled.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 设置验证是否启用或禁用。
- en: 'The default behavior mimics Python’s `assert` statement: validation is on by
    default, but is disabled if Python is run in optimized mode (via `python -O`).
    Validation may be expensive, so you may want to disable it once a model is working.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为模仿Python的`assert`语句：默认情况下启用验证，但如果Python在优化模式下运行（通过`python -O`），则会禁用验证。验证可能很昂贵，因此一旦模型运行正常，您可能希望禁用它。
- en: Parameters
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**value** ([*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.12)")) – Whether to enable validation.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**value**（[*bool*](https://docs.python.org/3/library/functions.html#bool "(在Python
    v3.12中)")）- 是否启用验证。'
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Returns the standard deviation of the distribution.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分布的标准差。
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Returns a [`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint")
    object representing this distribution’s support.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表示此分布支持的[`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint")对象。
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Returns the variance of the distribution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分布的方差。
- en: ExponentialFamily
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指数族
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: ExponentialFamily is the abstract base class for probability distributions belonging
    to an exponential family, whose probability mass/density function has the form
    is defined below
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 指数族是概率分布的抽象基类，属于指数族，其概率质量/密度函数的形式如下所定义
- en: $p_{F}(x; \theta) = \exp(\langle t(x), \theta\rangle - F(\theta) + k(x))$pF​(x;θ)=exp(⟨t(x),θ⟩−F(θ)+k(x))
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: $p_{F}(x; \theta) = \exp(\langle t(x), \theta\rangle - F(\theta) + k(x))$pF​(x;θ)=exp(⟨t(x),θ⟩−F(θ)+k(x))
- en: where $\theta$θ denotes the natural parameters, $t(x)$t(x) denotes the sufficient
    statistic, $F(\theta)$F(θ) is the log normalizer function for a given family and
    $k(x)$k(x) is the carrier measure.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 其中$\theta$θ表示自然参数，$t(x)$t(x)表示充分统计量，$F(\theta)$F(θ)是给定族的对数归一化函数，$k(x)$k(x)是载体测度。
- en: Note
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'This class is an intermediary between the Distribution class and distributions
    which belong to an exponential family mainly to check the correctness of the .entropy()
    and analytic KL divergence methods. We use this class to compute the entropy and
    KL divergence using the AD framework and Bregman divergences (courtesy of: Frank
    Nielsen and Richard Nock, Entropies and Cross-entropies of Exponential Families).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类是Distribution类和属于指数族的分布之间的中介，主要用于检查.entropy()和解析KL散度方法的正确性。我们使用这个类来使用AD框架和Bregman散度计算熵和KL散度（感谢：Frank
    Nielsen和Richard Nock，指数族的熵和交叉熵）。
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Method to compute the entropy using Bregman divergence of the log normalizer.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bregman散度计算熵的方法。
- en: Bernoulli
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伯努利
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Bases: [`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily
    "torch.distributions.exp_family.ExponentialFamily")'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily "torch.distributions.exp_family.ExponentialFamily")
- en: Creates a Bernoulli distribution parameterized by [`probs`](#torch.distributions.bernoulli.Bernoulli.probs
    "torch.distributions.bernoulli.Bernoulli.probs") or [`logits`](#torch.distributions.bernoulli.Bernoulli.logits
    "torch.distributions.bernoulli.Bernoulli.logits") (but not both).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由[`probs`](#torch.distributions.bernoulli.Bernoulli.probs "torch.distributions.bernoulli.Bernoulli.probs")或[`logits`](#torch.distributions.bernoulli.Bernoulli.logits
    "torch.distributions.bernoulli.Bernoulli.logits")参数化的伯努利分布（但不能同时使用）。
- en: Samples are binary (0 or 1). They take the value 1 with probability p and 0
    with probability 1 - p.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 样本是二进制（0或1）。它们以概率p取值1，以概率1-p取值0。
- en: 'Example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Parameters
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**probs** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – the probability of sampling 1'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs**（*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 采样1的概率'
- en: '**logits** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – the log-odds of sampling 1'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logits**（*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 采样1的对数几率'
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Beta
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Beta
- en: '[PRE40]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Bases: [`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily
    "torch.distributions.exp_family.ExponentialFamily")'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily "torch.distributions.exp_family.ExponentialFamily")
- en: Beta distribution parameterized by [`concentration1`](#torch.distributions.beta.Beta.concentration1
    "torch.distributions.beta.Beta.concentration1") and [`concentration0`](#torch.distributions.beta.Beta.concentration0
    "torch.distributions.beta.Beta.concentration0").
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Beta分布由[`concentration1`](#torch.distributions.beta.Beta.concentration1 "torch.distributions.beta.Beta.concentration1")和[`concentration0`](#torch.distributions.beta.Beta.concentration0
    "torch.distributions.beta.Beta.concentration0")参数化。
- en: 'Example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE41]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Parameters
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**concentration1** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – 1st concentration parameter of the distribution (often referred to as alpha)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**concentration1**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 分布的第一个集中参数（通常称为alpha）'
- en: '**concentration0** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – 2nd concentration parameter of the distribution (often referred to as beta)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**concentration0**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 分布的第二个集中参数（通常称为beta）'
- en: '[PRE42]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Binomial
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二项式
- en: '[PRE54]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a Binomial distribution parameterized by `total_count` and either [`probs`](#torch.distributions.binomial.Binomial.probs
    "torch.distributions.binomial.Binomial.probs") or [`logits`](#torch.distributions.binomial.Binomial.logits
    "torch.distributions.binomial.Binomial.logits") (but not both). `total_count`
    must be broadcastable with [`probs`](#torch.distributions.binomial.Binomial.probs
    "torch.distributions.binomial.Binomial.probs")/[`logits`](#torch.distributions.binomial.Binomial.logits
    "torch.distributions.binomial.Binomial.logits").
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由`total_count`和[`probs`](#torch.distributions.binomial.Binomial.probs "torch.distributions.binomial.Binomial.probs")或[`logits`](#torch.distributions.binomial.Binomial.logits
    "torch.distributions.binomial.Binomial.logits")参数化的二项式分布（但不能同时使用）。`total_count`必须与[`probs`](#torch.distributions.binomial.Binomial.probs
    "torch.distributions.binomial.Binomial.probs")/[`logits`](#torch.distributions.binomial.Binomial.logits
    "torch.distributions.binomial.Binomial.logits")可广播。
- en: 'Example:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE55]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Parameters
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**total_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – number of Bernoulli trials'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**total_count**（[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 伯努利试验的次数'
- en: '**probs** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – Event probabilities'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 事件概率'
- en: '**logits** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – Event log-odds'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logits**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 事件对数几率'
- en: '[PRE56]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Categorical
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分类
- en: '[PRE70]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a categorical distribution parameterized by either [`probs`](#torch.distributions.categorical.Categorical.probs
    "torch.distributions.categorical.Categorical.probs") or [`logits`](#torch.distributions.categorical.Categorical.logits
    "torch.distributions.categorical.Categorical.logits") (but not both).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由[`probs`](#torch.distributions.categorical.Categorical.probs "torch.distributions.categorical.Categorical.probs")或[`logits`](#torch.distributions.categorical.Categorical.logits
    "torch.distributions.categorical.Categorical.logits")参数化的分类分布（但不能同时使用）。
- en: Note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is equivalent to the distribution that [`torch.multinomial()`](generated/torch.multinomial.html#torch.multinomial
    "torch.multinomial") samples from.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 它等同于[`torch.multinomial()`](generated/torch.multinomial.html#torch.multinomial
    "torch.multinomial")从中采样的分布。
- en: Samples are integers from $\{0, \ldots, K-1\}${0,…,K−1} where K is `probs.size(-1)`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '样本是从$\{0, \ldots, K-1\}${0,…,K−1}中的整数，其中K是`probs.size(-1)`。 '
- en: If probs is 1-dimensional with length-K, each element is the relative probability
    of sampling the class at that index.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果probs是1维的，长度为K，每个元素是在该索引处采样类的相对概率。
- en: If probs is N-dimensional, the first N-1 dimensions are treated as a batch of
    relative probability vectors.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果probs是N维的，则前N-1维被视为相对概率向量的批处理。
- en: Note
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The probs argument must be non-negative, finite and have a non-zero sum, and
    it will be normalized to sum to 1 along the last dimension. [`probs`](#torch.distributions.categorical.Categorical.probs
    "torch.distributions.categorical.Categorical.probs") will return this normalized
    value. The logits argument will be interpreted as unnormalized log probabilities
    and can therefore be any real number. It will likewise be normalized so that the
    resulting probabilities sum to 1 along the last dimension. [`logits`](#torch.distributions.categorical.Categorical.logits
    "torch.distributions.categorical.Categorical.logits") will return this normalized
    value.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: probs参数必须是非负的、有限的，并且具有非零总和，它将被归一化为沿着最后一个维度总和为1。[`probs`](#torch.distributions.categorical.Categorical.probs
    "torch.distributions.categorical.Categorical.probs")将返回这个归一化值。logits参数将被解释为未归一化的对数概率，因此可以是任何实数。同样，它将被归一化，以使得得到的概率沿着最后一个维度总和为1。[`logits`](#torch.distributions.categorical.Categorical.logits
    "torch.distributions.categorical.Categorical.logits")将返回这个归一化值。
- en: 'See also: [`torch.multinomial()`](generated/torch.multinomial.html#torch.multinomial
    "torch.multinomial")'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见：[`torch.multinomial()`](generated/torch.multinomial.html#torch.multinomial
    "torch.multinomial")
- en: 'Example:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE71]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Parameters
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**probs** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – event probabilities'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")） - 事件概率'
- en: '**logits** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – event log
    probabilities (unnormalized)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logits**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")） - 事件对数概率（未归一化）'
- en: '[PRE72]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Cauchy
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 柯西
- en: '[PRE86]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Samples from a Cauchy (Lorentz) distribution. The distribution of the ratio
    of independent normally distributed random variables with means 0 follows a Cauchy
    distribution.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 来自柯西（洛伦兹）分布的样本。具有均值为0的独立正态分布随机变量的比率的分布遵循柯西分布。
- en: 'Example:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE87]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Parameters
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**loc** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – mode
    or median of the distribution.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loc**（[*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)") *或* [*张量*](tensors.html#torch.Tensor "torch.Tensor")） - 分布的模式或中位数。'
- en: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – half width at half maximum.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale**（[*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)") *或* [*张量*](tensors.html#torch.Tensor "torch.Tensor")） - 半峰宽。'
- en: '[PRE88]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Chi2
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卡方
- en: '[PRE100]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Bases: [`Gamma`](#torch.distributions.gamma.Gamma "torch.distributions.gamma.Gamma")'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Gamma`](#torch.distributions.gamma.Gamma "torch.distributions.gamma.Gamma")
- en: Creates a Chi-squared distribution parameterized by shape parameter [`df`](#torch.distributions.chi2.Chi2.df
    "torch.distributions.chi2.Chi2.df"). This is exactly equivalent to `Gamma(alpha=0.5*df,
    beta=0.5)`
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由形状参数[`df`](#torch.distributions.chi2.Chi2.df "torch.distributions.chi2.Chi2.df")参数化的卡方分布。这与`Gamma(alpha=0.5*df,
    beta=0.5)`完全等效。
- en: 'Example:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE101]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Parameters
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**df** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – shape
    parameter of the distribution'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**df**（[*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)") *或* [*张量*](tensors.html#torch.Tensor "torch.Tensor")） - 分布的形状参数'
- en: '[PRE102]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: ContinuousBernoulli
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连续伯努利
- en: '[PRE105]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Bases: [`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily
    "torch.distributions.exp_family.ExponentialFamily")'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily "torch.distributions.exp_family.ExponentialFamily")
- en: Creates a continuous Bernoulli distribution parameterized by [`probs`](#torch.distributions.continuous_bernoulli.ContinuousBernoulli.probs
    "torch.distributions.continuous_bernoulli.ContinuousBernoulli.probs") or [`logits`](#torch.distributions.continuous_bernoulli.ContinuousBernoulli.logits
    "torch.distributions.continuous_bernoulli.ContinuousBernoulli.logits") (but not
    both).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由[`probs`](#torch.distributions.continuous_bernoulli.ContinuousBernoulli.probs
    "torch.distributions.continuous_bernoulli.ContinuousBernoulli.probs")或[`logits`](#torch.distributions.continuous_bernoulli.ContinuousBernoulli.logits
    "torch.distributions.continuous_bernoulli.ContinuousBernoulli.logits")（但不是两者都有）参数化的连续伯努利分布。
- en: The distribution is supported in [0, 1] and parameterized by ‘probs’ (in (0,1))
    or ‘logits’ (real-valued). Note that, unlike the Bernoulli, ‘probs’ does not correspond
    to a probability and ‘logits’ does not correspond to log-odds, but the same names
    are used due to the similarity with the Bernoulli. See [1] for more details.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 该分布在[0,1]中支持，并由‘probs’（在（0,1）中）或‘logits’（实值）参数化。请注意，与伯努利不同，‘probs’不对应概率，‘logits’不对应对数几率，但由于与伯努利的相似性而使用相同的名称。有关更多详细信息，请参阅[1]。
- en: 'Example:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE106]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Parameters
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**probs** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – (0,1) valued parameters'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs**（*数字*，[*张量*](tensors.html#torch.Tensor "torch.Tensor")） - （0,1）值参数'
- en: '**logits** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – real valued parameters whose sigmoid matches ‘probs’'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logits**（*数字*，[*张量*](tensors.html#torch.Tensor "torch.Tensor")） - 实值参数，其Sigmoid匹配‘probs’'
- en: '[1] The continuous Bernoulli: fixing a pervasive error in variational autoencoders,
    Loaiza-Ganem G and Cunningham JP, NeurIPS 2019. [https://arxiv.org/abs/1907.06845](https://arxiv.org/abs/1907.06845)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 连续伯努利：修复变分自动编码器中的普遍错误，Loaiza-Ganem G和Cunningham JP，NeurIPS 2019。[https://arxiv.org/abs/1907.06845](https://arxiv.org/abs/1907.06845)'
- en: '[PRE107]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Dirichlet
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 狄利克雷
- en: '[PRE123]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Bases: [`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily
    "torch.distributions.exp_family.ExponentialFamily")'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily "torch.distributions.exp_family.ExponentialFamily")
- en: Creates a Dirichlet distribution parameterized by concentration `concentration`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由浓度`concentration`参数化的狄利克雷分布。
- en: 'Example:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE124]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Parameters
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**concentration** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) –
    concentration parameter of the distribution (often referred to as alpha)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '**concentration**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）– 分布的集中参数（通常称为alpha）'
- en: '[PRE125]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Exponential
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指数
- en: '[PRE135]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Bases: [`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily
    "torch.distributions.exp_family.ExponentialFamily")'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily "torch.distributions.exp_family.ExponentialFamily")
- en: Creates a Exponential distribution parameterized by `rate`.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由`rate`参数化的指数分布。
- en: 'Example:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE136]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Parameters
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – rate = 1 / scale of the distribution'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**rate**（[*float*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）– rate = 1
    / 分布的比例'
- en: '[PRE137]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: FisherSnedecor
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FisherSnedecor
- en: '[PRE150]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a Fisher-Snedecor distribution parameterized by `df1` and `df2`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由`df1`和`df2`参数化的Fisher-Snedecor分布。
- en: 'Example:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE151]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Parameters
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**df1** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – degrees
    of freedom parameter 1'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**df1**（[*float*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）– 自由度参数1'
- en: '**df2** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – degrees
    of freedom parameter 2'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**df2**（[*float*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）– 自由度参数2'
- en: '[PRE152]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Gamma
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gamma
- en: '[PRE161]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'Bases: [`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily
    "torch.distributions.exp_family.ExponentialFamily")'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily "torch.distributions.exp_family.ExponentialFamily")
- en: Creates a Gamma distribution parameterized by shape `concentration` and `rate`.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由形状`concentration`和`rate`参数化的Gamma分布。
- en: 'Example:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE162]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Parameters
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**concentration** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – shape parameter of the distribution (often referred to as alpha)'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**concentration**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12中)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）–
    分布的形状参数（通常称为alpha）'
- en: '**rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – rate = 1 / scale of the distribution (often referred to as beta)'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rate**（[*float*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）– rate = 1
    / 分布的比例（通常称为beta）'
- en: '[PRE163]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Geometric
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 几何
- en: '[PRE174]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a Geometric distribution parameterized by [`probs`](#torch.distributions.geometric.Geometric.probs
    "torch.distributions.geometric.Geometric.probs"), where [`probs`](#torch.distributions.geometric.Geometric.probs
    "torch.distributions.geometric.Geometric.probs") is the probability of success
    of Bernoulli trials.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由[`probs`](#torch.distributions.geometric.Geometric.probs "torch.distributions.geometric.Geometric.probs")参数化的几何分布，其中[`probs`](#torch.distributions.geometric.Geometric.probs
    "torch.distributions.geometric.Geometric.probs")是伯努利试验成功的概率。
- en: $P(X=k) = (1-p)^{k} p, k = 0, 1, ...$P(X=k)=(1−p)kp,k=0,1,...
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: $P(X=k) = (1-p)^{k} p, k = 0, 1, ...$P(X=k)=(1−p)kp,k=0,1,...
- en: Note
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`torch.distributions.geometric.Geometric()`](#torch.distributions.geometric.Geometric
    "torch.distributions.geometric.Geometric") $(k+1)$(k+1)-th trial is the first
    success hence draws samples in $\{0, 1, \ldots\}${0,1,…}, whereas [`torch.Tensor.geometric_()`](generated/torch.Tensor.geometric_.html#torch.Tensor.geometric_
    "torch.Tensor.geometric_") k-th trial is the first success hence draws samples
    in $\{1, 2, \ldots\}${1,2,…}.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[`torch.distributions.geometric.Geometric()`](#torch.distributions.geometric.Geometric
    "torch.distributions.geometric.Geometric") $(k+1)$(k+1)次试验是第一次成功，因此在$\{0, 1, \ldots\}${0,1,…}中抽取样本，而[`torch.Tensor.geometric_()`](generated/torch.Tensor.geometric_.html#torch.Tensor.geometric_
    "torch.Tensor.geometric_")第k次试验是第一次成功，因此在$\{1, 2, \ldots\}${1,2,…}中抽取样本。'
- en: 'Example:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE175]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Parameters
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**probs** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – the probability of sampling 1. Must be in range (0, 1]'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs**（*数字**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）– 抽样1的概率。必须在范围(0,
    1]内。'
- en: '**logits** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – the log-odds of sampling 1.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logits**（*数字**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）– 抽样1的对数几率。'
- en: '[PRE176]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Gumbel
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gumbel
- en: '[PRE187]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'Bases: [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")
- en: Samples from a Gumbel Distribution.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 从Gumbel分布中抽样。
- en: 'Examples:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE188]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Parameters
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**loc** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – Location
    parameter of the distribution'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loc**（[*float*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）– 分布的位置参数'
- en: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – Scale parameter of the distribution'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12中)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）–
    分布的比例参数'
- en: '[PRE189]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: HalfCauchy
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HalfCauchy
- en: '[PRE198]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'Bases: [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")
- en: 'Creates a half-Cauchy distribution parameterized by scale where:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由比例参数化的半Cauchy分布，其中：
- en: '[PRE199]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'Example:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE200]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Parameters
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – scale of the full Cauchy distribution'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '**scale**（*浮点数*或*张量*）- 完整柯西分布的比例'
- en: '[PRE201]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: HalfNormal
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HalfNormal
- en: '[PRE213]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'Bases: [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")
- en: 'Creates a half-normal distribution parameterized by scale where:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由比例参数化的半正态分布，其中：
- en: '[PRE214]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'Example:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE215]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Parameters
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – scale of the full Normal distribution'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '**scale**（*浮点数*或*张量*）- 完整正态分布的比例'
- en: '[PRE216]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Independent
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独立
- en: '[PRE228]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Reinterprets some of the batch dims of a distribution as event dims.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 将分布的一些批次维度重新解释为事件维度。
- en: 'This is mainly useful for changing the shape of the result of [`log_prob()`](#torch.distributions.independent.Independent.log_prob
    "torch.distributions.independent.Independent.log_prob"). For example to create
    a diagonal Normal distribution with the same shape as a Multivariate Normal distribution
    (so they are interchangeable), you can:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 这主要用于改变[`log_prob()`](#torch.distributions.independent.Independent.log_prob
    "torch.distributions.independent.Independent.log_prob")结果的形状。例如，为了创建一个与多元正态分布具有相同形状的对角正态分布（因此它们可以互换），您可以：
- en: '[PRE229]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Parameters
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**base_distribution** ([*torch.distributions.distribution.Distribution*](#torch.distributions.distribution.Distribution
    "torch.distributions.distribution.Distribution")) – a base distribution'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**base_distribution**（*torch.distributions.distribution.Distribution*）- 基本分布'
- en: '**reinterpreted_batch_ndims** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – the number of batch dims to reinterpret as event dims'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**reinterpreted_batch_ndims**（*整数*）- 要重新解释为事件维度的批次维度数'
- en: '[PRE230]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: InverseGamma
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InverseGamma
- en: '[PRE243]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'Bases: [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")
- en: 'Creates an inverse gamma distribution parameterized by [`concentration`](#torch.distributions.inverse_gamma.InverseGamma.concentration
    "torch.distributions.inverse_gamma.InverseGamma.concentration") and [`rate`](#torch.distributions.inverse_gamma.InverseGamma.rate
    "torch.distributions.inverse_gamma.InverseGamma.rate") where:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由[`concentration`](#torch.distributions.inverse_gamma.InverseGamma.concentration
    "torch.distributions.inverse_gamma.InverseGamma.concentration")和[`rate`](#torch.distributions.inverse_gamma.InverseGamma.rate
    "torch.distributions.inverse_gamma.InverseGamma.rate")参数化的逆伽马分布，其中：
- en: '[PRE244]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'Example:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE245]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: Parameters
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**concentration** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – shape parameter of the distribution (often referred to as alpha)'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**concentration**（*浮点数*或*张量*）- 分布的形状参数（通常称为alpha）'
- en: '**rate** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – rate = 1 / scale of the distribution (often referred to as beta)'
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rate**（*浮点数*或*张量*）- 分布的比例尺率（通常称为beta的倒数）'
- en: '[PRE246]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Kumaraswamy
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kumaraswamy
- en: '[PRE256]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Bases: [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")
- en: Samples from a Kumaraswamy distribution.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 从Kumaraswamy分布中抽样。
- en: 'Example:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE257]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: Parameters
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**concentration1** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – 1st concentration parameter of the distribution (often referred to as alpha)'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**concentration1**（*浮点数*或*张量*）- 分布的第一个浓度参数（通常称为alpha）'
- en: '**concentration0** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – 2nd concentration parameter of the distribution (often referred to as beta)'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**concentration0**（*浮点数*或*张量*）- 分布的第二个浓度参数（通常称为beta）'
- en: '[PRE258]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: LKJCholesky
  id: totrans-485
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LKJCholesky
- en: '[PRE266]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: 'LKJ distribution for lower Cholesky factor of correlation matrices. The distribution
    is controlled by `concentration` parameter $\eta$η to make the probability of
    the correlation matrix $M$M generated from a Cholesky factor proportional to $\det(M)^{\eta
    - 1}$det(M)η−1. Because of that, when `concentration == 1`, we have a uniform
    distribution over Cholesky factors of correlation matrices:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: LKJ分布用于相关矩阵的下三角Cholesky因子。该分布由`concentration`参数$\eta$η控制，使得从Cholesky因子生成的相关矩阵$M$的概率与$\det(M)^{\eta
    - 1}$成正比。因此，当`concentration == 1`时，我们得到一个在相关矩阵的Cholesky因子上均匀分布的分布：
- en: '[PRE267]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Note that this distribution samples the Cholesky factor of correlation matrices
    and not the correlation matrices themselves and thereby differs slightly from
    the derivations in [1] for the LKJCorr distribution. For sampling, this uses the
    Onion method from [1] Section 3.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此分布对相关矩阵的Cholesky因子进行采样，而不是相关矩阵本身，因此与[1]中对LKJCorr分布的推导略有不同。对于采样，这使用了[1]第3节中的Onion方法。
- en: 'Example:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE268]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Parameters
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**dimension** (*dim*) – dimension of the matrices'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dimension**（*dim*） - 矩阵的维度'
- en: '**concentration** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – concentration/shape parameter of the distribution (often referred to as eta)'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**concentration**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 分布的浓度/形状参数（通常称为eta）'
- en: '**References**'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考**'
- en: '[1] Generating random correlation matrices based on vines and extended onion
    method (2009), Daniel Lewandowski, Dorota Kurowicka, Harry Joe. Journal of Multivariate
    Analysis. 100\. 10.1016/j.jmva.2009.04.008'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 基于藤和扩展洋葱方法生成随机相关矩阵（2009年），Daniel Lewandowski，Dorota Kurowicka，Harry Joe。多元分析杂志。100.
    10.1016/j.jmva.2009.04.008'
- en: '[PRE269]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: Laplace
  id: totrans-503
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉普拉斯
- en: '[PRE274]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 基础：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a Laplace distribution parameterized by `loc` and `scale`.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由`loc`和`scale`参数化的拉普拉斯分布。
- en: 'Example:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE275]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Parameters
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**loc** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – mean
    of the distribution'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loc**（[*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 分布的均值'
- en: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – scale of the distribution'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 分布的尺度'
- en: '[PRE276]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: LogNormal
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对数正态
- en: '[PRE289]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'Bases: [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 基础：[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")
- en: 'Creates a log-normal distribution parameterized by [`loc`](#torch.distributions.log_normal.LogNormal.loc
    "torch.distributions.log_normal.LogNormal.loc") and [`scale`](#torch.distributions.log_normal.LogNormal.scale
    "torch.distributions.log_normal.LogNormal.scale") where:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由[`loc`](#torch.distributions.log_normal.LogNormal.loc "torch.distributions.log_normal.LogNormal.loc")和[`scale`](#torch.distributions.log_normal.LogNormal.scale
    "torch.distributions.log_normal.LogNormal.scale")参数化的对数正态分布，其中：
- en: '[PRE290]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: 'Example:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE291]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: Parameters
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**loc** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – mean
    of log of distribution'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loc**（[*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 分布的对数均值'
- en: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – standard deviation of log of the distribution'
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 对数分布的标准差'
- en: '[PRE292]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: LowRankMultivariateNormal
  id: totrans-545
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低秩多元正态分布
- en: '[PRE302]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 基础：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: 'Creates a multivariate normal distribution with covariance matrix having a
    low-rank form parameterized by `cov_factor` and `cov_diag`:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个具有由`cov_factor`和`cov_diag`参数化的协方差矩阵低秩形式的多元正态分布：
- en: '[PRE303]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: Example
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE304]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: Parameters
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**loc** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – mean of the
    distribution with shape batch_shape + event_shape'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loc**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 具有形状batch_shape
    + event_shape的分布均值'
- en: '**cov_factor** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – factor
    part of low-rank form of covariance matrix with shape batch_shape + event_shape
    + (rank,)'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cov_factor**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 具有形状batch_shape
    + event_shape + (rank,)的协方差矩阵低秩形式的因子部分'
- en: '**cov_diag** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – diagonal
    part of low-rank form of covariance matrix with shape batch_shape + event_shape'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cov_diag**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 具有形状batch_shape
    + event_shape的协方差矩阵低秩形式的对角部分'
- en: Note
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The computation for determinant and inverse of covariance matrix is avoided
    when cov_factor.shape[1] << cov_factor.shape[0] thanks to [Woodbury matrix identity](https://en.wikipedia.org/wiki/Woodbury_matrix_identity)
    and [matrix determinant lemma](https://en.wikipedia.org/wiki/Matrix_determinant_lemma).
    Thanks to these formulas, we just need to compute the determinant and inverse
    of the small size “capacitance” matrix:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 当cov_factor.shape[1] << cov_factor.shape[0]时，通过[Woodbury矩阵恒等式](https://en.wikipedia.org/wiki/Woodbury_matrix_identity)和[矩阵行列式引理](https://en.wikipedia.org/wiki/Matrix_determinant_lemma)避免了协方差矩阵的行列式和逆的计算。由于这些公式，我们只需要计算小尺寸“电容”矩阵的行列式和逆：
- en: '[PRE305]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: MixtureSameFamily
  id: totrans-572
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MixtureSameFamily
- en: '[PRE319]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 基础：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: The MixtureSameFamily distribution implements a (batch of) mixture distribution
    where all component are from different parameterizations of the same distribution
    type. It is parameterized by a Categorical “selecting distribution” (over k component)
    and a component distribution, i.e., a Distribution with a rightmost batch shape
    (equal to [k]) which indexes each (batch of) component.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: MixtureSameFamily分布实现了一个（批量的）混合分布，其中所有组件来自相同分布类型的不同参数化。它由一个分类“选择分布”（选择k个组件）和一个组件分布参数化，即具有右侧批量形状（等于[k]）的分布，用于索引每个（批量的）组件。
- en: 'Examples:'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE320]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: Parameters
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**mixture_distribution** – torch.distributions.Categorical-like instance. Manages
    the probability of selecting component. The number of categories must match the
    rightmost batch dimension of the component_distribution. Must have either scalar
    batch_shape or batch_shape matching component_distribution.batch_shape[:-1]'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合分布** - torch.distributions.Categorical-like实例。管理选择组件的概率。类别数量必须与component_distribution的最右边批次维度匹配。必须具有标量batch_shape或与component_distribution.batch_shape[:-1]匹配的batch_shape'
- en: '**component_distribution** – torch.distributions.Distribution-like instance.
    Right-most batch dimension indexes component.'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**component_distribution** - torch.distributions.Distribution-like实例。最右边的批次维度索引组件。'
- en: '[PRE321]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: Multinomial
  id: totrans-592
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多项式
- en: '[PRE332]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`分布`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a Multinomial distribution parameterized by [`total_count`](#torch.distributions.multinomial.Multinomial.total_count
    "torch.distributions.multinomial.Multinomial.total_count") and either [`probs`](#torch.distributions.multinomial.Multinomial.probs
    "torch.distributions.multinomial.Multinomial.probs") or [`logits`](#torch.distributions.multinomial.Multinomial.logits
    "torch.distributions.multinomial.Multinomial.logits") (but not both). The innermost
    dimension of [`probs`](#torch.distributions.multinomial.Multinomial.probs "torch.distributions.multinomial.Multinomial.probs")
    indexes over categories. All other dimensions index over batches.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由[`total_count`](#torch.distributions.multinomial.Multinomial.total_count
    "torch.distributions.multinomial.Multinomial.total_count")和[`probs`](#torch.distributions.multinomial.Multinomial.probs
    "torch.distributions.multinomial.Multinomial.probs")或[`logits`](#torch.distributions.multinomial.Multinomial.logits
    "torch.distributions.multinomial.Multinomial.logits")（但不能同时）参数化的多项式分布。[`probs`](#torch.distributions.multinomial.Multinomial.probs
    "torch.distributions.multinomial.Multinomial.probs")的最内部维度索引类别。所有其他维度索引批次。
- en: Note that [`total_count`](#torch.distributions.multinomial.Multinomial.total_count
    "torch.distributions.multinomial.Multinomial.total_count") need not be specified
    if only [`log_prob()`](#torch.distributions.multinomial.Multinomial.log_prob "torch.distributions.multinomial.Multinomial.log_prob")
    is called (see example below)
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果仅调用[`log_prob()`](#torch.distributions.multinomial.Multinomial.log_prob
    "torch.distributions.multinomial.Multinomial.log_prob")，则无需指定[`total_count`](#torch.distributions.multinomial.Multinomial.total_count
    "torch.distributions.multinomial.Multinomial.total_count")（请参见下面的示例）
- en: Note
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The probs argument must be non-negative, finite and have a non-zero sum, and
    it will be normalized to sum to 1 along the last dimension. [`probs`](#torch.distributions.multinomial.Multinomial.probs
    "torch.distributions.multinomial.Multinomial.probs") will return this normalized
    value. The logits argument will be interpreted as unnormalized log probabilities
    and can therefore be any real number. It will likewise be normalized so that the
    resulting probabilities sum to 1 along the last dimension. [`logits`](#torch.distributions.multinomial.Multinomial.logits
    "torch.distributions.multinomial.Multinomial.logits") will return this normalized
    value.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: probs参数必须是非负的、有限的，并且具有非零总和，它将被归一化为沿着最后一个维度总和为1。[`probs`](#torch.distributions.multinomial.Multinomial.probs
    "torch.distributions.multinomial.Multinomial.probs")将返回这个归一化值。logits参数将被解释为未归一化的对数概率，因此可以是任意实数。它也将被归一化，使得最终概率沿着最后一个维度总和为1。[`logits`](#torch.distributions.multinomial.Multinomial.logits
    "torch.distributions.multinomial.Multinomial.logits")将返回这个归一化值。
- en: '[`sample()`](#torch.distributions.multinomial.Multinomial.sample "torch.distributions.multinomial.Multinomial.sample")
    requires a single shared total_count for all parameters and samples.'
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`sample()`](#torch.distributions.multinomial.Multinomial.sample "torch.distributions.multinomial.Multinomial.sample")需要所有参数和样本的单个共享total_count。'
- en: '[`log_prob()`](#torch.distributions.multinomial.Multinomial.log_prob "torch.distributions.multinomial.Multinomial.log_prob")
    allows different total_count for each parameter and sample.'
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`log_prob()`](#torch.distributions.multinomial.Multinomial.log_prob "torch.distributions.multinomial.Multinomial.log_prob")允许每个参数和样本有不同的total_count。'
- en: 'Example:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE333]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: Parameters
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**total_count** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – number of trials'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**total_count**（[*int*](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12中)")） - 试验次数'
- en: '**probs** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – event probabilities'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"） - 事件概率'
- en: '**logits** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – event log
    probabilities (unnormalized)'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对数**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"） - 事件对数概率（未归一化）'
- en: '[PRE334]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: MultivariateNormal
  id: totrans-619
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多元正态分布
- en: '[PRE346]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`分布`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a multivariate normal (also called Gaussian) distribution parameterized
    by a mean vector and a covariance matrix.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由均值向量和协方差矩阵参数化的多元正态（也称为高斯）分布。
- en: The multivariate normal distribution can be parameterized either in terms of
    a positive definite covariance matrix $\mathbf{\Sigma}$Σ or a positive definite
    precision matrix $\mathbf{\Sigma}^{-1}$Σ−1 or a lower-triangular matrix $\mathbf{L}$L
    with positive-valued diagonal entries, such that $\mathbf{\Sigma} = \mathbf{L}\mathbf{L}^\top$Σ=LL⊤.
    This triangular matrix can be obtained via e.g. Cholesky decomposition of the
    covariance.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 多元正态分布可以通过正定协方差矩阵$\mathbf{\Sigma}$Σ或正定精度矩阵$\mathbf{\Sigma}^{-1}$Σ−1或具有正值对角元素的下三角矩阵$\mathbf{L}$L来参数化，使得$\mathbf{\Sigma}
    = \mathbf{L}\mathbf{L}^\top$Σ=LL⊤。这个三角矩阵可以通过例如协方差的Cholesky分解获得。
- en: Example
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE347]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: Parameters
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**loc** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – mean of the
    distribution'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loc**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"） - 分布的均值'
- en: '**covariance_matrix** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – positive-definite covariance matrix'
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协方差矩阵**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"） - 正定协方差矩阵'
- en: '**precision_matrix** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – positive-definite precision matrix'
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精度矩阵**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"） - 正定精度矩阵'
- en: '**scale_tril** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – lower-triangular
    factor of covariance, with positive-valued diagonal'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale_tril**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 协方差的下三角因子，对角线为正值'
- en: Note
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Only one of [`covariance_matrix`](#torch.distributions.multivariate_normal.MultivariateNormal.covariance_matrix
    "torch.distributions.multivariate_normal.MultivariateNormal.covariance_matrix")
    or [`precision_matrix`](#torch.distributions.multivariate_normal.MultivariateNormal.precision_matrix
    "torch.distributions.multivariate_normal.MultivariateNormal.precision_matrix")
    or [`scale_tril`](#torch.distributions.multivariate_normal.MultivariateNormal.scale_tril
    "torch.distributions.multivariate_normal.MultivariateNormal.scale_tril") can be
    specified.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 只能指定[`covariance_matrix`](#torch.distributions.multivariate_normal.MultivariateNormal.covariance_matrix
    "torch.distributions.multivariate_normal.MultivariateNormal.covariance_matrix")、[`precision_matrix`](#torch.distributions.multivariate_normal.MultivariateNormal.precision_matrix
    "torch.distributions.multivariate_normal.MultivariateNormal.precision_matrix")或[`scale_tril`](#torch.distributions.multivariate_normal.MultivariateNormal.scale_tril
    "torch.distributions.multivariate_normal.MultivariateNormal.scale_tril")中的一个。
- en: 'Using [`scale_tril`](#torch.distributions.multivariate_normal.MultivariateNormal.scale_tril
    "torch.distributions.multivariate_normal.MultivariateNormal.scale_tril") will
    be more efficient: all computations internally are based on [`scale_tril`](#torch.distributions.multivariate_normal.MultivariateNormal.scale_tril
    "torch.distributions.multivariate_normal.MultivariateNormal.scale_tril"). If [`covariance_matrix`](#torch.distributions.multivariate_normal.MultivariateNormal.covariance_matrix
    "torch.distributions.multivariate_normal.MultivariateNormal.covariance_matrix")
    or [`precision_matrix`](#torch.distributions.multivariate_normal.MultivariateNormal.precision_matrix
    "torch.distributions.multivariate_normal.MultivariateNormal.precision_matrix")
    is passed instead, it is only used to compute the corresponding lower triangular
    matrices using a Cholesky decomposition.'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`scale_tril`](#torch.distributions.multivariate_normal.MultivariateNormal.scale_tril
    "torch.distributions.multivariate_normal.MultivariateNormal.scale_tril")将更有效：所有计算内部都基于[`scale_tril`](#torch.distributions.multivariate_normal.MultivariateNormal.scale_tril
    "torch.distributions.multivariate_normal.MultivariateNormal.scale_tril")。如果传递的是[`covariance_matrix`](#torch.distributions.multivariate_normal.MultivariateNormal.covariance_matrix
    "torch.distributions.multivariate_normal.MultivariateNormal.covariance_matrix")或[`precision_matrix`](#torch.distributions.multivariate_normal.MultivariateNormal.precision_matrix
    "torch.distributions.multivariate_normal.MultivariateNormal.precision_matrix")，则仅用于使用Cholesky分解计算相应的下三角矩阵。
- en: '[PRE348]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: NegativeBinomial
  id: totrans-647
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负二项分布
- en: '[PRE361]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a Negative Binomial distribution, i.e. distribution of the number of
    successful independent and identical Bernoulli trials before `total_count` failures
    are achieved. The probability of success of each Bernoulli trial is [`probs`](#torch.distributions.negative_binomial.NegativeBinomial.probs
    "torch.distributions.negative_binomial.NegativeBinomial.probs").
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个负二项分布，即在达到`total_count`次失败之前成功独立且相同的伯努利试验次数的分布。每次伯努利试验成功的概率是[`probs`](#torch.distributions.negative_binomial.NegativeBinomial.probs
    "torch.distributions.negative_binomial.NegativeBinomial.probs")。
- en: Parameters
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**total_count** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – non-negative number of negative Bernoulli trials to stop, although the distribution
    is still valid for real valued count'
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**total_count**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 非负的负伯努利试验次数，尽管分布仍然适用于实值计数'
- en: '**probs** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – Event probabilities
    of success in the half open interval [0, 1)'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 成功事件的概率在半开区间[0,
    1]中'
- en: '**logits** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – Event log-odds
    for probabilities of success'
  id: totrans-654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logits**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 成功概率的事件对数几率'
- en: '[PRE362]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: Normal
  id: totrans-666
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正态分布
- en: '[PRE373]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: 'Bases: [`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily
    "torch.distributions.exp_family.ExponentialFamily")'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily "torch.distributions.exp_family.ExponentialFamily")
- en: Creates a normal (also called Gaussian) distribution parameterized by `loc`
    and `scale`.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由`loc`和`scale`参数化的正态（也称为高斯）分布。
- en: 'Example:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE374]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: Parameters
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**loc** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – mean
    of the distribution (often referred to as mu)'
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loc**（[*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 分布的均值（通常称为mu）'
- en: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – standard deviation of the distribution (often referred to as sigma)'
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 分布的标准差（通常称为sigma）'
- en: '[PRE375]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: OneHotCategorical
  id: totrans-689
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OneHotCategorical
- en: '[PRE389]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a one-hot categorical distribution parameterized by [`probs`](#torch.distributions.one_hot_categorical.OneHotCategorical.probs
    "torch.distributions.one_hot_categorical.OneHotCategorical.probs") or [`logits`](#torch.distributions.one_hot_categorical.OneHotCategorical.logits
    "torch.distributions.one_hot_categorical.OneHotCategorical.logits").
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由[`probs`](#torch.distributions.one_hot_categorical.OneHotCategorical.probs
    "torch.distributions.one_hot_categorical.OneHotCategorical.probs")或[`logits`](#torch.distributions.one_hot_categorical.OneHotCategorical.logits
    "torch.distributions.one_hot_categorical.OneHotCategorical.logits")参数化的一位独热分类分布。
- en: Samples are one-hot coded vectors of size `probs.size(-1)`.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 样本是大小为`probs.size(-1)`的独热编码向量。
- en: Note
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The probs argument must be non-negative, finite and have a non-zero sum, and
    it will be normalized to sum to 1 along the last dimension. [`probs`](#torch.distributions.one_hot_categorical.OneHotCategorical.probs
    "torch.distributions.one_hot_categorical.OneHotCategorical.probs") will return
    this normalized value. The logits argument will be interpreted as unnormalized
    log probabilities and can therefore be any real number. It will likewise be normalized
    so that the resulting probabilities sum to 1 along the last dimension. [`logits`](#torch.distributions.one_hot_categorical.OneHotCategorical.logits
    "torch.distributions.one_hot_categorical.OneHotCategorical.logits") will return
    this normalized value.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: probs参数必须是非负的、有限的，并且具有非零总和，它将被归一化为沿着最后一个维度总和为1。[`probs`](#torch.distributions.one_hot_categorical.OneHotCategorical.probs
    "torch.distributions.one_hot_categorical.OneHotCategorical.probs")将返回这个归一化值。logits参数将被解释为未归一化的对数概率，因此可以是任意实数。它也将被归一化，使得最终的概率沿着最后一个维度总和为1。[`logits`](#torch.distributions.one_hot_categorical.OneHotCategorical.logits
    "torch.distributions.one_hot_categorical.OneHotCategorical.logits")将返回这个归一化值。
- en: 'See also: `torch.distributions.Categorical()` for specifications of [`probs`](#torch.distributions.one_hot_categorical.OneHotCategorical.probs
    "torch.distributions.one_hot_categorical.OneHotCategorical.probs") and [`logits`](#torch.distributions.one_hot_categorical.OneHotCategorical.logits
    "torch.distributions.one_hot_categorical.OneHotCategorical.logits").'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅：`torch.distributions.Categorical()`以获取[`probs`](#torch.distributions.one_hot_categorical.OneHotCategorical.probs
    "torch.distributions.one_hot_categorical.OneHotCategorical.probs")和[`logits`](#torch.distributions.one_hot_categorical.OneHotCategorical.logits
    "torch.distributions.one_hot_categorical.OneHotCategorical.logits")的规格。
- en: 'Example:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE390]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: Parameters
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**probs** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – event probabilities'
  id: totrans-700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 事件概率'
- en: '**logits** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – event log
    probabilities (unnormalized)'
  id: totrans-701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logits**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 事件对数概率（未归一化）'
- en: '[PRE391]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: Pareto
  id: totrans-716
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pareto
- en: '[PRE405]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: 'Bases: [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")
- en: Samples from a Pareto Type 1 distribution.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 从Pareto Type 1分布中采样。
- en: 'Example:'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE406]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: Parameters
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – Scale parameter of the distribution'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 分布的比例参数'
- en: '**alpha** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – Shape parameter of the distribution'
  id: totrans-724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**alpha**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 分布的形状参数'
- en: '[PRE407]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: Poisson
  id: totrans-732
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 泊松
- en: '[PRE414]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: 'Bases: [`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily
    "torch.distributions.exp_family.ExponentialFamily")'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily "torch.distributions.exp_family.ExponentialFamily")
- en: Creates a Poisson distribution parameterized by `rate`, the rate parameter.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由`rate`参数化的泊松分布，即速率参数。
- en: Samples are nonnegative integers, with a pmf given by
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 样本是非负整数，其概率质量函数由
- en: $\mathrm{rate}^k \frac{e^{-\mathrm{rate}}}{k!}$ ratekk!e−rate​
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: $\mathrm{rate}^k \frac{e^{-\mathrm{rate}}}{k!}$ ratekk!e−rate​
- en: 'Example:'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE415]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: Parameters
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**rate** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – the rate parameter'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: '**rate**（*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 速率参数'
- en: '[PRE416]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: RelaxedBernoulli
  id: totrans-750
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RelaxedBernoulli
- en: '[PRE424]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: 'Bases: [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")
- en: Creates a RelaxedBernoulli distribution, parametrized by [`temperature`](#torch.distributions.relaxed_bernoulli.RelaxedBernoulli.temperature
    "torch.distributions.relaxed_bernoulli.RelaxedBernoulli.temperature"), and either
    [`probs`](#torch.distributions.relaxed_bernoulli.RelaxedBernoulli.probs "torch.distributions.relaxed_bernoulli.RelaxedBernoulli.probs")
    or [`logits`](#torch.distributions.relaxed_bernoulli.RelaxedBernoulli.logits "torch.distributions.relaxed_bernoulli.RelaxedBernoulli.logits")
    (but not both). This is a relaxed version of the Bernoulli distribution, so the
    values are in (0, 1), and has reparametrizable samples.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由[`temperature`](#torch.distributions.relaxed_bernoulli.RelaxedBernoulli.temperature
    "torch.distributions.relaxed_bernoulli.RelaxedBernoulli.temperature")参数化的RelaxedBernoulli分布，以及[`probs`](#torch.distributions.relaxed_bernoulli.RelaxedBernoulli.probs
    "torch.distributions.relaxed_bernoulli.RelaxedBernoulli.probs")或[`logits`](#torch.distributions.relaxed_bernoulli.RelaxedBernoulli.logits
    "torch.distributions.relaxed_bernoulli.RelaxedBernoulli.logits")（但不能同时）。这是伯努利分布的松弛版本，因此值在(0,
    1)之间，并且具有可重参数化的样本。
- en: 'Example:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE425]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: Parameters
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**temperature** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – relaxation
    temperature'
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**temperature**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 松弛温度'
- en: '**probs** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – the probability of sampling 1'
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs**（*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 采样1的概率'
- en: '**logits** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – the log-odds of sampling 1'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logits**（*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 采样1的对数几率'
- en: '[PRE426]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: LogitRelaxedBernoulli
  id: totrans-767
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LogitRelaxedBernoulli
- en: '[PRE433]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a LogitRelaxedBernoulli distribution parameterized by [`probs`](#torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.probs
    "torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.probs") or [`logits`](#torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.logits
    "torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.logits") (but not
    both), which is the logit of a RelaxedBernoulli distribution.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由[`probs`](#torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.probs
    "torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.probs")或[`logits`](#torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.logits
    "torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli.logits")（但不是两者）参数化的LogitRelaxedBernoulli分布，它是RelaxedBernoulli分布的对数几率。
- en: Samples are logits of values in (0, 1). See [1] for more details.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 样本是在(0, 1)范围内的值的对数。更多细节请参见[1]。
- en: Parameters
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**temperature** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – relaxation
    temperature'
  id: totrans-773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**temperature** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – 松弛温度'
- en: '**probs** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – the probability of sampling 1'
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – 采样1的概率'
- en: '**logits** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – the log-odds of sampling 1'
  id: totrans-775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logits** (*Number**,* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – 采样1的对数几率'
- en: '[1] The Concrete Distribution: A Continuous Relaxation of Discrete Random Variables
    (Maddison et al, 2017)'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 具体分布：离散随机变量的连续松弛（Maddison等人，2017）'
- en: '[2] Categorical Reparametrization with Gumbel-Softmax (Jang et al, 2017)'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 使用Gumbel-Softmax的分类重参数化（Jang等人，2017）'
- en: '[PRE434]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: RelaxedOneHotCategorical
  id: totrans-786
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RelaxedOneHotCategorical
- en: '[PRE442]'
  id: totrans-787
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: 'Bases: [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")
- en: Creates a RelaxedOneHotCategorical distribution parametrized by [`temperature`](#torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.temperature
    "torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.temperature"),
    and either [`probs`](#torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.probs
    "torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.probs") or [`logits`](#torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.logits
    "torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.logits"). This
    is a relaxed version of the `OneHotCategorical` distribution, so its samples are
    on simplex, and are reparametrizable.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由[`temperature`](#torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.temperature
    "torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.temperature")参数化的RelaxedOneHotCategorical分布，并且是由[`probs`](#torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.probs
    "torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.probs")或[`logits`](#torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.logits
    "torch.distributions.relaxed_categorical.RelaxedOneHotCategorical.logits")参数化的。这是`OneHotCategorical`分布的松弛版本，因此其样本位于单纯形上，并且可重参数化。
- en: 'Example:'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE443]'
  id: totrans-791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: Parameters
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**temperature** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – relaxation
    temperature'
  id: totrans-793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**temperature** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – 松弛温度'
- en: '**probs** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – event probabilities'
  id: totrans-794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**probs** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – 事件概率'
- en: '**logits** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – unnormalized
    log probability for each event'
  id: totrans-795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logits** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – 每个事件的未归一化对数概率'
- en: '[PRE444]'
  id: totrans-796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: StudentT
  id: totrans-803
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: StudentT
- en: '[PRE451]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: Creates a Student’s t-distribution parameterized by degree of freedom `df`,
    mean `loc` and scale `scale`.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由自由度`df`、均值`loc`和标度`scale`参数化的学生t分布。
- en: 'Example:'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE452]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: Parameters
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**df** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – degrees
    of freedom'
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**df** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – 自由度'
- en: '**loc** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – mean
    of the distribution'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loc** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – 分布的均值'
- en: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – scale of the distribution'
  id: totrans-812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – 分布的标度'
- en: '[PRE453]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: TransformedDistribution
  id: totrans-823
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TransformedDistribution
- en: '[PRE463]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")
- en: 'Extension of the Distribution class, which applies a sequence of Transforms
    to a base distribution. Let f be the composition of transforms applied:'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: Distribution类的扩展，将一系列变换应用于基本分布。设f为应用的变换的组合：
- en: '[PRE464]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: Note that the `.event_shape` of a [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution") is the
    maximum shape of its base distribution and its transforms, since transforms can
    introduce correlations among events.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")的`.event_shape`是其基本分布和变换的最大形状，因为变换可能在事件之间引入相关性。
- en: 'An example for the usage of [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution") would
    be:'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")的示例：
- en: '[PRE465]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: For more examples, please look at the implementations of [`Gumbel`](#torch.distributions.gumbel.Gumbel
    "torch.distributions.gumbel.Gumbel"), [`HalfCauchy`](#torch.distributions.half_cauchy.HalfCauchy
    "torch.distributions.half_cauchy.HalfCauchy"), [`HalfNormal`](#torch.distributions.half_normal.HalfNormal
    "torch.distributions.half_normal.HalfNormal"), [`LogNormal`](#torch.distributions.log_normal.LogNormal
    "torch.distributions.log_normal.LogNormal"), [`Pareto`](#torch.distributions.pareto.Pareto
    "torch.distributions.pareto.Pareto"), [`Weibull`](#torch.distributions.weibull.Weibull
    "torch.distributions.weibull.Weibull"), [`RelaxedBernoulli`](#torch.distributions.relaxed_bernoulli.RelaxedBernoulli
    "torch.distributions.relaxed_bernoulli.RelaxedBernoulli") and [`RelaxedOneHotCategorical`](#torch.distributions.relaxed_categorical.RelaxedOneHotCategorical
    "torch.distributions.relaxed_categorical.RelaxedOneHotCategorical")
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 更多示例，请查看[`Gumbel`](#torch.distributions.gumbel.Gumbel)，[`HalfCauchy`](#torch.distributions.half_cauchy.HalfCauchy)，[`HalfNormal`](#torch.distributions.half_normal.HalfNormal)，[`LogNormal`](#torch.distributions.log_normal.LogNormal)，[`Pareto`](#torch.distributions.pareto.Pareto)，[`Weibull`](#torch.distributions.weibull.Weibull)，[`RelaxedBernoulli`](#torch.distributions.relaxed_bernoulli.RelaxedBernoulli)和[`RelaxedOneHotCategorical`](#torch.distributions.relaxed_categorical.RelaxedOneHotCategorical)的实现。
- en: '[PRE466]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: Computes the cumulative distribution function by inverting the transform(s)
    and computing the score of the base distribution.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 通过反转变换(s)并计算基本分布的得分来计算累积分布函数。
- en: '[PRE468]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: Computes the inverse cumulative distribution function using transform(s) and
    computing the score of the base distribution.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 使用transform(s)计算逆累积分布函数，并计算基本分布的得分。
- en: '[PRE471]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: Scores the sample by inverting the transform(s) and computing the score using
    the score of the base distribution and the log abs det jacobian.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 通过反转变换(s)并使用基本分布的得分和对数绝对值行列式雅可比矩阵的得分来对样本进行评分。
- en: '[PRE472]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: Generates a sample_shape shaped reparameterized sample or sample_shape shaped
    batch of reparameterized samples if the distribution parameters are batched. Samples
    first from base distribution and applies transform() for every transform in the
    list.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个形状为sample_shape的重参数化样本或者如果分布参数是批处理的，则生成一个形状为sample_shape的重参数化样本批次。首先从基本分布中抽样，然后对列表中的每个变换应用transform()。
- en: '[PRE473]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: Generates a sample_shape shaped sample or sample_shape shaped batch of samples
    if the distribution parameters are batched. Samples first from base distribution
    and applies transform() for every transform in the list.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 如果分布参数是批处理的，则生成一个形状为sample_shape的样本或者形状为sample_shape的样本批次。首先从基本分布中抽样，然后对列表中的每个变换应用transform()。
- en: '[PRE474]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: Uniform
  id: totrans-846
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 均匀分布
- en: '[PRE475]'
  id: totrans-847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution)
- en: Generates uniformly distributed random samples from the half-open interval `[low,
    high)`.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 从半开区间`[low, high)`中生成均匀分布的随机样本。
- en: 'Example:'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE476]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: Parameters
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**low** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – lower
    range (inclusive).'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**low**（*float*或*Tensor*） - 下限范围（包括）。'
- en: '**high** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – upper range (exclusive).'
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**high**（*float*或*Tensor*） - 上限范围（不包括）。'
- en: '[PRE477]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: VonMises
  id: totrans-868
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VonMises
- en: '[PRE490]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: 'Bases: [`Distribution`](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution")'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`Distribution`](#torch.distributions.distribution.Distribution)
- en: A circular von Mises distribution.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形von Mises分布。
- en: This implementation uses polar coordinates. The `loc` and `value` args can be
    any real number (to facilitate unconstrained optimization), but are interpreted
    as angles modulo 2 pi.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现使用极坐标。`loc`和`value`参数可以是任何实数（以便进行无约束优化），但被解释为模2 pi的角度。
- en: 'Example::'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE491]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: Parameters
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**loc** ([*torch.Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – an angle
    in radians.'
  id: totrans-876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loc**（*torch.Tensor*） - 弧度角度。'
- en: '**concentration** ([*torch.Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – concentration parameter'
  id: totrans-877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**concentration**（*torch.Tensor*） - 集中参数'
- en: '[PRE492]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: The provided mean is the circular one.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的均值是圆形的。
- en: '[PRE497]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: 'The sampling algorithm for the von Mises distribution is based on the following
    paper: D.J. Best and N.I. Fisher, “Efficient simulation of the von Mises distribution.”
    Applied Statistics (1979): 152-157.'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: von Mises分布的抽样算法基于以下论文：D.J. Best和N.I. Fisher，“von Mises分布的高效模拟。”应用统计（1979年）：152-157。
- en: 'Sampling is always done in double precision internally to avoid a hang in _rejection_sample()
    for small values of the concentration, which starts to happen for single precision
    around 1e-4 (see issue #88443).'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 采样始终在内部以双精度进行，以避免在集中值较小时（在单精度约为1e-4时）在_rejection_sample()中出现挂起（请参见问题#88443）。
- en: '[PRE499]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: The provided variance is the circular one.
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的方差是圆形的。
- en: Weibull
  id: totrans-891
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 威布尔
- en: '[PRE501]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: 'Bases: [`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution
    "torch.distributions.transformed_distribution.TransformedDistribution")'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`TransformedDistribution`](#torch.distributions.transformed_distribution.TransformedDistribution)
- en: Samples from a two-parameter Weibull distribution.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 从双参数威布尔分布中抽样。
- en: Example
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE502]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: Parameters
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**scale** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – Scale parameter of distribution (lambda).'
  id: totrans-898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale**（*float*或*Tensor*） - 分布的比例参数（lambda）。'
- en: '**concentration** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – Concentration parameter of distribution (k/shape).'
  id: totrans-899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浓度**（[*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)") *或* [*张量*](tensors.html#torch.Tensor "torch.Tensor"） - 分布的浓度参数（k/形状）。'
- en: '[PRE503]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '[PRE505]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '[PRE509]'
  id: totrans-906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: Wishart
  id: totrans-907
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Wishart
- en: '[PRE510]'
  id: totrans-908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: 'Bases: [`ExponentialFamily`](#torch.distributions.exp_family.ExponentialFamily
    "torch.distributions.exp_family.ExponentialFamily")'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：[`指数族`](#torch.distributions.exp_family.ExponentialFamily "torch.distributions.exp_family.ExponentialFamily")
- en: Creates a Wishart distribution parameterized by a symmetric positive definite
    matrix $\Sigma$Σ, or its Cholesky decomposition $\mathbf{\Sigma} = \mathbf{L}\mathbf{L}^\top$Σ=LL⊤
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 创建由对称正定矩阵$\Sigma$Σ或其Cholesky分解$\mathbf{\Sigma} = \mathbf{L}\mathbf{L}^\top$Σ=LL⊤参数化的Wishart分布
- en: Example
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE511]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: Parameters
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**df** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – real-valued
    parameter larger than the (dimension of Square matrix) - 1'
  id: totrans-914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**df**（[*浮点数*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)") *或* [*张量*](tensors.html#torch.Tensor "torch.Tensor"） - 大于（方阵的维数）- 1的实值参数'
- en: '**covariance_matrix** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – positive-definite covariance matrix'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协方差矩阵**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"） - 正定协方差矩阵'
- en: '**precision_matrix** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – positive-definite precision matrix'
  id: totrans-916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**precision_matrix**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"） - 正定精度矩阵'
- en: '**scale_tril** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – lower-triangular
    factor of covariance, with positive-valued diagonal'
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale_tril**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"） - 协方差的下三角因子，对角线为正值'
- en: Note
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Only one of [`covariance_matrix`](#torch.distributions.wishart.Wishart.covariance_matrix
    "torch.distributions.wishart.Wishart.covariance_matrix") or [`precision_matrix`](#torch.distributions.wishart.Wishart.precision_matrix
    "torch.distributions.wishart.Wishart.precision_matrix") or [`scale_tril`](#torch.distributions.wishart.Wishart.scale_tril
    "torch.distributions.wishart.Wishart.scale_tril") can be specified. Using [`scale_tril`](#torch.distributions.wishart.Wishart.scale_tril
    "torch.distributions.wishart.Wishart.scale_tril") will be more efficient: all
    computations internally are based on [`scale_tril`](#torch.distributions.wishart.Wishart.scale_tril
    "torch.distributions.wishart.Wishart.scale_tril"). If [`covariance_matrix`](#torch.distributions.wishart.Wishart.covariance_matrix
    "torch.distributions.wishart.Wishart.covariance_matrix") or [`precision_matrix`](#torch.distributions.wishart.Wishart.precision_matrix
    "torch.distributions.wishart.Wishart.precision_matrix") is passed instead, it
    is only used to compute the corresponding lower triangular matrices using a Cholesky
    decomposition. ‘torch.distributions.LKJCholesky’ is a restricted Wishart distribution.[1]'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 只能指定[`covariance_matrix`](#torch.distributions.wishart.Wishart.covariance_matrix
    "torch.distributions.wishart.Wishart.covariance_matrix")、[`precision_matrix`](#torch.distributions.wishart.Wishart.precision_matrix
    "torch.distributions.wishart.Wishart.precision_matrix")或[`scale_tril`](#torch.distributions.wishart.Wishart.scale_tril
    "torch.distributions.wishart.Wishart.scale_tril")中的一个。使用[`scale_tril`](#torch.distributions.wishart.Wishart.scale_tril
    "torch.distributions.wishart.Wishart.scale_tril")将更有效：所有计算内部都基于[`scale_tril`](#torch.distributions.wishart.Wishart.scale_tril
    "torch.distributions.wishart.Wishart.scale_tril")。如果传递的是[`covariance_matrix`](#torch.distributions.wishart.Wishart.covariance_matrix
    "torch.distributions.wishart.Wishart.covariance_matrix")或[`precision_matrix`](#torch.distributions.wishart.Wishart.precision_matrix
    "torch.distributions.wishart.Wishart.precision_matrix")，则仅用于使用Cholesky分解计算相应的下三角矩阵。‘torch.distributions.LKJCholesky’是受限制的Wishart分布。[1]
- en: '**References**'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考**'
- en: '[1] Wang, Z., Wu, Y. and Chu, H., 2018\. On equivalence of the LKJ distribution
    and the restricted Wishart distribution. [2] Sawyer, S., 2007\. Wishart Distributions
    and Inverse-Wishart Sampling. [3] Anderson, T. W., 2003\. An Introduction to Multivariate
    Statistical Analysis (3rd ed.). [4] Odell, P. L. & Feiveson, A. H., 1966\. A Numerical
    Procedure to Generate a SampleCovariance Matrix. JASA, 61(313):199-203. [5] Ku,
    Y.-C. & Bloomfield, P., 2010\. Generating Random Wishart Matrices with Fractional
    Degrees of Freedom in OX.'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 王，Z.，吴，Y.和楚，H.，2018。LKJ分布和受限制的Wishart分布的等价性。[2] 索耶，S.，2007。Wishart分布和逆Wishart抽样。[3]
    安德森，T. W.，2003。多元统计分析导论（第3版）。[4] 奥德尔，P. L. & 费夫森，A. H.，1966。生成样本协方差矩阵的数值过程。JASA，61(313)：199-203。[5]
    顾，Y.-C. & 布鲁姆菲尔德，P.，2010。在OX中生成具有分数自由度的随机Wishart矩阵。'
- en: '[PRE512]'
  id: totrans-922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: '[PRE517]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: '[PRE518]'
  id: totrans-928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '[PRE519]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '[PRE521]'
  id: totrans-931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: Warning
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: In some cases, sampling algorithm based on Bartlett decomposition may return
    singular matrix samples. Several tries to correct singular samples are performed
    by default, but it may end up returning singular matrix samples. Singular samples
    may return -inf values in .log_prob(). In those cases, the user should validate
    the samples and either fix the value of df or adjust max_try_correction value
    for argument in .rsample accordingly.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，基于Bartlett分解的采样算法可能返回奇异矩阵样本。默认情况下会尝试多次纠正奇异样本，但最终可能会返回奇异矩阵样本。奇异样本可能会在.log_prob()中返回-inf值。在这种情况下，用户应验证样本，并修复df的值或根据需要调整.rsample中max_try_correction参数的值。
- en: '[PRE522]'
  id: totrans-934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '## KL Divergence'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: '## KL散度'
- en: '[PRE525]'
  id: totrans-938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: Compute Kullback-Leibler divergence $KL(p \| q)$KL(p∥q) between two distributions.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两个分布之间的Kullback-Leibler散度$KL(p \| q)$KL(p∥q)。
- en: $KL(p \| q) = \int p(x) \log\frac {p(x)} {q(x)} \,dx$KL(p∥q)=∫p(x)logq(x)p(x)​dx
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: $KL(p \| q) = \int p(x) \log\frac {p(x)} {q(x)} \,dx$KL(p∥q)=∫p(x)logq(x)p(x)​dx
- en: Parameters
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**p** ([*Distribution*](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution"))
    – A `Distribution` object.'
  id: totrans-942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**p**（[*分布*](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution"）
    - 一个`Distribution`对象。'
- en: '**q** ([*Distribution*](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution"))
    – A `Distribution` object.'
  id: totrans-943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**q**（[*分布*](#torch.distributions.distribution.Distribution "torch.distributions.distribution.Distribution"）
    - 一个`Distribution`对象。'
- en: Returns
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: A batch of KL divergences of shape batch_shape.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 形状为batch_shape的一批KL散度。
- en: Return type
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[Tensor](tensors.html#torch.Tensor "torch.Tensor")'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '[张量](tensors.html#torch.Tensor "torch.Tensor"）'
- en: Raises
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 引发
- en: '[**NotImplementedError**](https://docs.python.org/3/library/exceptions.html#NotImplementedError
    "(in Python v3.12)") – If the distribution types have not been registered via
    [`register_kl()`](#torch.distributions.kl.register_kl "torch.distributions.kl.register_kl").'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: '[**NotImplementedError**](https://docs.python.org/3/library/exceptions.html#NotImplementedError
    "(in Python v3.12)") - 如果分布类型尚未通过[`register_kl()`](#torch.distributions.kl.register_kl
    "torch.distributions.kl.register_kl")注册。'
- en: 'KL divergence is currently implemented for the following distribution pairs:'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: KL 散度目前针对以下分布对实现：
- en: '`Bernoulli` and `Bernoulli`'
  id: totrans-951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`伯努利` 和 `伯努利`'
- en: '`Bernoulli` and `Poisson`'
  id: totrans-952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`伯努利` 和 `泊松`'
- en: '`Beta` and `Beta`'
  id: totrans-953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`贝塔` 和 `贝塔`'
- en: '`Beta` and `ContinuousBernoulli`'
  id: totrans-954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`贝塔` 和 `连续伯努利`'
- en: '`Beta` and `Exponential`'
  id: totrans-955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`贝塔` 和 `指数`'
- en: '`Beta` and `Gamma`'
  id: totrans-956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`贝塔` 和 `Gamma`'
- en: '`Beta` and `Normal`'
  id: totrans-957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`贝塔` 和 `正态`'
- en: '`Beta` and `Pareto`'
  id: totrans-958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`贝塔` 和 `帕累托`'
- en: '`Beta` and `Uniform`'
  id: totrans-959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`贝塔` 和 `均匀`'
- en: '`Binomial` and `Binomial`'
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`二项式` 和 `二项式`'
- en: '`Categorical` and `Categorical`'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`分类` 和 `分类`'
- en: '`Cauchy` and `Cauchy`'
  id: totrans-962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`柯西` 和 `柯西`'
- en: '`ContinuousBernoulli` and `ContinuousBernoulli`'
  id: totrans-963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`连续伯努利` 和 `连续伯努利`'
- en: '`ContinuousBernoulli` and `Exponential`'
  id: totrans-964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`连续伯努利` 和 `指数`'
- en: '`ContinuousBernoulli` and `Normal`'
  id: totrans-965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`连续伯努利` 和 `正态`'
- en: '`ContinuousBernoulli` and `Pareto`'
  id: totrans-966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`连续伯努利` 和 `帕累托`'
- en: '`ContinuousBernoulli` and `Uniform`'
  id: totrans-967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`连续伯努利` 和 `均匀`'
- en: '`Dirichlet` and `Dirichlet`'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`狄利克雷` 和 `狄利克雷`'
- en: '`Exponential` and `Beta`'
  id: totrans-969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`指数` 和 `贝塔`'
- en: '`Exponential` and `ContinuousBernoulli`'
  id: totrans-970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`指数` 和 `连续伯努利`'
- en: '`Exponential` and `Exponential`'
  id: totrans-971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`指数` 和 `指数`'
- en: '`Exponential` and `Gamma`'
  id: totrans-972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`指数` 和 `Gamma`'
- en: '`Exponential` and `Gumbel`'
  id: totrans-973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`指数` 和 `Gumbel`'
- en: '`Exponential` and `Normal`'
  id: totrans-974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`指数` 和 `正态`'
- en: '`Exponential` and `Pareto`'
  id: totrans-975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`指数` 和 `帕累托`'
- en: '`Exponential` and `Uniform`'
  id: totrans-976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`指数` 和 `均匀`'
- en: '`ExponentialFamily` and `ExponentialFamily`'
  id: totrans-977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`指数族` 和 `指数族`'
- en: '`Gamma` and `Beta`'
  id: totrans-978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gamma` 和 `贝塔`'
- en: '`Gamma` and `ContinuousBernoulli`'
  id: totrans-979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gamma` 和 `连续伯努利`'
- en: '`Gamma` and `Exponential`'
  id: totrans-980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gamma` 和 `指数`'
- en: '`Gamma` and `Gamma`'
  id: totrans-981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gamma` 和 `Gamma`'
- en: '`Gamma` and `Gumbel`'
  id: totrans-982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gamma` 和 `Gumbel`'
- en: '`Gamma` and `Normal`'
  id: totrans-983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gamma` 和 `正态`'
- en: '`Gamma` and `Pareto`'
  id: totrans-984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gamma` 和 `帕累托`'
- en: '`Gamma` and `Uniform`'
  id: totrans-985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gamma` 和 `均匀`'
- en: '`Geometric` and `Geometric`'
  id: totrans-986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`几何` 和 `几何`'
- en: '`Gumbel` and `Beta`'
  id: totrans-987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gumbel` 和 `贝塔`'
- en: '`Gumbel` and `ContinuousBernoulli`'
  id: totrans-988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gumbel` 和 `连续伯努利`'
- en: '`Gumbel` and `Exponential`'
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gumbel` 和 `指数`'
- en: '`Gumbel` and `Gamma`'
  id: totrans-990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gumbel` 和 `Gamma`'
- en: '`Gumbel` and `Gumbel`'
  id: totrans-991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gumbel` 和 `Gumbel`'
- en: '`Gumbel` and `Normal`'
  id: totrans-992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gumbel` 和 `正态`'
- en: '`Gumbel` and `Pareto`'
  id: totrans-993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gumbel` 和 `帕累托`'
- en: '`Gumbel` and `Uniform`'
  id: totrans-994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gumbel` 和 `均匀`'
- en: '`HalfNormal` and `HalfNormal`'
  id: totrans-995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`半正态` 和 `半正态`'
- en: '`Independent` and `Independent`'
  id: totrans-996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`独立` 和 `独立`'
- en: '`Laplace` and `Beta`'
  id: totrans-997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`拉普拉斯` 和 `贝塔`'
- en: '`Laplace` and `ContinuousBernoulli`'
  id: totrans-998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`拉普拉斯` 和 `连续伯努利`'
- en: '`Laplace` and `Exponential`'
  id: totrans-999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`拉普拉斯` 和 `指数`'
- en: '`Laplace` and `Gamma`'
  id: totrans-1000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`拉普拉斯` 和 `Gamma`'
- en: '`Laplace` and `Laplace`'
  id: totrans-1001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`拉普拉斯` 和 `拉普拉斯`'
- en: '`Laplace` and `Normal`'
  id: totrans-1002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`拉普拉斯` 和 `正态`'
- en: '`Laplace` and `Pareto`'
  id: totrans-1003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`拉普拉斯` 和 `帕累托`'
- en: '`Laplace` and `Uniform`'
  id: totrans-1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`拉普拉斯` 和 `均匀`'
- en: '`LowRankMultivariateNormal` and `LowRankMultivariateNormal`'
  id: totrans-1005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`低秩多元正态` 和 `低秩多元正态`'
- en: '`LowRankMultivariateNormal` and `MultivariateNormal`'
  id: totrans-1006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`低秩多元正态` 和 `多元正态`'
- en: '`MultivariateNormal` and `LowRankMultivariateNormal`'
  id: totrans-1007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`多元正态` 和 `低秩多元正态`'
- en: '`MultivariateNormal` and `MultivariateNormal`'
  id: totrans-1008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`多元正态` 和 `多元正态`'
- en: '`Normal` and `Beta`'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`正态` 和 `贝塔`'
- en: '`Normal` and `ContinuousBernoulli`'
  id: totrans-1010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`正态` 和 `连续伯努利`'
- en: '`Normal` and `Exponential`'
  id: totrans-1011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`正态` 和 `指数`'
- en: '`Normal` and `Gamma`'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Normal` 和 `Gamma`'
- en: '`Normal` and `Gumbel`'
  id: totrans-1013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`正态` 和 `Gumbel`'
- en: '`Normal` and `Laplace`'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`正态` 和 `拉普拉斯`'
- en: '`Normal` and `Normal`'
  id: totrans-1015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`正态` 和 `正态`'
- en: '`Normal` and `Pareto`'
  id: totrans-1016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`正态` 和 `帕累托`'
- en: '`Normal` and `Uniform`'
  id: totrans-1017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`正态` 和 `均匀`'
- en: '`OneHotCategorical` and `OneHotCategorical`'
  id: totrans-1018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OneHotCategorical` 和 `OneHotCategorical`'
- en: '`Pareto` and `Beta`'
  id: totrans-1019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`帕累托` 和 `贝塔`'
- en: '`Pareto` and `ContinuousBernoulli`'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`帕累托` 和 `连续伯努利`'
- en: '`Pareto` and `Exponential`'
  id: totrans-1021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`帕累托` 和 `指数`'
- en: '`Pareto` and `Gamma`'
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`帕累托` 和 `Gamma`'
- en: '`Pareto` and `Normal`'
  id: totrans-1023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`帕累托` 和 `正态`'
- en: '`Pareto` and `Pareto`'
  id: totrans-1024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`帕累托` 和 `帕累托`'
- en: '`Pareto` and `Uniform`'
  id: totrans-1025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`帕累托` 和 `均匀`'
- en: '`Poisson` and `Bernoulli`'
  id: totrans-1026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`泊松` 和 `伯努利`'
- en: '`Poisson` and `Binomial`'
  id: totrans-1027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`泊松` 和 `二项式`'
- en: '`Poisson` and `Poisson`'
  id: totrans-1028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`泊松` 和 `泊松`'
- en: '`TransformedDistribution` and `TransformedDistribution`'
  id: totrans-1029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`变换分布` 和 `变换分布`'
- en: '`Uniform` and `Beta`'
  id: totrans-1030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`均匀` 和 `贝塔`'
- en: '`Uniform` and `ContinuousBernoulli`'
  id: totrans-1031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`均匀` 和 `连续伯努利`'
- en: '`Uniform` and `Exponential`'
  id: totrans-1032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`均匀` 和 `指数`'
- en: '`Uniform` and `Gamma`'
  id: totrans-1033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`均匀` 和 `Gamma`'
- en: '`Uniform` and `Gumbel`'
  id: totrans-1034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`均匀` 和 `Gumbel`'
- en: '`Uniform` and `Normal`'
  id: totrans-1035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`均匀` 和 `正态`'
- en: '`Uniform` and `Pareto`'
  id: totrans-1036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`均匀` 和 `帕累托`'
- en: '`Uniform` and `Uniform`'
  id: totrans-1037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`均匀` 和 `均匀`'
- en: '[PRE526]'
  id: totrans-1038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: 'Decorator to register a pairwise function with [`kl_divergence()`](#torch.distributions.kl.kl_divergence
    "torch.distributions.kl.kl_divergence"). Usage:'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器用于使用[`kl_divergence()`](#torch.distributions.kl.kl_divergence "torch.distributions.kl.kl_divergence")注册成对函数。用法：
- en: '[PRE527]'
  id: totrans-1040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: 'Lookup returns the most specific (type,type) match ordered by subclass. If
    the match is ambiguous, a RuntimeWarning is raised. For example to resolve the
    ambiguous situation:'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 查找返回按子类排序的最具体的（类型，类型）匹配。如果匹配不明确，则会引发 RuntimeWarning。例如，要解决模糊的情况：
- en: '[PRE528]'
  id: totrans-1042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: 'you should register a third most-specific implementation, e.g.:'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注册第三个最具体的实现，例如：
- en: '[PRE529]'
  id: totrans-1044
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: Parameters
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**type_p** ([*type*](https://docs.python.org/3/library/functions.html#type
    "(in Python v3.12)")) – A subclass of `Distribution`.'
  id: totrans-1046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**type_p**（[*type*](https://docs.python.org/3/library/functions.html#type "(in
    Python v3.12)")） - `Distribution` 的子类。'
- en: '**type_q** ([*type*](https://docs.python.org/3/library/functions.html#type
    "(in Python v3.12)")) – A subclass of `Distribution`.  ## Transforms[](#module-torch.distributions.transforms
    "Permalink to this heading")'
  id: totrans-1047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**type_q**（[*type*](https://docs.python.org/3/library/functions.html#type "(in
    Python v3.12)")） - `Distribution` 的子类。## 转换[](#module-torch.distributions.transforms
    "Permalink to this heading")'
- en: '[PRE530]'
  id: totrans-1048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: Transform via the mapping $y = |x|$y=∣x∣.
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 通过映射 $y = |x|$ 进行变换。
- en: '[PRE531]'
  id: totrans-1050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: Transform via the pointwise affine mapping $y = \text{loc} + \text{scale} \times
    x$y=loc+scale×x.
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 通过逐点仿射映射变换 $y = \text{loc} + \text{scale} \times x$。
- en: Parameters
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**loc** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor") *or* [*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")) – Location parameter.'
  id: totrans-1053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loc**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor") *或* [*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")） - 位置参数。'
- en: '**scale** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor") *or* [*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")) – Scale parameter.'
  id: totrans-1054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scale**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor") *或* [*float*](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12中)")） - 缩放参数。'
- en: '**event_dim** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – Optional size of event_shape. This should be zero for
    univariate random variables, 1 for distributions over vectors, 2 for distributions
    over matrices, etc.'
  id: totrans-1055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**event_dim**（[*int*](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12中)")） - 事件形状的可选大小。对于一元随机变量，应为零；对于向量分布，应为1；对于矩阵分布，应为2，依此类推。'
- en: '[PRE532]'
  id: totrans-1056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: Transform functor that applies a sequence of transforms tseq component-wise
    to each submatrix at dim, of length lengths[dim], in a way compatible with [`torch.cat()`](generated/torch.cat.html#torch.cat
    "torch.cat").
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: 应用一系列变换tseq，逐个组件地将每个子矩阵在维度dim处的长度为lengths[dim]的变换，以与[`torch.cat()`](generated/torch.cat.html#torch.cat
    "torch.cat")兼容的方式。
- en: 'Example:'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE533]'
  id: totrans-1059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: '[PRE534]'
  id: totrans-1060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: Composes multiple transforms in a chain. The transforms being composed are responsible
    for caching.
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 在链中组合多个变换。被组合的变换负责缓存。
- en: Parameters
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**parts** (list of [`Transform`](#torch.distributions.transforms.Transform
    "torch.distributions.transforms.Transform")) – A list of transforms to compose.'
  id: totrans-1063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**parts**（[`Transform`](#torch.distributions.transforms.Transform "torch.distributions.transforms.Transform")列表）
    - 要组合的变换列表。'
- en: '**cache_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – Size of cache. If zero, no caching is done. If one, the
    latest single value is cached. Only 0 and 1 are supported.'
  id: totrans-1064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cache_size**（[*int*](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12中)")） - 缓存大小。如果为零，则不进行缓存。如果为一，则缓存最新的单个值。仅支持0和1。'
- en: '[PRE535]'
  id: totrans-1065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: 'Transforms an uncontrained real vector $x$x with length $D*(D-1)/2$D∗(D−1)/2
    into the Cholesky factor of a D-dimension correlation matrix. This Cholesky factor
    is a lower triangular matrix with positive diagonals and unit Euclidean norm for
    each row. The transform is processed as follows:'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 将长度为$D*(D-1)/2$的无约束实向量$x$转换为D维相关矩阵的Cholesky因子。这个Cholesky因子是一个下三角矩阵，对角线为正，每行的欧几里得范数为单位。变换如下进行：
- en: First we convert x into a lower triangular matrix in row order.
  id: totrans-1067
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们按行将x转换为下三角矩阵。
- en: ''
  id: totrans-1068
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1069
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For each row $X_i$Xi​ of the lower triangular part, we apply a *signed* version
    of class [`StickBreakingTransform`](#torch.distributions.transforms.StickBreakingTransform
    "torch.distributions.transforms.StickBreakingTransform") to transform $X_i$Xi​
    into a unit Euclidean length vector using the following steps: - Scales into the
    interval $(-1, 1)$(−1,1) domain: $r_i = \tanh(X_i)$ri​=tanh(Xi​). - Transforms
    into an unsigned domain: $z_i = r_i^2$zi​=ri2​. - Applies $s_i = StickBreakingTransform(z_i)$si​=StickBreakingTransform(zi​).
    - Transforms back into signed domain: $y_i = sign(r_i) * \sqrt{s_i}$yi​=sign(ri​)∗si​​.'
  id: totrans-1070
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于下三角部分的每一行$X_i$，我们应用类[`StickBreakingTransform`](#torch.distributions.transforms.StickBreakingTransform
    "torch.distributions.transforms.StickBreakingTransform")的*有符号*版本，将$X_i$转换为单位欧几里得长度向量，步骤如下：
    - 缩放到区间$(-1, 1)$：$r_i = \tanh(X_i)$。 - 转换为无符号域：$z_i = r_i^2$。 - 应用$si = StickBreakingTransform(z_i)$。
    - 转换回有符号域：$y_i = sign(r_i) * \sqrt{s_i}$。
- en: '[PRE536]'
  id: totrans-1071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: Transform via the cumulative distribution function of a probability distribution.
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 通过概率分布的累积分布函数进行变换。
- en: Parameters
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**distribution** ([*Distribution*](#torch.distributions.distribution.Distribution
    "torch.distributions.distribution.Distribution")) – Distribution whose cumulative
    distribution function to use for the transformation.'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: '**distribution**（[*Distribution*](#torch.distributions.distribution.Distribution
    "torch.distributions.distribution.Distribution")） - 要用于变换的累积分布函数的分布。'
- en: 'Example:'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE537]'
  id: totrans-1076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '[PRE538]'
  id: totrans-1077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: Transform via the mapping $y = \exp(x)$y=exp(x).
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 通过映射$y = \exp(x)$进行变换。
- en: '[PRE539]'
  id: totrans-1079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: Wrapper around another transform to treat `reinterpreted_batch_ndims`-many extra
    of the right most dimensions as dependent. This has no effect on the forward or
    backward transforms, but does sum out `reinterpreted_batch_ndims`-many of the
    rightmost dimensions in `log_abs_det_jacobian()`.
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 封装另一个变换，以将“reinterpreted_batch_ndims”-许多右侧维度视为相关。这对前向或后向变换没有影响，但在“log_abs_det_jacobian()”中会对右侧维度进行“reinterpreted_batch_ndims”求和。
- en: Parameters
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**base_transform** ([`Transform`](#torch.distributions.transforms.Transform
    "torch.distributions.transforms.Transform")) – A base transform.'
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**base_transform**（[`Transform`](#torch.distributions.transforms.Transform
    "torch.distributions.transforms.Transform")） - 基本变换。'
- en: '**reinterpreted_batch_ndims** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – The number of extra rightmost dimensions to treat as dependent.'
  id: totrans-1083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**reinterpreted_batch_ndims**（[*int*](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12中)")） - 要视为相关的额外右侧维度的数量。'
- en: '[PRE540]'
  id: totrans-1084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: Transform from unconstrained matrices to lower-triangular matrices with nonnegative
    diagonal entries.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 从无约束矩阵转换为具有非负对角元的下三角矩阵。
- en: This is useful for parameterizing positive definite matrices in terms of their
    Cholesky factorization.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于用Cholesky分解参数化正定矩阵非常有用。
- en: '[PRE541]'
  id: totrans-1087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: Transform from unconstrained matrices to positive-definite matrices.
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 从无约束矩阵转换为正定矩阵。
- en: '[PRE542]'
  id: totrans-1089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: Transform via the mapping $y = x^{\text{exponent}}$y=xexponent.
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 通过映射$y = x^{\text{exponent}}$进行变换。
- en: '[PRE543]'
  id: totrans-1091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: Unit Jacobian transform to reshape the rightmost part of a tensor.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 单位雅可比变换，用于重塑张量的最右侧部分。
- en: Note that `in_shape` and `out_shape` must have the same number of elements,
    just as for [`torch.Tensor.reshape()`](generated/torch.Tensor.reshape.html#torch.Tensor.reshape
    "torch.Tensor.reshape").
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`in_shape`和`out_shape`必须具有相同数量的元素，就像[`torch.Tensor.reshape()`](generated/torch.Tensor.reshape.html#torch.Tensor.reshape
    "torch.Tensor.reshape")一样。
- en: Parameters
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**in_shape** (*torch.Size*) – The input event shape.'
  id: totrans-1095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**in_shape**（*torch.Size*） - 输入事件形状。'
- en: '**out_shape** (*torch.Size*) – The output event shape.'
  id: totrans-1096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**out_shape**（*torch.Size*） - 输出事件形状。'
- en: '[PRE544]'
  id: totrans-1097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: Transform via the mapping $y = \frac{1}{1 + \exp(-x)}$y=1+exp(−x)1​ and $x =
    \text{logit}(y)$x=logit(y).
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 通过映射$y = \frac{1}{1 + \exp(-x)}$和$x = \text{logit}(y)$进行变换。
- en: '[PRE545]'
  id: totrans-1099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: Transform via the mapping $\text{Softplus}(x) = \log(1 + \exp(x))$Softplus(x)=log(1+exp(x)).
    The implementation reverts to the linear function when $x > 20$x>20.
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过映射$\text{Softplus}(x) = \log(1 + \exp(x))$Softplus(x)=log(1+exp(x))进行变换。当$x
    > 20$时，实现会恢复为线性函数。
- en: '[PRE546]'
  id: totrans-1101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: Transform via the mapping $y = \tanh(x)$y=tanh(x).
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过映射$y = \tanh(x)$y=tanh(x)进行变换。
- en: It is equivalent to `` ComposeTransform([AffineTransform(0., 2.), SigmoidTransform(),
    AffineTransform(-1., 2.)]) `` However this might not be numerically stable, thus
    it is recommended to use TanhTransform instead.
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 它等同于`` ComposeTransform([AffineTransform(0., 2.), SigmoidTransform(), AffineTransform(-1.,
    2.)]) `` 但这可能不是数值稳定的，因此建议改用TanhTransform。
- en: Note that one should use cache_size=1 when it comes to NaN/Inf values.
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当涉及NaN/Inf值时，应使用cache_size=1。
- en: '[PRE547]'
  id: totrans-1105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: Transform from unconstrained space to the simplex via $y = \exp(x)$y=exp(x)
    then normalizing.
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 从非约束空间到单纯形的变换，通过$y = \exp(x)$y=exp(x)然后归一化。
- en: This is not bijective and cannot be used for HMC. However this acts mostly coordinate-wise
    (except for the final normalization), and thus is appropriate for coordinate-wise
    optimization algorithms.
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是双射的，不能用于HMC。但是这主要是按坐标进行的（除了最终的归一化），因此适用于按坐标优化算法。
- en: '[PRE548]'
  id: totrans-1108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: Transform functor that applies a sequence of transforms tseq component-wise
    to each submatrix at dim in a way compatible with [`torch.stack()`](generated/torch.stack.html#torch.stack
    "torch.stack").
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 将变换序列tseq逐个组件地应用于维度dim中的每个子矩阵的变换函数，以与[`torch.stack()`](generated/torch.stack.html#torch.stack
    "torch.stack")兼容的方式。
- en: 'Example:'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE549]'
  id: totrans-1111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: '[PRE550]'
  id: totrans-1112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: Transform from unconstrained space to the simplex of one additional dimension
    via a stick-breaking process.
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个破棍过程，将非约束空间转换为一个额外维度的单纯形。
- en: 'This transform arises as an iterated sigmoid transform in a stick-breaking
    construction of the Dirichlet distribution: the first logit is transformed via
    sigmoid to the first probability and the probability of everything else, and then
    the process recurses.'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 这种变换是Dirichlet分布的一个迭代sigmoid变换的结果：第一个logit通过sigmoid变换为第一个概率和其他所有概率，然后过程递归进行。
- en: This is bijective and appropriate for use in HMC; however it mixes coordinates
    together and is less appropriate for optimization.
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是双射的，适用于在HMC中使用；但是它将坐标混合在一起，不太适合优化。
- en: '[PRE551]'
  id: totrans-1116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: Abstract class for invertable transformations with computable log det jacobians.
    They are primarily used in `torch.distributions.TransformedDistribution`.
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 可计算对数行列式雅可比的可逆变换的抽象类。它们主要用于`torch.distributions.TransformedDistribution`中。
- en: 'Caching is useful for transforms whose inverses are either expensive or numerically
    unstable. Note that care must be taken with memoized values since the autograd
    graph may be reversed. For example while the following works with or without caching:'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存对于其逆变换要么昂贵要么数值不稳定的变换很有用。请注意，必须小心处理记忆值，因为自动求导图可能会被反转。例如，以下内容无论是否缓存都可以工作：
- en: '[PRE552]'
  id: totrans-1119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: 'However the following will error when caching due to dependency reversal:'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于依赖关系的反转，以下内容在缓存时会出错：
- en: '[PRE553]'
  id: totrans-1121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: Derived classes should implement one or both of `_call()` or `_inverse()`. Derived
    classes that set bijective=True should also implement [`log_abs_det_jacobian()`](#torch.distributions.transforms.Transform.log_abs_det_jacobian
    "torch.distributions.transforms.Transform.log_abs_det_jacobian").
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 派生类应该实现`_call()`或`_inverse()`中的一个或两个。将bijective=True的派生类还应该实现[`log_abs_det_jacobian()`](#torch.distributions.transforms.Transform.log_abs_det_jacobian
    "torch.distributions.transforms.Transform.log_abs_det_jacobian")。
- en: Parameters
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**cache_size** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – Size of cache. If zero, no caching is done. If one, the
    latest single value is cached. Only 0 and 1 are supported.'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: '**cache_size**（[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")） - 缓存的大小。如果为零，则不进行缓存。如果为一，则缓存最新的单个值。仅支持0和1。'
- en: Variables
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: '**domain** ([`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint"))
    – The constraint representing valid inputs to this transform.'
  id: totrans-1126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义域**（[`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint")）
    - 表示此变换的有效输入的约束。'
- en: '**codomain** ([`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint"))
    – The constraint representing valid outputs to this transform which are inputs
    to the inverse transform.'
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值域**（[`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint")）
    - 表示此变换的有效输出的约束，这些输出是逆变换的输入。'
- en: '**bijective** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – Whether this transform is bijective. A transform `t` is
    bijective iff `t.inv(t(x)) == x` and `t(t.inv(y)) == y` for every `x` in the domain
    and `y` in the codomain. Transforms that are not bijective should at least maintain
    the weaker pseudoinverse properties `t(t.inv(t(x)) == t(x)` and `t.inv(t(t.inv(y)))
    == t.inv(y)`.'
  id: totrans-1128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**双射**（[*bool*](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.12)")） - 此变换是否是双射。如果变换`t`是双射，则对于每个域中的`x`和值域中的`y`，`t.inv(t(x)) == x`和`t(t.inv(y))
    == y`。不是双射的变换应至少保持较弱的伪逆性质`t(t.inv(t(x)) == t(x)`和`t.inv(t(t.inv(y))) == t.inv(y)`。'
- en: '**sign** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)") *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – For
    bijective univariate transforms, this should be +1 or -1 depending on whether
    transform is monotone increasing or decreasing.'
  id: totrans-1129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**符号**（[*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.12)") *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 对于双射单变量变换，这应该是+1或-1，取决于变换是单调递增还是递减。'
- en: '[PRE554]'
  id: totrans-1130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: Returns the inverse [`Transform`](#torch.distributions.transforms.Transform
    "torch.distributions.transforms.Transform") of this transform. This should satisfy
    `t.inv.inv is t`.
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此变换的逆[`Transform`](#torch.distributions.transforms.Transform "torch.distributions.transforms.Transform")。这应该满足`t.inv.inv
    is t`。
- en: '[PRE555]'
  id: totrans-1132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: Returns the sign of the determinant of the Jacobian, if applicable. In general
    this only makes sense for bijective transforms.
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 返回雅可比行列式的符号，如果适用的话。一般来说，这只对双射变换有意义。
- en: '[PRE556]'
  id: totrans-1134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: Computes the log det jacobian log |dy/dx| given input and output.
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 计算给定输入和输出的对数行列式雅可比行列式log |dy/dx|。
- en: '[PRE557]'
  id: totrans-1136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: Infers the shape of the forward computation, given the input shape. Defaults
    to preserving shape.
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 推断前向计算的形状，给定输入形状。默认保留形状。
- en: '[PRE558]'
  id: totrans-1138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: 'Infers the shapes of the inverse computation, given the output shape. Defaults
    to preserving shape.  ## Constraints[](#module-torch.distributions.constraints
    "Permalink to this heading")'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: '推断逆计算的形状，给定输出形状。默认保留形状。  ## 约束[](#module-torch.distributions.constraints "Permalink
    to this heading")'
- en: 'The following constraints are implemented:'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下约束已实现：
- en: '`constraints.boolean`'
  id: totrans-1141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.boolean`'
- en: '`constraints.cat`'
  id: totrans-1142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.cat`'
- en: '`constraints.corr_cholesky`'
  id: totrans-1143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.corr_cholesky`'
- en: '`constraints.dependent`'
  id: totrans-1144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.dependent`'
- en: '`constraints.greater_than(lower_bound)`'
  id: totrans-1145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.greater_than(lower_bound)`'
- en: '`constraints.greater_than_eq(lower_bound)`'
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.greater_than_eq(lower_bound)`'
- en: '`constraints.independent(constraint, reinterpreted_batch_ndims)`'
  id: totrans-1147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.independent(constraint, reinterpreted_batch_ndims)`'
- en: '`constraints.integer_interval(lower_bound, upper_bound)`'
  id: totrans-1148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.integer_interval(lower_bound, upper_bound)`'
- en: '`constraints.interval(lower_bound, upper_bound)`'
  id: totrans-1149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.interval(lower_bound, upper_bound)`'
- en: '`constraints.less_than(upper_bound)`'
  id: totrans-1150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.less_than(upper_bound)`'
- en: '`constraints.lower_cholesky`'
  id: totrans-1151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.lower_cholesky`'
- en: '`constraints.lower_triangular`'
  id: totrans-1152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.lower_triangular`'
- en: '`constraints.multinomial`'
  id: totrans-1153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.multinomial`'
- en: '`constraints.nonnegative`'
  id: totrans-1154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.nonnegative`'
- en: '`constraints.nonnegative_integer`'
  id: totrans-1155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.nonnegative_integer`'
- en: '`constraints.one_hot`'
  id: totrans-1156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.one_hot`'
- en: '`constraints.positive_integer`'
  id: totrans-1157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.positive_integer`'
- en: '`constraints.positive`'
  id: totrans-1158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.positive`'
- en: '`constraints.positive_semidefinite`'
  id: totrans-1159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.positive_semidefinite`'
- en: '`constraints.positive_definite`'
  id: totrans-1160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.positive_definite`'
- en: '`constraints.real_vector`'
  id: totrans-1161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.real_vector`'
- en: '`constraints.real`'
  id: totrans-1162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.real`'
- en: '`constraints.simplex`'
  id: totrans-1163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.simplex`'
- en: '`constraints.symmetric`'
  id: totrans-1164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.symmetric`'
- en: '`constraints.stack`'
  id: totrans-1165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.stack`'
- en: '`constraints.square`'
  id: totrans-1166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.square`'
- en: '`constraints.symmetric`'
  id: totrans-1167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.symmetric`'
- en: '`constraints.unit_interval`'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraints.unit_interval`'
- en: '[PRE559]'
  id: totrans-1169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: Abstract base class for constraints.
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 约束的抽象基类。
- en: A constraint object represents a region over which a variable is valid, e.g.
    within which a variable can be optimized.
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 约束对象表示变量有效的区域，例如变量可以在其中进行优化的区域。
- en: Variables
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: '**is_discrete** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – Whether constrained space is discrete. Defaults to False.'
  id: totrans-1173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**is_discrete** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – 约束空间是否是离散的。默认为False。'
- en: '**event_dim** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – Number of rightmost dimensions that together define an
    event. The [`check()`](#torch.distributions.constraints.Constraint.check "torch.distributions.constraints.Constraint.check")
    method will remove this many dimensions when computing validity.'
  id: totrans-1174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**event_dim** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – 定义事件的最右边维度的数量。[`check()`](#torch.distributions.constraints.Constraint.check
    "torch.distributions.constraints.Constraint.check")方法在计算有效性时将删除这么多维度。'
- en: '[PRE560]'
  id: totrans-1175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: Returns a byte tensor of `sample_shape + batch_shape` indicating whether each
    event in value satisfies this constraint.
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个`sample_shape + batch_shape`的字节张量，指示值中的每个事件是否满足此约束。
- en: '[PRE561]'
  id: totrans-1177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: alias of `_Cat`
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为`_Cat`
- en: '[PRE562]'
  id: totrans-1179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: alias of `_DependentProperty`
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为`_DependentProperty`
- en: '[PRE563]'
  id: totrans-1181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: alias of `_GreaterThan`
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为`_GreaterThan`
- en: '[PRE564]'
  id: totrans-1183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: alias of `_GreaterThanEq`
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为`_GreaterThanEq`
- en: '[PRE565]'
  id: totrans-1185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: alias of `_IndependentConstraint`
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为`_IndependentConstraint`
- en: '[PRE566]'
  id: totrans-1187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: alias of `_IntegerInterval`
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为`_IntegerInterval`
- en: '[PRE567]'
  id: totrans-1189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: alias of `_Interval`
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为`_Interval`
- en: '[PRE568]'
  id: totrans-1191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: alias of `_HalfOpenInterval`
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为`_HalfOpenInterval`
- en: '[PRE569]'
  id: totrans-1193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: alias of `_LessThan`
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为`_LessThan`
- en: '[PRE570]'
  id: totrans-1195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: alias of `_Multinomial`
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为`_Multinomial`
- en: '[PRE571]'
  id: totrans-1197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: 'alias of `_Stack`  ## Constraint Registry[](#module-torch.distributions.constraint_registry
    "Permalink to this heading")'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: '别名为`_Stack`  ## 约束注册[](#module-torch.distributions.constraint_registry "Permalink
    to this heading")'
- en: PyTorch provides two global [`ConstraintRegistry`](#torch.distributions.constraint_registry.ConstraintRegistry
    "torch.distributions.constraint_registry.ConstraintRegistry") objects that link
    [`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint")
    objects to [`Transform`](#torch.distributions.transforms.Transform "torch.distributions.transforms.Transform")
    objects. These objects both input constraints and return transforms, but they
    have different guarantees on bijectivity.
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch提供了两个全局[`ConstraintRegistry`](#torch.distributions.constraint_registry.ConstraintRegistry
    "torch.distributions.constraint_registry.ConstraintRegistry")对象，将[`Constraint`](#torch.distributions.constraints.Constraint
    "torch.distributions.constraints.Constraint")对象链接到[`Transform`](#torch.distributions.transforms.Transform
    "torch.distributions.transforms.Transform")对象。这些对象都输入约束并返回变换，但它们对双射性有不同的保证。
- en: '`biject_to(constraint)` looks up a bijective [`Transform`](#torch.distributions.transforms.Transform
    "torch.distributions.transforms.Transform") from `constraints.real` to the given
    `constraint`. The returned transform is guaranteed to have `.bijective = True`
    and should implement `.log_abs_det_jacobian()`.'
  id: totrans-1200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`biject_to(constraint)` 从`constraints.real`查找一个双射的[`Transform`](#torch.distributions.transforms.Transform
    "torch.distributions.transforms.Transform")到给定的`constraint`。返回的变换保证具有`.bijective
    = True`，并应实现`.log_abs_det_jacobian()`。'
- en: '`transform_to(constraint)` looks up a not-necessarily bijective [`Transform`](#torch.distributions.transforms.Transform
    "torch.distributions.transforms.Transform") from `constraints.real` to the given
    `constraint`. The returned transform is not guaranteed to implement `.log_abs_det_jacobian()`.'
  id: totrans-1201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`transform_to(constraint)` 从`constraints.real`查找一个不一定双射的[`Transform`](#torch.distributions.transforms.Transform
    "torch.distributions.transforms.Transform")到给定的`constraint`。返回的变换不保证实现`.log_abs_det_jacobian()`。'
- en: 'The `transform_to()` registry is useful for performing unconstrained optimization
    on constrained parameters of probability distributions, which are indicated by
    each distribution’s `.arg_constraints` dict. These transforms often overparameterize
    a space in order to avoid rotation; they are thus more suitable for coordinate-wise
    optimization algorithms like Adam:'
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform_to()`注册表对于在概率分布的约束参数上执行无约束优化非常有用，每个分布的`.arg_constraints`字典指示。这些变换通常过度参数化空间以避免旋转；因此，它们更适合于像Adam这样的逐坐标优化算法：'
- en: '[PRE572]'
  id: totrans-1203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: 'The `biject_to()` registry is useful for Hamiltonian Monte Carlo, where samples
    from a probability distribution with constrained `.support` are propagated in
    an unconstrained space, and algorithms are typically rotation invariant.:'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: '`biject_to()`注册表对于Hamiltonian Monte Carlo很有用，其中来自具有约束`.support`的概率分布的样本在无约束空间中传播，并且算法通常是旋转不变的。'
- en: '[PRE573]'
  id: totrans-1205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: Note
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'An example where `transform_to` and `biject_to` differ is `constraints.simplex`:
    `transform_to(constraints.simplex)` returns a [`SoftmaxTransform`](#torch.distributions.transforms.SoftmaxTransform
    "torch.distributions.transforms.SoftmaxTransform") that simply exponentiates and
    normalizes its inputs; this is a cheap and mostly coordinate-wise operation appropriate
    for algorithms like SVI. In contrast, `biject_to(constraints.simplex)` returns
    a [`StickBreakingTransform`](#torch.distributions.transforms.StickBreakingTransform
    "torch.distributions.transforms.StickBreakingTransform") that bijects its input
    down to a one-fewer-dimensional space; this a more expensive less numerically
    stable transform but is needed for algorithms like HMC.'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform_to`和`biject_to`不同的一个例子是`constraints.simplex`：`transform_to(constraints.simplex)`返回一个[`SoftmaxTransform`](#torch.distributions.transforms.SoftmaxTransform
    "torch.distributions.transforms.SoftmaxTransform")，它简单地对其输入进行指数化和归一化；这是一种适用于像SVI这样的算法的廉价且大多数是坐标轴操作。相比之下，`biject_to(constraints.simplex)`返回一个[`StickBreakingTransform`](#torch.distributions.transforms.StickBreakingTransform
    "torch.distributions.transforms.StickBreakingTransform")，它将其输入映射到一个维度少一的空间；这是一种更昂贵且数值稳定性较差的变换，但对于像HMC这样的算法是必需的。'
- en: 'The `biject_to` and `transform_to` objects can be extended by user-defined
    constraints and transforms using their `.register()` method either as a function
    on singleton constraints:'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: '`biject_to`和`transform_to`对象可以通过它们的`.register()`方法扩展用户定义的约束和变换，可以作为单例约束的函数：'
- en: '[PRE574]'
  id: totrans-1209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: 'or as a decorator on parameterized constraints:'
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 或作为参数化约束的装饰器：
- en: '[PRE575]'
  id: totrans-1211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: You can create your own registry by creating a new [`ConstraintRegistry`](#torch.distributions.constraint_registry.ConstraintRegistry
    "torch.distributions.constraint_registry.ConstraintRegistry") object.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过创建一个新的[`ConstraintRegistry`](#torch.distributions.constraint_registry.ConstraintRegistry
    "torch.distributions.constraint_registry.ConstraintRegistry")对象来创建自己的注册表。
- en: '[PRE576]'
  id: totrans-1213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: Registry to link constraints to transforms.
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 将约束链接到变换的注册表。
- en: '[PRE577]'
  id: totrans-1215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: 'Registers a [`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint")
    subclass in this registry. Usage:'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 在此注册表中注册一个[`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint")子类。用法：
- en: '[PRE578]'
  id: totrans-1217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: Parameters
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**constraint** (subclass of [`Constraint`](#torch.distributions.constraints.Constraint
    "torch.distributions.constraints.Constraint")) – A subclass of [`Constraint`](#torch.distributions.constraints.Constraint
    "torch.distributions.constraints.Constraint"), or a singleton object of the desired
    class.'
  id: totrans-1219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**constraint**（[`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint")的子类）
    - [`Constraint`](#torch.distributions.constraints.Constraint "torch.distributions.constraints.Constraint")的子类，或所需类的单例对象。'
- en: '**factory** (*Callable*) – A callable that inputs a constraint object and returns
    a [`Transform`](#torch.distributions.transforms.Transform "torch.distributions.transforms.Transform")
    object.'
  id: totrans-1220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**factory**（*Callable*） - 一个可调用对象，输入一个约束对象并返回一个[`Transform`](#torch.distributions.transforms.Transform
    "torch.distributions.transforms.Transform")对象。'
