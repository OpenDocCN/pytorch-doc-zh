["```py\nimport torch\nimport torchaudio\nimport torchaudio.functional as F\nimport torchaudio.transforms as T\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n\nimport librosa\nimport matplotlib.pyplot as plt \n```", "```py\n2.2.0\n2.2.0 \n```", "```py\n!pip install librosa \n```", "```py\nfrom IPython.display import Audio\nfrom matplotlib.patches import Rectangle\nfrom torchaudio.utils import download_asset\n\n[torch.random.manual_seed](https://pytorch.org/docs/stable/generated/torch.manual_seed.html#torch.manual_seed \"torch.manual_seed\")(0)\n\n[SAMPLE_SPEECH](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\")\n\ndef plot_waveform(waveform, sr, title=\"Waveform\", ax=None):\n    waveform = waveform.numpy()\n\n    num_channels, num_frames = waveform.shape\n    time_axis = [torch.arange](https://pytorch.org/docs/stable/generated/torch.arange.html#torch.arange \"torch.arange\")(0, num_frames) / sr\n\n    if ax is None:\n        _, ax = plt.subplots(num_channels, 1)\n    ax.plot(time_axis, waveform[0], linewidth=1)\n    ax.grid(True)\n    ax.set_xlim([0, time_axis[-1]])\n    ax.set_title(title)\n\ndef plot_spectrogram(specgram, title=None, ylabel=\"freq_bin\", ax=None):\n    if ax is None:\n        _, ax = plt.subplots(1, 1)\n    if title is not None:\n        ax.set_title(title)\n    ax.set_ylabel(ylabel)\n    ax.imshow(librosa.power_to_db(specgram), origin=\"lower\", aspect=\"auto\", interpolation=\"nearest\")\n\ndef plot_fbank(fbank, title=None):\n    fig, [axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") = plt.subplots(1, 1)\n    [axs.set_title](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")(title or \"Filter bank\")\n    [axs.imshow](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")(fbank, aspect=\"auto\")\n    [axs.set_ylabel](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")(\"frequency bin\")\n    [axs.set_xlabel](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")(\"mel bin\") \n```", "```py\n# Load audio\n[SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([SAMPLE_SPEECH](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n\n# Define transform\nspectrogram = [T.Spectrogram](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")([n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=512)\n\n# Perform transform\n[spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = spectrogram([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nfig, [axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") = plt.subplots(2, 1)\nplot_waveform([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), title=\"Original waveform\", ax=[axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[0])\nplot_spectrogram([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], title=\"spectrogram\", ax=[axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[1])\nfig.tight_layout() \n```", "```py\nAudio([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy(), rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\n[n_ffts](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = [32, 128, 512, 2048]\n[hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 64\n\n[specs](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = []\nfor [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in [n_ffts](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"):\n    spectrogram = [T.Spectrogram](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")([n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n    [spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = spectrogram([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n    [specs](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\").append([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nfig, [axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") = plt.subplots(len([specs](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")), 1, sharex=True)\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), ([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) in enumerate(zip([specs](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [n_ffts](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"))):\n    plot_spectrogram([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], ylabel=f\"n_fft={[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")}\", ax=[axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[[i](https://docs.python.org/3/library/functions.html#int \"builtins.int\")])\n    [axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[[i](https://docs.python.org/3/library/functions.html#int \"builtins.int\")].set_xlabel(None)\nfig.tight_layout() \n```", "```py\n# Downsample to half of the original sample rate\n[speech2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = torchaudio.functional.resample([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\") // 2)\n# Upsample to the original sample rate\n[speech3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = torchaudio.functional.resample([speech2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\") // 2, [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\n# Apply the same spectrogram\nspectrogram = [T.Spectrogram](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")([n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=512)\n\n[spec0](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = spectrogram([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[spec2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = spectrogram([speech2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[spec3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = spectrogram([speech3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n# Visualize it\nfig, [axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") = plt.subplots(3, 1)\nplot_spectrogram([spec0](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], ylabel=\"Original\", ax=[axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[0])\n[axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[0].add_patch(Rectangle((0, 3), 212, 128, edgecolor=\"r\", facecolor=\"none\"))\nplot_spectrogram([spec2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], ylabel=\"Downsampled\", ax=[axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[1])\nplot_spectrogram([spec3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], ylabel=\"Upsampled\", ax=[axs](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[2])\nfig.tight_layout() \n```", "```py\n# Define transforms\n[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 1024\nspectrogram = [T.Spectrogram](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")([n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\ngriffin_lim = [T.GriffinLim](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")([n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n\n# Apply the transforms\n[spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = spectrogram([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[reconstructed_waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = griffin_lim([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n_, [axes](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") = plt.subplots(2, 1, sharex=True, sharey=True)\nplot_waveform([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), title=\"Original\", ax=[axes](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[0])\nplot_waveform([reconstructed_waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), title=\"Reconstructed\", ax=[axes](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[1])\nAudio([reconstructed_waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\n[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 256\n[n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 64\n[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 6000\n\n[mel_filters](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = F.melscale_fbanks(\n    int([n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\") // 2 + 1),\n    [n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    f_min=0.0,\n    f_max=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") / 2.0,\n    [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    norm=\"slaney\",\n) \n```", "```py\nplot_fbank([mel_filters](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), \"Mel Filter Bank - torchaudio\") \n```", "```py\n[mel_filters_librosa](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") = librosa.filters.mel(\n    sr=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    [n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    fmin=0.0,\n    fmax=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") / 2.0,\n    norm=\"slaney\",\n    htk=True,\n).T \n```", "```py\nplot_fbank([mel_filters_librosa](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\"), \"Mel Filter Bank - librosa\")\n\n[mse](https://docs.python.org/3/library/functions.html#float \"builtins.float\") = [torch.square](https://pytorch.org/docs/stable/generated/torch.square.html#torch.square \"torch.square\")([mel_filters](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") - [mel_filters_librosa](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")).mean().item()\nprint(\"Mean Square Difference: \", [mse](https://docs.python.org/3/library/functions.html#float \"builtins.float\")) \n```", "```py\nMean Square Difference:  3.934872696751886e-17 \n```", "```py\n[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 1024\nwin_length = None\n[hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 512\n[n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 128\n\nmel_spectrogram = [T.MelSpectrogram](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(\n    [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    win_length=win_length,\n    [hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    center=True,\n    pad_mode=\"reflect\",\n    power=2.0,\n    norm=\"slaney\",\n    [n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    mel_scale=\"htk\",\n)\n\n[melspec](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") = mel_spectrogram([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nplot_spectrogram([melspec](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")[0], title=\"MelSpectrogram - torchaudio\", ylabel=\"mel freq\") \n```", "```py\n[melspec_librosa](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") = librosa.feature.melspectrogram(\n    y=[SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()[0],\n    sr=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    [hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    win_length=win_length,\n    center=True,\n    pad_mode=\"reflect\",\n    power=2.0,\n    [n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    norm=\"slaney\",\n    htk=True,\n) \n```", "```py\nplot_spectrogram([melspec_librosa](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\"), title=\"MelSpectrogram - librosa\", ylabel=\"mel freq\")\n\n[mse](https://docs.python.org/3/library/functions.html#float \"builtins.float\") = [torch.square](https://pytorch.org/docs/stable/generated/torch.square.html#torch.square \"torch.square\")([melspec](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") - [melspec_librosa](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")).mean().item()\nprint(\"Mean Square Difference: \", [mse](https://docs.python.org/3/library/functions.html#float \"builtins.float\")) \n```", "```py\nMean Square Difference:  1.2895221557229775e-09 \n```", "```py\n[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 2048\nwin_length = None\n[hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 512\n[n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 256\n[n_mfcc](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 256\n\nmfcc_transform = [T.MFCC](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(\n    [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    [n_mfcc](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_mfcc](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    melkwargs={\n        \"n_fft\": [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n        \"n_mels\": [n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n        \"hop_length\": [hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n        \"mel_scale\": \"htk\",\n    },\n)\n\n[mfcc](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = mfcc_transform([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nplot_spectrogram([mfcc](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], title=\"MFCC\") \n```", "```py\n[melspec](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") = librosa.feature.melspectrogram(\n    y=[SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()[0],\n    sr=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    win_length=win_length,\n    [hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    [n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_mels](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    htk=True,\n    norm=None,\n)\n\n[mfcc_librosa](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\") = librosa.feature.[mfcc](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")(\n    S=librosa.core.spectrum.power_to_db([melspec](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")),\n    [n_mfcc](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_mfcc](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    dct_type=2,\n    norm=\"ortho\",\n) \n```", "```py\nplot_spectrogram([mfcc_librosa](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\"), title=\"MFCC (librosa)\")\n\n[mse](https://docs.python.org/3/library/functions.html#float \"builtins.float\") = [torch.square](https://pytorch.org/docs/stable/generated/torch.square.html#torch.square \"torch.square\")([mfcc](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") - [mfcc_librosa](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray \"numpy.ndarray\")).mean().item()\nprint(\"Mean Square Difference: \", [mse](https://docs.python.org/3/library/functions.html#float \"builtins.float\")) \n```", "```py\nMean Square Difference:  0.8104011416435242 \n```", "```py\n[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 2048\nwin_length = None\n[hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 512\n[n_lfcc](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 256\n\nlfcc_transform = [T.LFCC](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(\n    [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    [n_lfcc](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_lfcc](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    speckwargs={\n        \"n_fft\": [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n        \"win_length\": win_length,\n        \"hop_length\": [hop_length](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    },\n)\n\n[lfcc](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = lfcc_transform([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nplot_spectrogram([lfcc](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], title=\"LFCC\") \n```", "```py\n[pitch](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = F.detect_pitch_frequency([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\ndef plot_pitch(waveform, sr, [pitch](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    figure, axis = plt.subplots(1, 1)\n    axis.set_title(\"Pitch Feature\")\n    axis.grid(True)\n\n    end_time = waveform.shape[1] / sr\n    time_axis = [torch.linspace](https://pytorch.org/docs/stable/generated/torch.linspace.html#torch.linspace \"torch.linspace\")(0, end_time, waveform.shape[1])\n    axis.plot(time_axis, waveform[0], linewidth=1, color=\"gray\", alpha=0.3)\n\n    axis2 = axis.twinx()\n    time_axis = [torch.linspace](https://pytorch.org/docs/stable/generated/torch.linspace.html#torch.linspace \"torch.linspace\")(0, end_time, [pitch](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape[1])\n    axis2.plot(time_axis, [pitch](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], linewidth=2, label=\"Pitch\", color=\"green\")\n\n    axis2.legend(loc=0)\n\nplot_pitch([SPEECH_WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [pitch](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```"]