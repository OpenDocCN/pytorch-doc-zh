["```py\nimport torch\nimport torch.nn as nn\nimport torch.nn.utils.parametrize as parametrize\n\ndef symmetric(X):\n    return X.triu() + X.triu(1).transpose(-1, -2)\n\nX = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 3)\nA = symmetric(X)\nassert [torch.allclose](https://pytorch.org/docs/stable/generated/torch.allclose.html#torch.allclose \"torch.allclose\")(A, A.T)  # A is symmetric\nprint(A)                       # Quick visual check \n```", "```py\nclass LinearSymmetric([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self, n_features):\n        super().__init__()\n        self.weight = nn.Parameter([torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(n_features, n_features))\n\n    def forward(self, x):\n        A = symmetric(self.weight)\n        return x @ A \n```", "```py\nlayer = LinearSymmetric(3)\nout = layer([torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(8, 3)) \n```", "```py\nclass Symmetric([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def forward(self, X):\n        return X.triu() + X.triu(1).transpose(-1, -2) \n```", "```py\nlayer = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(3, 3)\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer, \"weight\", Symmetric()) \n```", "```py\nA = layer.weight\nassert [torch.allclose](https://pytorch.org/docs/stable/generated/torch.allclose.html#torch.allclose \"torch.allclose\")(A, A.T)  # A is symmetric\nprint(A)                       # Quick visual check \n```", "```py\nclass Skew([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def forward(self, X):\n        A = X.triu(1)\n        return A - A.transpose(-1, -2)\n\ncnn = [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(in_channels=5, out_channels=8, kernel_size=3)\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(cnn, \"weight\", Skew())\n# Print a few kernels\nprint(cnn.weight[0, 1])\nprint(cnn.weight[2, 2]) \n```", "```py\nlayer = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(3, 3)\nprint(f\"Unparametrized:\\n{layer}\")\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer, \"weight\", Symmetric())\nprint(f\"\\nParametrized:\\n{layer}\") \n```", "```py\nprint(layer.parametrizations)\nprint(layer.parametrizations.weight) \n```", "```py\nprint(layer.parametrizations.weight[0]) \n```", "```py\nprint(dict(layer.named_parameters())) \n```", "```py\nprint(layer.parametrizations.weight.original) \n```", "```py\nsymmetric = Symmetric()\nweight_orig = layer.parametrizations.weight.original\nprint([torch.dist](https://pytorch.org/docs/stable/generated/torch.dist.html#torch.dist \"torch.dist\")(layer.weight, symmetric(weight_orig))) \n```", "```py\nclass NoisyParametrization([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def forward(self, X):\n        print(\"Computing the Parametrization\")\n        return X\n\nlayer = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(4, 4)\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer, \"weight\", NoisyParametrization())\nprint(\"Here, layer.weight is recomputed every time we call it\")\nfoo = layer.weight + layer.weight.T\nbar = layer.weight.sum()\nwith [parametrize.cached](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.cached.html#torch.nn.utils.parametrize.cached \"torch.nn.utils.parametrize.cached\")():\n    print(\"Here, it is computed just the first time layer.weight is called\")\n    foo = layer.weight + layer.weight.T\n    bar = layer.weight.sum() \n```", "```py\nclass CayleyMap([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self, n):\n        super().__init__()\n        self.register_buffer(\"Id\", [torch.eye](https://pytorch.org/docs/stable/generated/torch.eye.html#torch.eye \"torch.eye\")(n))\n\n    def forward(self, X):\n        # (I + X)(I - X)^{-1}\n        return [torch.linalg.solve](https://pytorch.org/docs/stable/generated/torch.linalg.solve.html#torch.linalg.solve \"torch.linalg.solve\")(self.Id - X, self.Id + X)\n\nlayer = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(3, 3)\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer, \"weight\", Skew())\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer, \"weight\", CayleyMap(3))\nX = layer.weight\nprint([torch.dist](https://pytorch.org/docs/stable/generated/torch.dist.html#torch.dist \"torch.dist\")(X.T @ X, [torch.eye](https://pytorch.org/docs/stable/generated/torch.eye.html#torch.eye \"torch.eye\")(3)))  # X is orthogonal \n```", "```py\nclass MatrixExponential([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def forward(self, X):\n        return [torch.matrix_exp](https://pytorch.org/docs/stable/generated/torch.matrix_exp.html#torch.matrix_exp \"torch.matrix_exp\")(X)\n\nlayer_orthogonal = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(3, 3)\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer_orthogonal, \"weight\", Skew())\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer_orthogonal, \"weight\", MatrixExponential())\nX = layer_orthogonal.weight\nprint([torch.dist](https://pytorch.org/docs/stable/generated/torch.dist.html#torch.dist \"torch.dist\")(X.T @ X, [torch.eye](https://pytorch.org/docs/stable/generated/torch.eye.html#torch.eye \"torch.eye\")(3)))         # X is orthogonal\n\nlayer_spd = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(3, 3)\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer_spd, \"weight\", Symmetric())\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer_spd, \"weight\", MatrixExponential())\nX = layer_spd.weight\nprint([torch.dist](https://pytorch.org/docs/stable/generated/torch.dist.html#torch.dist \"torch.dist\")(X, X.T))                        # X is symmetric\nprint(([torch.linalg.eigvalsh](https://pytorch.org/docs/stable/generated/torch.linalg.eigvalsh.html#torch.linalg.eigvalsh \"torch.linalg.eigvalsh\")(X) > 0.).all())  # X is positive definite \n```", "```py\ndef right_inverse(self, X: Tensor) -> Tensor \n```", "```py\nclass Skew([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def forward(self, X):\n        A = X.triu(1)\n        return A - A.transpose(-1, -2)\n\n    def right_inverse(self, A):\n        # We assume that A is skew-symmetric\n        # We take the upper-triangular elements, as these are those used in the forward\n        return A.triu(1) \n```", "```py\nlayer = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(3, 3)\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer, \"weight\", Skew())\nX = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 3)\nX = X - X.T                             # X is now skew-symmetric\nlayer.weight = X                        # Initialize layer.weight to be X\nprint([torch.dist](https://pytorch.org/docs/stable/generated/torch.dist.html#torch.dist \"torch.dist\")(layer.weight, X))      # layer.weight == X \n```", "```py\nclass CayleyMap([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self, n):\n        super().__init__()\n        self.register_buffer(\"Id\", [torch.eye](https://pytorch.org/docs/stable/generated/torch.eye.html#torch.eye \"torch.eye\")(n))\n\n    def forward(self, X):\n        # Assume X skew-symmetric\n        # (I + X)(I - X)^{-1}\n        return [torch.linalg.solve](https://pytorch.org/docs/stable/generated/torch.linalg.solve.html#torch.linalg.solve \"torch.linalg.solve\")(self.Id - X, self.Id + X)\n\n    def right_inverse(self, A):\n        # Assume A orthogonal\n        # See https://en.wikipedia.org/wiki/Cayley_transform#Matrix_map\n        # (X - I)(X + I)^{-1}\n        return [torch.linalg.solve](https://pytorch.org/docs/stable/generated/torch.linalg.solve.html#torch.linalg.solve \"torch.linalg.solve\")(X + self.Id, self.Id - X)\n\nlayer_orthogonal = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(3, 3)\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer_orthogonal, \"weight\", Skew())\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer_orthogonal, \"weight\", CayleyMap(3))\n# Sample an orthogonal matrix with positive determinant\nX = [torch.empty](https://pytorch.org/docs/stable/generated/torch.empty.html#torch.empty \"torch.empty\")(3, 3)\n[nn.init.orthogonal_](https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.orthogonal_ \"torch.nn.init.orthogonal_\")(X)\nif X.det() < 0.:\n    X[0].neg_()\nlayer_orthogonal.weight = X\nprint([torch.dist](https://pytorch.org/docs/stable/generated/torch.dist.html#torch.dist \"torch.dist\")(layer_orthogonal.weight, X))  # layer_orthogonal.weight == X \n```", "```py\nlayer_orthogonal.weight = [nn.init.orthogonal_](https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.orthogonal_ \"torch.nn.init.orthogonal_\")(layer_orthogonal.weight) \n```", "```py\nclass PruningParametrization([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self, X, p_drop=0.2):\n        super().__init__()\n        # sample zeros with probability p_drop\n        mask = [torch.full_like](https://pytorch.org/docs/stable/generated/torch.full_like.html#torch.full_like \"torch.full_like\")(X, 1.0 - p_drop)\n        self.mask = [torch.bernoulli](https://pytorch.org/docs/stable/generated/torch.bernoulli.html#torch.bernoulli \"torch.bernoulli\")(mask)\n\n    def forward(self, X):\n        return X * self.mask\n\n    def right_inverse(self, A):\n        return A \n```", "```py\nlayer = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(3, 4)\nX = [torch.rand_like](https://pytorch.org/docs/stable/generated/torch.rand_like.html#torch.rand_like \"torch.rand_like\")(layer.weight)\nprint(f\"Initialization matrix:\\n{X}\")\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer, \"weight\", PruningParametrization(layer.weight))\nlayer.weight = X\nprint(f\"\\nInitialized weight:\\n{layer.weight}\") \n```", "```py\nlayer = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(3, 3)\nprint(\"Before:\")\nprint(layer)\nprint(layer.weight)\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer, \"weight\", Skew())\nprint(\"\\nParametrized:\")\nprint(layer)\nprint(layer.weight)\n[parametrize.remove_parametrizations](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.remove_parametrizations.html#torch.nn.utils.parametrize.remove_parametrizations \"torch.nn.utils.parametrize.remove_parametrizations\")(layer, \"weight\")\nprint(\"\\nAfter. Weight has skew-symmetric values but it is unconstrained:\")\nprint(layer)\nprint(layer.weight) \n```", "```py\nlayer = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(3, 3)\nprint(\"Before:\")\nprint(layer)\nprint(layer.weight)\n[parametrize.register_parametrization](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.register_parametrization.html#torch.nn.utils.parametrize.register_parametrization \"torch.nn.utils.parametrize.register_parametrization\")(layer, \"weight\", Skew())\nprint(\"\\nParametrized:\")\nprint(layer)\nprint(layer.weight)\n[parametrize.remove_parametrizations](https://pytorch.org/docs/stable/generated/torch.nn.utils.parametrize.remove_parametrizations.html#torch.nn.utils.parametrize.remove_parametrizations \"torch.nn.utils.parametrize.remove_parametrizations\")(layer, \"weight\", leave_parametrized=False)\nprint(\"\\nAfter. Same as Before:\")\nprint(layer)\nprint(layer.weight) \n```"]