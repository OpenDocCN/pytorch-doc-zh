- en: Tensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/tutorials/beginner/basics/tensorqs_tutorial.html](https://pytorch.org/tutorials/beginner/basics/tensorqs_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-beginner-basics-tensorqs-tutorial-py) to download
    the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '[Learn the Basics](intro.html) || [Quickstart](quickstart_tutorial.html) ||
    **Tensors** || [Datasets & DataLoaders](data_tutorial.html) || [Transforms](transforms_tutorial.html)
    || [Build Model](buildmodel_tutorial.html) || [Autograd](autogradqs_tutorial.html)
    || [Optimization](optimization_tutorial.html) || [Save & Load Model](saveloadrun_tutorial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Tensors are a specialized data structure that are very similar to arrays and
    matrices. In PyTorch, we use tensors to encode the inputs and outputs of a model,
    as well as the model’s parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Tensors are similar to [NumPy’s](https://numpy.org/) ndarrays, except that tensors
    can run on GPUs or other hardware accelerators. In fact, tensors and NumPy arrays
    can often share the same underlying memory, eliminating the need to copy data
    (see [Bridge with NumPy](../blitz/tensor_tutorial.html#bridge-to-np-label)). Tensors
    are also optimized for automatic differentiation (we’ll see more about that later
    in the [Autograd](autogradqs_tutorial.html) section). If you’re familiar with
    ndarrays, you’ll be right at home with the Tensor API. If not, follow along!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Initializing a Tensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tensors can be initialized in various ways. Take a look at the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Directly from data**'
  prefs: []
  type: TYPE_NORMAL
- en: Tensors can be created directly from data. The data type is automatically inferred.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**From a NumPy array**'
  prefs: []
  type: TYPE_NORMAL
- en: Tensors can be created from NumPy arrays (and vice versa - see [Bridge with
    NumPy](../blitz/tensor_tutorial.html#bridge-to-np-label)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**From another tensor:**'
  prefs: []
  type: TYPE_NORMAL
- en: The new tensor retains the properties (shape, datatype) of the argument tensor,
    unless explicitly overridden.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**With random or constant values:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`shape` is a tuple of tensor dimensions. In the functions below, it determines
    the dimensionality of the output tensor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes of a Tensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tensor attributes describe their shape, datatype, and the device on which they
    are stored.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Operations on Tensors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Over 100 tensor operations, including arithmetic, linear algebra, matrix manipulation
    (transposing, indexing, slicing), sampling and more are comprehensively described
    [here](https://pytorch.org/docs/stable/torch.html).
  prefs: []
  type: TYPE_NORMAL
- en: Each of these operations can be run on the GPU (at typically higher speeds than
    on a CPU). If you’re using Colab, allocate a GPU by going to Runtime > Change
    runtime type > GPU.
  prefs: []
  type: TYPE_NORMAL
- en: By default, tensors are created on the CPU. We need to explicitly move tensors
    to the GPU using `.to` method (after checking for GPU availability). Keep in mind
    that copying large tensors across devices can be expensive in terms of time and
    memory!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Try out some of the operations from the list. If you’re familiar with the NumPy
    API, you’ll find the Tensor API a breeze to use.
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard numpy-like indexing and slicing:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Joining tensors** You can use `torch.cat` to concatenate a sequence of tensors
    along a given dimension. See also [torch.stack](https://pytorch.org/docs/stable/generated/torch.stack.html),
    another tensor joining operator that is subtly different from `torch.cat`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Arithmetic operations**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Single-element tensors** If you have a one-element tensor, for example by
    aggregating all values of a tensor into one value, you can convert it to a Python
    numerical value using `item()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**In-place operations** Operations that store the result into the operand are
    called in-place. They are denoted by a `_` suffix. For example: `x.copy_(y)`,
    `x.t_()`, will change `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In-place operations save some memory, but can be problematic when computing
    derivatives because of an immediate loss of history. Hence, their use is discouraged.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Bridge with NumPy'
  prefs: []
  type: TYPE_NORMAL
- en: Tensors on the CPU and NumPy arrays can share their underlying memory locations,
    and changing one will change the other.
  prefs: []
  type: TYPE_NORMAL
- en: Tensor to NumPy array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: A change in the tensor reflects in the NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: NumPy array to Tensor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Changes in the NumPy array reflects in the tensor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Total running time of the script:** ( 0 minutes 2.013 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: tensorqs_tutorial.py`](../../_downloads/3fb82dc8278b08d5e5dee31ec1c16170/tensorqs_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: tensorqs_tutorial.ipynb`](../../_downloads/0e6615c5a7bc71e01ff3c51217ea00da/tensorqs_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
