- en: Tensors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 张量
- en: 原文：[https://pytorch.org/tutorials/beginner/basics/tensorqs_tutorial.html](https://pytorch.org/tutorials/beginner/basics/tensorqs_tutorial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/tutorials/beginner/basics/tensorqs_tutorial.html](https://pytorch.org/tutorials/beginner/basics/tensorqs_tutorial.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Click [here](#sphx-glr-download-beginner-basics-tensorqs-tutorial-py) to download
    the full example code
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 点击[这里](#sphx-glr-download-beginner-basics-tensorqs-tutorial-py)下载完整示例代码
- en: '[Learn the Basics](intro.html) || [Quickstart](quickstart_tutorial.html) ||
    **Tensors** || [Datasets & DataLoaders](data_tutorial.html) || [Transforms](transforms_tutorial.html)
    || [Build Model](buildmodel_tutorial.html) || [Autograd](autogradqs_tutorial.html)
    || [Optimization](optimization_tutorial.html) || [Save & Load Model](saveloadrun_tutorial.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[学习基础知识](intro.html) || [快速入门](quickstart_tutorial.html) || **张量** || [数据集和数据加载器](data_tutorial.html)
    || [变换](transforms_tutorial.html) || [构建模型](buildmodel_tutorial.html) || [自动微分](autogradqs_tutorial.html)
    || [优化](optimization_tutorial.html) || [保存和加载模型](saveloadrun_tutorial.html)'
- en: Tensors are a specialized data structure that are very similar to arrays and
    matrices. In PyTorch, we use tensors to encode the inputs and outputs of a model,
    as well as the model’s parameters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 张量是一种类似于数组和矩阵的专门数据结构。在PyTorch中，我们使用张量来编码模型的输入和输出，以及模型的参数。
- en: Tensors are similar to [NumPy’s](https://numpy.org/) ndarrays, except that tensors
    can run on GPUs or other hardware accelerators. In fact, tensors and NumPy arrays
    can often share the same underlying memory, eliminating the need to copy data
    (see [Bridge with NumPy](../blitz/tensor_tutorial.html#bridge-to-np-label)). Tensors
    are also optimized for automatic differentiation (we’ll see more about that later
    in the [Autograd](autogradqs_tutorial.html) section). If you’re familiar with
    ndarrays, you’ll be right at home with the Tensor API. If not, follow along!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 张量类似于[NumPy的](https://numpy.org/) ndarrays，不同之处在于张量可以在GPU或其他硬件加速器上运行。实际上，张量和NumPy数组通常可以共享相同的基础内存，消除了复制数据的需要（请参阅[与NumPy的桥接](../blitz/tensor_tutorial.html#bridge-to-np-label)）。张量还针对自动微分进行了优化（我们稍后将在[自动微分](autogradqs_tutorial.html)部分看到更多）。如果您熟悉ndarrays，您将很容易使用张量API。如果不熟悉，请跟着学习！
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Initializing a Tensor
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化张量
- en: 'Tensors can be initialized in various ways. Take a look at the following examples:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 张量可以以各种方式初始化。看看以下示例：
- en: '**Directly from data**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**直接从数据中**'
- en: Tensors can be created directly from data. The data type is automatically inferred.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接从数据创建张量。数据类型会自动推断。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**From a NumPy array**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**从NumPy数组**'
- en: Tensors can be created from NumPy arrays (and vice versa - see [Bridge with
    NumPy](../blitz/tensor_tutorial.html#bridge-to-np-label)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从NumPy数组创建张量（反之亦然-请参阅[与NumPy的桥接](../blitz/tensor_tutorial.html#bridge-to-np-label)）。
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**From another tensor:**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**从另一个张量中：**'
- en: The new tensor retains the properties (shape, datatype) of the argument tensor,
    unless explicitly overridden.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 新张量保留了参数张量的属性（形状、数据类型），除非显式覆盖。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**With random or constant values:**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用随机或常量值：**'
- en: '`shape` is a tuple of tensor dimensions. In the functions below, it determines
    the dimensionality of the output tensor.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`shape`是张量维度的元组。在下面的函数中，它确定输出张量的维度。'
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Attributes of a Tensor
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 张量的属性
- en: Tensor attributes describe their shape, datatype, and the device on which they
    are stored.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 张量属性描述了它们的形状、数据类型和存储它们的设备。
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '* * *'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Operations on Tensors
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 张量上的操作
- en: Over 100 tensor operations, including arithmetic, linear algebra, matrix manipulation
    (transposing, indexing, slicing), sampling and more are comprehensively described
    [here](https://pytorch.org/docs/stable/torch.html).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 包括算术、线性代数、矩阵操作（转置、索引、切片）、采样等在内的100多个张量操作在[这里](https://pytorch.org/docs/stable/torch.html)得到了全面描述。
- en: Each of these operations can be run on the GPU (at typically higher speeds than
    on a CPU). If you’re using Colab, allocate a GPU by going to Runtime > Change
    runtime type > GPU.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作中的每一个都可以在GPU上运行（通常比在CPU上速度更快）。如果您在使用Colab，请转到运行时 > 更改运行时类型 > GPU 来分配GPU。
- en: By default, tensors are created on the CPU. We need to explicitly move tensors
    to the GPU using `.to` method (after checking for GPU availability). Keep in mind
    that copying large tensors across devices can be expensive in terms of time and
    memory!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，张量在CPU上创建。我们需要使用`.to`方法显式将张量移动到GPU（在检查GPU可用性后）。请记住，在设备之间复制大型张量可能会在时间和内存方面昂贵！
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Try out some of the operations from the list. If you’re familiar with the NumPy
    API, you’ll find the Tensor API a breeze to use.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行列表中的一些操作。如果您熟悉NumPy API，您会发现Tensor API非常易于使用。
- en: '**Standard numpy-like indexing and slicing:**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**标准类似于numpy的索引和切片：**'
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Joining tensors** You can use `torch.cat` to concatenate a sequence of tensors
    along a given dimension. See also [torch.stack](https://pytorch.org/docs/stable/generated/torch.stack.html),
    another tensor joining operator that is subtly different from `torch.cat`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接张量** 您可以使用`torch.cat`沿着给定维度连接一系列张量。另请参阅[torch.stack](https://pytorch.org/docs/stable/generated/torch.stack.html)，另一个微妙不同于`torch.cat`的张量连接运算符。'
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Arithmetic operations**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**算术操作**'
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Single-element tensors** If you have a one-element tensor, for example by
    aggregating all values of a tensor into one value, you can convert it to a Python
    numerical value using `item()`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**单元素张量** 如果您有一个单元素张量，例如通过将张量的所有值聚合为一个值，您可以使用`item()`将其转换为Python数值：'
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**In-place operations** Operations that store the result into the operand are
    called in-place. They are denoted by a `_` suffix. For example: `x.copy_(y)`,
    `x.t_()`, will change `x`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**原地操作** 将结果存储到操作数中的操作称为原地操作。它们以`_`后缀表示。例如：`x.copy_(y)`，`x.t_()`，将改变`x`。'
- en: '[PRE18]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In-place operations save some memory, but can be problematic when computing
    derivatives because of an immediate loss of history. Hence, their use is discouraged.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 原地操作可以节省一些内存，但在计算导数时可能会出现问题，因为会立即丢失历史记录。因此，不建议使用它们。
- en: '* * *'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '## Bridge with NumPy'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '## 与NumPy的桥接'
- en: Tensors on the CPU and NumPy arrays can share their underlying memory locations,
    and changing one will change the other.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: CPU上的张量和NumPy数组可以共享它们的基础内存位置，改变一个将改变另一个。
- en: Tensor to NumPy array
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 张量转换为NumPy数组
- en: '[PRE20]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A change in the tensor reflects in the NumPy array.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 张量中的更改会反映在NumPy数组中。
- en: '[PRE22]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: NumPy array to Tensor
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy数组转换为张量
- en: '[PRE24]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Changes in the NumPy array reflects in the tensor.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数组中的更改会反映在张量中。
- en: '[PRE25]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Total running time of the script:** ( 0 minutes 2.013 seconds)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本的总运行时间：**（0分钟2.013秒）'
- en: '[`Download Python source code: tensorqs_tutorial.py`](../../_downloads/3fb82dc8278b08d5e5dee31ec1c16170/tensorqs_tutorial.py)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Python源代码：tensorqs_tutorial.py`](../../_downloads/3fb82dc8278b08d5e5dee31ec1c16170/tensorqs_tutorial.py)'
- en: '[`Download Jupyter notebook: tensorqs_tutorial.ipynb`](../../_downloads/0e6615c5a7bc71e01ff3c51217ea00da/tensorqs_tutorial.ipynb)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Jupyter笔记本：tensorqs_tutorial.ipynb`](../../_downloads/0e6615c5a7bc71e01ff3c51217ea00da/tensorqs_tutorial.ipynb)'
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sphinx-Gallery生成的图库](https://sphinx-gallery.github.io)'
