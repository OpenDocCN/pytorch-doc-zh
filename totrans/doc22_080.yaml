- en: torch.Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/docs/stable/storage.html](https://pytorch.org/docs/stable/storage.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`torch.Storage` is an alias for the storage class that corresponds with the
    default data type ([`torch.get_default_dtype()`](generated/torch.get_default_dtype.html#torch.get_default_dtype
    "torch.get_default_dtype")). For instance, if the default data type is `torch.float`,
    `torch.Storage` resolves to [`torch.FloatStorage`](#torch.FloatStorage "torch.FloatStorage").'
  prefs: []
  type: TYPE_NORMAL
- en: The `torch.<type>Storage` and `torch.cuda.<type>Storage` classes, like [`torch.FloatStorage`](#torch.FloatStorage
    "torch.FloatStorage"), [`torch.IntStorage`](#torch.IntStorage "torch.IntStorage"),
    etc., are not actually ever instantiated. Calling their constructors creates a
    [`torch.TypedStorage`](#torch.TypedStorage "torch.TypedStorage") with the appropriate
    [`torch.dtype`](tensor_attributes.html#torch.dtype "torch.dtype") and [`torch.device`](tensor_attributes.html#torch.device
    "torch.device"). `torch.<type>Storage` classes have all of the same class methods
    that [`torch.TypedStorage`](#torch.TypedStorage "torch.TypedStorage") has.
  prefs: []
  type: TYPE_NORMAL
- en: A [`torch.TypedStorage`](#torch.TypedStorage "torch.TypedStorage") is a contiguous,
    one-dimensional array of elements of a particular [`torch.dtype`](tensor_attributes.html#torch.dtype
    "torch.dtype"). It can be given any [`torch.dtype`](tensor_attributes.html#torch.dtype
    "torch.dtype"), and the internal data will be interpreted appropriately. [`torch.TypedStorage`](#torch.TypedStorage
    "torch.TypedStorage") contains a [`torch.UntypedStorage`](#torch.UntypedStorage
    "torch.UntypedStorage") which holds the data as an untyped array of bytes.
  prefs: []
  type: TYPE_NORMAL
- en: Every strided [`torch.Tensor`](tensors.html#torch.Tensor "torch.Tensor") contains
    a [`torch.TypedStorage`](#torch.TypedStorage "torch.TypedStorage"), which stores
    all of the data that the [`torch.Tensor`](tensors.html#torch.Tensor "torch.Tensor")
    views.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: All storage classes except for [`torch.UntypedStorage`](#torch.UntypedStorage
    "torch.UntypedStorage") will be removed in the future, and [`torch.UntypedStorage`](#torch.UntypedStorage
    "torch.UntypedStorage") will be used in all cases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to bfloat16 type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to bool type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to byte type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to char type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of this storage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to complex double type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to complex float type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Return a CPU copy of this storage if it’s not already on the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Returns a copy of this object in CUDA memory.
  prefs: []
  type: TYPE_NORMAL
- en: If this object is already in CUDA memory and on the correct device, then no
    copy is performed and the original object is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**device** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – The destination GPU id. Defaults to the current device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**non_blocking** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True` and the source is in pinned memory, the copy
    will be asynchronous with respect to the host. Otherwise, the argument has no
    effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – For compatibility, may contain the key `async` in place of the
    `non_blocking` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '*T*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to double type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns the file name associated with this storage if the storage was memory
    mapped from a file. or `None` if the storage was not created by memory mapping
    a file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to float type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to float8_e4m3fn type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to float8_e5m2 type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creates a CPU storage backed by a memory-mapped file.
  prefs: []
  type: TYPE_NORMAL
- en: If `shared` is `True`, then memory is shared between all processes. All changes
    are written to the file. If `shared` is `False`, then the changes on the storage
    do not affect the file.
  prefs: []
  type: TYPE_NORMAL
- en: '`size` is the number of elements in the storage. If `shared` is `False`, then
    the file must contain at least `size * sizeof(Type)` bytes (`Type` is the type
    of storage). If `shared` is `True` the file will be created if needed.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – file name to map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**shared** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – whether to share memory (whether `MAP_SHARED` or `MAP_PRIVATE`
    is passed to the underlying [mmap(2) call](https://man7.org/linux/man-pages/man2/mmap.2.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – number of elements in the storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to half type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Returns a copy of this object in HPU memory.
  prefs: []
  type: TYPE_NORMAL
- en: If this object is already in HPU memory and on the correct device, then no copy
    is performed and the original object is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**device** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – The destination HPU id. Defaults to the current device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**non_blocking** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True` and the source is in pinned memory, the copy
    will be asynchronous with respect to the host. Otherwise, the argument has no
    effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – For compatibility, may contain the key `async` in place of the
    `non_blocking` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '*T*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to int type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Determine whether the CPU TypedStorage is already pinned on device.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**device** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)") *or* [*torch.device*](tensor_attributes.html#torch.device "torch.device"))
    – The device to pin memory on. Default: `''cuda''`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: A boolean variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to long type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Copy the CPU TypedStorage to pinned memory, if it’s not already pinned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**device** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)") *or* [*torch.device*](tensor_attributes.html#torch.device "torch.device"))
    – The device to pin memory on. Default: `''cuda''`.'
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: A pinned CPU storage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See [`torch.UntypedStorage.share_memory_()`](#torch.UntypedStorage.share_memory_
    "torch.UntypedStorage.share_memory_")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to short type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Return a list containing the elements of this storage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Returns the type if dtype is not provided, else casts this object to the specified
    type.
  prefs: []
  type: TYPE_NORMAL
- en: If this is already of the correct type, no copy is performed and the original
    object is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype** ([*type*](https://docs.python.org/3/library/functions.html#type "(in
    Python v3.12)") *or* *string*) – The desired type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**non_blocking** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True`, and the source is in pinned memory and destination
    is on the GPU or vice versa, the copy is performed asynchronously with respect
    to the host. Otherwise, the argument has no effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – For compatibility, may contain the key `async` in place of the
    `non_blocking` argument. The `async` arg is deprecated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[*Union*](https://docs.python.org/3/library/typing.html#typing.Union "(in Python
    v3.12)")[*T*, [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Return the internal [`torch.UntypedStorage`](#torch.UntypedStorage "torch.UntypedStorage").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to bfloat16 type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to bool type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to byte type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Swap bytes in underlying data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to char type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of this storage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to complex double type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to complex float type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Return a CPU copy of this storage if it’s not already on the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Returns a copy of this object in CUDA memory.
  prefs: []
  type: TYPE_NORMAL
- en: If this object is already in CUDA memory and on the correct device, then no
    copy is performed and the original object is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**device** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – The destination GPU id. Defaults to the current device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**non_blocking** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True` and the source is in pinned memory, the copy
    will be asynchronous with respect to the host. Otherwise, the argument has no
    effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – For compatibility, may contain the key `async` in place of the
    `non_blocking` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to double type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Returns the file name associated with this storage if the storage was memory
    mapped from a file. or `None` if the storage was not created by memory mapping
    a file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to float type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to float8_e4m3fn type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to float8_e5m2 type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Creates a CPU storage backed by a memory-mapped file.
  prefs: []
  type: TYPE_NORMAL
- en: If `shared` is `True`, then memory is shared between all processes. All changes
    are written to the file. If `shared` is `False`, then the changes on the storage
    do not affect the file.
  prefs: []
  type: TYPE_NORMAL
- en: '`size` is the number of elements in the storage. If `shared` is `False`, then
    the file must contain at least `size * sizeof(Type)` bytes (`Type` is the type
    of storage, in the case of an `UnTypedStorage` the file must contain at least
    `size` bytes). If `shared` is `True` the file will be created if needed.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**filename** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – file name to map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**shared** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: whether to share memory (whether `MAP_SHARED` or `MAP_PRIVATE` is passed to
    the underlying [mmap(2) call](https://man7.org/linux/man-pages/man2/mmap.2.html))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**size** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – number of elements in the storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to half type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Returns a copy of this object in HPU memory.
  prefs: []
  type: TYPE_NORMAL
- en: If this object is already in HPU memory and on the correct device, then no copy
    is performed and the original object is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**device** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – The destination HPU id. Defaults to the current device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**non_blocking** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True` and the source is in pinned memory, the copy
    will be asynchronous with respect to the host. Otherwise, the argument has no
    effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – For compatibility, may contain the key `async` in place of the
    `non_blocking` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to int type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Determine whether the CPU storage is already pinned on device.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**device** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)") *or* [*torch.device*](tensor_attributes.html#torch.device "torch.device"))
    – The device to pin memory on. Default: `''cuda''`.'
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: A boolean variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to long type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Return a MPS copy of this storage if it’s not already on the MPS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Copy the CPU storage to pinned memory, if it’s not already pinned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**device** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)") *or* [*torch.device*](tensor_attributes.html#torch.device "torch.device"))
    – The device to pin memory on. Default: `''cuda''`.'
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: A pinned CPU storage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Moves the storage to shared memory.
  prefs: []
  type: TYPE_NORMAL
- en: This is a no-op for storages already in shared memory and for CUDA storages,
    which do not need to be moved for sharing across processes. Storages in shared
    memory cannot be resized.
  prefs: []
  type: TYPE_NORMAL
- en: Note that to mitigate issues like [this](https://github.com/pytorch/pytorch/issues/95606)
    it is thread safe to call this function from multiple threads on the same object.
    It is NOT thread safe though to call any other function on self without proper
    synchronization. Please see [Multiprocessing best practices](notes/multiprocessing.html)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When all references to a storage in shared memory are deleted, the associated
    shared memory object will also be deleted. PyTorch has a special cleanup process
    to ensure that this happens even if the current process exits unexpectedly.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting the difference between [`share_memory_()`](#torch.UntypedStorage.share_memory_
    "torch.UntypedStorage.share_memory_") and [`from_file()`](generated/torch.from_file.html#torch.from_file
    "torch.from_file") with `shared = True`
  prefs: []
  type: TYPE_NORMAL
- en: '`share_memory_` uses [shm_open(3)](https://man7.org/linux/man-pages/man3/shm_open.3.html)
    to create a POSIX shared memory object while [`from_file()`](generated/torch.from_file.html#torch.from_file
    "torch.from_file") uses [open(2)](https://man7.org/linux/man-pages/man2/open.2.html)
    to open the filename passed by the user.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both use an [mmap(2) call](https://man7.org/linux/man-pages/man2/mmap.2.html)
    with `MAP_SHARED` to map the file/object into the current virtual address space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`share_memory_` will call `shm_unlink(3)` on the object after mapping it to
    make sure the shared memory object is freed when no process has the object open.
    `torch.from_file(shared=True)` does not unlink the file. This file is persistent
    and will remain until it is deleted by the user.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`self`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Casts this storage to short type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Return a list containing the elements of this storage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Returns the type if dtype is not provided, else casts this object to the specified
    type.
  prefs: []
  type: TYPE_NORMAL
- en: If this is already of the correct type, no copy is performed and the original
    object is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype** ([*type*](https://docs.python.org/3/library/functions.html#type "(in
    Python v3.12)") *or* *string*) – The desired type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**non_blocking** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – If `True`, and the source is in pinned memory and destination
    is on the GPU or vice versa, the copy is performed asynchronously with respect
    to the host. Otherwise, the argument has no effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** – For compatibility, may contain the key `async` in place of the
    `non_blocking` argument. The `async` arg is deprecated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
