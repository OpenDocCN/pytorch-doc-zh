["```py\n# When running this tutorial in Google Colab, install the required packages\n# with the following.\n# !pip install torchaudio librosa\n\nimport torch\nimport torchaudio\nimport torchaudio.transforms as T\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\n2.2.0\n2.2.0 \n```", "```py\nimport librosa\nimport matplotlib.pyplot as plt\nfrom IPython.display import Audio\nfrom torchaudio.utils import download_asset \n```", "```py\n[SAMPLE_WAV_SPEECH_PATH](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\")\n\ndef _get_sample(path, resample=None):\n    effects = [[\"remix\", \"1\"]]\n    if resample:\n        effects.extend(\n            [\n                [\"lowpass\", f\"{resample  //  2}\"],\n                [\"rate\", f\"{resample}\"],\n            ]\n        )\n    return torchaudio.sox_effects.apply_effects_file(path, effects=effects)\n\ndef get_speech_sample(*, resample=None):\n    return _get_sample([SAMPLE_WAV_SPEECH_PATH](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), resample=resample)\n\ndef get_spectrogram(\n    n_fft=400,\n    win_len=None,\n    hop_len=None,\n    power=2.0,\n):\n    waveform, _ = get_speech_sample()\n    spectrogram = [T.Spectrogram](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(\n        n_fft=n_fft,\n        win_length=win_len,\n        hop_length=hop_len,\n        center=True,\n        pad_mode=\"reflect\",\n        power=power,\n    )\n    return spectrogram(waveform) \n```", "```py\n[spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = get_spectrogram(power=None)\nstretch = [T.TimeStretch](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\n\n[spec_12](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = stretch([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), overriding_rate=1.2)\n[spec_09](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = stretch([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), overriding_rate=0.9) \n```", "```py\ndef plot():\n    def plot_spec(ax, [spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), title):\n        ax.set_title(title)\n        ax.imshow(librosa.amplitude_to_db([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), origin=\"lower\", aspect=\"auto\")\n\n    fig, axes = plt.subplots(3, 1, sharex=True, sharey=True)\n    plot_spec(axes[0], [torch.abs](https://pytorch.org/docs/stable/generated/torch.abs.html#torch.abs \"torch.abs\")([spec_12](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]), title=\"Stretched x1.2\")\n    plot_spec(axes[1], [torch.abs](https://pytorch.org/docs/stable/generated/torch.abs.html#torch.abs \"torch.abs\")([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]), title=\"Original\")\n    plot_spec(axes[2], [torch.abs](https://pytorch.org/docs/stable/generated/torch.abs.html#torch.abs \"torch.abs\")([spec_09](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]), title=\"Stretched x0.9\")\n    fig.tight_layout()\n\nplot() \n```", "```py\ndef preview([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), rate=16000):\n    ispec = [T.InverseSpectrogram](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\n    waveform = ispec([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n    return Audio(waveform[0].numpy().T, rate=rate)\n\npreview([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\npreview([spec_12](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\npreview([spec_09](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n[torch.random.manual_seed](https://pytorch.org/docs/stable/generated/torch.manual_seed.html#torch.manual_seed \"torch.manual_seed\")(4)\n\ntime_masking = [T.TimeMasking](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(time_mask_param=80)\nfreq_masking = [T.FrequencyMasking](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(freq_mask_param=80)\n\n[spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = get_spectrogram()\n[time_masked](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = time_masking([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[freq_masked](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = freq_masking([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ndef plot():\n    def plot_spec(ax, [spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), title):\n        ax.set_title(title)\n        ax.imshow(librosa.power_to_db([spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), origin=\"lower\", aspect=\"auto\")\n\n    fig, axes = plt.subplots(3, 1, sharex=True, sharey=True)\n    plot_spec(axes[0], [spec](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], title=\"Original\")\n    plot_spec(axes[1], [time_masked](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], title=\"Masked along time axis\")\n    plot_spec(axes[2], [freq_masked](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], title=\"Masked along frequency axis\")\n    fig.tight_layout()\n\nplot() \n```"]