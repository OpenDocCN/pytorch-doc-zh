- en: Image Segmentation DeepLabV3 on iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/tutorials/beginner/deeplabv3_on_ios.html](https://pytorch.org/tutorials/beginner/deeplabv3_on_ios.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Author**: [Jeff Tang](https://github.com/jeffxtang)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reviewed by**: [Jeremiah Chung](https://github.com/jeremiahschung)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Semantic image segmentation is a computer vision task that uses semantic labels
    to mark specific regions of an input image. The PyTorch semantic image segmentation
    [DeepLabV3 model](https://pytorch.org/hub/pytorch_vision_deeplabv3_resnet101)
    can be used to label image regions with [20 semantic classes](http://host.robots.ox.ac.uk:8080/pascal/VOC/voc2007/segexamples/index.html)
    including, for example, bicycle, bus, car, dog, and person. Image segmentation
    models can be very useful in applications such as autonomous driving and scene
    understanding.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we will provide a step-by-step guide on how to prepare and
    run the PyTorch DeepLabV3 model on iOS, taking you from the beginning of having
    a model you may want to use on iOS to the end of having a complete iOS app using
    the model. We will also cover practical and general tips on how to check if your
    next favorite pretrained PyTorch models can run on iOS, and how to avoid pitfalls.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before going through this tutorial, you should check out [PyTorch Mobile for
    iOS](https://pytorch.org/mobile/ios/) and give the PyTorch iOS [HelloWorld](https://github.com/pytorch/ios-demo-app/tree/master/HelloWorld)
    example app a quick try. This tutorial will go beyond the image classification
    model, usually the first kind of model deployed on mobile. The complete code for
    this tutorial is available [here](https://github.com/pytorch/ios-demo-app/tree/master/ImageSegmentation).
  prefs: []
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this tutorial, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the DeepLabV3 model for iOS deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the output of the model for the example input image in Python and compare
    it to the output from the iOS app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build a new iOS app or reuse an iOS example app to load the converted model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare the input into the format that the model expects and process the model
    output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the UI, refactor, build and run the app to see image segmentation in
    action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyTorch 1.6 or 1.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: torchvision 0.7 or 0.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode 11 or 12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. Convert the DeepLabV3 model for iOS deployment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step to deploying a model on iOS is to convert the model into the
    [TorchScript](https://pytorch.org/tutorials/beginner/Intro_to_TorchScript_tutorial.html)
    format.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Not all PyTorch models can be converted to TorchScript at this time because
    a model definition may use language features that are not in TorchScript, which
    is a subset of Python. See the [Script and Optimize Recipe](../recipes/script_optimized.html)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply run the script below to generate the scripted model deeplabv3_scripted.pt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The size of the generated deeplabv3_scripted.pt model file should be around
    168MB. Ideally, a model should also be quantized for significant size reduction
    and faster inference before being deployed on an iOS app. To have a general understanding
    of quantization, see the [Quantization Recipe](../recipes/quantization.html) and
    the resource links there. We will cover in detail how to correctly apply a quantization
    workflow called Post Training [Static Quantization](https://pytorch.org/tutorials/advanced/static_quantization_tutorial.html)
    to the DeepLabV3 model in a future tutorial or recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Get example input and output of the model in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have a scripted PyTorch model, let’s test with some example inputs
    to make sure the model works correctly on iOS. First, let’s write a Python script
    that uses the model to make inferences and examine inputs and outputs. For this
    example of the DeepLabV3 model, we can reuse the code in Step 1 and in the [DeepLabV3
    model hub site](https://pytorch.org/hub/pytorch_vision_deeplabv3_resnet101). Add
    the following code snippet to the code above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Download deeplab.jpg from [here](https://github.com/pytorch/ios-demo-app/blob/master/ImageSegmentation/ImageSegmentation/deeplab.jpg)
    and run the script above to see the shapes of the input and output of the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So if you provide the same image input deeplab.jpg of size 400x400 to the model
    on iOS, the output of the model should have the size [21, 400, 400]. You should
    also print out at least the beginning parts of the actual data of the input and
    output, to be used in Step 4 below to compare with the actual input and output
    of the model when running in the iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Build a new iOS app or reuse an example app and load the model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, follow Step 3 of the [Model Preparation for iOS recipe](../recipes/model_preparation_ios.html#add-the-model-and-pytorch-library-on-ios)
    to use our model in an Xcode project with PyTorch Mobile enabled. Because both
    the DeepLabV3 model used in this tutorial and the MobileNet v2 model used in the
    PyTorch Hello World iOS example are computer vision models, you may choose to
    start with the [HelloWorld example repo](https://github.com/pytorch/ios-demo-app/tree/master/HelloWorld)
    as a template to reuse the code that loads the model and processes the input and
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s add deeplabv3_scripted.pt and deeplab.jpg used in Step 2 to the Xcode
    project and modify ViewController.swift to resemble:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then set a breakpoint at the line return module and build and run the app. The
    app should stop at the breakpoint, meaning that the scripted model in Step 1 has
    been successfully loaded on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Process the model input and output for model inference
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After the model loads in the previous step, let’s verify that it works with
    expected inputs and can generate expected outputs. As the model input for the
    DeepLabV3 model is an image, the same as that of the MobileNet v2 in the Hello
    World example, we will reuse some of the code in the [TorchModule.mm](https://github.com/pytorch/ios-demo-app/blob/master/HelloWorld/HelloWorld/HelloWorld/TorchBridge/TorchModule.mm)
    file from Hello World for input processing. Replace the predictImage method implementation
    in TorchModule.mm with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The model output is a dictionary for the DeepLabV3 model so we use toGenericDict
    to correctly extract the result. For other models, the model output may also be
    a single tensor or a tuple of tensors, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: With the code changes shown above, you can set breakpoints after the two for
    loops that populate inputs and results and compare them with the model input and
    output data you saw in Step 2 to see if they match. For the same inputs to the
    models running on iOS and Python, you should get the same outputs.
  prefs: []
  type: TYPE_NORMAL
- en: All we have done so far is to confirm that the model of our interest can be
    scripted and run correctly in our iOS app as in Python. The steps we walked through
    so far for using a model in an iOS app consumes the bulk, if not most, of our
    app development time, similar to how data preprocessing is the heaviest lift for
    a typical machine learning project.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Complete the UI, refactor, build and run the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we are ready to complete the app and the UI to actually see the processed
    result as a new image. The output processing code should be like this, added to
    the end of the code snippet in Step 4 in TorchModule.mm - remember to first remove
    the line return nil; temporarily put there to make the code build and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The implementation here is based on the understanding of the DeepLabV3 model
    which outputs a tensor of size [21, width, height] for an input image of width*height.
    Each element in the width*height output array is a value between 0 and 20 (for
    a total of 21 semantic labels described in Introduction) and the value is used
    to set a specific color. Color coding of the segmentation here is based on the
    class with the highest probability, and you can extend the color coding for all
    classes in your own dataset.
  prefs: []
  type: TYPE_NORMAL
- en: After the output processing, you will also need to call a helper function to
    convert the RGB buffer to an UIImage instance to be shown on UIImageView. You
    can refer to the example code convertRGBBufferToUIImage defined in UIImageHelper.mm
    in the code repository.
  prefs: []
  type: TYPE_NORMAL
- en: The UI for this app is also similar to that for Hello World, except that you
    do not need the UITextView to show the image classification result. You can also
    add two buttons Segment and Restart as shown in the code repository to run the
    model inference and to show back the original image after the segmentation result
    is shown.
  prefs: []
  type: TYPE_NORMAL
- en: The last step before we can run the app is to connect all the pieces together.
    Modify the ViewController.swift file to use the predictImage, which is refactored
    and changed to segmentImage in the repository, and helper functions you built
    as shown in the example code in the repository in ViewController.swift. Connect
    the buttons to the actions and you should be good to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when you run the app on an iOS simulator or an actual iOS device, you will
    see the following screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/deeplabv3_ios.png](../Images/9ac919407ef21251c34a31f8fc79bd32.png)
    ![../_images/deeplabv3_ios2.png](../Images/48e025cda7e2c4c6a8cfe2a933cfd4f0.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Recap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, we described what it takes to convert a pretrained PyTorch
    DeepLabV3 model for iOS and how to make sure the model can run successfully on
    iOS. Our focus was to help you understand the process of confirming that a model
    can indeed run on iOS. The complete code repository is available [here](https://github.com/pytorch/ios-demo-app/tree/master/ImageSegmentation).
  prefs: []
  type: TYPE_NORMAL
- en: More advanced topics such as quantization and using models via transfer learning
    or of your own on iOS will be covered soon in future demo apps and tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: Learn More
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PyTorch Mobile site](https://pytorch.org/mobile)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[DeepLabV3 model](https://pytorch.org/hub/pytorch_vision_deeplabv3_resnet101)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[DeepLabV3 paper](https://arxiv.org/pdf/1706.05587.pdf)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
