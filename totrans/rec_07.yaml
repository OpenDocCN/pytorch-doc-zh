- en: torchrec.fx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/torchrec/torchrec.fx.html](https://pytorch.org/torchrec/torchrec.fx.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Torchrec Tracer
  prefs: []
  type: TYPE_NORMAL
- en: Custom FX tracer for torchrec
  prefs: []
  type: TYPE_NORMAL
- en: See [Torch.FX documentation](https://pytorch.org/docs/stable/fx.html)
  prefs: []
  type: TYPE_NORMAL
- en: '## torchrec.fx.tracer[](#module-torchrec.fx.tracer "Permalink to this heading")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Bases: `Tracer`'
  prefs: []
  type: TYPE_NORMAL
- en: Custom FX tracer for torchrec
  prefs: []
  type: TYPE_NORMAL
- en: See [Torch.FX documentation](https://pytorch.org/docs/stable/fx.html)
  prefs: []
  type: TYPE_NORMAL
- en: We create a custom FX tracer to trace torchrec based models. The custom tracer
    handles python generic types (i.e. NoWait[T], Awaitable[T]) and lower it to TorchScript
    if needed
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A method to specify the behavior of tracing when preparing values to be used
    as arguments to nodes in the `Graph`.
  prefs: []
  type: TYPE_NORMAL
- en: Adds support for the NoWait type in addition to the default tracer
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** (*Any*) – The value to be emitted as an `Argument` in the `Graph`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The value `a` converted into the appropriate `Argument`
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: Argument
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Override FX definition to include quantized embedding bags
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Allows trace-ability of non registered modules. This is typically used for Table
    Batched Embeddings made to look like nn.EmbeddingBags
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Backwards-compatibility for this API is guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Symbolic tracing API
  prefs: []
  type: TYPE_NORMAL
- en: Given an `nn.Module` or function instance `root`, this function will return
    a `GraphModule` constructed by recording operations seen while tracing through
    `root`.
  prefs: []
  type: TYPE_NORMAL
- en: '`concrete_args` allows you to partially specialize your function, whether it’s
    to remove control flow or data structures.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**root** (*Union**[**torch.nn.Module**,* *Callable**]*) – Module or function
    to be traced and converted into a Graph representation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**concrete_args** (*Optional**[**Dict**[**str**,* *any**]**]*) – Inputs to
    be partially specialized'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a Module created from the recorded operations from `root`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: 'GraphModule  ## Module contents[](#module-0 "Permalink to this heading")'
  prefs: []
  type: TYPE_NORMAL
- en: Torchrec Tracer
  prefs: []
  type: TYPE_NORMAL
- en: Custom FX tracer for torchrec
  prefs: []
  type: TYPE_NORMAL
- en: See [Torch.FX documentation](https://pytorch.org/docs/stable/fx.html)
  prefs: []
  type: TYPE_NORMAL
