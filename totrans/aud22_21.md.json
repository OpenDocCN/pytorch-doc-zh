["```py\nimport torch\nimport torchaudio\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n\nimport io\nimport time\n\nimport matplotlib.pyplot as plt\nfrom IPython.display import Video\nfrom torchaudio.io import StreamReader, StreamWriter \n```", "```py\n2.2.0\n2.2.0 \n```", "```py\nfrom torchaudio.utils import ffmpeg_utils \n```", "```py\nprint(\"FFmpeg Library versions:\")\nfor [k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), [ver](https://docs.python.org/3/library/stdtypes.html#tuple \"builtins.tuple\") in ffmpeg_utils.get_versions().items():\n    print(f\" {[k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}:\\t{'.'.join(str(v)  for  v  in  [ver](https://docs.python.org/3/library/stdtypes.html#tuple \"builtins.tuple\"))}\") \n```", "```py\nFFmpeg Library versions:\n  libavcodec:   60.3.100\n  libavdevice:  60.1.100\n  libavfilter:  9.3.100\n  libavformat:  60.3.100\n  libavutil:    58.2.100 \n```", "```py\nprint(\"Available NVENC Encoders:\")\nfor [k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") in ffmpeg_utils.get_video_encoders().keys():\n    if \"nvenc\" in [k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"):\n        print(f\" - {[k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}\") \n```", "```py\nAvailable NVENC Encoders:\n - av1_nvenc\n - h264_nvenc\n - hevc_nvenc \n```", "```py\nprint(\"Avaialbe GPU:\")\nprint([torch.cuda.get_device_properties](https://pytorch.org/docs/stable/generated/torch.cuda.get_device_properties.html#torch.cuda.get_device_properties \"torch.cuda.get_device_properties\")(0)) \n```", "```py\nAvaialbe GPU:\n_CudaDeviceProperties(name='NVIDIA A10G', major=8, minor=6, total_memory=22515MB, multi_processor_count=80) \n```", "```py\ndef get_data(height, width, format=\"yuv444p\", frame_rate=30000 / 1001, duration=4):\n    src = f\"testsrc2=rate={frame_rate}:size={width}x{height}:duration={duration}\"\n    s = StreamReader(src=src, format=\"lavfi\")\n    s.add_basic_video_stream(-1, format=format)\n    s.process_all_packets()\n    (video,) = s.pop_chunks()\n    return video \n```", "```py\n[pict_config](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\") = {\n    \"height\": 360,\n    \"width\": 640,\n    \"frame_rate\": 30000 / 1001,\n    \"format\": \"yuv444p\",\n}\n\nframe_data = get_data(**[pict_config](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\")) \n```", "```py\nw = StreamWriter([io.BytesIO](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\")(), format=\"mp4\")\nw.add_video_stream(**[pict_config](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\"), encoder=\"h264_nvenc\", encoder_format=\"yuv444p\")\nwith w.open():\n    w.write_video_chunk(0, frame_data) \n```", "```py\n[buffer](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\") = [io.BytesIO](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\")()\nw = StreamWriter([buffer](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\"), format=\"mp4\")\nw.add_video_stream(**[pict_config](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\"), encoder=\"h264_nvenc\", encoder_format=\"yuv444p\", hw_accel=\"cuda:0\")\nwith w.open():\n    w.write_video_chunk(0, frame_data.to([torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")(\"cuda:0\")))\n[buffer](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\").seek(0)\n[video_cuda](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\") = [buffer](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\").read() \n```", "```py\nVideo([video_cuda](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\"), embed=True, mimetype=\"video/mp4\") \n```", "```py\ndef test_encode(data, encoder, width, height, hw_accel=None, **config):\n    assert data.is_cuda\n\n    [buffer](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\") = [io.BytesIO](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\")()\n    s = StreamWriter([buffer](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\"), format=\"mp4\")\n    s.add_video_stream(encoder=encoder, width=width, height=height, hw_accel=hw_accel, **config)\n    with s.open():\n        t0 = [time.monotonic](https://docs.python.org/3/library/time.html#time.monotonic \"time.monotonic\")()\n        if hw_accel is None:\n            data = data.to(\"cpu\")\n        s.write_video_chunk(0, data)\n        elapsed = [time.monotonic](https://docs.python.org/3/library/time.html#time.monotonic \"time.monotonic\")() - t0\n    size = [buffer](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\").tell()\n    fps = len(data) / elapsed\n    print(f\" - Processed {len(data)} frames in {elapsed:.2f} seconds. ({fps:.2f} fps)\")\n    print(f\" - Encoded data size: {size} bytes\")\n    return elapsed, size \n```", "```py\ndef run_tests(height, width, duration=4):\n    # Generate the test data\n    print(f\"Testing resolution: {width}x{height}\")\n    [pict_config](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\") = {\n        \"height\": height,\n        \"width\": width,\n        \"frame_rate\": 30000 / 1001,\n        \"format\": \"yuv444p\",\n    }\n\n    data = get_data(**[pict_config](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\"), duration=duration)\n    data = data.to([torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")(\"cuda:0\"))\n\n    times = []\n    sizes = []\n\n    # Test software encoding\n    encoder_config = {\n        \"encoder\": \"libx264\",\n        \"encoder_format\": \"yuv444p\",\n    }\n    for i, num_threads in enumerate([1, 4, 8]):\n        print(f\"* Software Encoder (num_threads={num_threads})\")\n        time_, size = test_encode(\n            data,\n            encoder_option={\"threads\": str(num_threads)},\n            **[pict_config](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\"),\n            **encoder_config,\n        )\n        times.append(time_)\n        if i == 0:\n            sizes.append(size)\n\n    # Test hardware encoding\n    encoder_config = {\n        \"encoder\": \"h264_nvenc\",\n        \"encoder_format\": \"yuv444p\",\n        \"encoder_option\": {\"gpu\": \"0\"},\n    }\n    for i, hw_accel in enumerate([None, \"cuda\"]):\n        print(f\"* Hardware Encoder {'(CUDA frames)'  if  hw_accel  else  ''}\")\n        time_, size = test_encode(\n            data,\n            **[pict_config](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\"),\n            **encoder_config,\n            hw_accel=hw_accel,\n        )\n        times.append(time_)\n        if i == 0:\n            sizes.append(size)\n    return times, sizes \n```", "```py\n[time_360](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [size_360](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = run_tests(360, 640) \n```", "```py\nTesting resolution: 640x360\n* Software Encoder (num_threads=1)\n - Processed 120 frames in 0.63 seconds. (189.63 fps)\n - Encoded data size: 381331 bytes\n* Software Encoder (num_threads=4)\n - Processed 120 frames in 0.22 seconds. (538.22 fps)\n - Encoded data size: 381307 bytes\n* Software Encoder (num_threads=8)\n - Processed 120 frames in 0.18 seconds. (666.06 fps)\n - Encoded data size: 390689 bytes\n* Hardware Encoder\n - Processed 120 frames in 0.05 seconds. (2270.77 fps)\n - Encoded data size: 1262979 bytes\n* Hardware Encoder (CUDA frames)\n - Processed 120 frames in 0.05 seconds. (2609.17 fps)\n - Encoded data size: 1262979 bytes \n```", "```py\n[time_720](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [size_720](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = run_tests(720, 1280) \n```", "```py\nTesting resolution: 1280x720\n* Software Encoder (num_threads=1)\n - Processed 120 frames in 2.22 seconds. (54.08 fps)\n - Encoded data size: 1335451 bytes\n* Software Encoder (num_threads=4)\n - Processed 120 frames in 0.81 seconds. (147.66 fps)\n - Encoded data size: 1336418 bytes\n* Software Encoder (num_threads=8)\n - Processed 120 frames in 0.69 seconds. (173.27 fps)\n - Encoded data size: 1344063 bytes\n* Hardware Encoder\n - Processed 120 frames in 0.25 seconds. (476.69 fps)\n - Encoded data size: 1358969 bytes\n* Hardware Encoder (CUDA frames)\n - Processed 120 frames in 0.15 seconds. (803.20 fps)\n - Encoded data size: 1358969 bytes \n```", "```py\n[time_1080](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [size_1080](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = run_tests(1080, 1920) \n```", "```py\nTesting resolution: 1920x1080\n* Software Encoder (num_threads=1)\n - Processed 120 frames in 4.60 seconds. (26.10 fps)\n - Encoded data size: 2678241 bytes\n* Software Encoder (num_threads=4)\n - Processed 120 frames in 1.66 seconds. (72.29 fps)\n - Encoded data size: 2682028 bytes\n* Software Encoder (num_threads=8)\n - Processed 120 frames in 1.54 seconds. (77.93 fps)\n - Encoded data size: 2685086 bytes\n* Hardware Encoder\n - Processed 120 frames in 0.55 seconds. (217.20 fps)\n - Encoded data size: 1705900 bytes\n* Hardware Encoder (CUDA frames)\n - Processed 120 frames in 0.32 seconds. (371.21 fps)\n - Encoded data size: 1705900 bytes \n```", "```py\ndef plot():\n    fig, axes = plt.subplots(2, 1, sharex=True, figsize=[9.6, 7.2])\n\n    for items in zip([time_360](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [time_720](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [time_1080](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), \"ov^X+\"):\n        axes[0].plot(items[:-1], marker=items[-1])\n    axes[0].grid(axis=\"both\")\n    axes[0].set_xticks([0, 1, 2], [\"360p\", \"720p\", \"1080p\"], visible=True)\n    axes[0].tick_params(labeltop=False)\n    axes[0].legend(\n        [\n            \"Software Encoding (threads=1)\",\n            \"Software Encoding (threads=4)\",\n            \"Software Encoding (threads=8)\",\n            \"Hardware Encoding (CPU Tensor)\",\n            \"Hardware Encoding (CUDA Tensor)\",\n        ]\n    )\n    axes[0].set_title(\"Time to encode videos with different resolutions\")\n    axes[0].set_ylabel(\"Time [s]\")\n\n    for items in zip([size_360](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [size_720](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [size_1080](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), \"v^\"):\n        axes[1].plot(items[:-1], marker=items[-1])\n    axes[1].grid(axis=\"both\")\n    axes[1].set_xticks([0, 1, 2], [\"360p\", \"720p\", \"1080p\"])\n    axes[1].set_ylabel(\"The encoded size [bytes]\")\n    axes[1].set_title(\"The size of encoded videos\")\n    axes[1].legend(\n        [\n            \"Software Encoding\",\n            \"Hardware Encoding\",\n        ]\n    )\n\n    plt.tight_layout()\n\nplot() \n```"]