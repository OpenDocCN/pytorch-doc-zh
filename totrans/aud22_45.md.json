["```py\nimport torch\nimport torchaudio\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\n2.2.0\n2.2.0 \n```", "```py\ntry:\n    from pesq import pesq\n    from pystoi import stoi\n    from torchaudio.pipelines import SQUIM_OBJECTIVE, SQUIM_SUBJECTIVE\nexcept ImportError:\n    try:\n        import google.colab  # noqa: F401\n\n        print(\n  \"\"\"\n To enable running this notebook in Google Colab, install nightly\n torch and torchaudio builds by adding the following code block to the top\n of the notebook before running it:\n !pip3 uninstall -y torch torchvision torchaudio\n !pip3 install --pre torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu\n !pip3 install pesq\n !pip3 install pystoi\n \"\"\"\n        )\n    except Exception:\n        pass\n    raise\n\nimport matplotlib.pyplot as plt \n```", "```py\nimport torchaudio.functional as F\nfrom IPython.display import Audio\nfrom torchaudio.utils import download_asset\n\ndef si_snr(estimate, reference, epsilon=1e-8):\n    estimate = estimate - estimate.mean()\n    reference = reference - reference.mean()\n    reference_pow = reference.pow(2).mean(axis=1, keepdim=True)\n    mix_pow = (estimate * reference).mean(axis=1, keepdim=True)\n    scale = mix_pow / (reference_pow + epsilon)\n\n    reference = scale * reference\n    error = estimate - reference\n\n    reference_pow = reference.pow(2)\n    error_pow = error.pow(2)\n\n    reference_pow = reference_pow.mean(axis=1)\n    error_pow = error_pow.mean(axis=1)\n\n    si_snr = 10 * [torch.log10](https://pytorch.org/docs/stable/generated/torch.log10.html#torch.log10 \"torch.log10\")(reference_pow) - 10 * [torch.log10](https://pytorch.org/docs/stable/generated/torch.log10.html#torch.log10 \"torch.log10\")(error_pow)\n    return si_snr.item()\n\ndef plot(waveform, title, sample_rate=16000):\n    wav_numpy = waveform.numpy()\n\n    sample_size = waveform.shape[1]\n    time_axis = [torch.arange](https://pytorch.org/docs/stable/generated/torch.arange.html#torch.arange \"torch.arange\")(0, sample_size) / sample_rate\n\n    figure, axes = plt.subplots(2, 1)\n    axes[0].plot(time_axis, wav_numpy[0], linewidth=1)\n    axes[0].grid(True)\n    axes[1].specgram(wav_numpy[0], Fs=sample_rate)\n    figure.suptitle(title) \n```", "```py\n[SAMPLE_SPEECH](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\")\n[SAMPLE_NOISE](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/Lab41-SRI-VOiCES-rm1-babb-mc01-stu-clo.wav\") \n```", "```py\n 0%|          | 0.00/156k [00:00<?, ?B/s]\n100%|##########| 156k/156k [00:00<00:00, 1.83MB/s] \n```", "```py\n[WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE_SPEECH](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([SAMPLE_SPEECH](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n[WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE_NOISE](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([SAMPLE_NOISE](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n[WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:1, :] \n```", "```py\nif [SAMPLE_RATE_SPEECH](https://docs.python.org/3/library/functions.html#int \"builtins.int\") != 16000:\n    [WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = F.resample([WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE_SPEECH](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), 16000)\n\nif [SAMPLE_RATE_NOISE](https://docs.python.org/3/library/functions.html#int \"builtins.int\") != 16000:\n    [WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = F.resample([WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE_NOISE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), 16000) \n```", "```py\nif [WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape[1] < [WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape[1]:\n    [WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[:, : [WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape[1]]\nelse:\n    [WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[:, : [WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape[1]] \n```", "```py\nAudio([WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()[0], rate=16000) \n```", "```py\nAudio([WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()[0], rate=16000) \n```", "```py\n[snr_dbs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([20, -5])\n[WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = F.add_noise([WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [snr_dbs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nAudio([WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()[0], rate=16000) \n```", "```py\nAudio([WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()[1], rate=16000) \n```", "```py\nplot([WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), \"Clean Speech\") \n```", "```py\nplot([WAVEFORM_NOISE](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), \"Noise\") \n```", "```py\nplot([WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:1], f\"Distorted Speech with {[snr_dbs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}dB SNR\") \n```", "```py\nplot([WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1:2], f\"Distorted Speech with {[snr_dbs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1]}dB SNR\") \n```", "```py\nobjective_model = SQUIM_OBJECTIVE.get_model() \n```", "```py\nDownloading: \"https://download.pytorch.org/torchaudio/models/squim_objective_dns2020.pth\" to /root/.cache/torch/hub/checkpoints/squim_objective_dns2020.pth\n\n  0%|          | 0.00/28.2M [00:00<?, ?B/s]\n 37%|###6      | 10.4M/28.2M [00:00<00:00, 109MB/s]\n 73%|#######3  | 20.7M/28.2M [00:00<00:00, 107MB/s]\n100%|##########| 28.2M/28.2M [00:00<00:00, 126MB/s] \n```", "```py\n[stoi_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [pesq_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [si_sdr_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = objective_model([WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:1, :])\nprint(f\"Estimated metrics for distorted speech at {[snr_dbs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}dB are\\n\")\nprint(f\"STOI: {[stoi_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}\")\nprint(f\"PESQ: {[pesq_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}\")\nprint(f\"SI-SDR: {[si_sdr_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}\\n\")\n\n[pesq_ref](https://docs.python.org/3/library/functions.html#float \"builtins.float\") = pesq(16000, [WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0].numpy(), [WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0].numpy(), mode=\"wb\")\n[stoi_ref](https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.float64 \"numpy.float64\") = stoi([WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0].numpy(), [WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0].numpy(), 16000, extended=False)\n[si_sdr_ref](https://docs.python.org/3/library/functions.html#float \"builtins.float\") = si_snr([WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:1], [WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint(f\"Reference metrics for distorted speech at {[snr_dbs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}dB are\\n\")\nprint(f\"STOI: {[stoi_ref](https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.float64 \"numpy.float64\")}\")\nprint(f\"PESQ: {[pesq_ref](https://docs.python.org/3/library/functions.html#float \"builtins.float\")}\")\nprint(f\"SI-SDR: {[si_sdr_ref](https://docs.python.org/3/library/functions.html#float \"builtins.float\")}\") \n```", "```py\nEstimated metrics for distorted speech at 20dB are\n\nSTOI: 0.9610356092453003\nPESQ: 2.7801530361175537\nSI-SDR: 20.692630767822266\n\nReference metrics for distorted speech at 20dB are\n\nSTOI: 0.9670831113894452\nPESQ: 2.7961528301239014\nSI-SDR: 19.998966217041016 \n```", "```py\n[stoi_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [pesq_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [si_sdr_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = objective_model([WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1:2, :])\nprint(f\"Estimated metrics for distorted speech at {[snr_dbs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1]}dB are\\n\")\nprint(f\"STOI: {[stoi_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}\")\nprint(f\"PESQ: {[pesq_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}\")\nprint(f\"SI-SDR: {[si_sdr_hyp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}\\n\")\n\n[pesq_ref](https://docs.python.org/3/library/functions.html#float \"builtins.float\") = pesq(16000, [WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0].numpy(), [WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1].numpy(), mode=\"wb\")\n[stoi_ref](https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.float64 \"numpy.float64\") = stoi([WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0].numpy(), [WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1].numpy(), 16000, extended=False)\n[si_sdr_ref](https://docs.python.org/3/library/functions.html#float \"builtins.float\") = si_snr([WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1:2], [WAVEFORM_SPEECH](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint(f\"Reference metrics for distorted speech at {[snr_dbs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1]}dB are\\n\")\nprint(f\"STOI: {[stoi_ref](https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.float64 \"numpy.float64\")}\")\nprint(f\"PESQ: {[pesq_ref](https://docs.python.org/3/library/functions.html#float \"builtins.float\")}\")\nprint(f\"SI-SDR: {[si_sdr_ref](https://docs.python.org/3/library/functions.html#float \"builtins.float\")}\") \n```", "```py\nEstimated metrics for distorted speech at -5dB are\n\nSTOI: 0.5743248462677002\nPESQ: 1.1112866401672363\nSI-SDR: -6.248741149902344\n\nReference metrics for distorted speech at -5dB are\n\nSTOI: 0.5848137931588825\nPESQ: 1.0803768634796143\nSI-SDR: -5.016279220581055 \n```", "```py\nsubjective_model = SQUIM_SUBJECTIVE.get_model() \n```", "```py\nDownloading: \"https://download.pytorch.org/torchaudio/models/squim_subjective_bvcc_daps.pth\" to /root/.cache/torch/hub/checkpoints/squim_subjective_bvcc_daps.pth\n\n  0%|          | 0.00/360M [00:00<?, ?B/s]\n 12%|#1        | 41.8M/360M [00:00<00:00, 438MB/s]\n 23%|##3       | 83.5M/360M [00:00<00:00, 354MB/s]\n 33%|###2      | 118M/360M [00:00<00:00, 346MB/s]\n 44%|####4     | 160M/360M [00:00<00:00, 378MB/s]\n 57%|#####7    | 206M/360M [00:00<00:00, 415MB/s]\n 68%|######8   | 246M/360M [00:00<00:00, 412MB/s]\n 79%|#######9  | 286M/360M [00:00<00:00, 397MB/s]\n 90%|######### | 324M/360M [00:00<00:00, 395MB/s]\n100%|##########| 360M/360M [00:01<00:00, 372MB/s] \n```", "```py\n[NMR_SPEECH](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/ctc-decoding/1688-142285-0007.wav\")\n\n[WAVEFORM_NMR](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE_NMR](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([NMR_SPEECH](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\nif [SAMPLE_RATE_NMR](https://docs.python.org/3/library/functions.html#int \"builtins.int\") != 16000:\n    [WAVEFORM_NMR](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = F.resample([WAVEFORM_NMR](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE_NMR](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), 16000) \n```", "```py\n[mos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = subjective_model([WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:1, :], [WAVEFORM_NMR](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint(f\"Estimated MOS for distorted speech at {[snr_dbs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}dB is MOS: {[mos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}\") \n```", "```py\nEstimated MOS for distorted speech at 20dB is MOS: 4.309268474578857 \n```", "```py\n[mos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = subjective_model([WAVEFORM_DISTORTED](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1:2, :], [WAVEFORM_NMR](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint(f\"Estimated MOS for distorted speech at {[snr_dbs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1]}dB is MOS: {[mos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]}\") \n```", "```py\nEstimated MOS for distorted speech at -5dB is MOS: 3.2918038368225098 \n```"]