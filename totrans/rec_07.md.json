["```py\nclass torchrec.fx.tracer.Tracer(leaf_modules: Optional[List[str]] = None)\u00b6\n```", "```py\ncreate_arg(a: Any) \u2192 Optional[Union[Tuple[Any, ...], List[Any], Dict[str, Any], slice, range, Node, str, int, float, bool, complex, dtype, Tensor, device, memory_format, layout, OpOverload]]\u00b6\n```", "```py\ngraph: Graph\u00b6\n```", "```py\nis_leaf_module(m: Module, module_qualified_name: str) \u2192 bool\u00b6\n```", "```py\nmodule_stack: OrderedDict[str, Tuple[str, Any]]\u00b6\n```", "```py\nnode_name_to_scope: Dict[str, Tuple[str, type]]\u00b6\n```", "```py\npath_of_module(mod: Module) \u2192 str\u00b6\n```", "```py\nscope: Scope\u00b6\n```", "```py\ntrace(root: Union[Module, Callable[[...], Any]], concrete_args: Optional[Dict[str, Any]] = None) \u2192 Graph\u00b6\n```", "```py\ntorchrec.fx.tracer.is_fx_tracing() \u2192 bool\u00b6\n```", "```py\ntorchrec.fx.tracer.symbolic_trace(root: Union[Module, Callable], concrete_args: Optional[Dict[str, Any]] = None, leaf_modules: Optional[List[str]] = None) \u2192 GraphModule\u00b6\n```"]