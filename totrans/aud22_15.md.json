["```py\nimport torch\nimport torchaudio\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\n2.2.0\n2.2.0 \n```", "```py\n!pip install boto3 \n```", "```py\nimport io\nimport os\nimport tarfile\nimport tempfile\n\nimport boto3\nimport matplotlib.pyplot as plt\nimport requests\nfrom botocore import UNSIGNED\nfrom botocore.config import Config\nfrom IPython.display import Audio\nfrom torchaudio.utils import download_asset\n\n[SAMPLE_GSM](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/steam-train-whistle-daniel_simon.gsm\")\n[SAMPLE_WAV](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\")\n[SAMPLE_WAV_8000](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042-8000hz.wav\")\n\ndef _hide_seek(obj):\n    class _wrapper:\n        def __init__(self, obj):\n            self.obj = obj\n\n        def read(self, n):\n            return self.obj.read(n)\n\n    return _wrapper(obj) \n```", "```py\n 0%|          | 0.00/7.99k [00:00<?, ?B/s]\n100%|##########| 7.99k/7.99k [00:00<00:00, 16.3MB/s]\n\n  0%|          | 0.00/53.2k [00:00<?, ?B/s]\n100%|##########| 53.2k/53.2k [00:00<00:00, 49.5MB/s] \n```", "```py\nmetadata = torchaudio.info([SAMPLE_WAV](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\nprint(metadata) \n```", "```py\nAudioMetaData(sample_rate=16000, num_frames=54400, num_channels=1, bits_per_sample=16, encoding=PCM_S) \n```", "```py\nmetadata = torchaudio.info([SAMPLE_GSM](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\nprint(metadata) \n```", "```py\nAudioMetaData(sample_rate=8000, num_frames=39680, num_channels=1, bits_per_sample=0, encoding=GSM) \n```", "```py\n[url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = \"https://download.pytorch.org/torchaudio/tutorial-assets/steam-train-whistle-daniel_simon.wav\"\nwith requests.get([url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), stream=True) as response:\n    metadata = torchaudio.info(_hide_seek(response.raw))\nprint(metadata) \n```", "```py\nAudioMetaData(sample_rate=44100, num_frames=109368, num_channels=2, bits_per_sample=16, encoding=PCM_S) \n```", "```py\n[waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([SAMPLE_WAV](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\ndef plot_waveform([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")):\n    [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()\n\n    num_channels, [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape\n    time_axis = [torch.arange](https://pytorch.org/docs/stable/generated/torch.arange.html#torch.arange \"torch.arange\")(0, [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) / [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")\n\n    figure, axes = plt.subplots(num_channels, 1)\n    if num_channels == 1:\n        axes = [axes]\n    for c in range(num_channels):\n        axes[c].plot(time_axis, [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[c], linewidth=1)\n        axes[c].grid(True)\n        if num_channels > 1:\n            axes[c].set_ylabel(f\"Channel {c+1}\")\n    figure.suptitle(\"waveform\") \n```", "```py\nplot_waveform([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\ndef plot_specgram([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), title=\"Spectrogram\"):\n    [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()\n\n    num_channels, [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape\n\n    figure, axes = plt.subplots(num_channels, 1)\n    if num_channels == 1:\n        axes = [axes]\n    for c in range(num_channels):\n        axes[c].specgram([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[c], Fs=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n        if num_channels > 1:\n            axes[c].set_ylabel(f\"Channel {c+1}\")\n    figure.suptitle(title) \n```", "```py\nplot_specgram([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\nAudio([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()[0], rate=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\n# Load audio data as HTTP request\n[url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = \"https://download.pytorch.org/torchaudio/tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\"\nwith requests.get([url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), stream=True) as response:\n    [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load(_hide_seek(response.raw))\nplot_specgram([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), title=\"HTTP datasource\") \n```", "```py\n# Load audio from tar file\n[tar_path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/VOiCES_devkit.tar.gz\")\n[tar_item](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = \"VOiCES_devkit/source-16k/train/sp0307/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\"\nwith [tarfile.open](https://docs.python.org/3/library/tarfile.html#tarfile.open \"tarfile.open\")([tar_path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), mode=\"r\") as [tarfile_](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile \"tarfile.TarFile\"):\n    fileobj = [tarfile_.extractfile](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractfile \"tarfile.TarFile.extractfile\")([tar_item](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n    [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load(fileobj)\nplot_specgram([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), title=\"TAR file\") \n```", "```py\n 0%|          | 0.00/110k [00:00<?, ?B/s]\n100%|##########| 110k/110k [00:00<00:00, 38.3MB/s] \n```", "```py\n# Load audio from S3\n[bucket](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = \"pytorch-tutorial-assets\"\n[key](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = \"VOiCES_devkit/source-16k/train/sp0307/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\"\nclient = boto3.client(\"s3\", config=Config(signature_version=UNSIGNED))\nresponse = client.get_object(Bucket=[bucket](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), Key=[key](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n[waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load(_hide_seek(response[\"Body\"]))\nplot_specgram([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), title=\"From S3\") \n```", "```py\n# Illustration of two different decoding methods.\n# The first one will fetch all the data and decode them, while\n# the second one will stop fetching data once it completes decoding.\n# The resulting waveforms are identical.\n\n[frame_offset](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 16000, 16000  # Fetch and decode the 1 - 2 seconds\n\n[url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = \"https://download.pytorch.org/torchaudio/tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\"\nprint(\"Fetching all the data...\")\nwith requests.get([url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), stream=True) as response:\n    [waveform1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate1](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load(_hide_seek(response.raw))\n    [waveform1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [waveform1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[:, [frame_offset](https://docs.python.org/3/library/functions.html#int \"builtins.int\") : [frame_offset](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\")]\n    print(f\" - Fetched {[response.raw.tell](https://docs.python.org/3/library/io.html#io.IOBase.tell \"io.IOBase.tell\")()} bytes\")\n\nprint(\"Fetching until the requested frames are available...\")\nwith requests.get([url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), stream=True) as response:\n    [waveform2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate2](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load(\n        _hide_seek(response.raw), [frame_offset](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[frame_offset](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\")\n    )\n    print(f\" - Fetched {[response.raw.tell](https://docs.python.org/3/library/io.html#io.IOBase.tell \"io.IOBase.tell\")()} bytes\")\n\nprint(\"Checking the resulting waveform ... \", end=\"\")\nassert ([waveform1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") == [waveform2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")).all()\nprint(\"matched!\") \n```", "```py\nFetching all the data...\n - Fetched 108844 bytes\nFetching until the requested frames are available...\n - Fetched 108844 bytes\nChecking the resulting waveform ... matched! \n```", "```py\n[waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([SAMPLE_WAV](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\ndef inspect_file([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")):\n    print(\"-\" * 10)\n    print(\"Source:\", [path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n    print(\"-\" * 10)\n    print(f\" - File size: {[os.path.getsize](https://docs.python.org/3/library/os.path.html#os.path.getsize \"os.path.getsize\")([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))} bytes\")\n    print(f\" - {torchaudio.info([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))}\")\n    print() \n```", "```py\nwith [tempfile.TemporaryDirectory](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory \"tempfile.TemporaryDirectory\")() as [tempdir](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"):\n    [path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = f\"{[tempdir](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}/save_example_default.wav\"\n    torchaudio.save([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n    inspect_file([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\n----------\nSource: /tmp/tmp5skk9fkc/save_example_default.wav\n----------\n - File size: 108878 bytes\n - AudioMetaData(sample_rate=16000, num_frames=54400, num_channels=1, bits_per_sample=16, encoding=PCM_S) \n```", "```py\nwith [tempfile.TemporaryDirectory](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory \"tempfile.TemporaryDirectory\")() as [tempdir](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"):\n    [path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = f\"{[tempdir](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}/save_example_PCM_S16.wav\"\n    torchaudio.save([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), encoding=\"PCM_S\", bits_per_sample=16)\n    inspect_file([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\n----------\nSource: /tmp/tmpdhv6n_4l/save_example_PCM_S16.wav\n----------\n - File size: 108878 bytes\n - AudioMetaData(sample_rate=16000, num_frames=54400, num_channels=1, bits_per_sample=16, encoding=PCM_S) \n```", "```py\n[formats](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = [\n    \"flac\",\n    # \"vorbis\",\n    # \"sph\",\n    # \"amb\",\n    # \"amr-nb\",\n    # \"gsm\",\n] \n```", "```py\n[waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([SAMPLE_WAV_8000](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\nwith [tempfile.TemporaryDirectory](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory \"tempfile.TemporaryDirectory\")() as [tempdir](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"):\n    for format in [formats](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"):\n        [path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = f\"{[tempdir](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}/save_example.{format}\"\n        torchaudio.save([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), format=format)\n        inspect_file([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\n----------\nSource: /tmp/tmpcl4st53v/save_example.flac\n----------\n - File size: 45262 bytes\n - AudioMetaData(sample_rate=8000, num_frames=27200, num_channels=1, bits_per_sample=16, encoding=FLAC) \n```", "```py\n[waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([SAMPLE_WAV](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n\n# Saving to bytes buffer\n[buffer_](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\") = [io.BytesIO](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\")()\ntorchaudio.save([buffer_](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\"), [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), format=\"wav\")\n\n[buffer_](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\").seek(0)\nprint([buffer_](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\").read(16)) \n```", "```py\nb'RIFFF\\xa9\\x01\\x00WAVEfmt ' \n```"]