["```py\nffmpeg -muxers\nffmpeg -encoders\nffmpeg -devices\nffmpeg -protocols \n```", "```py\nimport torch\nimport torchaudio\n\nprint(torch.__version__)\nprint(torchaudio.__version__)\n\nfrom torchaudio.io import StreamWriter \n```", "```py\nfrom torchaudio.utils import download_asset\n\nAUDIO_PATH = download_asset(\"tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\")\nVIDEO_PATH = download_asset(\n    \"tutorial-assets/stream-api/NASAs_Most_Scientifically_Complex_Space_Observatory_Requires_Precision-MP4_small.mp4\"\n) \n```", "```py\n$ ffmpeg  -devices\n...\nDevices:\n D. = Demuxing supported\n .E = Muxing supported\n --\n E audiotoolbox    AudioToolbox output device\n D  avfoundation    AVFoundation input device\n D  lavfi           Libavfilter virtual input device\n E opengl          OpenGL output\n E sdl,sdl2        SDL2 output device \n```", "```py\n# Prepare sample audio\nwaveform, sample_rate = torchaudio.load(AUDIO_PATH, channels_first=False, normalize=False)\nnum_frames, num_channels = waveform.shape \n```", "```py\n# Configure StreamWriter to write to speaker device\ns = StreamWriter(dst=\"-\", format=\"audiotoolbox\")\ns.add_audio_stream(sample_rate, num_channels, format=\"s16\") \n```", "```py\n# Write audio to the device\nwith s.open():\n    for i in range(0, num_frames, 256):\n        s.write_audio_chunk(0, waveform[i : i + 256]) \n```", "```py\nwith s.open():\n    s.write_audio_chunk(0, waveform) \n```", "```py\n# note:\n#  SDL device does not support specifying frame rate, and it has to\n#  match the refresh rate of display.\nframe_rate = 120\nwidth, height = 640, 360 \n```", "```py\nrunning = True\n\ndef video_streamer(path, frames_per_chunk):\n    import queue\n    import threading\n\n    from torchaudio.io import StreamReader\n\n    q = [queue.Queue](https://docs.python.org/3/library/queue.html#queue.Queue \"queue.Queue\")()\n\n    # Streaming process that runs in background thread\n    def _streamer():\n        streamer = StreamReader(path)\n        streamer.add_basic_video_stream(\n            frames_per_chunk, format=\"rgb24\", frame_rate=frame_rate, width=width, height=height\n        )\n        for (chunk_,) in streamer.stream():\n            q.put(chunk_)\n            if not running:\n                break\n\n    # Start the background thread and fetch chunks\n    t = [threading.Thread](https://docs.python.org/3/library/threading.html#threading.Thread \"threading.Thread\")(target=_streamer)\n    t.start()\n    while running:\n        try:\n            yield q.get()\n        except [queue.Empty](https://docs.python.org/3/library/queue.html#queue.Empty \"queue.Empty\"):\n            break\n    t.join() \n```", "```py\n# Set output device to SDL\ns = StreamWriter(\"-\", format=\"sdl\")\n\n# Configure video stream (RGB24)\ns.add_video_stream(frame_rate, width, height, format=\"rgb24\", encoder_format=\"rgb24\")\n\n# Play the video\nwith s.open():\n    for chunk in video_streamer(VIDEO_PATH, frames_per_chunk=256):\n        try:\n            s.write_video_chunk(0, chunk)\n        except RuntimeError:\n            running = False\n            break \n```", "```py\ns = StreamWriter(dst=\"rtmp://localhost:1935/live/app\", format=\"flv\")\ns.add_audio_stream(sample_rate=sample_rate, num_channels=num_channels, encoder=\"aac\")\ns.add_video_stream(frame_rate=frame_rate, width=width, height=height)\n\nwith s.open(option={\"listen\": \"1\"}):\n    for video_chunk, audio_chunk in generator():\n        s.write_audio_chunk(0, audio_chunk)\n        s.write_video_chunk(1, video_chunk) \n```", "```py\ns = StreamWriter(dst=\"udp://localhost:48550\", format=\"mpegts\")\ns.add_audio_stream(sample_rate=sample_rate, num_channels=num_channels, encoder=\"aac\")\ns.add_video_stream(frame_rate=frame_rate, width=width, height=height)\n\nwith s.open():\n    for video_chunk, audio_chunk in generator():\n        s.write_audio_chunk(0, audio_chunk)\n        s.write_video_chunk(1, video_chunk) \n```"]