- en: torchaudio.functional
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: torchaudio.functional
- en: 原文：[https://pytorch.org/audio/stable/functional.html](https://pytorch.org/audio/stable/functional.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/audio/stable/functional.html](https://pytorch.org/audio/stable/functional.html)
- en: Functions to perform common audio operations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 执行常见音频操作的函数。
- en: Utility[](#utility "Permalink to this heading")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实用工具[](#utility "跳转到此标题")
- en: '| [`amplitude_to_DB`](generated/torchaudio.functional.amplitude_to_DB.html#torchaudio.functional.amplitude_to_DB
    "torchaudio.functional.amplitude_to_DB") | Turn a spectrogram from the power/amplitude
    scale to the decibel scale. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`amplitude_to_DB`](generated/torchaudio.functional.amplitude_to_DB.html#torchaudio.functional.amplitude_to_DB
    "torchaudio.functional.amplitude_to_DB") | 将频谱图从功率/幅度标度转换为分贝标度。 |'
- en: '| [`DB_to_amplitude`](generated/torchaudio.functional.DB_to_amplitude.html#torchaudio.functional.DB_to_amplitude
    "torchaudio.functional.DB_to_amplitude") | Turn a tensor from the decibel scale
    to the power/amplitude scale. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`DB_to_amplitude`](generated/torchaudio.functional.DB_to_amplitude.html#torchaudio.functional.DB_to_amplitude
    "torchaudio.functional.DB_to_amplitude") | 将张量从分贝标度转换为功率/幅度标度。 |'
- en: '| [`melscale_fbanks`](generated/torchaudio.functional.melscale_fbanks.html#torchaudio.functional.melscale_fbanks
    "torchaudio.functional.melscale_fbanks") | Create a frequency bin conversion matrix.
    |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`melscale_fbanks`](generated/torchaudio.functional.melscale_fbanks.html#torchaudio.functional.melscale_fbanks
    "torchaudio.functional.melscale_fbanks") | 创建一个频率箱转换矩阵。 |'
- en: '| [`linear_fbanks`](generated/torchaudio.functional.linear_fbanks.html#torchaudio.functional.linear_fbanks
    "torchaudio.functional.linear_fbanks") | Creates a linear triangular filterbank.
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`linear_fbanks`](generated/torchaudio.functional.linear_fbanks.html#torchaudio.functional.linear_fbanks
    "torchaudio.functional.linear_fbanks") | 创建一个线性三角滤波器组。 |'
- en: '| [`create_dct`](generated/torchaudio.functional.create_dct.html#torchaudio.functional.create_dct
    "torchaudio.functional.create_dct") | Create a DCT transformation matrix with
    shape (`n_mels`, `n_mfcc`), normalized depending on norm. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`create_dct`](generated/torchaudio.functional.create_dct.html#torchaudio.functional.create_dct
    "torchaudio.functional.create_dct") | 创建一个形状为(`n_mels`, `n_mfcc`)的DCT变换矩阵，根据norm进行归一化。
    |'
- en: '| [`mask_along_axis`](generated/torchaudio.functional.mask_along_axis.html#torchaudio.functional.mask_along_axis
    "torchaudio.functional.mask_along_axis") | Apply a mask along `axis`. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`mask_along_axis`](generated/torchaudio.functional.mask_along_axis.html#torchaudio.functional.mask_along_axis
    "torchaudio.functional.mask_along_axis") | 沿着`axis`应用掩码。 |'
- en: '| [`mask_along_axis_iid`](generated/torchaudio.functional.mask_along_axis_iid.html#torchaudio.functional.mask_along_axis_iid
    "torchaudio.functional.mask_along_axis_iid") | Apply a mask along `axis`. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`mask_along_axis_iid`](generated/torchaudio.functional.mask_along_axis_iid.html#torchaudio.functional.mask_along_axis_iid
    "torchaudio.functional.mask_along_axis_iid") | 沿着`axis`应用掩码。 |'
- en: '| [`mu_law_encoding`](generated/torchaudio.functional.mu_law_encoding.html#torchaudio.functional.mu_law_encoding
    "torchaudio.functional.mu_law_encoding") | Encode signal based on mu-law companding.
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`mu_law_encoding`](generated/torchaudio.functional.mu_law_encoding.html#torchaudio.functional.mu_law_encoding
    "torchaudio.functional.mu_law_encoding") | 基于mu-law压缩编码信号。 |'
- en: '| [`mu_law_decoding`](generated/torchaudio.functional.mu_law_decoding.html#torchaudio.functional.mu_law_decoding
    "torchaudio.functional.mu_law_decoding") | Decode mu-law encoded signal. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`mu_law_decoding`](generated/torchaudio.functional.mu_law_decoding.html#torchaudio.functional.mu_law_decoding
    "torchaudio.functional.mu_law_decoding") | 解码mu-law编码信号。 |'
- en: '| [`apply_codec`](generated/torchaudio.functional.apply_codec.html#torchaudio.functional.apply_codec
    "torchaudio.functional.apply_codec") | DEPRECATED: Apply codecs as a form of augmentation.
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`apply_codec`](generated/torchaudio.functional.apply_codec.html#torchaudio.functional.apply_codec
    "torchaudio.functional.apply_codec") | 已弃用：将编解码器应用为一种增强形式。 |'
- en: '| [`resample`](generated/torchaudio.functional.resample.html#torchaudio.functional.resample
    "torchaudio.functional.resample") | Resamples the waveform at the new frequency
    using bandlimited interpolation. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`resample`](generated/torchaudio.functional.resample.html#torchaudio.functional.resample
    "torchaudio.functional.resample") | 使用带限插值将波形重新采样到新的频率。 |'
- en: '| [`loudness`](generated/torchaudio.functional.loudness.html#torchaudio.functional.loudness
    "torchaudio.functional.loudness") | Measure audio loudness according to the ITU-R
    BS.1770-4 recommendation. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`loudness`](generated/torchaudio.functional.loudness.html#torchaudio.functional.loudness
    "torchaudio.functional.loudness") | 根据ITU-R BS.1770-4推荐测量音频响度。 |'
- en: '| [`convolve`](generated/torchaudio.functional.convolve.html#torchaudio.functional.convolve
    "torchaudio.functional.convolve") | Convolves inputs along their last dimension
    using the direct method. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`convolve`](generated/torchaudio.functional.convolve.html#torchaudio.functional.convolve
    "torchaudio.functional.convolve") | 使用直接方法沿着它们的最后一个维度对输入进行卷积。 |'
- en: '| [`fftconvolve`](generated/torchaudio.functional.fftconvolve.html#torchaudio.functional.fftconvolve
    "torchaudio.functional.fftconvolve") | Convolves inputs along their last dimension
    using FFT. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`fftconvolve`](generated/torchaudio.functional.fftconvolve.html#torchaudio.functional.fftconvolve
    "torchaudio.functional.fftconvolve") | 使用FFT沿着它们的最后一个维度对输入进行卷积。 |'
- en: '| [`add_noise`](generated/torchaudio.functional.add_noise.html#torchaudio.functional.add_noise
    "torchaudio.functional.add_noise") | Scales and adds noise to waveform per signal-to-noise
    ratio. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`add_noise`](generated/torchaudio.functional.add_noise.html#torchaudio.functional.add_noise
    "torchaudio.functional.add_noise") | 根据信噪比对波形进行缩放和添加噪音。 |'
- en: '| [`preemphasis`](generated/torchaudio.functional.preemphasis.html#torchaudio.functional.preemphasis
    "torchaudio.functional.preemphasis") | Pre-emphasizes a waveform along its last
    dimension, i.e. for each signal \(x\) in `waveform`, computes output \(y\) as.
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`preemphasis`](generated/torchaudio.functional.preemphasis.html#torchaudio.functional.preemphasis
    "torchaudio.functional.preemphasis") | 预强调波形的最后一个维度，即对于`waveform`中的每个信号\(x\)，计算输出\(y\)为。
    |'
- en: '| [`deemphasis`](generated/torchaudio.functional.deemphasis.html#torchaudio.functional.deemphasis
    "torchaudio.functional.deemphasis") | De-emphasizes a waveform along its last
    dimension. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`deemphasis`](generated/torchaudio.functional.deemphasis.html#torchaudio.functional.deemphasis
    "torchaudio.functional.deemphasis") | 沿着其最后一个维度减弱波形。 |'
- en: '| [`speed`](generated/torchaudio.functional.speed.html#torchaudio.functional.speed
    "torchaudio.functional.speed") | Adjusts waveform speed. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`speed`](generated/torchaudio.functional.speed.html#torchaudio.functional.speed
    "torchaudio.functional.speed") | 调整波形速度。 |'
- en: '| [`frechet_distance`](generated/torchaudio.functional.frechet_distance.html#torchaudio.functional.frechet_distance
    "torchaudio.functional.frechet_distance") | Computes the Fréchet distance between
    two multivariate normal distributions [[Dowson and Landau, 1982](references.html#id72
    "DC Dowson and BV666017 Landau. The fréchet distance between multivariate normal
    distributions. Journal of multivariate analysis, 12(3):450–455, 1982.")]. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`frechet_distance`](generated/torchaudio.functional.frechet_distance.html#torchaudio.functional.frechet_distance
    "torchaudio.functional.frechet_distance") | 计算两个多元正态分布之间的Fréchet距离[[Dowson and
    Landau, 1982](references.html#id72 "DC Dowson and BV666017 Landau. The fréchet
    distance between multivariate normal distributions. Journal of multivariate analysis,
    12(3):450–455, 1982.")]。 |'
- en: Forced Alignment[](#forced-alignment "Permalink to this heading")
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Forced Alignment[](#forced-alignment "Permalink to this heading")
- en: '| [`forced_align`](generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align
    "torchaudio.functional.forced_align") | Align a CTC label sequence to an emission.
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`forced_align`](generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align
    "torchaudio.functional.forced_align") | 将CTC标签序列与发射对齐。 |'
- en: '| [`merge_tokens`](generated/torchaudio.functional.merge_tokens.html#torchaudio.functional.merge_tokens
    "torchaudio.functional.merge_tokens") | Removes repeated tokens and blank tokens
    from the given CTC token sequence. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`merge_tokens`](generated/torchaudio.functional.merge_tokens.html#torchaudio.functional.merge_tokens
    "torchaudio.functional.merge_tokens") | 从给定的CTC标记序列中删除重复标记和空白标记。 |'
- en: '| [`TokenSpan`](generated/torchaudio.functional.TokenSpan.html#torchaudio.functional.TokenSpan
    "torchaudio.functional.TokenSpan") | Token with time stamps and score. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`TokenSpan`](generated/torchaudio.functional.TokenSpan.html#torchaudio.functional.TokenSpan
    "torchaudio.functional.TokenSpan") | 具有时间戳和分数的标记。 |'
- en: Filtering[](#filtering "Permalink to this heading")
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Filtering[](#filtering "Permalink to this heading")
- en: '| [`allpass_biquad`](generated/torchaudio.functional.allpass_biquad.html#torchaudio.functional.allpass_biquad
    "torchaudio.functional.allpass_biquad") | Design two-pole all-pass filter. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`allpass_biquad`](generated/torchaudio.functional.allpass_biquad.html#torchaudio.functional.allpass_biquad
    "torchaudio.functional.allpass_biquad") | 设计双极全通滤波器。 |'
- en: '| [`band_biquad`](generated/torchaudio.functional.band_biquad.html#torchaudio.functional.band_biquad
    "torchaudio.functional.band_biquad") | Design two-pole band filter. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`band_biquad`](generated/torchaudio.functional.band_biquad.html#torchaudio.functional.band_biquad
    "torchaudio.functional.band_biquad") | 设计双极带通滤波器。 |'
- en: '| [`bandpass_biquad`](generated/torchaudio.functional.bandpass_biquad.html#torchaudio.functional.bandpass_biquad
    "torchaudio.functional.bandpass_biquad") | Design two-pole band-pass filter. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`bandpass_biquad`](generated/torchaudio.functional.bandpass_biquad.html#torchaudio.functional.bandpass_biquad
    "torchaudio.functional.bandpass_biquad") | 设计双极带通滤波器。 |'
- en: '| [`bandreject_biquad`](generated/torchaudio.functional.bandreject_biquad.html#torchaudio.functional.bandreject_biquad
    "torchaudio.functional.bandreject_biquad") | Design two-pole band-reject filter.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`bandreject_biquad`](generated/torchaudio.functional.bandreject_biquad.html#torchaudio.functional.bandreject_biquad
    "torchaudio.functional.bandreject_biquad") | 设计双极带阻滤波器。 |'
- en: '| [`bass_biquad`](generated/torchaudio.functional.bass_biquad.html#torchaudio.functional.bass_biquad
    "torchaudio.functional.bass_biquad") | Design a bass tone-control effect. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`bass_biquad`](generated/torchaudio.functional.bass_biquad.html#torchaudio.functional.bass_biquad
    "torchaudio.functional.bass_biquad") | 设计低音音控效果。 |'
- en: '| [`biquad`](generated/torchaudio.functional.biquad.html#torchaudio.functional.biquad
    "torchaudio.functional.biquad") | Perform a biquad filter of input tensor. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`biquad`](generated/torchaudio.functional.biquad.html#torchaudio.functional.biquad
    "torchaudio.functional.biquad") | 对输入张量执行双二阶滤波器。 |'
- en: '| [`contrast`](generated/torchaudio.functional.contrast.html#torchaudio.functional.contrast
    "torchaudio.functional.contrast") | Apply contrast effect. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`contrast`](generated/torchaudio.functional.contrast.html#torchaudio.functional.contrast
    "torchaudio.functional.contrast") | 应用对比度效果。 |'
- en: '| [`dcshift`](generated/torchaudio.functional.dcshift.html#torchaudio.functional.dcshift
    "torchaudio.functional.dcshift") | Apply a DC shift to the audio. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`dcshift`](generated/torchaudio.functional.dcshift.html#torchaudio.functional.dcshift
    "torchaudio.functional.dcshift") | 对音频应用DC偏移。 |'
- en: '| [`deemph_biquad`](generated/torchaudio.functional.deemph_biquad.html#torchaudio.functional.deemph_biquad
    "torchaudio.functional.deemph_biquad") | Apply ISO 908 CD de-emphasis (shelving)
    IIR filter. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`deemph_biquad`](generated/torchaudio.functional.deemph_biquad.html#torchaudio.functional.deemph_biquad
    "torchaudio.functional.deemph_biquad") | 应用ISO 908 CD去强调（搁置）IIR滤波器。 |'
- en: '| [`dither`](generated/torchaudio.functional.dither.html#torchaudio.functional.dither
    "torchaudio.functional.dither") | Apply dither |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`dither`](generated/torchaudio.functional.dither.html#torchaudio.functional.dither
    "torchaudio.functional.dither") | 应用抖动。 |'
- en: '| [`equalizer_biquad`](generated/torchaudio.functional.equalizer_biquad.html#torchaudio.functional.equalizer_biquad
    "torchaudio.functional.equalizer_biquad") | Design biquad peaking equalizer filter
    and perform filtering. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`equalizer_biquad`](generated/torchaudio.functional.equalizer_biquad.html#torchaudio.functional.equalizer_biquad
    "torchaudio.functional.equalizer_biquad") | 设计双二阶峰值均衡器滤波器并执行滤波。 |'
- en: '| [`filtfilt`](generated/torchaudio.functional.filtfilt.html#torchaudio.functional.filtfilt
    "torchaudio.functional.filtfilt") | Apply an IIR filter forward and backward to
    a waveform. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`filtfilt`](generated/torchaudio.functional.filtfilt.html#torchaudio.functional.filtfilt
    "torchaudio.functional.filtfilt") | 对波形应用IIR滤波器前向和后向。 |'
- en: '| [`flanger`](generated/torchaudio.functional.flanger.html#torchaudio.functional.flanger
    "torchaudio.functional.flanger") | Apply a flanger effect to the audio. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`flanger`](generated/torchaudio.functional.flanger.html#torchaudio.functional.flanger
    "torchaudio.functional.flanger") | 对音频应用谐振效果。 |'
- en: '| [`gain`](generated/torchaudio.functional.gain.html#torchaudio.functional.gain
    "torchaudio.functional.gain") | Apply amplification or attenuation to the whole
    waveform. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`gain`](generated/torchaudio.functional.gain.html#torchaudio.functional.gain
    "torchaudio.functional.gain") | 对整个波形应用放大或衰减。 |'
- en: '| [`highpass_biquad`](generated/torchaudio.functional.highpass_biquad.html#torchaudio.functional.highpass_biquad
    "torchaudio.functional.highpass_biquad") | Design biquad highpass filter and perform
    filtering. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`highpass_biquad`](generated/torchaudio.functional.highpass_biquad.html#torchaudio.functional.highpass_biquad
    "torchaudio.functional.highpass_biquad") | 设计双二阶高通滤波器并执行滤波。 |'
- en: '| [`lfilter`](generated/torchaudio.functional.lfilter.html#torchaudio.functional.lfilter
    "torchaudio.functional.lfilter") | Perform an IIR filter by evaluating difference
    equation. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`lfilter`](generated/torchaudio.functional.lfilter.html#torchaudio.functional.lfilter
    "torchaudio.functional.lfilter") | 通过求解差分方程执行IIR滤波。 |'
- en: '| [`lowpass_biquad`](generated/torchaudio.functional.lowpass_biquad.html#torchaudio.functional.lowpass_biquad
    "torchaudio.functional.lowpass_biquad") | Design biquad lowpass filter and perform
    filtering. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`lowpass_biquad`](generated/torchaudio.functional.lowpass_biquad.html#torchaudio.functional.lowpass_biquad
    "torchaudio.functional.lowpass_biquad") | 设计双二阶低通滤波器并执行滤波。 |'
- en: '| [`overdrive`](generated/torchaudio.functional.overdrive.html#torchaudio.functional.overdrive
    "torchaudio.functional.overdrive") | Apply a overdrive effect to the audio. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`overdrive`](generated/torchaudio.functional.overdrive.html#torchaudio.functional.overdrive
    "torchaudio.functional.overdrive") | 对音频应用过载效果。 |'
- en: '| [`phaser`](generated/torchaudio.functional.phaser.html#torchaudio.functional.phaser
    "torchaudio.functional.phaser") | Apply a phasing effect to the audio. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`phaser`](generated/torchaudio.functional.phaser.html#torchaudio.functional.phaser
    "torchaudio.functional.phaser") | 对音频应用相位效果。 |'
- en: '| [`riaa_biquad`](generated/torchaudio.functional.riaa_biquad.html#torchaudio.functional.riaa_biquad
    "torchaudio.functional.riaa_biquad") | Apply RIAA vinyl playback equalization.
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`riaa_biquad`](generated/torchaudio.functional.riaa_biquad.html#torchaudio.functional.riaa_biquad
    "torchaudio.functional.riaa_biquad") | 应用RIAA黑胶播放均衡。 |'
- en: '| [`treble_biquad`](generated/torchaudio.functional.treble_biquad.html#torchaudio.functional.treble_biquad
    "torchaudio.functional.treble_biquad") | Design a treble tone-control effect.
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`treble_biquad`](generated/torchaudio.functional.treble_biquad.html#torchaudio.functional.treble_biquad
    "torchaudio.functional.treble_biquad") | 设计高音音控效果。 |'
- en: Feature Extractions[](#feature-extractions "Permalink to this heading")
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征提取[](#feature-extractions "跳转到此标题的永久链接")
- en: '| [`vad`](generated/torchaudio.functional.vad.html#torchaudio.functional.vad
    "torchaudio.functional.vad") | Voice Activity Detector. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`vad`](generated/torchaudio.functional.vad.html#torchaudio.functional.vad
    "torchaudio.functional.vad") | 语音活动检测器。 |'
- en: '| [`spectrogram`](generated/torchaudio.functional.spectrogram.html#torchaudio.functional.spectrogram
    "torchaudio.functional.spectrogram") | Create a spectrogram or a batch of spectrograms
    from a raw audio signal. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`spectrogram`](generated/torchaudio.functional.spectrogram.html#torchaudio.functional.spectrogram
    "torchaudio.functional.spectrogram") | 从原始音频信号创建频谱图或一批频谱图。 |'
- en: '| [`inverse_spectrogram`](generated/torchaudio.functional.inverse_spectrogram.html#torchaudio.functional.inverse_spectrogram
    "torchaudio.functional.inverse_spectrogram") | Create an inverse spectrogram or
    a batch of inverse spectrograms from the provided complex-valued spectrogram.
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`inverse_spectrogram`](generated/torchaudio.functional.inverse_spectrogram.html#torchaudio.functional.inverse_spectrogram
    "torchaudio.functional.inverse_spectrogram") | 从提供的复值频谱图创建逆频谱图或一批逆频谱图。 |'
- en: '| [`griffinlim`](generated/torchaudio.functional.griffinlim.html#torchaudio.functional.griffinlim
    "torchaudio.functional.griffinlim") | Compute waveform from a linear scale magnitude
    spectrogram using the Griffin-Lim transformation. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`griffinlim`](generated/torchaudio.functional.griffinlim.html#torchaudio.functional.griffinlim
    "torchaudio.functional.griffinlim") | 使用Griffin-Lim变换从线性刻度幅度频谱图计算波形。 |'
- en: '| [`phase_vocoder`](generated/torchaudio.functional.phase_vocoder.html#torchaudio.functional.phase_vocoder
    "torchaudio.functional.phase_vocoder") | Given a STFT tensor, speed up in time
    without modifying pitch by a factor of `rate`. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`phase_vocoder`](generated/torchaudio.functional.phase_vocoder.html#torchaudio.functional.phase_vocoder
    "torchaudio.functional.phase_vocoder") | 给定STFT张量，通过因子`rate`在时间上加速而不改变音调。 |'
- en: '| [`pitch_shift`](generated/torchaudio.functional.pitch_shift.html#torchaudio.functional.pitch_shift
    "torchaudio.functional.pitch_shift") | Shift the pitch of a waveform by `n_steps`
    steps. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`pitch_shift`](generated/torchaudio.functional.pitch_shift.html#torchaudio.functional.pitch_shift
    "torchaudio.functional.pitch_shift") | 将波形的音调向上或向下移动`n_steps`步。 |'
- en: '| [`compute_deltas`](generated/torchaudio.functional.compute_deltas.html#torchaudio.functional.compute_deltas
    "torchaudio.functional.compute_deltas") | Compute delta coefficients of a tensor,
    usually a spectrogram: |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`compute_deltas`](generated/torchaudio.functional.compute_deltas.html#torchaudio.functional.compute_deltas
    "torchaudio.functional.compute_deltas") | 计算张量的增量系数，通常是频谱图： |'
- en: '| [`detect_pitch_frequency`](generated/torchaudio.functional.detect_pitch_frequency.html#torchaudio.functional.detect_pitch_frequency
    "torchaudio.functional.detect_pitch_frequency") | Detect pitch frequency. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`detect_pitch_frequency`](generated/torchaudio.functional.detect_pitch_frequency.html#torchaudio.functional.detect_pitch_frequency
    "torchaudio.functional.detect_pitch_frequency") | 检测音高频率。 |'
- en: '| [`sliding_window_cmn`](generated/torchaudio.functional.sliding_window_cmn.html#torchaudio.functional.sliding_window_cmn
    "torchaudio.functional.sliding_window_cmn") | Apply sliding-window cepstral mean
    (and optionally variance) normalization per utterance. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`sliding_window_cmn`](generated/torchaudio.functional.sliding_window_cmn.html#torchaudio.functional.sliding_window_cmn
    "torchaudio.functional.sliding_window_cmn") | 对每个话语应用滑动窗口倒谱均值（和可选的方差）归一化。 |'
- en: '| [`spectral_centroid`](generated/torchaudio.functional.spectral_centroid.html#torchaudio.functional.spectral_centroid
    "torchaudio.functional.spectral_centroid") | Compute the spectral centroid for
    each channel along the time axis. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`spectral_centroid`](generated/torchaudio.functional.spectral_centroid.html#torchaudio.functional.spectral_centroid
    "torchaudio.functional.spectral_centroid") | 计算每个通道沿时间轴的频谱中心。 |'
- en: Multi-channel[](#multi-channel "Permalink to this heading")
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多通道[](#multi-channel "跳转到此标题的永久链接")
- en: '| [`psd`](generated/torchaudio.functional.psd.html#torchaudio.functional.psd
    "torchaudio.functional.psd") | Compute cross-channel power spectral density (PSD)
    matrix. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`psd`](generated/torchaudio.functional.psd.html#torchaudio.functional.psd
    "torchaudio.functional.psd") | 计算跨通道功率谱密度（PSD）矩阵。 |'
- en: '| [`mvdr_weights_souden`](generated/torchaudio.functional.mvdr_weights_souden.html#torchaudio.functional.mvdr_weights_souden
    "torchaudio.functional.mvdr_weights_souden") | Compute the Minimum Variance Distortionless
    Response (*MVDR* [[Capon, 1969](references.html#id34 "Jack Capon. High-resolution
    frequency-wavenumber spectrum analysis. Proceedings of the IEEE, 57(8):1408–1418,
    1969.")]) beamforming weights by the method proposed by *Souden et, al.* [[Souden
    *et al.*, 2009](references.html#id28 "Mehrez Souden, Jacob Benesty, and Sofiene
    Affes. On optimal frequency-domain multichannel linear filtering for noise reduction.
    In IEEE Transactions on audio, speech, and language processing, volume 18, 260–276\.
    IEEE, 2009.")]. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`mvdr_weights_souden`](generated/torchaudio.functional.mvdr_weights_souden.html#torchaudio.functional.mvdr_weights_souden
    "torchaudio.functional.mvdr_weights_souden") | 通过*Souden等人*提出的方法计算最小方差无失真响应（*MVDR*）波束形成权重[[Capon,
    1969](references.html#id34 "Jack Capon. 高分辨率频率-波数谱分析. IEEE会议录, 57(8):1408–1418,
    1969年。")]. |'
- en: '| [`mvdr_weights_rtf`](generated/torchaudio.functional.mvdr_weights_rtf.html#torchaudio.functional.mvdr_weights_rtf
    "torchaudio.functional.mvdr_weights_rtf") | Compute the Minimum Variance Distortionless
    Response (*MVDR* [[Capon, 1969](references.html#id34 "Jack Capon. High-resolution
    frequency-wavenumber spectrum analysis. Proceedings of the IEEE, 57(8):1408–1418,
    1969.")]) beamforming weights based on the relative transfer function (RTF) and
    power spectral density (PSD) matrix of noise. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`mvdr_weights_rtf`](generated/torchaudio.functional.mvdr_weights_rtf.html#torchaudio.functional.mvdr_weights_rtf
    "torchaudio.functional.mvdr_weights_rtf") | 基于相对传递函数（RTF）和噪声的功率谱密度（PSD）矩阵计算最小方差无失真响应（*MVDR*）波束形成权重。
    |'
- en: '| [`rtf_evd`](generated/torchaudio.functional.rtf_evd.html#torchaudio.functional.rtf_evd
    "torchaudio.functional.rtf_evd") | Estimate the relative transfer function (RTF)
    or the steering vector by eigenvalue decomposition. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`rtf_evd`](generated/torchaudio.functional.rtf_evd.html#torchaudio.functional.rtf_evd
    "torchaudio.functional.rtf_evd") | 通过特征值分解估计相对传递函数（RTF）或指向向量。 |'
- en: '| [`rtf_power`](generated/torchaudio.functional.rtf_power.html#torchaudio.functional.rtf_power
    "torchaudio.functional.rtf_power") | Estimate the relative transfer function (RTF)
    or the steering vector by the power method. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`rtf_power`](generated/torchaudio.functional.rtf_power.html#torchaudio.functional.rtf_power
    "torchaudio.functional.rtf_power") | 通过功率方法估计相对传递函数（RTF）或指向向量。 |'
- en: '| [`apply_beamforming`](generated/torchaudio.functional.apply_beamforming.html#torchaudio.functional.apply_beamforming
    "torchaudio.functional.apply_beamforming") | Apply the beamforming weight to the
    multi-channel noisy spectrum to obtain the single-channel enhanced spectrum. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`apply_beamforming`](generated/torchaudio.functional.apply_beamforming.html#torchaudio.functional.apply_beamforming
    "torchaudio.functional.apply_beamforming") | 将波束形成权重应用于多通道嘈杂频谱，以获得单通道增强频谱。 |'
- en: Loss[](#loss "Permalink to this heading")
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 损失[](#loss "此标题的永久链接")
- en: '| [`rnnt_loss`](generated/torchaudio.functional.rnnt_loss.html#torchaudio.functional.rnnt_loss
    "torchaudio.functional.rnnt_loss") | Compute the RNN Transducer loss from *Sequence
    Transduction with Recurrent Neural Networks* [[Graves, 2012](references.html#id18
    "Alex Graves. Sequence transduction with recurrent neural networks. 2012\. arXiv:1211.3711.")].
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`rnnt_loss`](generated/torchaudio.functional.rnnt_loss.html#torchaudio.functional.rnnt_loss
    "torchaudio.functional.rnnt_loss") | 从*使用循环神经网络进行序列转导*[[Graves, 2012](references.html#id18
    "Alex Graves. 使用循环神经网络进行序列转导. 2012. arXiv:1211.3711.")]计算RNN Transducer损失。 |'
- en: Metric[](#metric "Permalink to this heading")
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 度量[](#metric "此标题的永久链接")
- en: '| [`edit_distance`](generated/torchaudio.functional.edit_distance.html#torchaudio.functional.edit_distance
    "torchaudio.functional.edit_distance") | Calculate the word level edit (Levenshtein)
    distance between two sequences. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`edit_distance`](generated/torchaudio.functional.edit_distance.html#torchaudio.functional.edit_distance
    "torchaudio.functional.edit_distance") | 计算两个序列之间的单词级编辑（Levenshtein）距离。 |'
