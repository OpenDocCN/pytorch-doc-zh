- en: torchaudio.functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/functional.html](https://pytorch.org/audio/stable/functional.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Functions to perform common audio operations.
  prefs: []
  type: TYPE_NORMAL
- en: Utility[](#utility "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`amplitude_to_DB`](generated/torchaudio.functional.amplitude_to_DB.html#torchaudio.functional.amplitude_to_DB
    "torchaudio.functional.amplitude_to_DB") | Turn a spectrogram from the power/amplitude
    scale to the decibel scale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DB_to_amplitude`](generated/torchaudio.functional.DB_to_amplitude.html#torchaudio.functional.DB_to_amplitude
    "torchaudio.functional.DB_to_amplitude") | Turn a tensor from the decibel scale
    to the power/amplitude scale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`melscale_fbanks`](generated/torchaudio.functional.melscale_fbanks.html#torchaudio.functional.melscale_fbanks
    "torchaudio.functional.melscale_fbanks") | Create a frequency bin conversion matrix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`linear_fbanks`](generated/torchaudio.functional.linear_fbanks.html#torchaudio.functional.linear_fbanks
    "torchaudio.functional.linear_fbanks") | Creates a linear triangular filterbank.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`create_dct`](generated/torchaudio.functional.create_dct.html#torchaudio.functional.create_dct
    "torchaudio.functional.create_dct") | Create a DCT transformation matrix with
    shape (`n_mels`, `n_mfcc`), normalized depending on norm. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mask_along_axis`](generated/torchaudio.functional.mask_along_axis.html#torchaudio.functional.mask_along_axis
    "torchaudio.functional.mask_along_axis") | Apply a mask along `axis`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mask_along_axis_iid`](generated/torchaudio.functional.mask_along_axis_iid.html#torchaudio.functional.mask_along_axis_iid
    "torchaudio.functional.mask_along_axis_iid") | Apply a mask along `axis`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mu_law_encoding`](generated/torchaudio.functional.mu_law_encoding.html#torchaudio.functional.mu_law_encoding
    "torchaudio.functional.mu_law_encoding") | Encode signal based on mu-law companding.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`mu_law_decoding`](generated/torchaudio.functional.mu_law_decoding.html#torchaudio.functional.mu_law_decoding
    "torchaudio.functional.mu_law_decoding") | Decode mu-law encoded signal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`apply_codec`](generated/torchaudio.functional.apply_codec.html#torchaudio.functional.apply_codec
    "torchaudio.functional.apply_codec") | DEPRECATED: Apply codecs as a form of augmentation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`resample`](generated/torchaudio.functional.resample.html#torchaudio.functional.resample
    "torchaudio.functional.resample") | Resamples the waveform at the new frequency
    using bandlimited interpolation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`loudness`](generated/torchaudio.functional.loudness.html#torchaudio.functional.loudness
    "torchaudio.functional.loudness") | Measure audio loudness according to the ITU-R
    BS.1770-4 recommendation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`convolve`](generated/torchaudio.functional.convolve.html#torchaudio.functional.convolve
    "torchaudio.functional.convolve") | Convolves inputs along their last dimension
    using the direct method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fftconvolve`](generated/torchaudio.functional.fftconvolve.html#torchaudio.functional.fftconvolve
    "torchaudio.functional.fftconvolve") | Convolves inputs along their last dimension
    using FFT. |'
  prefs: []
  type: TYPE_TB
- en: '| [`add_noise`](generated/torchaudio.functional.add_noise.html#torchaudio.functional.add_noise
    "torchaudio.functional.add_noise") | Scales and adds noise to waveform per signal-to-noise
    ratio. |'
  prefs: []
  type: TYPE_TB
- en: '| [`preemphasis`](generated/torchaudio.functional.preemphasis.html#torchaudio.functional.preemphasis
    "torchaudio.functional.preemphasis") | Pre-emphasizes a waveform along its last
    dimension, i.e. for each signal \(x\) in `waveform`, computes output \(y\) as.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`deemphasis`](generated/torchaudio.functional.deemphasis.html#torchaudio.functional.deemphasis
    "torchaudio.functional.deemphasis") | De-emphasizes a waveform along its last
    dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`speed`](generated/torchaudio.functional.speed.html#torchaudio.functional.speed
    "torchaudio.functional.speed") | Adjusts waveform speed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`frechet_distance`](generated/torchaudio.functional.frechet_distance.html#torchaudio.functional.frechet_distance
    "torchaudio.functional.frechet_distance") | Computes the Fréchet distance between
    two multivariate normal distributions [[Dowson and Landau, 1982](references.html#id72
    "DC Dowson and BV666017 Landau. The fréchet distance between multivariate normal
    distributions. Journal of multivariate analysis, 12(3):450–455, 1982.")]. |'
  prefs: []
  type: TYPE_TB
- en: Forced Alignment[](#forced-alignment "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`forced_align`](generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align
    "torchaudio.functional.forced_align") | Align a CTC label sequence to an emission.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`merge_tokens`](generated/torchaudio.functional.merge_tokens.html#torchaudio.functional.merge_tokens
    "torchaudio.functional.merge_tokens") | Removes repeated tokens and blank tokens
    from the given CTC token sequence. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TokenSpan`](generated/torchaudio.functional.TokenSpan.html#torchaudio.functional.TokenSpan
    "torchaudio.functional.TokenSpan") | Token with time stamps and score. |'
  prefs: []
  type: TYPE_TB
- en: Filtering[](#filtering "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`allpass_biquad`](generated/torchaudio.functional.allpass_biquad.html#torchaudio.functional.allpass_biquad
    "torchaudio.functional.allpass_biquad") | Design two-pole all-pass filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`band_biquad`](generated/torchaudio.functional.band_biquad.html#torchaudio.functional.band_biquad
    "torchaudio.functional.band_biquad") | Design two-pole band filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bandpass_biquad`](generated/torchaudio.functional.bandpass_biquad.html#torchaudio.functional.bandpass_biquad
    "torchaudio.functional.bandpass_biquad") | Design two-pole band-pass filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bandreject_biquad`](generated/torchaudio.functional.bandreject_biquad.html#torchaudio.functional.bandreject_biquad
    "torchaudio.functional.bandreject_biquad") | Design two-pole band-reject filter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`bass_biquad`](generated/torchaudio.functional.bass_biquad.html#torchaudio.functional.bass_biquad
    "torchaudio.functional.bass_biquad") | Design a bass tone-control effect. |'
  prefs: []
  type: TYPE_TB
- en: '| [`biquad`](generated/torchaudio.functional.biquad.html#torchaudio.functional.biquad
    "torchaudio.functional.biquad") | Perform a biquad filter of input tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`contrast`](generated/torchaudio.functional.contrast.html#torchaudio.functional.contrast
    "torchaudio.functional.contrast") | Apply contrast effect. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dcshift`](generated/torchaudio.functional.dcshift.html#torchaudio.functional.dcshift
    "torchaudio.functional.dcshift") | Apply a DC shift to the audio. |'
  prefs: []
  type: TYPE_TB
- en: '| [`deemph_biquad`](generated/torchaudio.functional.deemph_biquad.html#torchaudio.functional.deemph_biquad
    "torchaudio.functional.deemph_biquad") | Apply ISO 908 CD de-emphasis (shelving)
    IIR filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dither`](generated/torchaudio.functional.dither.html#torchaudio.functional.dither
    "torchaudio.functional.dither") | Apply dither |'
  prefs: []
  type: TYPE_TB
- en: '| [`equalizer_biquad`](generated/torchaudio.functional.equalizer_biquad.html#torchaudio.functional.equalizer_biquad
    "torchaudio.functional.equalizer_biquad") | Design biquad peaking equalizer filter
    and perform filtering. |'
  prefs: []
  type: TYPE_TB
- en: '| [`filtfilt`](generated/torchaudio.functional.filtfilt.html#torchaudio.functional.filtfilt
    "torchaudio.functional.filtfilt") | Apply an IIR filter forward and backward to
    a waveform. |'
  prefs: []
  type: TYPE_TB
- en: '| [`flanger`](generated/torchaudio.functional.flanger.html#torchaudio.functional.flanger
    "torchaudio.functional.flanger") | Apply a flanger effect to the audio. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gain`](generated/torchaudio.functional.gain.html#torchaudio.functional.gain
    "torchaudio.functional.gain") | Apply amplification or attenuation to the whole
    waveform. |'
  prefs: []
  type: TYPE_TB
- en: '| [`highpass_biquad`](generated/torchaudio.functional.highpass_biquad.html#torchaudio.functional.highpass_biquad
    "torchaudio.functional.highpass_biquad") | Design biquad highpass filter and perform
    filtering. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lfilter`](generated/torchaudio.functional.lfilter.html#torchaudio.functional.lfilter
    "torchaudio.functional.lfilter") | Perform an IIR filter by evaluating difference
    equation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lowpass_biquad`](generated/torchaudio.functional.lowpass_biquad.html#torchaudio.functional.lowpass_biquad
    "torchaudio.functional.lowpass_biquad") | Design biquad lowpass filter and perform
    filtering. |'
  prefs: []
  type: TYPE_TB
- en: '| [`overdrive`](generated/torchaudio.functional.overdrive.html#torchaudio.functional.overdrive
    "torchaudio.functional.overdrive") | Apply a overdrive effect to the audio. |'
  prefs: []
  type: TYPE_TB
- en: '| [`phaser`](generated/torchaudio.functional.phaser.html#torchaudio.functional.phaser
    "torchaudio.functional.phaser") | Apply a phasing effect to the audio. |'
  prefs: []
  type: TYPE_TB
- en: '| [`riaa_biquad`](generated/torchaudio.functional.riaa_biquad.html#torchaudio.functional.riaa_biquad
    "torchaudio.functional.riaa_biquad") | Apply RIAA vinyl playback equalization.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`treble_biquad`](generated/torchaudio.functional.treble_biquad.html#torchaudio.functional.treble_biquad
    "torchaudio.functional.treble_biquad") | Design a treble tone-control effect.
    |'
  prefs: []
  type: TYPE_TB
- en: Feature Extractions[](#feature-extractions "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`vad`](generated/torchaudio.functional.vad.html#torchaudio.functional.vad
    "torchaudio.functional.vad") | Voice Activity Detector. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spectrogram`](generated/torchaudio.functional.spectrogram.html#torchaudio.functional.spectrogram
    "torchaudio.functional.spectrogram") | Create a spectrogram or a batch of spectrograms
    from a raw audio signal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`inverse_spectrogram`](generated/torchaudio.functional.inverse_spectrogram.html#torchaudio.functional.inverse_spectrogram
    "torchaudio.functional.inverse_spectrogram") | Create an inverse spectrogram or
    a batch of inverse spectrograms from the provided complex-valued spectrogram.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`griffinlim`](generated/torchaudio.functional.griffinlim.html#torchaudio.functional.griffinlim
    "torchaudio.functional.griffinlim") | Compute waveform from a linear scale magnitude
    spectrogram using the Griffin-Lim transformation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`phase_vocoder`](generated/torchaudio.functional.phase_vocoder.html#torchaudio.functional.phase_vocoder
    "torchaudio.functional.phase_vocoder") | Given a STFT tensor, speed up in time
    without modifying pitch by a factor of `rate`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pitch_shift`](generated/torchaudio.functional.pitch_shift.html#torchaudio.functional.pitch_shift
    "torchaudio.functional.pitch_shift") | Shift the pitch of a waveform by `n_steps`
    steps. |'
  prefs: []
  type: TYPE_TB
- en: '| [`compute_deltas`](generated/torchaudio.functional.compute_deltas.html#torchaudio.functional.compute_deltas
    "torchaudio.functional.compute_deltas") | Compute delta coefficients of a tensor,
    usually a spectrogram: |'
  prefs: []
  type: TYPE_TB
- en: '| [`detect_pitch_frequency`](generated/torchaudio.functional.detect_pitch_frequency.html#torchaudio.functional.detect_pitch_frequency
    "torchaudio.functional.detect_pitch_frequency") | Detect pitch frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sliding_window_cmn`](generated/torchaudio.functional.sliding_window_cmn.html#torchaudio.functional.sliding_window_cmn
    "torchaudio.functional.sliding_window_cmn") | Apply sliding-window cepstral mean
    (and optionally variance) normalization per utterance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spectral_centroid`](generated/torchaudio.functional.spectral_centroid.html#torchaudio.functional.spectral_centroid
    "torchaudio.functional.spectral_centroid") | Compute the spectral centroid for
    each channel along the time axis. |'
  prefs: []
  type: TYPE_TB
- en: Multi-channel[](#multi-channel "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`psd`](generated/torchaudio.functional.psd.html#torchaudio.functional.psd
    "torchaudio.functional.psd") | Compute cross-channel power spectral density (PSD)
    matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mvdr_weights_souden`](generated/torchaudio.functional.mvdr_weights_souden.html#torchaudio.functional.mvdr_weights_souden
    "torchaudio.functional.mvdr_weights_souden") | Compute the Minimum Variance Distortionless
    Response (*MVDR* [[Capon, 1969](references.html#id34 "Jack Capon. High-resolution
    frequency-wavenumber spectrum analysis. Proceedings of the IEEE, 57(8):1408–1418,
    1969.")]) beamforming weights by the method proposed by *Souden et, al.* [[Souden
    *et al.*, 2009](references.html#id28 "Mehrez Souden, Jacob Benesty, and Sofiene
    Affes. On optimal frequency-domain multichannel linear filtering for noise reduction.
    In IEEE Transactions on audio, speech, and language processing, volume 18, 260–276\.
    IEEE, 2009.")]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mvdr_weights_rtf`](generated/torchaudio.functional.mvdr_weights_rtf.html#torchaudio.functional.mvdr_weights_rtf
    "torchaudio.functional.mvdr_weights_rtf") | Compute the Minimum Variance Distortionless
    Response (*MVDR* [[Capon, 1969](references.html#id34 "Jack Capon. High-resolution
    frequency-wavenumber spectrum analysis. Proceedings of the IEEE, 57(8):1408–1418,
    1969.")]) beamforming weights based on the relative transfer function (RTF) and
    power spectral density (PSD) matrix of noise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rtf_evd`](generated/torchaudio.functional.rtf_evd.html#torchaudio.functional.rtf_evd
    "torchaudio.functional.rtf_evd") | Estimate the relative transfer function (RTF)
    or the steering vector by eigenvalue decomposition. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rtf_power`](generated/torchaudio.functional.rtf_power.html#torchaudio.functional.rtf_power
    "torchaudio.functional.rtf_power") | Estimate the relative transfer function (RTF)
    or the steering vector by the power method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`apply_beamforming`](generated/torchaudio.functional.apply_beamforming.html#torchaudio.functional.apply_beamforming
    "torchaudio.functional.apply_beamforming") | Apply the beamforming weight to the
    multi-channel noisy spectrum to obtain the single-channel enhanced spectrum. |'
  prefs: []
  type: TYPE_TB
- en: Loss[](#loss "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`rnnt_loss`](generated/torchaudio.functional.rnnt_loss.html#torchaudio.functional.rnnt_loss
    "torchaudio.functional.rnnt_loss") | Compute the RNN Transducer loss from *Sequence
    Transduction with Recurrent Neural Networks* [[Graves, 2012](references.html#id18
    "Alex Graves. Sequence transduction with recurrent neural networks. 2012\. arXiv:1211.3711.")].
    |'
  prefs: []
  type: TYPE_TB
- en: Metric[](#metric "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`edit_distance`](generated/torchaudio.functional.edit_distance.html#torchaudio.functional.edit_distance
    "torchaudio.functional.edit_distance") | Calculate the word level edit (Levenshtein)
    distance between two sequences. |'
  prefs: []
  type: TYPE_TB
