- en: Automatic Differentiation with torch.autograd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/tutorials/beginner/basics/autogradqs_tutorial.html](https://pytorch.org/tutorials/beginner/basics/autogradqs_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-beginner-basics-autogradqs-tutorial-py) to download
    the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '[Learn the Basics](intro.html) || [Quickstart](quickstart_tutorial.html) ||
    [Tensors](tensorqs_tutorial.html) || [Datasets & DataLoaders](data_tutorial.html)
    || [Transforms](transforms_tutorial.html) || [Build Model](buildmodel_tutorial.html)
    || **Autograd** || [Optimization](optimization_tutorial.html) || [Save & Load
    Model](saveloadrun_tutorial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: When training neural networks, the most frequently used algorithm is **back
    propagation**. In this algorithm, parameters (model weights) are adjusted according
    to the **gradient** of the loss function with respect to the given parameter.
  prefs: []
  type: TYPE_NORMAL
- en: To compute those gradients, PyTorch has a built-in differentiation engine called
    `torch.autograd`. It supports automatic computation of gradient for any computational
    graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the simplest one-layer neural network, with input `x`, parameters
    `w` and `b`, and some loss function. It can be defined in PyTorch in the following
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tensors, Functions and Computational graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This code defines the following **computational graph**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d0eedb65a2f210ca185c89e964ee05ec.png)'
  prefs: []
  type: TYPE_IMG
- en: In this network, `w` and `b` are **parameters**, which we need to optimize.
    Thus, we need to be able to compute the gradients of loss function with respect
    to those variables. In order to do that, we set the `requires_grad` property of
    those tensors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can set the value of `requires_grad` when creating a tensor, or later by
    using `x.requires_grad_(True)` method.
  prefs: []
  type: TYPE_NORMAL
- en: A function that we apply to tensors to construct computational graph is in fact
    an object of class `Function`. This object knows how to compute the function in
    the *forward* direction, and also how to compute its derivative during the *backward
    propagation* step. A reference to the backward propagation function is stored
    in `grad_fn` property of a tensor. You can find more information of `Function`
    [in the documentation](https://pytorch.org/docs/stable/autograd.html#function).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Computing Gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To optimize weights of parameters in the neural network, we need to compute
    the derivatives of our loss function with respect to parameters, namely, we need
    \(\frac{\partial loss}{\partial w}\) and \(\frac{\partial loss}{\partial b}\)
    under some fixed values of `x` and `y`. To compute those derivatives, we call
    `loss.backward()`, and then retrieve the values from `w.grad` and `b.grad`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We can only obtain the `grad` properties for the leaf nodes of the computational
    graph, which have `requires_grad` property set to `True`. For all other nodes
    in our graph, gradients will not be available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can only perform gradient calculations using `backward` once on a given graph,
    for performance reasons. If we need to do several `backward` calls on the same
    graph, we need to pass `retain_graph=True` to the `backward` call.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling Gradient Tracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, all tensors with `requires_grad=True` are tracking their computational
    history and support gradient computation. However, there are some cases when we
    do not need to do that, for example, when we have trained the model and just want
    to apply it to some input data, i.e. we only want to do *forward* computations
    through the network. We can stop tracking computations by surrounding our computation
    code with `torch.no_grad()` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to achieve the same result is to use the `detach()` method on the
    tensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There are reasons you might want to disable gradient tracking:'
  prefs: []
  type: TYPE_NORMAL
- en: To mark some parameters in your neural network as **frozen parameters**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To **speed up computations** when you are only doing forward pass, because computations
    on tensors that do not track gradients would be more efficient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More on Computational Graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conceptually, autograd keeps a record of data (tensors) and all executed operations
    (along with the resulting new tensors) in a directed acyclic graph (DAG) consisting
    of [Function](https://pytorch.org/docs/stable/autograd.html#torch.autograd.Function)
    objects. In this DAG, leaves are the input tensors, roots are the output tensors.
    By tracing this graph from roots to leaves, you can automatically compute the
    gradients using the chain rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a forward pass, autograd does two things simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: run the requested operation to compute a resulting tensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: maintain the operation’s *gradient function* in the DAG.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The backward pass kicks off when `.backward()` is called on the DAG root. `autograd`
    then:'
  prefs: []
  type: TYPE_NORMAL
- en: computes the gradients from each `.grad_fn`,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: accumulates them in the respective tensor’s `.grad` attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using the chain rule, propagates all the way to the leaf tensors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**DAGs are dynamic in PyTorch** An important thing to note is that the graph
    is recreated from scratch; after each `.backward()` call, autograd starts populating
    a new graph. This is exactly what allows you to use control flow statements in
    your model; you can change the shape, size and operations at every iteration if
    needed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Optional Reading: Tensor Gradients and Jacobian Products'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In many cases, we have a scalar loss function, and we need to compute the gradient
    with respect to some parameters. However, there are cases when the output function
    is an arbitrary tensor. In this case, PyTorch allows you to compute so-called
    **Jacobian product**, and not the actual gradient.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a vector function \(\vec{y}=f(\vec{x})\), where \(\vec{x}=\langle x_1,\dots,x_n\rangle\)
    and \(\vec{y}=\langle y_1,\dots,y_m\rangle\), a gradient of \(\vec{y}\) with respect
    to \(\vec{x}\) is given by **Jacobian matrix**:'
  prefs: []
  type: TYPE_NORMAL
- en: \[J=\left(\begin{array}{ccc} \frac{\partial y_{1}}{\partial x_{1}} & \cdots
    & \frac{\partial y_{1}}{\partial x_{n}}\\ \vdots & \ddots & \vdots\\ \frac{\partial
    y_{m}}{\partial x_{1}} & \cdots & \frac{\partial y_{m}}{\partial x_{n}} \end{array}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of computing the Jacobian matrix itself, PyTorch allows you to compute
    **Jacobian Product** \(v^T\cdot J\) for a given input vector \(v=(v_1 \dots v_m)\).
    This is achieved by calling `backward` with \(v\) as an argument. The size of
    \(v\) should be the same as the size of the original tensor, with respect to which
    we want to compute the product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice that when we call `backward` for the second time with the same argument,
    the value of the gradient is different. This happens because when doing `backward`
    propagation, PyTorch **accumulates the gradients**, i.e. the value of computed
    gradients is added to the `grad` property of all leaf nodes of computational graph.
    If you want to compute the proper gradients, you need to zero out the `grad` property
    before. In real-life training an *optimizer* helps us to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Previously we were calling `backward()` function without parameters. This is
    essentially equivalent to calling `backward(torch.tensor(1.0))`, which is a useful
    way to compute the gradients in case of a scalar-valued function, such as loss
    during neural network training.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Autograd Mechanics](https://pytorch.org/docs/stable/notes/autograd.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 0 minutes 1.594 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: autogradqs_tutorial.py`](../../_downloads/fbf83d81ea8e82d633984f21bab274cc/autogradqs_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: autogradqs_tutorial.ipynb`](../../_downloads/ad7e62b138c384adac98888ce94ff659/autogradqs_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
