["```py\n{\"class_id\":  \"n02124075\",  \"class_name\":  \"Egyptian_cat\"} \n```", "```py\npip  install  Flask==2.0.1  torchvision==0.10.0 \n```", "```py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello World!' \n```", "```py\nfrom flask import Flask, jsonify\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    return jsonify({'class_id': 'IMAGE_NET_XXX', 'class_name': 'Cat'}) \n```", "```py\nimport io\n\nimport torchvision.transforms as transforms\nfrom PIL import Image\n\ndef transform_image(image_bytes):\n    my_transforms = [transforms.Compose](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")([[transforms.Resize](https://pytorch.org/vision/stable/generated/torchvision.transforms.Resize.html#torchvision.transforms.Resize \"torchvision.transforms.Resize\")(255),\n                                        [transforms.CenterCrop](https://pytorch.org/vision/stable/generated/torchvision.transforms.CenterCrop.html#torchvision.transforms.CenterCrop \"torchvision.transforms.CenterCrop\")(224),\n                                        [transforms.ToTensor](https://pytorch.org/vision/stable/generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor \"torchvision.transforms.ToTensor\")(),\n                                        [transforms.Normalize](https://pytorch.org/vision/stable/generated/torchvision.transforms.Normalize.html#torchvision.transforms.Normalize \"torchvision.transforms.Normalize\")(\n                                            [0.485, 0.456, 0.406],\n                                            [0.229, 0.224, 0.225])])\n    image = Image.open(io.BytesIO(image_bytes))\n    return my_transforms(image).unsqueeze(0) \n```", "```py\nwith open(\"../_static/img/sample_file.jpeg\", 'rb') as f:\n    image_bytes = f.read()\n    tensor = transform_image(image_bytes=image_bytes)\n    print(tensor) \n```", "```py\nfrom torchvision import models\n\n# Make sure to set `weights` as `'IMAGENET1K_V1'` to use the pretrained weights:\nmodel = [models.densenet121](https://pytorch.org/vision/stable/models/generated/torchvision.models.densenet121.html#torchvision.models.densenet121 \"torchvision.models.densenet121\")(weights='IMAGENET1K_V1')\n# Since we are using our model only for inference, switch to `eval` mode:\nmodel.eval()\n\ndef get_prediction(image_bytes):\n    tensor = transform_image(image_bytes=image_bytes)\n    outputs = model.forward(tensor)\n    _, y_hat = outputs.max(1)\n    return y_hat \n```", "```py\nimport json\n\nimagenet_class_index = json.load(open('../_static/imagenet_class_index.json'))\n\ndef get_prediction(image_bytes):\n    tensor = transform_image(image_bytes=image_bytes)\n    outputs = model.forward(tensor)\n    _, y_hat = outputs.max(1)\n    predicted_idx = str(y_hat.item())\n    return imagenet_class_index[predicted_idx] \n```", "```py\nwith open(\"../_static/img/sample_file.jpeg\", 'rb') as f:\n    image_bytes = f.read()\n    print(get_prediction(image_bytes=image_bytes)) \n```", "```py\n['n02124075', 'Egyptian_cat'] \n```", "```py\nfrom flask import request\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    if request.method == 'POST':\n        # we will get the file from the request\n        file = request.files['file']\n        # convert that to bytes\n        img_bytes = file.read()\n        class_id, class_name = get_prediction(image_bytes=img_bytes)\n        return jsonify({'class_id': class_id, 'class_name': class_name}) \n```", "```py\n> import io\n> import json\n> \n> from torchvision import models\n> import torchvision.transforms as transforms\n> from PIL import Image\n> from flask import Flask, jsonify, request\n> \n> app = Flask(__name__)\n> imagenet_class_index = json.load(open('<PATH/TO/.json/FILE>/imagenet_class_index.json'))\n> model = [models.densenet121](https://pytorch.org/vision/stable/models/generated/torchvision.models.densenet121.html#torchvision.models.densenet121 \"torchvision.models.densenet121\")(weights='IMAGENET1K_V1')\n> model.eval()\n> \n> def transform_image(image_bytes):\n>     my_transforms = [transforms.Compose](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")([[transforms.Resize](https://pytorch.org/vision/stable/generated/torchvision.transforms.Resize.html#torchvision.transforms.Resize \"torchvision.transforms.Resize\")(255),\n>                                         [transforms.CenterCrop](https://pytorch.org/vision/stable/generated/torchvision.transforms.CenterCrop.html#torchvision.transforms.CenterCrop \"torchvision.transforms.CenterCrop\")(224),\n>                                         [transforms.ToTensor](https://pytorch.org/vision/stable/generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor \"torchvision.transforms.ToTensor\")(),\n>                                         [transforms.Normalize](https://pytorch.org/vision/stable/generated/torchvision.transforms.Normalize.html#torchvision.transforms.Normalize \"torchvision.transforms.Normalize\")(\n>                                             [0.485, 0.456, 0.406],\n>                                             [0.229, 0.224, 0.225])])\n>     image = Image.open(io.BytesIO(image_bytes))\n>     return my_transforms(image).unsqueeze(0)\n> \n> def get_prediction(image_bytes):\n>     tensor = transform_image(image_bytes=image_bytes)\n>     outputs = model.forward(tensor)\n>     _, y_hat = outputs.max(1)\n>     predicted_idx = str(y_hat.item())\n>     return imagenet_class_index[predicted_idx]\n> \n> @app.route('/predict', methods=['POST'])\n> def predict():\n>     if request.method == 'POST':\n>         file = request.files['file']\n>         img_bytes = file.read()\n>         class_id, class_name = get_prediction(image_bytes=img_bytes)\n>         return jsonify({'class_id': class_id, 'class_name': class_name})\n> \n> if __name__ == '__main__':\n>     app.run() \n> ```", "```py\n> FLASK_ENV=development  FLASK_APP=app.py  flask  run \n> ```", "```py\n> import requests\n> \n> resp = requests.post(\"http://localhost:5000/predict\",\n>                      files={\"file\": open('<PATH/TO/.jpg/FILE>/cat.jpg','rb')}) \n> ```", "```py\n> {\"class_id\":  \"n02124075\",  \"class_name\":  \"Egyptian_cat\"} \n> ```"]