- en: Transforming and augmenting images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换和增强图像
- en: 原文：[https://pytorch.org/vision/stable/transforms.html](https://pytorch.org/vision/stable/transforms.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 无论您是新手还是已经熟悉Torchvision转换，我们鼓励您从[开始使用转换v2](auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py)开始，以了解新的v2转换可以做什么。
- en: Torchvision supports common computer vision transformations in the `torchvision.transforms`
    and `torchvision.transforms.v2` modules. Transforms can be used to transform or
    augment data for training or inference of different tasks (image classification,
    detection, segmentation, video classification).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/vision/stable/transforms.html](https://pytorch.org/vision/stable/transforms.html)
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Transforms are typically passed as the `transform` or `transforms` argument
    to the [Datasets](datasets.html#datasets).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Torchvision支持在`torchvision.transforms`和`torchvision.transforms.v2`模块中的常见计算机视觉转换。转换可用于转换或增强数据，用于不同任务的训练或推断（图像分类、检测、分割、视频分类）。
- en: Start here[](#start-here "Permalink to this heading")
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换通常作为`transform`或`transforms`参数传递给[数据集](datasets.html#datasets)。开始阅读[](#start-here
    "Permalink to this heading")
- en: Whether you’re new to Torchvision transforms, or you’re already experienced
    with them, we encourage you to start with [Getting started with transforms v2](auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py)
    in order to learn more about what can be done with the new v2 transforms.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，浏览本页下面的部分以获取一般信息和性能提示。可在[API参考](#v2-api-ref)中列出可用的转换和功能。
- en: Then, browse the sections in below this page for general information and performance
    tips. The available transforms and functionals are listed in the [API reference](#v2-api-ref).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '## V1还是V2？我应该使用哪个？'
- en: 'More information and tutorials can also be found in our [example gallery](auto_examples/index.html#gallery),
    e.g. [Transforms v2: End-to-end object detection/segmentation example](auto_examples/transforms/plot_transforms_e2e.html#sphx-glr-auto-examples-transforms-plot-transforms-e2e-py)
    or [How to write your own v2 transforms](auto_examples/transforms/plot_custom_transforms.html#sphx-glr-auto-examples-transforms-plot-custom-transforms-py).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息和教程也可以在我们的[示例库](auto_examples/index.html#gallery)中找到，例如[转换v2：端到端目标检测/分割示例](auto_examples/transforms/plot_transforms_e2e.html#sphx-glr-auto-examples-transforms-plot-transforms-e2e-py)或[如何编写自己的v2转换](auto_examples/transforms/plot_custom_transforms.html#sphx-glr-auto-examples-transforms-plot-custom-transforms-py)。
- en: '## Supported input types and conventions[](#supported-input-types-and-conventions
    "Permalink to this heading")'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '## 支持的输入类型和约定'
- en: Most transformations accept both [PIL](https://pillow.readthedocs.io) images
    and tensor inputs. Both CPU and CUDA tensors are supported. The result of both
    backends (PIL or Tensors) should be very close. In general, we recommend relying
    on the tensor backend [for performance](#transforms-perf). The [conversion transforms](#conversion-transforms)
    may be used to convert to and from PIL images, or for converting dtypes and ranges.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数转换接受[PIL](https://pillow.readthedocs.io)图像和张量输入。支持CPU和CUDA张量。两个后端（PIL或张量）的结果应该非常接近。一般来说，我们建议依赖张量后端[以获得更好的性能](#transforms-perf)。[转换转换](#conversion-transforms)可用于转换为PIL图像，或用于转换dtype和范围。
- en: Tensor image are expected to be of shape `(C, H, W)`, where `C` is the number
    of channels, and `H` and `W` refer to height and width. Most transforms support
    batched tensor input. A batch of Tensor images is a tensor of shape `(N, C, H,
    W)`, where `N` is a number of images in the batch. The [v2](#v1-or-v2) transforms
    generally accept an arbitrary number of leading dimensions `(..., C, H, W)` and
    can handle batched images or batched videos.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 张量图像的形状应为`(C, H, W)`，其中`C`是通道数，`H`和`W`分别是高度和宽度。大多数转换支持批量张量输入。一批张量图像是形状为`(N,
    C, H, W)`的张量，其中`N`是批量中的图像数量。[v2](#v1-or-v2)转换通常接受任意数量的前导维度`(..., C, H, W)`，并且可以处理批量图像或批量视频。
- en: '### Dtype and expected value range[](#dtype-and-expected-value-range "Permalink
    to this heading")'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '### Dtype和预期值范围'
- en: The expected range of the values of a tensor image is implicitly defined by
    the tensor dtype. Tensor images with a float dtype are expected to have values
    in `[0, 1]`. Tensor images with an integer dtype are expected to have values in
    `[0, MAX_DTYPE]` where `MAX_DTYPE` is the largest value that can be represented
    in that dtype. Typically, images of dtype `torch.uint8` are expected to have values
    in `[0, 255]`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 张量图像的值的预期范围由张量dtype隐式定义。具有浮点dtype的张量图像的值应在`[0, 1]`范围内。具有整数dtype的张量图像的值应在`[0,
    MAX_DTYPE]`范围内，其中`MAX_DTYPE`是该dtype中可以表示的最大值。通常，dtype为`torch.uint8`的图像的值应在`[0,
    255]`范围内。
- en: 'Use [`ToDtype`](generated/torchvision.transforms.v2.ToDtype.html#torchvision.transforms.v2.ToDtype
    "torchvision.transforms.v2.ToDtype") to convert both the dtype and range of the
    inputs.  ## V1 or V2? Which one should I use?[](#v1-or-v2-which-one-should-i-use
    "Permalink to this heading")'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`ToDtype`](generated/torchvision.transforms.v2.ToDtype.html#torchvision.transforms.v2.ToDtype
    "torchvision.transforms.v2.ToDtype")来转换输入的dtype和范围。
- en: '**TL;DR** We recommending using the `torchvision.transforms.v2` transforms
    instead of those in `torchvision.transforms`. They’re faster and they can do more
    things. Just change the import and you should be good to go. Moving forward, new
    features and improvements will only be considered for the v2 transforms.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**TL;DR** 我们建议使用`torchvision.transforms.v2`转换，而不是`torchvision.transforms`中的转换。它们更快，功能更强大。只需更改导入，您就可以开始使用。未来，新功能和改进将仅考虑v2转换。'
- en: 'In Torchvision 0.15 (March 2023), we released a new set of transforms available
    in the `torchvision.transforms.v2` namespace. These transforms have a lot of advantages
    compared to the v1 ones (in `torchvision.transforms`):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在Torchvision 0.15（2023年3月）中，我们发布了一组新的转换，可在`torchvision.transforms.v2`命名空间中使用。与v1中的转换相比，这些转换具有许多优势：
- en: 'They can transform images **but also** bounding boxes, masks, or videos. This
    provides support for tasks beyond image classification: detection, segmentation,
    video classification, etc. See [Getting started with transforms v2](auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py)
    and [Transforms v2: End-to-end object detection/segmentation example](auto_examples/transforms/plot_transforms_e2e.html#sphx-glr-auto-examples-transforms-plot-transforms-e2e-py).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以转换图像**还可以**边界框、蒙版或视频。这为超出图像分类的任务提供了支持：检测、分割、视频分类等。请参阅[开始使用转换v2](auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py)和[转换v2：端到端目标检测/分割示例](auto_examples/transforms/plot_transforms_e2e.html#sphx-glr-auto-examples-transforms-plot-transforms-e2e-py)。
- en: They support more transforms like [`CutMix`](generated/torchvision.transforms.v2.CutMix.html#torchvision.transforms.v2.CutMix
    "torchvision.transforms.v2.CutMix") and [`MixUp`](generated/torchvision.transforms.v2.MixUp.html#torchvision.transforms.v2.MixUp
    "torchvision.transforms.v2.MixUp"). See [How to use CutMix and MixUp](auto_examples/transforms/plot_cutmix_mixup.html#sphx-glr-auto-examples-transforms-plot-cutmix-mixup-py).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们支持更多的转换，如[`CutMix`](generated/torchvision.transforms.v2.CutMix.html#torchvision.transforms.v2.CutMix
    "torchvision.transforms.v2.CutMix")和[`MixUp`](generated/torchvision.transforms.v2.MixUp.html#torchvision.transforms.v2.MixUp
    "torchvision.transforms.v2.MixUp")。请参阅[如何使用CutMix和MixUp](auto_examples/transforms/plot_cutmix_mixup.html#sphx-glr-auto-examples-transforms-plot-cutmix-mixup-py)。
- en: They’re [faster](#transforms-perf).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们更快(#transforms-perf)。
- en: They support arbitrary input structures (dicts, lists, tuples, etc.).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们支持任意输入结构（字典、列表、元组等）。
- en: Future improvements and features will be added to the v2 transforms only.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来的改进和功能将仅添加到v2转换中。
- en: 'These transforms are **fully backward compatible** with the v1 ones, so if
    you’re already using tranforms from `torchvision.transforms`, all you need to
    do to is to update the import to `torchvision.transforms.v2`. In terms of output,
    there might be negligible differences due to implementation differences.  ## Performance
    considerations[](#performance-considerations "Permalink to this heading")'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些转换与v1版本完全兼容，因此如果您已经使用`torchvision.transforms`中的转换，您只需要更新导入为`torchvision.transforms.v2`。在输出方面，由于实现差异可能会有微不足道的差异。##性能考虑[](#performance-considerations
    "跳转到此标题的永久链接")
- en: 'We recommend the following guidelines to get the best performance out of the
    transforms:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议以下准则以获得最佳性能：
- en: Rely on the v2 transforms from `torchvision.transforms.v2`
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖于`torchvision.transforms.v2`中的v2转换
- en: Use tensors instead of PIL images
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用张量而不是PIL图像
- en: Use `torch.uint8` dtype, especially for resizing
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`torch.uint8`数据类型，特别是用于调整大小
- en: Resize with bilinear or bicubic mode
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用双线性或双三次插值模式调整大小
- en: 'This is what a typical transform pipeline could look like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的转换流水线可能看起来像：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The above should give you the best performance in a typical training environment
    that relies on the [`torch.utils.data.DataLoader`](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader
    "(in PyTorch v2.2)") with `num_workers > 0`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容应该为依赖于`torch.utils.data.DataLoader`（https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader
    "(在PyTorch v2.2中)")且`num_workers > 0`的典型训练环境提供最佳性能。
- en: Transforms tend to be sensitive to the input strides / memory format. Some transforms
    will be faster with channels-first images while others prefer channels-last. Like
    `torch` operators, most transforms will preserve the memory format of the input,
    but this may not always be respected due to implementation details. You may want
    to experiment a bit if you’re chasing the very best performance. Using [`torch.compile()`](https://pytorch.org/docs/stable/generated/torch.compile.html#torch.compile
    "(in PyTorch v2.2)") on individual transforms may also help factoring out the
    memory format variable (e.g. on [`Normalize`](generated/torchvision.transforms.v2.Normalize.html#torchvision.transforms.v2.Normalize
    "torchvision.transforms.v2.Normalize")). Note that we’re talking about **memory
    format**, not [tensor shape](#conventions).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 转换往往对输入步幅/内存格式敏感。一些转换在通道优先图像上速度更快，而其他转换则更喜欢通道最后。与`torch`操作符一样，大多数转换将保留输入的内存格式，但由于实现细节，这并不总是被尊重。如果您追求最佳性能，您可能需要进行一些实验。在单个转换上使用[`torch.compile()`](https://pytorch.org/docs/stable/generated/torch.compile.html#torch.compile
    "(在PyTorch v2.2中)")也有助于分解内存格式变量（例如在[`Normalize`](generated/torchvision.transforms.v2.Normalize.html#torchvision.transforms.v2.Normalize
    "torchvision.transforms.v2.Normalize")上）。请注意，我们谈论的是**内存格式**，而不是[张量形状](#conventions)。
- en: 'Note that resize transforms like [`Resize`](generated/torchvision.transforms.v2.Resize.html#torchvision.transforms.v2.Resize
    "torchvision.transforms.v2.Resize") and [`RandomResizedCrop`](generated/torchvision.transforms.v2.RandomResizedCrop.html#torchvision.transforms.v2.RandomResizedCrop
    "torchvision.transforms.v2.RandomResizedCrop") typically prefer channels-last
    input and tend **not** to benefit from [`torch.compile()`](https://pytorch.org/docs/stable/generated/torch.compile.html#torch.compile
    "(in PyTorch v2.2)") at this time.  ## Transform classes, functionals, and kernels[](#transform-classes-functionals-and-kernels
    "Permalink to this heading")'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，像[`Resize`](generated/torchvision.transforms.v2.Resize.html#torchvision.transforms.v2.Resize
    "torchvision.transforms.v2.Resize")和[`RandomResizedCrop`](generated/torchvision.transforms.v2.RandomResizedCrop.html#torchvision.transforms.v2.RandomResizedCrop
    "torchvision.transforms.v2.RandomResizedCrop")这样的调整大小转换通常更喜欢通道最后的输入，并且目前**不**受益于[`torch.compile()`](https://pytorch.org/docs/stable/generated/torch.compile.html#torch.compile
    "(在PyTorch v2.2中)")。##转换类、功能和内核[](#transform-classes-functionals-and-kernels "跳转到此标题的永久链接")
- en: Transforms are available as classes like [`Resize`](generated/torchvision.transforms.v2.Resize.html#torchvision.transforms.v2.Resize
    "torchvision.transforms.v2.Resize"), but also as functionals like [`resize()`](generated/torchvision.transforms.v2.functional.resize.html#torchvision.transforms.v2.functional.resize
    "torchvision.transforms.v2.functional.resize") in the `torchvision.transforms.v2.functional`
    namespace. This is very much like the [`torch.nn`](https://pytorch.org/docs/stable/nn.html#module-torch.nn
    "(in PyTorch v2.2)") package which defines both classes and functional equivalents
    in [`torch.nn.functional`](https://pytorch.org/docs/stable/nn.html#module-torch.nn.functional
    "(in PyTorch v2.2)").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 转换可作为类（[`Resize`](generated/torchvision.transforms.v2.Resize.html#torchvision.transforms.v2.Resize
    "torchvision.transforms.v2.Resize")）和functionals（[`resize()`](generated/torchvision.transforms.v2.functional.resize.html#torchvision.transforms.v2.functional.resize
    "torchvision.transforms.v2.functional.resize")）在`torchvision.transforms.v2.functional`命名空间中。这与[`torch.nn`](https://pytorch.org/docs/stable/nn.html#module-torch.nn
    "(在PyTorch v2.2)")包非常相似，后者在[`torch.nn.functional`](https://pytorch.org/docs/stable/nn.html#module-torch.nn.functional
    "(在PyTorch v2.2)")中定义了类和功能等效项。
- en: The functionals support PIL images, pure tensors, or [TVTensors](tv_tensors.html#tv-tensors),
    e.g. both `resize(image_tensor)` and `resize(boxes)` are valid.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: functionals支持PIL图像、纯张量或[TVTensors](tv_tensors.html#tv-tensors)，例如`resize(image_tensor)`和`resize(boxes)`都是有效的。
- en: Note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Random transforms like [`RandomCrop`](generated/torchvision.transforms.v2.RandomCrop.html#torchvision.transforms.v2.RandomCrop
    "torchvision.transforms.v2.RandomCrop") will randomly sample some parameter each
    time they’re called. Their functional counterpart ([`crop()`](generated/torchvision.transforms.v2.functional.crop.html#torchvision.transforms.v2.functional.crop
    "torchvision.transforms.v2.functional.crop")) does not do any kind of random sampling
    and thus have a slighlty different parametrization. The `get_params()` class method
    of the transforms class can be used to perform parameter sampling when using the
    functional APIs.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 像[`RandomCrop`](generated/torchvision.transforms.v2.RandomCrop.html#torchvision.transforms.v2.RandomCrop
    "torchvision.transforms.v2.RandomCrop")这样的随机转换每次调用时都会随机抽样一些参数。它们的功能对应项（[`crop()`](generated/torchvision.transforms.v2.functional.crop.html#torchvision.transforms.v2.functional.crop
    "torchvision.transforms.v2.functional.crop")）不进行任何随机抽样，因此具有略有不同的参数化。当使用功能API时，可以使用transforms类的`get_params()`类方法执行参数抽样。
- en: 'The `torchvision.transforms.v2.functional` namespace also contains what we
    call the “kernels”. These are the low-level functions that implement the core
    functionalities for specific types, e.g. `resize_bounding_boxes` or ``resized_crop_mask`.
    They are public, although not documented. Check the [code](https://github.com/pytorch/vision/blob/main/torchvision/transforms/v2/functional/__init__.py)
    to see which ones are available (note that those starting with a leading underscore
    are **not** public!). Kernels are only really useful if you want [torchscript
    support](#transforms-torchscript) for types like bounding boxes or masks.  ##
    Torchscript support[](#torchscript-support "Permalink to this heading")'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`torchvision.transforms.v2.functional`命名空间还包含我们称之为“内核”的内容。这些是实现特定类型的核心功能的低级函数，例如`resize_bounding_boxes`或`resized_crop_mask`。它们是公开的，尽管没有文档记录。查看[代码](https://github.com/pytorch/vision/blob/main/torchvision/transforms/v2/functional/__init__.py)以查看可用的函数（请注意，以下划线开头的函数**不**是公开的！）。如果您想要对像边界框或掩码这样的类型进行[torchscript支持](#transforms-torchscript)，内核才真正有用。##
    Torchscript支持[](#torchscript-support "跳转到此标题")'
- en: 'Most transform classes and functionals support torchscript. For composing transforms,
    use [`torch.nn.Sequential`](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential
    "(in PyTorch v2.2)") instead of [`Compose`](generated/torchvision.transforms.v2.Compose.html#torchvision.transforms.v2.Compose
    "torchvision.transforms.v2.Compose"):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数转换类和functionals都支持torchscript。对于组合转换，请使用[`torch.nn.Sequential`](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential
    "(在PyTorch v2.2)")而不是[`Compose`](generated/torchvision.transforms.v2.Compose.html#torchvision.transforms.v2.Compose
    "torchvision.transforms.v2.Compose")：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Warning
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: v2 transforms support torchscript, but if you call `torch.jit.script()` on a
    v2 **class** transform, you’ll actually end up with its (scripted) v1 equivalent.
    This may lead to slightly different results between the scripted and eager executions
    due to implementation differences between v1 and v2.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: v2转换支持torchscript，但是如果您在v2 **类**转换上调用`torch.jit.script()`，实际上会得到其（脚本化的）v1等效项。由于v1和v2之间的实现差异，这可能导致脚本化和急切执行之间略有不同的结果。
- en: If you really need torchscript support for the v2 transforms, we recommend scripting
    the **functionals** from the `torchvision.transforms.v2.functional` namespace
    to avoid surprises.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您真的需要v2转换的torchscript支持，我们建议对`torchvision.transforms.v2.functional`命名空间中的**functionals**进行脚本化，以避免意外。
- en: Also note that the functionals only support torchscript for pure tensors, which
    are always treated as images. If you need torchscript support for other types
    like bounding boxes or masks, you can rely on the [low-level kernels](#functional-transforms).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，functionals仅支持纯张量的torchscript，这些张量始终被视为图像。如果您需要对像边界框或掩码等其他类型进行torchscript支持，可以依赖于[低级内核](#functional-transforms)。
- en: For any custom transformations to be used with `torch.jit.script`, they should
    be derived from `torch.nn.Module`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于要与`torch.jit.script`一起使用的自定义转换，它们应该派生自`torch.nn.Module`。
- en: 'See also: [Torchscript support](auto_examples/others/plot_scripted_tensor_transforms.html#sphx-glr-auto-examples-others-plot-scripted-tensor-transforms-py).  ##
    V2 API reference - Recommended[](#v2-api-reference-recommended "Permalink to this
    heading")'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅：[Torchscript支持](auto_examples/others/plot_scripted_tensor_transforms.html#sphx-glr-auto-examples-others-plot-scripted-tensor-transforms-py)。##
    V2 API参考-推荐[](#v2-api-reference-recommended "跳转到此标题")
- en: Geometry[](#geometry "Permalink to this heading")
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 几何[](#geometry "跳转到此标题")
- en: Resizing[](#resizing "Permalink to this heading")
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调整大小[](#resizing "跳转到此标题")
- en: '| [`v2.Resize`](generated/torchvision.transforms.v2.Resize.html#torchvision.transforms.v2.Resize
    "torchvision.transforms.v2.Resize")(size[, interpolation, max_size, ...]) | Resize
    the input to the given size. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '[`v2.Resize`](generated/torchvision.transforms.v2.Resize.html#torchvision.transforms.v2.Resize
    "torchvision.transforms.v2.Resize")(size[, interpolation, max_size, ...]) | 将输入调整为给定大小。'
- en: '| [`v2.ScaleJitter`](generated/torchvision.transforms.v2.ScaleJitter.html#torchvision.transforms.v2.ScaleJitter
    "torchvision.transforms.v2.ScaleJitter")(target_size[, scale_range, ...]) | Perform
    Large Scale Jitter on the input according to ["Simple Copy-Paste is a Strong Data
    Augmentation Method for Instance Segmentation"](https://arxiv.org/abs/2012.07177).
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '[`v2.ScaleJitter`](generated/torchvision.transforms.v2.ScaleJitter.html#torchvision.transforms.v2.ScaleJitter
    "torchvision.transforms.v2.ScaleJitter")(target_size[, scale_range, ...]) | 根据["Simple
    Copy-Paste is a Strong Data Augmentation Method for Instance Segmentation"](https://arxiv.org/abs/2012.07177)对输入执行大规模抖动。'
- en: '| [`v2.RandomShortestSize`](generated/torchvision.transforms.v2.RandomShortestSize.html#torchvision.transforms.v2.RandomShortestSize
    "torchvision.transforms.v2.RandomShortestSize")(min_size[, max_size, ...]) | Randomly
    resize the input. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '[`v2.RandomShortestSize`](generated/torchvision.transforms.v2.RandomShortestSize.html#torchvision.transforms.v2.RandomShortestSize
    "torchvision.transforms.v2.RandomShortestSize")(min_size[, max_size, ...]) | 随机调整输入大小。'
- en: '| [`v2.RandomResize`](generated/torchvision.transforms.v2.RandomResize.html#torchvision.transforms.v2.RandomResize
    "torchvision.transforms.v2.RandomResize")(min_size, max_size[, ...]) | Randomly
    resize the input. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '[`v2.RandomResize`](generated/torchvision.transforms.v2.RandomResize.html#torchvision.transforms.v2.RandomResize
    "torchvision.transforms.v2.RandomResize")(min_size, max_size[, ...]) | 随机调整输入大小。'
- en: Functionals
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 功能
- en: '| [`v2.functional.resize`](generated/torchvision.transforms.v2.functional.resize.html#torchvision.transforms.v2.functional.resize
    "torchvision.transforms.v2.functional.resize")(inpt, size[, ...]) | See [`Resize`](generated/torchvision.transforms.v2.Resize.html#torchvision.transforms.v2.Resize
    "torchvision.transforms.v2.Resize") for details. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '[`v2.functional.resize`](generated/torchvision.transforms.v2.functional.resize.html#torchvision.transforms.v2.functional.resize
    "torchvision.transforms.v2.functional.resize")(inpt, size[, ...]) | 详细信息请参见[`Resize`](generated/torchvision.transforms.v2.Resize.html#torchvision.transforms.v2.Resize
    "torchvision.transforms.v2.Resize")。'
- en: Cropping[](#cropping "Permalink to this heading")
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 裁剪[](#cropping "跳转到此标题")
- en: '| [`v2.RandomCrop`](generated/torchvision.transforms.v2.RandomCrop.html#torchvision.transforms.v2.RandomCrop
    "torchvision.transforms.v2.RandomCrop")(size[, padding, ...]) | Crop the input
    at a random location. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '[`v2.RandomCrop`](generated/torchvision.transforms.v2.RandomCrop.html#torchvision.transforms.v2.RandomCrop
    "torchvision.transforms.v2.RandomCrop")(size[, padding, ...]) | 在随机位置裁剪输入。'
- en: '| [`v2.RandomResizedCrop`](generated/torchvision.transforms.v2.RandomResizedCrop.html#torchvision.transforms.v2.RandomResizedCrop
    "torchvision.transforms.v2.RandomResizedCrop")(size[, scale, ratio, ...]) | Crop
    a random portion of the input and resize it to a given size. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '[`v2.RandomResizedCrop`](generated/torchvision.transforms.v2.RandomResizedCrop.html#torchvision.transforms.v2.RandomResizedCrop
    "torchvision.transforms.v2.RandomResizedCrop")(size[, scale, ratio, ...]) | 对输入进行随机裁剪并调整大小到给定大小。'
- en: '| [`v2.RandomIoUCrop`](generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop
    "torchvision.transforms.v2.RandomIoUCrop")([min_scale, max_scale, ...]) | Random
    IoU crop transformation from ["SSD: Single Shot MultiBox Detector"](https://arxiv.org/abs/1512.02325).
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '[`v2.RandomIoUCrop`](generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop
    "torchvision.transforms.v2.RandomIoUCrop")([min_scale, max_scale, ...]) | 来自["SSD:
    Single Shot MultiBox Detector"](https://arxiv.org/abs/1512.02325)的随机IoU裁剪转换。'
- en: '| [`v2.CenterCrop`](generated/torchvision.transforms.v2.CenterCrop.html#torchvision.transforms.v2.CenterCrop
    "torchvision.transforms.v2.CenterCrop")(size) | Crop the input at the center.
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '[`v2.CenterCrop`](generated/torchvision.transforms.v2.CenterCrop.html#torchvision.transforms.v2.CenterCrop
    "torchvision.transforms.v2.CenterCrop")(size) | 在中心裁剪输入。'
- en: '| [`v2.FiveCrop`](generated/torchvision.transforms.v2.FiveCrop.html#torchvision.transforms.v2.FiveCrop
    "torchvision.transforms.v2.FiveCrop")(size) | Crop the image or video into four
    corners and the central crop. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '[`v2.FiveCrop`](generated/torchvision.transforms.v2.FiveCrop.html#torchvision.transforms.v2.FiveCrop
    "torchvision.transforms.v2.FiveCrop")(size) | 将图像或视频裁剪成四个角和中心裁剪。'
- en: '| [`v2.TenCrop`](generated/torchvision.transforms.v2.TenCrop.html#torchvision.transforms.v2.TenCrop
    "torchvision.transforms.v2.TenCrop")(size[, vertical_flip]) | Crop the image or
    video into four corners and the central crop plus the flipped version of these
    (horizontal flipping is used by default). |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '[`v2.TenCrop`](generated/torchvision.transforms.v2.TenCrop.html#torchvision.transforms.v2.TenCrop
    "torchvision.transforms.v2.TenCrop")(size[, vertical_flip]) | 将图像或视频裁剪成四个角和中心裁剪以及这些的翻转版本（默认使用水平翻转）。'
- en: Functionals
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 功能
- en: '| [`v2.functional.crop`](generated/torchvision.transforms.v2.functional.crop.html#torchvision.transforms.v2.functional.crop
    "torchvision.transforms.v2.functional.crop")(inpt, top, left, height, ...) | See
    [`RandomCrop`](generated/torchvision.transforms.v2.RandomCrop.html#torchvision.transforms.v2.RandomCrop
    "torchvision.transforms.v2.RandomCrop") for details. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '[`v2.functional.crop`](generated/torchvision.transforms.v2.functional.crop.html#torchvision.transforms.v2.functional.crop
    "torchvision.transforms.v2.functional.crop")(inpt, top, left, height, ...) | 详细信息请参见[`RandomCrop`](generated/torchvision.transforms.v2.RandomCrop.html#torchvision.transforms.v2.RandomCrop
    "torchvision.transforms.v2.RandomCrop")。'
- en: '| [`v2.functional.resized_crop`](generated/torchvision.transforms.v2.functional.resized_crop.html#torchvision.transforms.v2.functional.resized_crop
    "torchvision.transforms.v2.functional.resized_crop")(inpt, top, left, ...) | See
    [`RandomResizedCrop`](generated/torchvision.transforms.v2.RandomResizedCrop.html#torchvision.transforms.v2.RandomResizedCrop
    "torchvision.transforms.v2.RandomResizedCrop") for details. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '[`v2.functional.resized_crop`](generated/torchvision.transforms.v2.functional.resized_crop.html#torchvision.transforms.v2.functional.resized_crop
    "torchvision.transforms.v2.functional.resized_crop")(inpt, top, left, ...) | 详细信息请参见[`RandomResizedCrop`](generated/torchvision.transforms.v2.RandomResizedCrop.html#torchvision.transforms.v2.RandomResizedCrop
    "torchvision.transforms.v2.RandomResizedCrop")。'
- en: '| [`v2.functional.ten_crop`](generated/torchvision.transforms.v2.functional.ten_crop.html#torchvision.transforms.v2.functional.ten_crop
    "torchvision.transforms.v2.functional.ten_crop")(inpt, size[, ...]) | See [`TenCrop`](generated/torchvision.transforms.v2.TenCrop.html#torchvision.transforms.v2.TenCrop
    "torchvision.transforms.v2.TenCrop") for details. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.ten_crop`](generated/torchvision.transforms.v2.functional.ten_crop.html#torchvision.transforms.v2.functional.ten_crop
    "torchvision.transforms.v2.functional.ten_crop")(inpt, size[, ...]) | 查看详细信息，请参阅[`TenCrop`](generated/torchvision.transforms.v2.TenCrop.html#torchvision.transforms.v2.TenCrop
    "torchvision.transforms.v2.TenCrop")。 |'
- en: '| [`v2.functional.center_crop`](generated/torchvision.transforms.v2.functional.center_crop.html#torchvision.transforms.v2.functional.center_crop
    "torchvision.transforms.v2.functional.center_crop")(inpt, output_size) | See [`RandomCrop`](generated/torchvision.transforms.v2.RandomCrop.html#torchvision.transforms.v2.RandomCrop
    "torchvision.transforms.v2.RandomCrop") for details. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.center_crop`](generated/torchvision.transforms.v2.functional.center_crop.html#torchvision.transforms.v2.functional.center_crop
    "torchvision.transforms.v2.functional.center_crop")(inpt, output_size) | 查看详细信息，请参阅[`RandomCrop`](generated/torchvision.transforms.v2.RandomCrop.html#torchvision.transforms.v2.RandomCrop
    "torchvision.transforms.v2.RandomCrop")。 |'
- en: '| [`v2.functional.five_crop`](generated/torchvision.transforms.v2.functional.five_crop.html#torchvision.transforms.v2.functional.five_crop
    "torchvision.transforms.v2.functional.five_crop")(inpt, size) | See [`FiveCrop`](generated/torchvision.transforms.v2.FiveCrop.html#torchvision.transforms.v2.FiveCrop
    "torchvision.transforms.v2.FiveCrop") for details. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.five_crop`](generated/torchvision.transforms.v2.functional.five_crop.html#torchvision.transforms.v2.functional.five_crop
    "torchvision.transforms.v2.functional.five_crop")(inpt, size) | 查看详细信息，请参阅[`FiveCrop`](generated/torchvision.transforms.v2.FiveCrop.html#torchvision.transforms.v2.FiveCrop
    "torchvision.transforms.v2.FiveCrop")。 |'
- en: Others[](#others "Permalink to this heading")
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 其他[](#others "跳转到此标题")
- en: '| [`v2.RandomHorizontalFlip`](generated/torchvision.transforms.v2.RandomHorizontalFlip.html#torchvision.transforms.v2.RandomHorizontalFlip
    "torchvision.transforms.v2.RandomHorizontalFlip")([p]) | Horizontally flip the
    input with a given probability. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomHorizontalFlip`](generated/torchvision.transforms.v2.RandomHorizontalFlip.html#torchvision.transforms.v2.RandomHorizontalFlip
    "torchvision.transforms.v2.RandomHorizontalFlip")([p]) | 按给定概率水平翻转输入。 |'
- en: '| [`v2.RandomVerticalFlip`](generated/torchvision.transforms.v2.RandomVerticalFlip.html#torchvision.transforms.v2.RandomVerticalFlip
    "torchvision.transforms.v2.RandomVerticalFlip")([p]) | Vertically flip the input
    with a given probability. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomVerticalFlip`](generated/torchvision.transforms.v2.RandomVerticalFlip.html#torchvision.transforms.v2.RandomVerticalFlip
    "torchvision.transforms.v2.RandomVerticalFlip")([p]) | 按给定概率垂直翻转输入。 |'
- en: '| [`v2.Pad`](generated/torchvision.transforms.v2.Pad.html#torchvision.transforms.v2.Pad
    "torchvision.transforms.v2.Pad")(padding[, fill, padding_mode]) | Pad the input
    on all sides with the given "pad" value. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.Pad`](generated/torchvision.transforms.v2.Pad.html#torchvision.transforms.v2.Pad
    "torchvision.transforms.v2.Pad")(padding[, fill, padding_mode]) | 使用给定的“pad”值在所有边上填充输入。
    |'
- en: '| [`v2.RandomZoomOut`](generated/torchvision.transforms.v2.RandomZoomOut.html#torchvision.transforms.v2.RandomZoomOut
    "torchvision.transforms.v2.RandomZoomOut")([fill, side_range, p]) | "Zoom out"
    transformation from ["SSD: Single Shot MultiBox Detector"](https://arxiv.org/abs/1512.02325).
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomZoomOut`](generated/torchvision.transforms.v2.RandomZoomOut.html#torchvision.transforms.v2.RandomZoomOut
    "torchvision.transforms.v2.RandomZoomOut")([fill, side_range, p]) | 来自["SSD: Single
    Shot MultiBox Detector"](https://arxiv.org/abs/1512.02325)的"缩小"变换。 |'
- en: '| [`v2.RandomRotation`](generated/torchvision.transforms.v2.RandomRotation.html#torchvision.transforms.v2.RandomRotation
    "torchvision.transforms.v2.RandomRotation")(degrees[, interpolation, ...]) | Rotate
    the input by angle. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomRotation`](generated/torchvision.transforms.v2.RandomRotation.html#torchvision.transforms.v2.RandomRotation
    "torchvision.transforms.v2.RandomRotation")(degrees[, interpolation, ...]) | 将输入旋转指定角度。
    |'
- en: '| [`v2.RandomAffine`](generated/torchvision.transforms.v2.RandomAffine.html#torchvision.transforms.v2.RandomAffine
    "torchvision.transforms.v2.RandomAffine")(degrees[, translate, scale, ...]) |
    Random affine transformation the input keeping center invariant. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomAffine`](generated/torchvision.transforms.v2.RandomAffine.html#torchvision.transforms.v2.RandomAffine
    "torchvision.transforms.v2.RandomAffine")(degrees[, translate, scale, ...]) |
    随机仿射变换输入，保持中心不变。 |'
- en: '| [`v2.RandomPerspective`](generated/torchvision.transforms.v2.RandomPerspective.html#torchvision.transforms.v2.RandomPerspective
    "torchvision.transforms.v2.RandomPerspective")([distortion_scale, p, ...]) | Perform
    a random perspective transformation of the input with a given probability. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomPerspective`](generated/torchvision.transforms.v2.RandomPerspective.html#torchvision.transforms.v2.RandomPerspective
    "torchvision.transforms.v2.RandomPerspective")([distortion_scale, p, ...]) | 按给定概率对输入执行随机透视变换。
    |'
- en: '| [`v2.ElasticTransform`](generated/torchvision.transforms.v2.ElasticTransform.html#torchvision.transforms.v2.ElasticTransform
    "torchvision.transforms.v2.ElasticTransform")([alpha, sigma, ...]) | Transform
    the input with elastic transformations. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.ElasticTransform`](generated/torchvision.transforms.v2.ElasticTransform.html#torchvision.transforms.v2.ElasticTransform
    "torchvision.transforms.v2.ElasticTransform")([alpha, sigma, ...]) | 使用弹性变换对输入进行变换。
    |'
- en: Functionals
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 功能函数
- en: '| [`v2.functional.horizontal_flip`](generated/torchvision.transforms.v2.functional.horizontal_flip.html#torchvision.transforms.v2.functional.horizontal_flip
    "torchvision.transforms.v2.functional.horizontal_flip")(inpt) | See [`RandomHorizontalFlip`](generated/torchvision.transforms.v2.RandomHorizontalFlip.html#torchvision.transforms.v2.RandomHorizontalFlip
    "torchvision.transforms.v2.RandomHorizontalFlip") for details. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.horizontal_flip`](generated/torchvision.transforms.v2.functional.horizontal_flip.html#torchvision.transforms.v2.functional.horizontal_flip
    "torchvision.transforms.v2.functional.horizontal_flip")(inpt) | 查看详细信息，请参阅[`RandomHorizontalFlip`](generated/torchvision.transforms.v2.RandomHorizontalFlip.html#torchvision.transforms.v2.RandomHorizontalFlip
    "torchvision.transforms.v2.RandomHorizontalFlip")。 |'
- en: '| [`v2.functional.vertical_flip`](generated/torchvision.transforms.v2.functional.vertical_flip.html#torchvision.transforms.v2.functional.vertical_flip
    "torchvision.transforms.v2.functional.vertical_flip")(inpt) | See [`RandomVerticalFlip`](generated/torchvision.transforms.v2.RandomVerticalFlip.html#torchvision.transforms.v2.RandomVerticalFlip
    "torchvision.transforms.v2.RandomVerticalFlip") for details. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.vertical_flip`](generated/torchvision.transforms.v2.functional.vertical_flip.html#torchvision.transforms.v2.functional.vertical_flip
    "torchvision.transforms.v2.functional.vertical_flip")(inpt) | 查看[`RandomVerticalFlip`](generated/torchvision.transforms.v2.RandomVerticalFlip.html#torchvision.transforms.v2.RandomVerticalFlip
    "torchvision.transforms.v2.RandomVerticalFlip")获取详细信息。 |'
- en: '| [`v2.functional.pad`](generated/torchvision.transforms.v2.functional.pad.html#torchvision.transforms.v2.functional.pad
    "torchvision.transforms.v2.functional.pad")(inpt, padding[, fill, ...]) | See
    [`Pad`](generated/torchvision.transforms.v2.Pad.html#torchvision.transforms.v2.Pad
    "torchvision.transforms.v2.Pad") for details. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.pad`](generated/torchvision.transforms.v2.functional.pad.html#torchvision.transforms.v2.functional.pad
    "torchvision.transforms.v2.functional.pad")(inpt, padding[, fill, ...]) | 查看[`Pad`](generated/torchvision.transforms.v2.Pad.html#torchvision.transforms.v2.Pad
    "torchvision.transforms.v2.Pad")获取详细信息。 |'
- en: '| [`v2.functional.rotate`](generated/torchvision.transforms.v2.functional.rotate.html#torchvision.transforms.v2.functional.rotate
    "torchvision.transforms.v2.functional.rotate")(inpt, angle[, ...]) | See [`RandomRotation`](generated/torchvision.transforms.v2.RandomRotation.html#torchvision.transforms.v2.RandomRotation
    "torchvision.transforms.v2.RandomRotation") for details. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.rotate`](generated/torchvision.transforms.v2.functional.rotate.html#torchvision.transforms.v2.functional.rotate
    "torchvision.transforms.v2.functional.rotate")(inpt, angle[, ...]) | 查看[`RandomRotation`](generated/torchvision.transforms.v2.RandomRotation.html#torchvision.transforms.v2.RandomRotation
    "torchvision.transforms.v2.RandomRotation")获取详细信息。 |'
- en: '| [`v2.functional.affine`](generated/torchvision.transforms.v2.functional.affine.html#torchvision.transforms.v2.functional.affine
    "torchvision.transforms.v2.functional.affine")(inpt, angle, translate, ...) |
    See [`RandomAffine`](generated/torchvision.transforms.v2.RandomAffine.html#torchvision.transforms.v2.RandomAffine
    "torchvision.transforms.v2.RandomAffine") for details. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.affine`](generated/torchvision.transforms.v2.functional.affine.html#torchvision.transforms.v2.functional.affine
    "torchvision.transforms.v2.functional.affine")(inpt, angle, translate, ...) |
    查看[`RandomAffine`](generated/torchvision.transforms.v2.RandomAffine.html#torchvision.transforms.v2.RandomAffine
    "torchvision.transforms.v2.RandomAffine")获取详细信息。 |'
- en: '| [`v2.functional.perspective`](generated/torchvision.transforms.v2.functional.perspective.html#torchvision.transforms.v2.functional.perspective
    "torchvision.transforms.v2.functional.perspective")(inpt, startpoints, ...) |
    See [`RandomPerspective`](generated/torchvision.transforms.v2.RandomPerspective.html#torchvision.transforms.v2.RandomPerspective
    "torchvision.transforms.v2.RandomPerspective") for details. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.perspective`](generated/torchvision.transforms.v2.functional.perspective.html#torchvision.transforms.v2.functional.perspective
    "torchvision.transforms.v2.functional.perspective")(inpt, startpoints, ...) |
    查看[`RandomPerspective`](generated/torchvision.transforms.v2.RandomPerspective.html#torchvision.transforms.v2.RandomPerspective
    "torchvision.transforms.v2.RandomPerspective")获取详细信息。 |'
- en: '| [`v2.functional.elastic`](generated/torchvision.transforms.v2.functional.elastic.html#torchvision.transforms.v2.functional.elastic
    "torchvision.transforms.v2.functional.elastic")(inpt, displacement[, ...]) | See
    [`ElasticTransform`](generated/torchvision.transforms.v2.ElasticTransform.html#torchvision.transforms.v2.ElasticTransform
    "torchvision.transforms.v2.ElasticTransform") for details. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.elastic`](generated/torchvision.transforms.v2.functional.elastic.html#torchvision.transforms.v2.functional.elastic
    "torchvision.transforms.v2.functional.elastic")(inpt, displacement[, ...]) | 查看[`ElasticTransform`](generated/torchvision.transforms.v2.ElasticTransform.html#torchvision.transforms.v2.ElasticTransform
    "torchvision.transforms.v2.ElasticTransform")获取详细信息。 |'
- en: Color[](#color "Permalink to this heading")
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Color[](#color "Permalink to this heading")
- en: '| [`v2.ColorJitter`](generated/torchvision.transforms.v2.ColorJitter.html#torchvision.transforms.v2.ColorJitter
    "torchvision.transforms.v2.ColorJitter")([brightness, contrast, ...]) | Randomly
    change the brightness, contrast, saturation and hue of an image or video. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.ColorJitter`](generated/torchvision.transforms.v2.ColorJitter.html#torchvision.transforms.v2.ColorJitter
    "torchvision.transforms.v2.ColorJitter")([brightness, contrast, ...]) | 随机改变图像或视频的亮度、对比度、饱和度和色调。
    |'
- en: '| [`v2.RandomChannelPermutation`](generated/torchvision.transforms.v2.RandomChannelPermutation.html#torchvision.transforms.v2.RandomChannelPermutation
    "torchvision.transforms.v2.RandomChannelPermutation")() | Randomly permute the
    channels of an image or video |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomChannelPermutation`](generated/torchvision.transforms.v2.RandomChannelPermutation.html#torchvision.transforms.v2.RandomChannelPermutation
    "torchvision.transforms.v2.RandomChannelPermutation")() | 随机排列图像或视频的通道。 |'
- en: '| [`v2.RandomPhotometricDistort`](generated/torchvision.transforms.v2.RandomPhotometricDistort.html#torchvision.transforms.v2.RandomPhotometricDistort
    "torchvision.transforms.v2.RandomPhotometricDistort")([brightness, ...]) | Randomly
    distorts the image or video as used in [SSD: Single Shot MultiBox Detector](https://arxiv.org/abs/1512.02325).
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomPhotometricDistort`](generated/torchvision.transforms.v2.RandomPhotometricDistort.html#torchvision.transforms.v2.RandomPhotometricDistort
    "torchvision.transforms.v2.RandomPhotometricDistort")([brightness, ...]) | 随机扭曲图像或视频，如[SSD:
    Single Shot MultiBox Detector](https://arxiv.org/abs/1512.02325)中所使用的。 |'
- en: '| [`v2.Grayscale`](generated/torchvision.transforms.v2.Grayscale.html#torchvision.transforms.v2.Grayscale
    "torchvision.transforms.v2.Grayscale")([num_output_channels]) | Convert images
    or videos to grayscale. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.Grayscale`](generated/torchvision.transforms.v2.Grayscale.html#torchvision.transforms.v2.Grayscale
    "torchvision.transforms.v2.Grayscale")([num_output_channels]) | 将图像或视频转换为灰度图像。
    |'
- en: '| [`v2.RandomGrayscale`](generated/torchvision.transforms.v2.RandomGrayscale.html#torchvision.transforms.v2.RandomGrayscale
    "torchvision.transforms.v2.RandomGrayscale")([p]) | Randomly convert image or
    videos to grayscale with a probability of p (default 0.1). |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomGrayscale`](generated/torchvision.transforms.v2.RandomGrayscale.html#torchvision.transforms.v2.RandomGrayscale
    "torchvision.transforms.v2.RandomGrayscale")([p]) | 随机将图像或视频转换为灰度图像，概率为p（默认为0.1）。
    |'
- en: '| [`v2.GaussianBlur`](generated/torchvision.transforms.v2.GaussianBlur.html#torchvision.transforms.v2.GaussianBlur
    "torchvision.transforms.v2.GaussianBlur")(kernel_size[, sigma]) | Blurs image
    with randomly chosen Gaussian blur. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.GaussianBlur`](generated/torchvision.transforms.v2.GaussianBlur.html#torchvision.transforms.v2.GaussianBlur
    "torchvision.transforms.v2.GaussianBlur")(kernel_size[, sigma]) | 使用随机选择的高斯模糊对图像进行模糊处理。
    |'
- en: '| [`v2.RandomInvert`](generated/torchvision.transforms.v2.RandomInvert.html#torchvision.transforms.v2.RandomInvert
    "torchvision.transforms.v2.RandomInvert")([p]) | Inverts the colors of the given
    image or video with a given probability. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomInvert`](generated/torchvision.transforms.v2.RandomInvert.html#torchvision.transforms.v2.RandomInvert
    "torchvision.transforms.v2.RandomInvert")([p]) | 使用给定的概率反转给定图像或视频的颜色。 |'
- en: '| [`v2.RandomPosterize`](generated/torchvision.transforms.v2.RandomPosterize.html#torchvision.transforms.v2.RandomPosterize
    "torchvision.transforms.v2.RandomPosterize")(bits[, p]) | Posterize the image
    or video with a given probability by reducing the number of bits for each color
    channel. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomPosterize`](generated/torchvision.transforms.v2.RandomPosterize.html#torchvision.transforms.v2.RandomPosterize
    "torchvision.transforms.v2.RandomPosterize")(bits[, p]) | 使用给定的概率通过减少每个颜色通道的位数来对图像或视频进行色调分离。
    |'
- en: '| [`v2.RandomSolarize`](generated/torchvision.transforms.v2.RandomSolarize.html#torchvision.transforms.v2.RandomSolarize
    "torchvision.transforms.v2.RandomSolarize")(threshold[, p]) | Solarize the image
    or video with a given probability by inverting all pixel values above a threshold.
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomSolarize`](generated/torchvision.transforms.v2.RandomSolarize.html#torchvision.transforms.v2.RandomSolarize
    "torchvision.transforms.v2.RandomSolarize")(threshold[, p]) | 使用给定的概率通过反转高于阈值的所有像素值来对图像或视频进行日光曝光处理。
    |'
- en: '| [`v2.RandomAdjustSharpness`](generated/torchvision.transforms.v2.RandomAdjustSharpness.html#torchvision.transforms.v2.RandomAdjustSharpness
    "torchvision.transforms.v2.RandomAdjustSharpness")(sharpness_factor[, p]) | Adjust
    the sharpness of the image or video with a given probability. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomAdjustSharpness`](generated/torchvision.transforms.v2.RandomAdjustSharpness.html#torchvision.transforms.v2.RandomAdjustSharpness
    "torchvision.transforms.v2.RandomAdjustSharpness")(sharpness_factor[, p]) | 使用给定的概率调整图像或视频的锐度。
    |'
- en: '| [`v2.RandomAutocontrast`](generated/torchvision.transforms.v2.RandomAutocontrast.html#torchvision.transforms.v2.RandomAutocontrast
    "torchvision.transforms.v2.RandomAutocontrast")([p]) | Autocontrast the pixels
    of the given image or video with a given probability. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomAutocontrast`](generated/torchvision.transforms.v2.RandomAutocontrast.html#torchvision.transforms.v2.RandomAutocontrast
    "torchvision.transforms.v2.RandomAutocontrast")([p]) | 使用给定的概率自动对给定图像或视频的像素进行自动对比度处理。
    |'
- en: '| [`v2.RandomEqualize`](generated/torchvision.transforms.v2.RandomEqualize.html#torchvision.transforms.v2.RandomEqualize
    "torchvision.transforms.v2.RandomEqualize")([p]) | Equalize the histogram of the
    given image or video with a given probability. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomEqualize`](generated/torchvision.transforms.v2.RandomEqualize.html#torchvision.transforms.v2.RandomEqualize
    "torchvision.transforms.v2.RandomEqualize")([p]) | 使用给定的概率对给定图像或视频的直方图进行均衡化。 |'
- en: Functionals
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 功能函数
- en: '| [`v2.functional.permute_channels`](generated/torchvision.transforms.v2.functional.permute_channels.html#torchvision.transforms.v2.functional.permute_channels
    "torchvision.transforms.v2.functional.permute_channels")(inpt, permutation) |
    Permute the channels of the input according to the given permutation. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.permute_channels`](generated/torchvision.transforms.v2.functional.permute_channels.html#torchvision.transforms.v2.functional.permute_channels
    "torchvision.transforms.v2.functional.permute_channels")(inpt, permutation) |
    根据给定的排列方式重新排列输入的通道。 |'
- en: '| [`v2.functional.rgb_to_grayscale`](generated/torchvision.transforms.v2.functional.rgb_to_grayscale.html#torchvision.transforms.v2.functional.rgb_to_grayscale
    "torchvision.transforms.v2.functional.rgb_to_grayscale")(inpt[, ...]) | See [`Grayscale`](generated/torchvision.transforms.v2.Grayscale.html#torchvision.transforms.v2.Grayscale
    "torchvision.transforms.v2.Grayscale") for details. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.rgb_to_grayscale`](generated/torchvision.transforms.v2.functional.rgb_to_grayscale.html#torchvision.transforms.v2.functional.rgb_to_grayscale
    "torchvision.transforms.v2.functional.rgb_to_grayscale")(inpt[, ...]) | 查看[`Grayscale`](generated/torchvision.transforms.v2.Grayscale.html#torchvision.transforms.v2.Grayscale
    "torchvision.transforms.v2.Grayscale")获取详细信息。 |'
- en: '| [`v2.functional.to_grayscale`](generated/torchvision.transforms.v2.functional.to_grayscale.html#torchvision.transforms.v2.functional.to_grayscale
    "torchvision.transforms.v2.functional.to_grayscale")(inpt[, ...]) | See [`Grayscale`](generated/torchvision.transforms.v2.Grayscale.html#torchvision.transforms.v2.Grayscale
    "torchvision.transforms.v2.Grayscale") for details. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.to_grayscale`](generated/torchvision.transforms.v2.functional.to_grayscale.html#torchvision.transforms.v2.functional.to_grayscale
    "torchvision.transforms.v2.functional.to_grayscale")(inpt[, ...]) | 查看[`Grayscale`](generated/torchvision.transforms.v2.Grayscale.html#torchvision.transforms.v2.Grayscale
    "torchvision.transforms.v2.Grayscale")获取详细信息。 |'
- en: '| [`v2.functional.gaussian_blur`](generated/torchvision.transforms.v2.functional.gaussian_blur.html#torchvision.transforms.v2.functional.gaussian_blur
    "torchvision.transforms.v2.functional.gaussian_blur")(inpt, kernel_size) | See
    [`GaussianBlur`](generated/torchvision.transforms.v2.GaussianBlur.html#torchvision.transforms.v2.GaussianBlur
    "torchvision.transforms.v2.GaussianBlur") for details. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.gaussian_blur`](generated/torchvision.transforms.v2.functional.gaussian_blur.html#torchvision.transforms.v2.functional.gaussian_blur
    "torchvision.transforms.v2.functional.gaussian_blur")(inpt, kernel_size) | 查看[`GaussianBlur`](generated/torchvision.transforms.v2.GaussianBlur.html#torchvision.transforms.v2.GaussianBlur
    "torchvision.transforms.v2.GaussianBlur")获取详细信息。 |'
- en: '| [`v2.functional.invert`](generated/torchvision.transforms.v2.functional.invert.html#torchvision.transforms.v2.functional.invert
    "torchvision.transforms.v2.functional.invert")(inpt) | See [`RandomInvert()`](generated/torchvision.transforms.v2.RandomInvert.html#torchvision.transforms.v2.RandomInvert
    "torchvision.transforms.v2.RandomInvert"). |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.invert`](generated/torchvision.transforms.v2.functional.invert.html#torchvision.transforms.v2.functional.invert
    "torchvision.transforms.v2.functional.invert")(inpt) | 查看[`RandomInvert()`](generated/torchvision.transforms.v2.RandomInvert.html#torchvision.transforms.v2.RandomInvert
    "torchvision.transforms.v2.RandomInvert"). |'
- en: '| [`v2.functional.posterize`](generated/torchvision.transforms.v2.functional.posterize.html#torchvision.transforms.v2.functional.posterize
    "torchvision.transforms.v2.functional.posterize")(inpt, bits) | See [`RandomPosterize`](generated/torchvision.transforms.v2.RandomPosterize.html#torchvision.transforms.v2.RandomPosterize
    "torchvision.transforms.v2.RandomPosterize") for details. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.posterize`](generated/torchvision.transforms.v2.functional.posterize.html#torchvision.transforms.v2.functional.posterize
    "torchvision.transforms.v2.functional.posterize")(inpt, bits) | 查看[`RandomPosterize`](generated/torchvision.transforms.v2.RandomPosterize.html#torchvision.transforms.v2.RandomPosterize
    "torchvision.transforms.v2.RandomPosterize")获取详细信息。 |'
- en: '| [`v2.functional.solarize`](generated/torchvision.transforms.v2.functional.solarize.html#torchvision.transforms.v2.functional.solarize
    "torchvision.transforms.v2.functional.solarize")(inpt, threshold) | See [`RandomSolarize`](generated/torchvision.transforms.v2.RandomSolarize.html#torchvision.transforms.v2.RandomSolarize
    "torchvision.transforms.v2.RandomSolarize") for details. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.solarize`](generated/torchvision.transforms.v2.functional.solarize.html#torchvision.transforms.v2.functional.solarize
    "torchvision.transforms.v2.functional.solarize")(inpt, threshold) | 查看详细信息，请参阅[`RandomSolarize`](generated/torchvision.transforms.v2.RandomSolarize.html#torchvision.transforms.v2.RandomSolarize
    "torchvision.transforms.v2.RandomSolarize") |'
- en: '| [`v2.functional.adjust_sharpness`](generated/torchvision.transforms.v2.functional.adjust_sharpness.html#torchvision.transforms.v2.functional.adjust_sharpness
    "torchvision.transforms.v2.functional.adjust_sharpness")(inpt, ...) | See [`RandomAdjustSharpness`](generated/torchvision.transforms.RandomAdjustSharpness.html#torchvision.transforms.RandomAdjustSharpness
    "torchvision.transforms.RandomAdjustSharpness") |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.adjust_sharpness`](generated/torchvision.transforms.v2.functional.adjust_sharpness.html#torchvision.transforms.v2.functional.adjust_sharpness
    "torchvision.transforms.v2.functional.adjust_sharpness")(inpt, ...) | 请参阅[`RandomAdjustSharpness`](generated/torchvision.transforms.RandomAdjustSharpness.html#torchvision.transforms.RandomAdjustSharpness
    "torchvision.transforms.RandomAdjustSharpness") |'
- en: '| [`v2.functional.autocontrast`](generated/torchvision.transforms.v2.functional.autocontrast.html#torchvision.transforms.v2.functional.autocontrast
    "torchvision.transforms.v2.functional.autocontrast")(inpt) | See [`RandomAutocontrast`](generated/torchvision.transforms.v2.RandomAutocontrast.html#torchvision.transforms.v2.RandomAutocontrast
    "torchvision.transforms.v2.RandomAutocontrast") for details. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.autocontrast`](generated/torchvision.transforms.v2.functional.autocontrast.html#torchvision.transforms.v2.functional.autocontrast
    "torchvision.transforms.v2.functional.autocontrast")(inpt) | 查看详细信息，请参阅[`RandomAutocontrast`](generated/torchvision.transforms.v2.RandomAutocontrast.html#torchvision.transforms.v2.RandomAutocontrast
    "torchvision.transforms.v2.RandomAutocontrast") |'
- en: '| [`v2.functional.adjust_contrast`](generated/torchvision.transforms.v2.functional.adjust_contrast.html#torchvision.transforms.v2.functional.adjust_contrast
    "torchvision.transforms.v2.functional.adjust_contrast")(inpt, ...) | See [`RandomAutocontrast`](generated/torchvision.transforms.RandomAutocontrast.html#torchvision.transforms.RandomAutocontrast
    "torchvision.transforms.RandomAutocontrast") |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.adjust_contrast`](generated/torchvision.transforms.v2.functional.adjust_contrast.html#torchvision.transforms.v2.functional.adjust_contrast
    "torchvision.transforms.v2.functional.adjust_contrast")(inpt, ...) | 请参阅[`RandomAutocontrast`](generated/torchvision.transforms.RandomAutocontrast.html#torchvision.transforms.RandomAutocontrast
    "torchvision.transforms.RandomAutocontrast") |'
- en: '| [`v2.functional.equalize`](generated/torchvision.transforms.v2.functional.equalize.html#torchvision.transforms.v2.functional.equalize
    "torchvision.transforms.v2.functional.equalize")(inpt) | See [`RandomEqualize`](generated/torchvision.transforms.v2.RandomEqualize.html#torchvision.transforms.v2.RandomEqualize
    "torchvision.transforms.v2.RandomEqualize") for details. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.equalize`](generated/torchvision.transforms.v2.functional.equalize.html#torchvision.transforms.v2.functional.equalize
    "torchvision.transforms.v2.functional.equalize")(inpt) | 查看详细信息，请参阅[`RandomEqualize`](generated/torchvision.transforms.v2.RandomEqualize.html#torchvision.transforms.v2.RandomEqualize
    "torchvision.transforms.v2.RandomEqualize") |'
- en: '| [`v2.functional.adjust_brightness`](generated/torchvision.transforms.v2.functional.adjust_brightness.html#torchvision.transforms.v2.functional.adjust_brightness
    "torchvision.transforms.v2.functional.adjust_brightness")(inpt, ...) | Adjust
    brightness. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.adjust_brightness`](generated/torchvision.transforms.v2.functional.adjust_brightness.html#torchvision.transforms.v2.functional.adjust_brightness
    "torchvision.transforms.v2.functional.adjust_brightness")(inpt, ...) | 调整亮度。 |'
- en: '| [`v2.functional.adjust_saturation`](generated/torchvision.transforms.v2.functional.adjust_saturation.html#torchvision.transforms.v2.functional.adjust_saturation
    "torchvision.transforms.v2.functional.adjust_saturation")(inpt, ...) | Adjust
    saturation. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.adjust_saturation`](generated/torchvision.transforms.v2.functional.adjust_saturation.html#torchvision.transforms.v2.functional.adjust_saturation
    "torchvision.transforms.v2.functional.adjust_saturation")(inpt, ...) | 调整饱和度。
    |'
- en: '| [`v2.functional.adjust_hue`](generated/torchvision.transforms.v2.functional.adjust_hue.html#torchvision.transforms.v2.functional.adjust_hue
    "torchvision.transforms.v2.functional.adjust_hue")(inpt, hue_factor) | Adjust
    hue |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.adjust_hue`](generated/torchvision.transforms.v2.functional.adjust_hue.html#torchvision.transforms.v2.functional.adjust_hue
    "torchvision.transforms.v2.functional.adjust_hue")(inpt, hue_factor) | 调整色调 |'
- en: '| [`v2.functional.adjust_gamma`](generated/torchvision.transforms.v2.functional.adjust_gamma.html#torchvision.transforms.v2.functional.adjust_gamma
    "torchvision.transforms.v2.functional.adjust_gamma")(inpt, gamma[, gain]) | Adjust
    gamma. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.adjust_gamma`](generated/torchvision.transforms.v2.functional.adjust_gamma.html#torchvision.transforms.v2.functional.adjust_gamma
    "torchvision.transforms.v2.functional.adjust_gamma")(inpt, gamma[, gain]) | 调整伽马值。
    |'
- en: Composition[](#composition "Permalink to this heading")
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Composition[](#composition "Permalink to this heading")
- en: '| [`v2.Compose`](generated/torchvision.transforms.v2.Compose.html#torchvision.transforms.v2.Compose
    "torchvision.transforms.v2.Compose")(transforms) | Composes several transforms
    together. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.Compose`](generated/torchvision.transforms.v2.Compose.html#torchvision.transforms.v2.Compose
    "torchvision.transforms.v2.Compose")(transforms) | 将多个转换组合在一起。 |'
- en: '| [`v2.RandomApply`](generated/torchvision.transforms.v2.RandomApply.html#torchvision.transforms.v2.RandomApply
    "torchvision.transforms.v2.RandomApply")(transforms[, p]) | Apply randomly a list
    of transformations with a given probability. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomApply`](generated/torchvision.transforms.v2.RandomApply.html#torchvision.transforms.v2.RandomApply
    "torchvision.transforms.v2.RandomApply")(transforms[, p]) | 以给定概率随机应用一系列转换。 |'
- en: '| [`v2.RandomChoice`](generated/torchvision.transforms.v2.RandomChoice.html#torchvision.transforms.v2.RandomChoice
    "torchvision.transforms.v2.RandomChoice")(transforms[, p]) | Apply single transformation
    randomly picked from a list. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomChoice`](generated/torchvision.transforms.v2.RandomChoice.html#torchvision.transforms.v2.RandomChoice
    "torchvision.transforms.v2.RandomChoice")(transforms[, p]) | 从列表中随机选择一个转换进行应用。
    |'
- en: '| [`v2.RandomOrder`](generated/torchvision.transforms.v2.RandomOrder.html#torchvision.transforms.v2.RandomOrder
    "torchvision.transforms.v2.RandomOrder")(transforms) | Apply a list of transformations
    in a random order. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomOrder`](generated/torchvision.transforms.v2.RandomOrder.html#torchvision.transforms.v2.RandomOrder
    "torchvision.transforms.v2.RandomOrder")(transforms) | 以随机顺序应用一系列转换。 |'
- en: Miscellaneous[](#miscellaneous "Permalink to this heading")
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Miscellaneous[](#miscellaneous "Permalink to this heading")
- en: '| [`v2.LinearTransformation`](generated/torchvision.transforms.v2.LinearTransformation.html#torchvision.transforms.v2.LinearTransformation
    "torchvision.transforms.v2.LinearTransformation")(...) | Transform a tensor image
    or video with a square transformation matrix and a mean_vector computed offline.
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.LinearTransformation`](generated/torchvision.transforms.v2.LinearTransformation.html#torchvision.transforms.v2.LinearTransformation
    "torchvision.transforms.v2.LinearTransformation")(...) | 使用离线计算的方形变换矩阵和均值向量对张量图像或视频进行转换。
    |'
- en: '| [`v2.Normalize`](generated/torchvision.transforms.v2.Normalize.html#torchvision.transforms.v2.Normalize
    "torchvision.transforms.v2.Normalize")(mean, std[, inplace]) | Normalize a tensor
    image or video with mean and standard deviation. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.Normalize`](generated/torchvision.transforms.v2.Normalize.html#torchvision.transforms.v2.Normalize
    "torchvision.transforms.v2.Normalize")(mean, std[, inplace]) | 使用均值和标准差对张量图像或视频进行归一化。
    |'
- en: '| [`v2.RandomErasing`](generated/torchvision.transforms.v2.RandomErasing.html#torchvision.transforms.v2.RandomErasing
    "torchvision.transforms.v2.RandomErasing")([p, scale, ratio, value, ...]) | Randomly
    select a rectangle region in the input image or video and erase its pixels. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandomErasing`](generated/torchvision.transforms.v2.RandomErasing.html#torchvision.transforms.v2.RandomErasing
    "torchvision.transforms.v2.RandomErasing")([p, scale, ratio, value, ...]) | 随机选择输入图像或视频中的矩形区域并擦除其像素。
    |'
- en: '| [`v2.Lambda`](generated/torchvision.transforms.v2.Lambda.html#torchvision.transforms.v2.Lambda
    "torchvision.transforms.v2.Lambda")(lambd, *types) | Apply a user-defined function
    as a transform. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.Lambda`](generated/torchvision.transforms.v2.Lambda.html#torchvision.transforms.v2.Lambda
    "torchvision.transforms.v2.Lambda")(lambd, *types) | 将用户定义的函数应用为转换。 |'
- en: '| [`v2.SanitizeBoundingBoxes`](generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes
    "torchvision.transforms.v2.SanitizeBoundingBoxes")([min_size, ...]) | Remove degenerate/invalid
    bounding boxes and their corresponding labels and masks. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.SanitizeBoundingBoxes`](generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes
    "torchvision.transforms.v2.SanitizeBoundingBoxes")([min_size, ...]) | 删除退化/无效的边界框及其对应的标签和掩模。
    |'
- en: '| [`v2.ClampBoundingBoxes`](generated/torchvision.transforms.v2.ClampBoundingBoxes.html#torchvision.transforms.v2.ClampBoundingBoxes
    "torchvision.transforms.v2.ClampBoundingBoxes")() | Clamp bounding boxes to their
    corresponding image dimensions. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.ClampBoundingBoxes`](generated/torchvision.transforms.v2.ClampBoundingBoxes.html#torchvision.transforms.v2.ClampBoundingBoxes
    "torchvision.transforms.v2.ClampBoundingBoxes")() | 将边界框限制在其对应的图像尺寸内。 |'
- en: '| [`v2.UniformTemporalSubsample`](generated/torchvision.transforms.v2.UniformTemporalSubsample.html#torchvision.transforms.v2.UniformTemporalSubsample
    "torchvision.transforms.v2.UniformTemporalSubsample")(num_samples) | Uniformly
    subsample `num_samples` indices from the temporal dimension of the video. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.UniformTemporalSubsample`](generated/torchvision.transforms.v2.UniformTemporalSubsample.html#torchvision.transforms.v2.UniformTemporalSubsample
    "torchvision.transforms.v2.UniformTemporalSubsample")(num_samples) | 从视频的时间维度均匀地子采样
    `num_samples` 个索引。 |'
- en: Functionals
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 功能性
- en: '| [`v2.functional.normalize`](generated/torchvision.transforms.v2.functional.normalize.html#torchvision.transforms.v2.functional.normalize
    "torchvision.transforms.v2.functional.normalize")(inpt, mean, std[, ...]) | See
    [`Normalize`](generated/torchvision.transforms.v2.Normalize.html#torchvision.transforms.v2.Normalize
    "torchvision.transforms.v2.Normalize") for details. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.normalize`](generated/torchvision.transforms.v2.functional.normalize.html#torchvision.transforms.v2.functional.normalize
    "torchvision.transforms.v2.functional.normalize")(inpt, mean, std[, ...]) | 详细信息请参见[`Normalize`](generated/torchvision.transforms.v2.Normalize.html#torchvision.transforms.v2.Normalize
    "torchvision.transforms.v2.Normalize")。 |'
- en: '| [`v2.functional.erase`](generated/torchvision.transforms.v2.functional.erase.html#torchvision.transforms.v2.functional.erase
    "torchvision.transforms.v2.functional.erase")(inpt, i, j, h, w, v[, ...]) | See
    `RandomErase` for details. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.erase`](generated/torchvision.transforms.v2.functional.erase.html#torchvision.transforms.v2.functional.erase
    "torchvision.transforms.v2.functional.erase")(inpt, i, j, h, w, v[, ...]) | 详细信息请参见
    `RandomErase`。 |'
- en: '| [`v2.functional.clamp_bounding_boxes`](generated/torchvision.transforms.v2.functional.clamp_bounding_boxes.html#torchvision.transforms.v2.functional.clamp_bounding_boxes
    "torchvision.transforms.v2.functional.clamp_bounding_boxes")(inpt[, ...]) | See
    [`ClampBoundingBoxes()`](generated/torchvision.transforms.v2.ClampBoundingBoxes.html#torchvision.transforms.v2.ClampBoundingBoxes
    "torchvision.transforms.v2.ClampBoundingBoxes") for details. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.clamp_bounding_boxes`](generated/torchvision.transforms.v2.functional.clamp_bounding_boxes.html#torchvision.transforms.v2.functional.clamp_bounding_boxes
    "torchvision.transforms.v2.functional.clamp_bounding_boxes")(inpt[, ...]) | 详细信息请参见[`ClampBoundingBoxes()`](generated/torchvision.transforms.v2.ClampBoundingBoxes.html#torchvision.transforms.v2.ClampBoundingBoxes
    "torchvision.transforms.v2.ClampBoundingBoxes")。 |'
- en: '| [`v2.functional.uniform_temporal_subsample`](generated/torchvision.transforms.v2.functional.uniform_temporal_subsample.html#torchvision.transforms.v2.functional.uniform_temporal_subsample
    "torchvision.transforms.v2.functional.uniform_temporal_subsample")(...) | See
    [`UniformTemporalSubsample`](generated/torchvision.transforms.v2.UniformTemporalSubsample.html#torchvision.transforms.v2.UniformTemporalSubsample
    "torchvision.transforms.v2.UniformTemporalSubsample") for details. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.uniform_temporal_subsample`](generated/torchvision.transforms.v2.functional.uniform_temporal_subsample.html#torchvision.transforms.v2.functional.uniform_temporal_subsample
    "torchvision.transforms.v2.functional.uniform_temporal_subsample")(...) | 详细信息请参见[`UniformTemporalSubsample`](generated/torchvision.transforms.v2.UniformTemporalSubsample.html#torchvision.transforms.v2.UniformTemporalSubsample
    "torchvision.transforms.v2.UniformTemporalSubsample")。 |'
- en: '### Conversion[](#conversion "Permalink to this heading")'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '### 转换[](#conversion "跳转到此标题")'
- en: Note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Beware, some of these conversion transforms below will scale the values while
    performing the conversion, while some may not do any scaling. By scaling, we mean
    e.g. that a `uint8` -> `float32` would map the [0, 255] range into [0, 1] (and
    vice-versa). See [Dtype and expected value range](#range-and-dtype).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 警惕，下面的一些转换操作可能会在执行转换时对值进行缩放，而有些可能不会进行任何缩放。通过缩放，我们指的是例如 `uint8` -> `float32`
    将把 [0, 255] 范围映射到 [0, 1]（反之亦然）。请参阅[Dtype和期望值范围](#range-and-dtype)。
- en: '| [`v2.ToImage`](generated/torchvision.transforms.v2.ToImage.html#torchvision.transforms.v2.ToImage
    "torchvision.transforms.v2.ToImage")() | Convert a tensor, ndarray, or PIL Image
    to [`Image`](generated/torchvision.tv_tensors.Image.html#torchvision.tv_tensors.Image
    "torchvision.tv_tensors.Image") ; this does not scale values. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.ToImage`](generated/torchvision.transforms.v2.ToImage.html#torchvision.transforms.v2.ToImage
    "torchvision.transforms.v2.ToImage")() | 将张量、ndarray或PIL图像转换为[`Image`](generated/torchvision.tv_tensors.Image.html#torchvision.tv_tensors.Image
    "torchvision.tv_tensors.Image")；不会缩放值。 |'
- en: '| [`v2.ToPureTensor`](generated/torchvision.transforms.v2.ToPureTensor.html#torchvision.transforms.v2.ToPureTensor
    "torchvision.transforms.v2.ToPureTensor")() | Convert all TVTensors to pure tensors,
    removing associated metadata (if any). |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.ToPureTensor`](generated/torchvision.transforms.v2.ToPureTensor.html#torchvision.transforms.v2.ToPureTensor
    "torchvision.transforms.v2.ToPureTensor")() | 将所有TVTensors转换为纯张量，删除相关的元数据（如果有）。
    |'
- en: '| [`v2.PILToTensor`](generated/torchvision.transforms.v2.PILToTensor.html#torchvision.transforms.v2.PILToTensor
    "torchvision.transforms.v2.PILToTensor")() | Convert a PIL Image to a tensor of
    the same type - this does not scale values. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.PILToTensor`](generated/torchvision.transforms.v2.PILToTensor.html#torchvision.transforms.v2.PILToTensor
    "torchvision.transforms.v2.PILToTensor")() | 将PIL图像转换为相同类型的张量-不会缩放值。 |'
- en: '| [`v2.ToPILImage`](generated/torchvision.transforms.v2.ToPILImage.html#torchvision.transforms.v2.ToPILImage
    "torchvision.transforms.v2.ToPILImage")([mode]) | Convert a tensor or an ndarray
    to PIL Image |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.ToPILImage`](generated/torchvision.transforms.v2.ToPILImage.html#torchvision.transforms.v2.ToPILImage
    "torchvision.transforms.v2.ToPILImage")([mode]) | 将张量或ndarray转换为PIL图像。 |'
- en: '| [`v2.ToDtype`](generated/torchvision.transforms.v2.ToDtype.html#torchvision.transforms.v2.ToDtype
    "torchvision.transforms.v2.ToDtype")(dtype[, scale]) | Converts the input to a
    specific dtype, optionally scaling the values for images or videos. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.ToDtype`](generated/torchvision.transforms.v2.ToDtype.html#torchvision.transforms.v2.ToDtype
    "torchvision.transforms.v2.ToDtype")(dtype[, scale]) | 将输入转换为特定的dtype，可选择为图像或视频缩放值。
    |'
- en: '| [`v2.ConvertBoundingBoxFormat`](generated/torchvision.transforms.v2.ConvertBoundingBoxFormat.html#torchvision.transforms.v2.ConvertBoundingBoxFormat
    "torchvision.transforms.v2.ConvertBoundingBoxFormat")(format) | Convert bounding
    box coordinates to the given `format`, eg from "CXCYWH" to "XYXY". |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.ConvertBoundingBoxFormat`](generated/torchvision.transforms.v2.ConvertBoundingBoxFormat.html#torchvision.transforms.v2.ConvertBoundingBoxFormat
    "torchvision.transforms.v2.ConvertBoundingBoxFormat")(format) | 将边界框坐标转换为给定的`format`，例如从"CXCYWH"到"XYXY"。
    |'
- en: functionals
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: functionals
- en: '| [`v2.functional.to_image`](generated/torchvision.transforms.v2.functional.to_image.html#torchvision.transforms.v2.functional.to_image
    "torchvision.transforms.v2.functional.to_image")(inpt) | See [`ToImage`](generated/torchvision.transforms.v2.ToImage.html#torchvision.transforms.v2.ToImage
    "torchvision.transforms.v2.ToImage") for details. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.to_image`](generated/torchvision.transforms.v2.functional.to_image.html#torchvision.transforms.v2.functional.to_image
    "torchvision.transforms.v2.functional.to_image")(inpt) | 有关详细信息，请参阅[`ToImage`](generated/torchvision.transforms.v2.ToImage.html#torchvision.transforms.v2.ToImage
    "torchvision.transforms.v2.ToImage")。 |'
- en: '| [`v2.functional.pil_to_tensor`](generated/torchvision.transforms.v2.functional.pil_to_tensor.html#torchvision.transforms.v2.functional.pil_to_tensor
    "torchvision.transforms.v2.functional.pil_to_tensor")(pic) | Convert a `PIL Image`
    to a tensor of the same type. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.pil_to_tensor`](generated/torchvision.transforms.v2.functional.pil_to_tensor.html#torchvision.transforms.v2.functional.pil_to_tensor
    "torchvision.transforms.v2.functional.pil_to_tensor")(pic) | 将`PIL图像`转换为相同类型的张量。
    |'
- en: '| [`v2.functional.to_pil_image`](generated/torchvision.transforms.v2.functional.to_pil_image.html#torchvision.transforms.v2.functional.to_pil_image
    "torchvision.transforms.v2.functional.to_pil_image")(pic[, mode]) | Convert a
    tensor or an ndarray to PIL Image. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.to_pil_image`](generated/torchvision.transforms.v2.functional.to_pil_image.html#torchvision.transforms.v2.functional.to_pil_image
    "torchvision.transforms.v2.functional.to_pil_image")(pic[, mode]) | 将张量或ndarray转换为PIL图像。
    |'
- en: '| [`v2.functional.to_dtype`](generated/torchvision.transforms.v2.functional.to_dtype.html#torchvision.transforms.v2.functional.to_dtype
    "torchvision.transforms.v2.functional.to_dtype")(inpt[, dtype, scale]) | See [`ToDtype()`](generated/torchvision.transforms.v2.ToDtype.html#torchvision.transforms.v2.ToDtype
    "torchvision.transforms.v2.ToDtype") for details. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.to_dtype`](generated/torchvision.transforms.v2.functional.to_dtype.html#torchvision.transforms.v2.functional.to_dtype
    "torchvision.transforms.v2.functional.to_dtype")(inpt[, dtype, scale]) | 有关详细信息，请参阅[`ToDtype()`](generated/torchvision.transforms.v2.ToDtype.html#torchvision.transforms.v2.ToDtype
    "torchvision.transforms.v2.ToDtype")。 |'
- en: '| [`v2.functional.convert_bounding_box_format`](generated/torchvision.transforms.v2.functional.convert_bounding_box_format.html#torchvision.transforms.v2.functional.convert_bounding_box_format
    "torchvision.transforms.v2.functional.convert_bounding_box_format")(inpt) | See
    [`ConvertBoundingBoxFormat()`](generated/torchvision.transforms.v2.ConvertBoundingBoxFormat.html#torchvision.transforms.v2.ConvertBoundingBoxFormat
    "torchvision.transforms.v2.ConvertBoundingBoxFormat") for details. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.convert_bounding_box_format`](generated/torchvision.transforms.v2.functional.convert_bounding_box_format.html#torchvision.transforms.v2.functional.convert_bounding_box_format
    "torchvision.transforms.v2.functional.convert_bounding_box_format")(inpt) | 有关详细信息，请参阅[`ConvertBoundingBoxFormat()`](generated/torchvision.transforms.v2.ConvertBoundingBoxFormat.html#torchvision.transforms.v2.ConvertBoundingBoxFormat
    "torchvision.transforms.v2.ConvertBoundingBoxFormat")。 |'
- en: Deprecated
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Deprecated
- en: '| [`v2.ToTensor`](generated/torchvision.transforms.v2.ToTensor.html#torchvision.transforms.v2.ToTensor
    "torchvision.transforms.v2.ToTensor")() | [DEPRECATED] Use `v2.Compose([v2.ToImage(),
    v2.ToDtype(torch.float32, scale=True)])` instead. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.ToTensor`](generated/torchvision.transforms.v2.ToTensor.html#torchvision.transforms.v2.ToTensor
    "torchvision.transforms.v2.ToTensor")() | [DEPRECATED] 使用`v2.Compose([v2.ToImage(),
    v2.ToDtype(torch.float32, scale=True)])`代替。 |'
- en: '| [`v2.functional.to_tensor`](generated/torchvision.transforms.v2.functional.to_tensor.html#torchvision.transforms.v2.functional.to_tensor
    "torchvision.transforms.v2.functional.to_tensor")(inpt) | [DEPREACTED] Use to_image()
    and to_dtype() instead. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.to_tensor`](generated/torchvision.transforms.v2.functional.to_tensor.html#torchvision.transforms.v2.functional.to_tensor
    "torchvision.transforms.v2.functional.to_tensor")(inpt) | [DEPREACTED] Use to_image()
    and to_dtype() instead. |'
- en: '| [`v2.ConvertImageDtype`](generated/torchvision.transforms.v2.ConvertImageDtype.html#torchvision.transforms.v2.ConvertImageDtype
    "torchvision.transforms.v2.ConvertImageDtype")([dtype]) | [DEPRECATED] Use `v2.ToDtype(dtype,
    scale=True)` instead. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.ConvertImageDtype`](generated/torchvision.transforms.v2.ConvertImageDtype.html#torchvision.transforms.v2.ConvertImageDtype
    "torchvision.transforms.v2.ConvertImageDtype")([dtype]) | [已弃用]请改用`v2.ToDtype(dtype,
    scale=True)`。 |'
- en: '| [`v2.functional.convert_image_dtype`](generated/torchvision.transforms.v2.functional.convert_image_dtype.html#torchvision.transforms.v2.functional.convert_image_dtype
    "torchvision.transforms.v2.functional.convert_image_dtype")(image[, dtype]) |
    [DEPRECATED] Use to_dtype() instead. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.convert_image_dtype`](generated/torchvision.transforms.v2.functional.convert_image_dtype.html#torchvision.transforms.v2.functional.convert_image_dtype
    "torchvision.transforms.v2.functional.convert_image_dtype")(image[, dtype]) |
    [已弃用]请改用to_dtype()。 |'
- en: Auto-Augmentation[](#auto-augmentation "Permalink to this heading")
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动增强[](#auto-augmentation "跳转到此标题的永久链接")
- en: '[AutoAugment](https://arxiv.org/pdf/1805.09501.pdf) is a common Data Augmentation
    technique that can improve the accuracy of Image Classification models. Though
    the data augmentation policies are directly linked to their trained dataset, empirical
    studies show that ImageNet policies provide significant improvements when applied
    to other datasets. In TorchVision we implemented 3 policies learned on the following
    datasets: ImageNet, CIFAR10 and SVHN. The new transform can be used standalone
    or mixed-and-matched with existing transforms:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[AutoAugment](https://arxiv.org/pdf/1805.09501.pdf)是一种常见的数据增强技术，可以提高图像分类模型的准确性。尽管数据增强策略直接与其训练数据集相关联，但实证研究表明，将ImageNet策略应用于其他数据集时可以显著提高性能。在TorchVision中，我们实现了在以下数据集上学习的3种策略：ImageNet、CIFAR10和SVHN。新的转换可以独立使用，也可以与现有转换混合使用：'
- en: '| [`v2.AutoAugment`](generated/torchvision.transforms.v2.AutoAugment.html#torchvision.transforms.v2.AutoAugment
    "torchvision.transforms.v2.AutoAugment")([policy, interpolation, fill]) | AutoAugment
    data augmentation method based on ["AutoAugment: Learning Augmentation Strategies
    from Data"](https://arxiv.org/pdf/1805.09501.pdf). |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.AutoAugment`](generated/torchvision.transforms.v2.AutoAugment.html#torchvision.transforms.v2.AutoAugment
    "torchvision.transforms.v2.AutoAugment")([policy, interpolation, fill]) | 基于["AutoAugment:
    Learning Augmentation Strategies from Data"](https://arxiv.org/pdf/1805.09501.pdf)的AutoAugment数据增强方法。
    |'
- en: '| [`v2.RandAugment`](generated/torchvision.transforms.v2.RandAugment.html#torchvision.transforms.v2.RandAugment
    "torchvision.transforms.v2.RandAugment")([num_ops, magnitude, ...]) | RandAugment
    data augmentation method based on ["RandAugment: Practical automated data augmentation
    with a reduced search space"](https://arxiv.org/abs/1909.13719). |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.RandAugment`](generated/torchvision.transforms.v2.RandAugment.html#torchvision.transforms.v2.RandAugment
    "torchvision.transforms.v2.RandAugment")([num_ops, magnitude, ...]) | 基于["RandAugment:
    Practical automated data augmentation with a reduced search space"](https://arxiv.org/abs/1909.13719)的RandAugment数据增强方法。
    |'
- en: '| [`v2.TrivialAugmentWide`](generated/torchvision.transforms.v2.TrivialAugmentWide.html#torchvision.transforms.v2.TrivialAugmentWide
    "torchvision.transforms.v2.TrivialAugmentWide")([num_magnitude_bins, ...]) | Dataset-independent
    data-augmentation with TrivialAugment Wide, as described in ["TrivialAugment:
    Tuning-free Yet State-of-the-Art Data Augmentation"](https://arxiv.org/abs/2103.10158).
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.TrivialAugmentWide`](generated/torchvision.transforms.v2.TrivialAugmentWide.html#torchvision.transforms.v2.TrivialAugmentWide
    "torchvision.transforms.v2.TrivialAugmentWide")([num_magnitude_bins, ...]) | 使用TrivialAugment
    Wide进行与数据集无关的数据增强，如["TrivialAugment: Tuning-free Yet State-of-the-Art Data Augmentation"](https://arxiv.org/abs/2103.10158)中所述。
    |'
- en: '| [`v2.AugMix`](generated/torchvision.transforms.v2.AugMix.html#torchvision.transforms.v2.AugMix
    "torchvision.transforms.v2.AugMix")([severity, mixture_width, ...]) | AugMix data
    augmentation method based on ["AugMix: A Simple Data Processing Method to Improve
    Robustness and Uncertainty"](https://arxiv.org/abs/1912.02781). |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.AugMix`](generated/torchvision.transforms.v2.AugMix.html#torchvision.transforms.v2.AugMix
    "torchvision.transforms.v2.AugMix")([severity, mixture_width, ...]) | 基于["AugMix:
    A Simple Data Processing Method to Improve Robustness and Uncertainty"](https://arxiv.org/abs/1912.02781)的AugMix数据增强方法。
    |'
- en: CutMix - MixUp[](#cutmix-mixup "Permalink to this heading")
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CutMix - MixUp[](#cutmix-mixup "跳转到此标题的永久链接")
- en: CutMix and MixUp are special transforms that are meant to be used on batches
    rather than on individual images, because they are combining pairs of images together.
    These can be used after the dataloader (once the samples are batched), or part
    of a collation function. See [How to use CutMix and MixUp](auto_examples/transforms/plot_cutmix_mixup.html#sphx-glr-auto-examples-transforms-plot-cutmix-mixup-py)
    for detailed usage examples.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: CutMix和MixUp是特殊的变换，用于批处理而不是单个图像，因为它们将图像对组合在一起。这些可以在数据加载器之后使用（一旦样本被分批），或作为整理函数的一部分。详细使用示例请参见[如何使用CutMix和MixUp](auto_examples/transforms/plot_cutmix_mixup.html#sphx-glr-auto-examples-transforms-plot-cutmix-mixup-py)。
- en: '| [`v2.CutMix`](generated/torchvision.transforms.v2.CutMix.html#torchvision.transforms.v2.CutMix
    "torchvision.transforms.v2.CutMix")(*[, alpha, labels_getter]) | Apply CutMix
    to the provided batch of images and labels. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.CutMix`](generated/torchvision.transforms.v2.CutMix.html#torchvision.transforms.v2.CutMix
    "torchvision.transforms.v2.CutMix")(*[, alpha, labels_getter]) | 将CutMix应用于提供的图像和标签批次。
    |'
- en: '| [`v2.MixUp`](generated/torchvision.transforms.v2.MixUp.html#torchvision.transforms.v2.MixUp
    "torchvision.transforms.v2.MixUp")(*[, alpha, labels_getter]) | Apply MixUp to
    the provided batch of images and labels. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.MixUp`](generated/torchvision.transforms.v2.MixUp.html#torchvision.transforms.v2.MixUp
    "torchvision.transforms.v2.MixUp")(*[, alpha, labels_getter]) | 将MixUp应用于提供的图像和标签批次。
    |'
- en: Developer tools[](#developer-tools "Permalink to this heading")
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发者工具[](#developer-tools "跳转到此标题的永久链接")
- en: '| [`v2.functional.register_kernel`](generated/torchvision.transforms.v2.functional.register_kernel.html#torchvision.transforms.v2.functional.register_kernel
    "torchvision.transforms.v2.functional.register_kernel")(functional, ...) | Decorate
    a kernel to register it for a functional and a (custom) tv_tensor type. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [`v2.functional.register_kernel`](generated/torchvision.transforms.v2.functional.register_kernel.html#torchvision.transforms.v2.functional.register_kernel
    "torchvision.transforms.v2.functional.register_kernel")(functional, ...) | 装饰一个内核以为一个功能和一个（自定义的）tv_tensor类型注册它。
    |'
- en: V1 API Reference[](#v1-api-reference "Permalink to this heading")
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: V1 API参考[](#v1-api-reference "跳转到此标题的永久链接")
- en: Geometry[](#id3 "Permalink to this heading")
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 几何[](#id3 "跳转到此标题的永久链接")
- en: '| [`Resize`](generated/torchvision.transforms.Resize.html#torchvision.transforms.Resize
    "torchvision.transforms.Resize")(size[, interpolation, max_size, ...]) | Resize
    the input image to the given size. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`Resize`](generated/torchvision.transforms.Resize.html#torchvision.transforms.Resize
    "torchvision.transforms.Resize")(size[, interpolation, max_size, ...]) | 将输入图像调整为给定大小。
    |'
- en: '| [`RandomCrop`](generated/torchvision.transforms.RandomCrop.html#torchvision.transforms.RandomCrop
    "torchvision.transforms.RandomCrop")(size[, padding, pad_if_needed, ...]) | Crop
    the given image at a random location. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomCrop`](generated/torchvision.transforms.RandomCrop.html#torchvision.transforms.RandomCrop
    "torchvision.transforms.RandomCrop")(size[, padding, pad_if_needed, ...]) | 在随机位置裁剪给定图像。
    |'
- en: '| [`RandomResizedCrop`](generated/torchvision.transforms.RandomResizedCrop.html#torchvision.transforms.RandomResizedCrop
    "torchvision.transforms.RandomResizedCrop")(size[, scale, ratio, ...]) | Crop
    a random portion of image and resize it to a given size. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomResizedCrop`](generated/torchvision.transforms.RandomResizedCrop.html#torchvision.transforms.RandomResizedCrop
    "torchvision.transforms.RandomResizedCrop")(size[, scale, ratio, ...]) | 裁剪图像的随机部分并将其调整为给定大小。
    |'
- en: '| [`CenterCrop`](generated/torchvision.transforms.CenterCrop.html#torchvision.transforms.CenterCrop
    "torchvision.transforms.CenterCrop")(size) | Crops the given image at the center.
    |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`CenterCrop`](generated/torchvision.transforms.CenterCrop.html#torchvision.transforms.CenterCrop
    "torchvision.transforms.CenterCrop")(size) | 在中心裁剪给定图像。 |'
- en: '| [`FiveCrop`](generated/torchvision.transforms.FiveCrop.html#torchvision.transforms.FiveCrop
    "torchvision.transforms.FiveCrop")(size) | Crop the given image into four corners
    and the central crop. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`FiveCrop`](generated/torchvision.transforms.FiveCrop.html#torchvision.transforms.FiveCrop
    "torchvision.transforms.FiveCrop")(size) | 将给定图像裁剪为四个角和中心裁剪。 |'
- en: '| [`TenCrop`](generated/torchvision.transforms.TenCrop.html#torchvision.transforms.TenCrop
    "torchvision.transforms.TenCrop")(size[, vertical_flip]) | Crop the given image
    into four corners and the central crop plus the flipped version of these (horizontal
    flipping is used by default). |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [`TenCrop`](generated/torchvision.transforms.TenCrop.html#torchvision.transforms.TenCrop
    "torchvision.transforms.TenCrop")(size[, vertical_flip]) | 将给定图像裁剪为四个角和中心裁剪，以及这些裁剪的翻转版本（默认使用水平翻转）。
    |'
- en: '| [`Pad`](generated/torchvision.transforms.Pad.html#torchvision.transforms.Pad
    "torchvision.transforms.Pad")(padding[, fill, padding_mode]) | Pad the given image
    on all sides with the given "pad" value. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`Pad`](generated/torchvision.transforms.Pad.html#torchvision.transforms.Pad
    "torchvision.transforms.Pad")(padding[, fill, padding_mode]) | 使用给定的“pad”值在所有边上填充给定图像。
    |'
- en: '| [`RandomRotation`](generated/torchvision.transforms.RandomRotation.html#torchvision.transforms.RandomRotation
    "torchvision.transforms.RandomRotation")(degrees[, interpolation, ...]) | Rotate
    the image by angle. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomRotation`](generated/torchvision.transforms.RandomRotation.html#torchvision.transforms.RandomRotation
    "torchvision.transforms.RandomRotation")(degrees[, interpolation, ...]) | 将图像旋转指定角度。
    |'
- en: '| [`RandomAffine`](generated/torchvision.transforms.RandomAffine.html#torchvision.transforms.RandomAffine
    "torchvision.transforms.RandomAffine")(degrees[, translate, scale, ...]) | Random
    affine transformation of the image keeping center invariant. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomAffine`](generated/torchvision.transforms.RandomAffine.html#torchvision.transforms.RandomAffine
    "torchvision.transforms.RandomAffine")(degrees[, translate, scale, ...]) | 对图像进行随机仿射变换，保持中心不变。
    |'
- en: '| [`RandomPerspective`](generated/torchvision.transforms.RandomPerspective.html#torchvision.transforms.RandomPerspective
    "torchvision.transforms.RandomPerspective")([distortion_scale, p, ...]) | Performs
    a random perspective transformation of the given image with a given probability.
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomPerspective`](generated/torchvision.transforms.RandomPerspective.html#torchvision.transforms.RandomPerspective
    "torchvision.transforms.RandomPerspective")([distortion_scale, p, ...]) | 以给定概率对给定图像执行随机透视变换。
    |'
- en: '| [`ElasticTransform`](generated/torchvision.transforms.ElasticTransform.html#torchvision.transforms.ElasticTransform
    "torchvision.transforms.ElasticTransform")([alpha, sigma, ...]) | Transform a
    tensor image with elastic transformations. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`ElasticTransform`](generated/torchvision.transforms.ElasticTransform.html#torchvision.transforms.ElasticTransform
    "torchvision.transforms.ElasticTransform")([alpha, sigma, ...]) | 使用弹性变换对张量图像进行转换。
    |'
- en: '| [`RandomHorizontalFlip`](generated/torchvision.transforms.RandomHorizontalFlip.html#torchvision.transforms.RandomHorizontalFlip
    "torchvision.transforms.RandomHorizontalFlip")([p]) | Horizontally flip the given
    image randomly with a given probability. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomHorizontalFlip`](generated/torchvision.transforms.RandomHorizontalFlip.html#torchvision.transforms.RandomHorizontalFlip
    "torchvision.transforms.RandomHorizontalFlip")([p]) | 以给定概率随机水平翻转给定图像。 |'
- en: '| [`RandomVerticalFlip`](generated/torchvision.transforms.RandomVerticalFlip.html#torchvision.transforms.RandomVerticalFlip
    "torchvision.transforms.RandomVerticalFlip")([p]) | Vertically flip the given
    image randomly with a given probability. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomVerticalFlip`](generated/torchvision.transforms.RandomVerticalFlip.html#torchvision.transforms.RandomVerticalFlip
    "torchvision.transforms.RandomVerticalFlip")([p]) | 以给定概率随机垂直翻转给定图像。 |'
- en: Color[](#id4 "Permalink to this heading")
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Color[](#id4 "Permalink to this heading")
- en: '| [`ColorJitter`](generated/torchvision.transforms.ColorJitter.html#torchvision.transforms.ColorJitter
    "torchvision.transforms.ColorJitter")([brightness, contrast, ...]) | Randomly
    change the brightness, contrast, saturation and hue of an image. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`ColorJitter`](generated/torchvision.transforms.ColorJitter.html#torchvision.transforms.ColorJitter
    "torchvision.transforms.ColorJitter")([brightness, contrast, ...]) | 随机改变图像的亮度、对比度、饱和度和色调。
    |'
- en: '| [`Grayscale`](generated/torchvision.transforms.Grayscale.html#torchvision.transforms.Grayscale
    "torchvision.transforms.Grayscale")([num_output_channels]) | Convert image to
    grayscale. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [`Grayscale`](generated/torchvision.transforms.Grayscale.html#torchvision.transforms.Grayscale
    "torchvision.transforms.Grayscale")([num_output_channels]) | 将图像转换为灰度图像。 |'
- en: '| [`RandomGrayscale`](generated/torchvision.transforms.RandomGrayscale.html#torchvision.transforms.RandomGrayscale
    "torchvision.transforms.RandomGrayscale")([p]) | Randomly convert image to grayscale
    with a probability of p (default 0.1). |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomGrayscale`](generated/torchvision.transforms.RandomGrayscale.html#torchvision.transforms.RandomGrayscale
    "torchvision.transforms.RandomGrayscale")([p]) | 以概率 p（默认为 0.1）随机将图像转换为灰度图像。 |'
- en: '| [`GaussianBlur`](generated/torchvision.transforms.GaussianBlur.html#torchvision.transforms.GaussianBlur
    "torchvision.transforms.GaussianBlur")(kernel_size[, sigma]) | Blurs image with
    randomly chosen Gaussian blur. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`GaussianBlur`](generated/torchvision.transforms.GaussianBlur.html#torchvision.transforms.GaussianBlur
    "torchvision.transforms.GaussianBlur")(kernel_size[, sigma]) | 使用随机选择的高斯模糊对图像进行模糊处理。
    |'
- en: '| [`RandomInvert`](generated/torchvision.transforms.RandomInvert.html#torchvision.transforms.RandomInvert
    "torchvision.transforms.RandomInvert")([p]) | Inverts the colors of the given
    image randomly with a given probability. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomInvert`](generated/torchvision.transforms.RandomInvert.html#torchvision.transforms.RandomInvert
    "torchvision.transforms.RandomInvert")([p]) | 以给定概率随机反转给定图像的颜色。 |'
- en: '| [`RandomPosterize`](generated/torchvision.transforms.RandomPosterize.html#torchvision.transforms.RandomPosterize
    "torchvision.transforms.RandomPosterize")(bits[, p]) | Posterize the image randomly
    with a given probability by reducing the number of bits for each color channel.
    |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomPosterize`](generated/torchvision.transforms.RandomPosterize.html#torchvision.transforms.RandomPosterize
    "torchvision.transforms.RandomPosterize")(bits[, p]) | 以给定概率随机海报化图像，通过减少每个颜色通道的位数。
    |'
- en: '| [`RandomSolarize`](generated/torchvision.transforms.RandomSolarize.html#torchvision.transforms.RandomSolarize
    "torchvision.transforms.RandomSolarize")(threshold[, p]) | Solarize the image
    randomly with a given probability by inverting all pixel values above a threshold.
    |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomSolarize`](generated/torchvision.transforms.RandomSolarize.html#torchvision.transforms.RandomSolarize
    "torchvision.transforms.RandomSolarize")(threshold[, p]) | 以给定概率随机太阳化图像，通过反转所有高于阈值的像素值。
    |'
- en: '| [`RandomAdjustSharpness`](generated/torchvision.transforms.RandomAdjustSharpness.html#torchvision.transforms.RandomAdjustSharpness
    "torchvision.transforms.RandomAdjustSharpness")(sharpness_factor[, p]) | Adjust
    the sharpness of the image randomly with a given probability. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomAdjustSharpness`](generated/torchvision.transforms.RandomAdjustSharpness.html#torchvision.transforms.RandomAdjustSharpness
    "torchvision.transforms.RandomAdjustSharpness")(sharpness_factor[, p]) | 以给定概率随机调整图像的清晰度。
    |'
- en: '| [`RandomAutocontrast`](generated/torchvision.transforms.RandomAutocontrast.html#torchvision.transforms.RandomAutocontrast
    "torchvision.transforms.RandomAutocontrast")([p]) | Autocontrast the pixels of
    the given image randomly with a given probability. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomAutocontrast`](generated/torchvision.transforms.RandomAutocontrast.html#torchvision.transforms.RandomAutocontrast
    "torchvision.transforms.RandomAutocontrast")([p]) | 以给定概率随机自动对比度调整给定图像的像素。 |'
- en: '| [`RandomEqualize`](generated/torchvision.transforms.RandomEqualize.html#torchvision.transforms.RandomEqualize
    "torchvision.transforms.RandomEqualize")([p]) | Equalize the histogram of the
    given image randomly with a given probability. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomEqualize`](generated/torchvision.transforms.RandomEqualize.html#torchvision.transforms.RandomEqualize
    "torchvision.transforms.RandomEqualize")([p]) | 以给定概率随机均衡给定图像的直方图。 |'
- en: Composition[](#id5 "Permalink to this heading")
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组合
- en: '| [`Compose`](generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose
    "torchvision.transforms.Compose")(transforms) | Composes several transforms together.
    |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`Compose`](generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose
    "torchvision.transforms.Compose")(transforms) | 将多个变换组合在一起。 |'
- en: '| [`RandomApply`](generated/torchvision.transforms.RandomApply.html#torchvision.transforms.RandomApply
    "torchvision.transforms.RandomApply")(transforms[, p]) | Apply randomly a list
    of transformations with a given probability. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomApply`](generated/torchvision.transforms.RandomApply.html#torchvision.transforms.RandomApply
    "torchvision.transforms.RandomApply")(transforms[, p]) | 以给定概率随机应用一系列变换。 |'
- en: '| [`RandomChoice`](generated/torchvision.transforms.RandomChoice.html#torchvision.transforms.RandomChoice
    "torchvision.transforms.RandomChoice")(transforms[, p]) | Apply single transformation
    randomly picked from a list. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomChoice`](generated/torchvision.transforms.RandomChoice.html#torchvision.transforms.RandomChoice
    "torchvision.transforms.RandomChoice")(transforms[, p]) | 从列表中随机选择一个单一变换。 |'
- en: '| [`RandomOrder`](generated/torchvision.transforms.RandomOrder.html#torchvision.transforms.RandomOrder
    "torchvision.transforms.RandomOrder")(transforms) | Apply a list of transformations
    in a random order. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomOrder`](generated/torchvision.transforms.RandomOrder.html#torchvision.transforms.RandomOrder
    "torchvision.transforms.RandomOrder")(transforms) | 以随机顺序应用一系列变换。 |'
- en: Miscellaneous[](#id6 "Permalink to this heading")
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '| [`LinearTransformation`](generated/torchvision.transforms.LinearTransformation.html#torchvision.transforms.LinearTransformation
    "torchvision.transforms.LinearTransformation")(transformation_matrix, ...) | Transform
    a tensor image with a square transformation matrix and a mean_vector computed
    offline. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| [`LinearTransformation`](generated/torchvision.transforms.LinearTransformation.html#torchvision.transforms.LinearTransformation
    "torchvision.transforms.LinearTransformation")(transformation_matrix, ...) | 使用计算离线的方形变换矩阵和均值向量转换张量图像。
    |'
- en: '| [`Normalize`](generated/torchvision.transforms.Normalize.html#torchvision.transforms.Normalize
    "torchvision.transforms.Normalize")(mean, std[, inplace]) | Normalize a tensor
    image with mean and standard deviation. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`Normalize`](generated/torchvision.transforms.Normalize.html#torchvision.transforms.Normalize
    "torchvision.transforms.Normalize")(mean, std[, inplace]) | 使用均值和标准差对张量图像进行归一化。
    |'
- en: '| [`RandomErasing`](generated/torchvision.transforms.RandomErasing.html#torchvision.transforms.RandomErasing
    "torchvision.transforms.RandomErasing")([p, scale, ratio, value, inplace]) | Randomly
    selects a rectangle region in a torch.Tensor image and erases its pixels. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| [`RandomErasing`](generated/torchvision.transforms.RandomErasing.html#torchvision.transforms.RandomErasing
    "torchvision.transforms.RandomErasing")([p, scale, ratio, value, inplace]) | 随机选择
    torch.Tensor 图像中的矩形区域并擦除其像素。 |'
- en: '| [`Lambda`](generated/torchvision.transforms.Lambda.html#torchvision.transforms.Lambda
    "torchvision.transforms.Lambda")(lambd) | Apply a user-defined lambda as a transform.
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| [`Lambda`](generated/torchvision.transforms.Lambda.html#torchvision.transforms.Lambda
    "torchvision.transforms.Lambda")(lambd) | 应用用户定义的lambda作为变换。 |'
- en: Conversion[](#id7 "Permalink to this heading")
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换
- en: Note
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Beware, some of these conversion transforms below will scale the values while
    performing the conversion, while some may not do any scaling. By scaling, we mean
    e.g. that a `uint8` -> `float32` would map the [0, 255] range into [0, 1] (and
    vice-versa). See [Dtype and expected value range](#range-and-dtype).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，下面的一些转换会在执行转换时缩放值，而有些可能不会进行任何缩放。通过缩放，我们指的是例如 `uint8` -> `float32` 将 [0,
    255] 范围映射到 [0, 1]（反之亦然）。请参阅 [数据类型和期望值范围](#range-and-dtype)。
- en: '| [`ToPILImage`](generated/torchvision.transforms.ToPILImage.html#torchvision.transforms.ToPILImage
    "torchvision.transforms.ToPILImage")([mode]) | Convert a tensor or an ndarray
    to PIL Image |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| [`ToPILImage`](generated/torchvision.transforms.ToPILImage.html#torchvision.transforms.ToPILImage
    "torchvision.transforms.ToPILImage")([mode]) | 将张量或ndarray转换为PIL图像 |'
- en: '| [`ToTensor`](generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor
    "torchvision.transforms.ToTensor")() | Convert a PIL Image or ndarray to tensor
    and scale the values accordingly. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| [`ToTensor`](generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor
    "torchvision.transforms.ToTensor")() | 将PIL图像或ndarray转换为张量并相应地缩放值。 |'
- en: '| [`PILToTensor`](generated/torchvision.transforms.PILToTensor.html#torchvision.transforms.PILToTensor
    "torchvision.transforms.PILToTensor")() | Convert a PIL Image to a tensor of the
    same type - this does not scale values. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| [`PILToTensor`](generated/torchvision.transforms.PILToTensor.html#torchvision.transforms.PILToTensor
    "torchvision.transforms.PILToTensor")() | 将PIL图像转换为相同类型的张量 - 不会缩放值。 |'
- en: '| [`ConvertImageDtype`](generated/torchvision.transforms.ConvertImageDtype.html#torchvision.transforms.ConvertImageDtype
    "torchvision.transforms.ConvertImageDtype")(dtype) | Convert a tensor image to
    the given `dtype` and scale the values accordingly. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| [`ConvertImageDtype`](generated/torchvision.transforms.ConvertImageDtype.html#torchvision.transforms.ConvertImageDtype
    "torchvision.transforms.ConvertImageDtype")(dtype) | 将张量图像转换为给定的`dtype`并相应地缩放值。
    |'
- en: Auto-Augmentation[](#id8 "Permalink to this heading")
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动增强[](#id8 "跳转到此标题")
- en: '[AutoAugment](https://arxiv.org/pdf/1805.09501.pdf) is a common Data Augmentation
    technique that can improve the accuracy of Image Classification models. Though
    the data augmentation policies are directly linked to their trained dataset, empirical
    studies show that ImageNet policies provide significant improvements when applied
    to other datasets. In TorchVision we implemented 3 policies learned on the following
    datasets: ImageNet, CIFAR10 and SVHN. The new transform can be used standalone
    or mixed-and-matched with existing transforms:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[AutoAugment](https://arxiv.org/pdf/1805.09501.pdf)是一种常见的数据增强技术，可以提高图像分类模型的准确性。尽管数据增强策略直接与它们训练的数据集相关联，但实证研究表明，当应用于其他数据集时，ImageNet策略会显著改善。在TorchVision中，我们实现了在以下数据集上学习的3种策略：ImageNet、CIFAR10和SVHN。新的转换可以独立使用，也可以与现有转换混合使用：'
- en: '| [`AutoAugmentPolicy`](generated/torchvision.transforms.AutoAugmentPolicy.html#torchvision.transforms.AutoAugmentPolicy
    "torchvision.transforms.AutoAugmentPolicy")(value) | AutoAugment policies learned
    on different datasets. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`AutoAugmentPolicy`](generated/torchvision.transforms.AutoAugmentPolicy.html#torchvision.transforms.AutoAugmentPolicy
    "torchvision.transforms.AutoAugmentPolicy")(value) | 在不同数据集上学习的AutoAugment策略。
    |'
- en: '| [`AutoAugment`](generated/torchvision.transforms.AutoAugment.html#torchvision.transforms.AutoAugment
    "torchvision.transforms.AutoAugment")([policy, interpolation, fill]) | AutoAugment
    data augmentation method based on ["AutoAugment: Learning Augmentation Strategies
    from Data"](https://arxiv.org/pdf/1805.09501.pdf). |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`AutoAugment`](generated/torchvision.transforms.AutoAugment.html#torchvision.transforms.AutoAugment
    "torchvision.transforms.AutoAugment")([policy, interpolation, fill]) | 基于["AutoAugment:
    Learning Augmentation Strategies from Data"](https://arxiv.org/pdf/1805.09501.pdf)的AutoAugment数据增强方法。
    |'
- en: '| [`RandAugment`](generated/torchvision.transforms.RandAugment.html#torchvision.transforms.RandAugment
    "torchvision.transforms.RandAugment")([num_ops, magnitude, ...]) | RandAugment
    data augmentation method based on ["RandAugment: Practical automated data augmentation
    with a reduced search space"](https://arxiv.org/abs/1909.13719). |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`RandAugment`](generated/torchvision.transforms.RandAugment.html#torchvision.transforms.RandAugment
    "torchvision.transforms.RandAugment")([num_ops, magnitude, ...]) | 基于["RandAugment:
    Practical automated data augmentation with a reduced search space"](https://arxiv.org/abs/1909.13719)的RandAugment数据增强方法。
    |'
- en: '| [`TrivialAugmentWide`](generated/torchvision.transforms.TrivialAugmentWide.html#torchvision.transforms.TrivialAugmentWide
    "torchvision.transforms.TrivialAugmentWide")([num_magnitude_bins, ...]) | Dataset-independent
    data-augmentation with TrivialAugment Wide, as described in ["TrivialAugment:
    Tuning-free Yet State-of-the-Art Data Augmentation"](https://arxiv.org/abs/2103.10158).
    |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`TrivialAugmentWide`](generated/torchvision.transforms.TrivialAugmentWide.html#torchvision.transforms.TrivialAugmentWide
    "torchvision.transforms.TrivialAugmentWide")([num_magnitude_bins, ...]) | 使用TrivialAugment
    Wide进行与数据集无关的数据增强，如["TrivialAugment: Tuning-free Yet State-of-the-Art Data Augmentation"](https://arxiv.org/abs/2103.10158)中所述。
    |'
- en: '| [`AugMix`](generated/torchvision.transforms.AugMix.html#torchvision.transforms.AugMix
    "torchvision.transforms.AugMix")([severity, mixture_width, ...]) | AugMix data
    augmentation method based on ["AugMix: A Simple Data Processing Method to Improve
    Robustness and Uncertainty"](https://arxiv.org/abs/1912.02781). |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`AugMix`](generated/torchvision.transforms.AugMix.html#torchvision.transforms.AugMix
    "torchvision.transforms.AugMix")([severity, mixture_width, ...]) | 基于["AugMix:
    A Simple Data Processing Method to Improve Robustness and Uncertainty"](https://arxiv.org/abs/1912.02781)的AugMix数据增强方法。
    |'
- en: Functional Transforms[](#id14 "Permalink to this heading")
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能性转换[](#id14 "跳转到此标题")
- en: '| [`adjust_brightness`](generated/torchvision.transforms.functional.adjust_brightness.html#torchvision.transforms.functional.adjust_brightness
    "torchvision.transforms.functional.adjust_brightness")(img, brightness_factor)
    | Adjust brightness of an image. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| [`adjust_brightness`](generated/torchvision.transforms.functional.adjust_brightness.html#torchvision.transforms.functional.adjust_brightness
    "torchvision.transforms.functional.adjust_brightness")(img, brightness_factor)
    | 调整图像的亮度。 |'
- en: '| [`adjust_contrast`](generated/torchvision.transforms.functional.adjust_contrast.html#torchvision.transforms.functional.adjust_contrast
    "torchvision.transforms.functional.adjust_contrast")(img, contrast_factor) | Adjust
    contrast of an image. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| [`adjust_contrast`](generated/torchvision.transforms.functional.adjust_contrast.html#torchvision.transforms.functional.adjust_contrast
    "torchvision.transforms.functional.adjust_contrast")(img, contrast_factor) | 调整图像的对比度。
    |'
- en: '| [`adjust_gamma`](generated/torchvision.transforms.functional.adjust_gamma.html#torchvision.transforms.functional.adjust_gamma
    "torchvision.transforms.functional.adjust_gamma")(img, gamma[, gain]) | Perform
    gamma correction on an image. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| [`adjust_gamma`](generated/torchvision.transforms.functional.adjust_gamma.html#torchvision.transforms.functional.adjust_gamma
    "torchvision.transforms.functional.adjust_gamma")(img, gamma[, gain]) | 对图像执行伽马校正。
    |'
- en: '| [`adjust_hue`](generated/torchvision.transforms.functional.adjust_hue.html#torchvision.transforms.functional.adjust_hue
    "torchvision.transforms.functional.adjust_hue")(img, hue_factor) | Adjust hue
    of an image. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`adjust_hue`](generated/torchvision.transforms.functional.adjust_hue.html#torchvision.transforms.functional.adjust_hue
    "torchvision.transforms.functional.adjust_hue")(img, hue_factor) | 调整图像的色调。 |'
- en: '| [`adjust_saturation`](generated/torchvision.transforms.functional.adjust_saturation.html#torchvision.transforms.functional.adjust_saturation
    "torchvision.transforms.functional.adjust_saturation")(img, saturation_factor)
    | Adjust color saturation of an image. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`adjust_saturation`](generated/torchvision.transforms.functional.adjust_saturation.html#torchvision.transforms.functional.adjust_saturation
    "torchvision.transforms.functional.adjust_saturation")(img, saturation_factor)
    | 调整图像的颜色饱和度。 |'
- en: '| [`adjust_sharpness`](generated/torchvision.transforms.functional.adjust_sharpness.html#torchvision.transforms.functional.adjust_sharpness
    "torchvision.transforms.functional.adjust_sharpness")(img, sharpness_factor) |
    Adjust the sharpness of an image. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`adjust_sharpness`](generated/torchvision.transforms.functional.adjust_sharpness.html#torchvision.transforms.functional.adjust_sharpness
    "torchvision.transforms.functional.adjust_sharpness")(img, sharpness_factor) |
    调整图像的锐度。 |'
- en: '| [`affine`](generated/torchvision.transforms.functional.affine.html#torchvision.transforms.functional.affine
    "torchvision.transforms.functional.affine")(img, angle, translate, scale, shear)
    | Apply affine transformation on the image keeping image center invariant. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`affine`](generated/torchvision.transforms.functional.affine.html#torchvision.transforms.functional.affine
    "torchvision.transforms.functional.affine")(img, angle, translate, scale, shear)
    | 在保持图像中心不变的情况下对图像应用仿射变换。 |'
- en: '| [`autocontrast`](generated/torchvision.transforms.functional.autocontrast.html#torchvision.transforms.functional.autocontrast
    "torchvision.transforms.functional.autocontrast")(img) | Maximize contrast of
    an image by remapping its pixels per channel so that the lowest becomes black
    and the lightest becomes white. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| [`autocontrast`](generated/torchvision.transforms.functional.autocontrast.html#torchvision.transforms.functional.autocontrast
    "torchvision.transforms.functional.autocontrast")(img) | 通过重新映射每个通道的像素，使最低值变为黑色，最亮值变为白色，从而最大化图像的对比度。
    |'
- en: '| [`center_crop`](generated/torchvision.transforms.functional.center_crop.html#torchvision.transforms.functional.center_crop
    "torchvision.transforms.functional.center_crop")(img, output_size) | Crops the
    given image at the center. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| [`center_crop`](generated/torchvision.transforms.functional.center_crop.html#torchvision.transforms.functional.center_crop
    "torchvision.transforms.functional.center_crop")(img, output_size) | 在中心裁剪给定图像。
    |'
- en: '| [`convert_image_dtype`](generated/torchvision.transforms.functional.convert_image_dtype.html#torchvision.transforms.functional.convert_image_dtype
    "torchvision.transforms.functional.convert_image_dtype")(image[, dtype]) | Convert
    a tensor image to the given `dtype` and scale the values accordingly This function
    does not support PIL Image. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| [`convert_image_dtype`](generated/torchvision.transforms.functional.convert_image_dtype.html#torchvision.transforms.functional.convert_image_dtype
    "torchvision.transforms.functional.convert_image_dtype")(image[, dtype]) | 将张量图像转换为给定的`dtype`并相应地缩放值。此函数不支持PIL图像。
    |'
- en: '| [`crop`](generated/torchvision.transforms.functional.crop.html#torchvision.transforms.functional.crop
    "torchvision.transforms.functional.crop")(img, top, left, height, width) | Crop
    the given image at specified location and output size. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| [`crop`](generated/torchvision.transforms.functional.crop.html#torchvision.transforms.functional.crop
    "torchvision.transforms.functional.crop")(img, top, left, height, width) | 在指定位置裁剪给定图像并输出大小。
    |'
- en: '| [`equalize`](generated/torchvision.transforms.functional.equalize.html#torchvision.transforms.functional.equalize
    "torchvision.transforms.functional.equalize")(img) | Equalize the histogram of
    an image by applying a non-linear mapping to the input in order to create a uniform
    distribution of grayscale values in the output. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| [`equalize`](generated/torchvision.transforms.functional.equalize.html#torchvision.transforms.functional.equalize
    "torchvision.transforms.functional.equalize")(img) | 通过对输入应用非线性映射来均衡图像的直方图，以创建输出中灰度值的均匀分布。
    |'
- en: '| [`erase`](generated/torchvision.transforms.functional.erase.html#torchvision.transforms.functional.erase
    "torchvision.transforms.functional.erase")(img, i, j, h, w, v[, inplace]) | Erase
    the input Tensor Image with given value. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| [`erase`](generated/torchvision.transforms.functional.erase.html#torchvision.transforms.functional.erase
    "torchvision.transforms.functional.erase")(img, i, j, h, w, v[, inplace]) | 用给定值擦除输入张量图像。
    |'
- en: '| [`five_crop`](generated/torchvision.transforms.functional.five_crop.html#torchvision.transforms.functional.five_crop
    "torchvision.transforms.functional.five_crop")(img, size) | Crop the given image
    into four corners and the central crop. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| [`five_crop`](generated/torchvision.transforms.functional.five_crop.html#torchvision.transforms.functional.five_crop
    "torchvision.transforms.functional.five_crop")(img, size) | 将给定图像裁剪成四个角和中心裁剪。
    |'
- en: '| [`gaussian_blur`](generated/torchvision.transforms.functional.gaussian_blur.html#torchvision.transforms.functional.gaussian_blur
    "torchvision.transforms.functional.gaussian_blur")(img, kernel_size[, sigma])
    | Performs Gaussian blurring on the image by given kernel. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| [`gaussian_blur`](generated/torchvision.transforms.functional.gaussian_blur.html#torchvision.transforms.functional.gaussian_blur
    "torchvision.transforms.functional.gaussian_blur")(img, kernel_size[, sigma])
    | 通过给定的核对图像执行高斯模糊。 |'
- en: '| [`get_dimensions`](generated/torchvision.transforms.functional.get_dimensions.html#torchvision.transforms.functional.get_dimensions
    "torchvision.transforms.functional.get_dimensions")(img) | Returns the dimensions
    of an image as [channels, height, width]. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| [`get_dimensions`](generated/torchvision.transforms.functional.get_dimensions.html#torchvision.transforms.functional.get_dimensions
    "torchvision.transforms.functional.get_dimensions")(img) | 返回图像的尺寸为[通道，高度，宽度]。
    |'
- en: '| [`get_image_num_channels`](generated/torchvision.transforms.functional.get_image_num_channels.html#torchvision.transforms.functional.get_image_num_channels
    "torchvision.transforms.functional.get_image_num_channels")(img) | Returns the
    number of channels of an image. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| [`get_image_num_channels`](generated/torchvision.transforms.functional.get_image_num_channels.html#torchvision.transforms.functional.get_image_num_channels
    "torchvision.transforms.functional.get_image_num_channels")(img) | 返回图像的通道数。 |'
- en: '| [`get_image_size`](generated/torchvision.transforms.functional.get_image_size.html#torchvision.transforms.functional.get_image_size
    "torchvision.transforms.functional.get_image_size")(img) | Returns the size of
    an image as [width, height]. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| [`get_image_size`](generated/torchvision.transforms.functional.get_image_size.html#torchvision.transforms.functional.get_image_size
    "torchvision.transforms.functional.get_image_size")(img) | 返回图像的尺寸为[宽度，高度]。 |'
- en: '| [`hflip`](generated/torchvision.transforms.functional.hflip.html#torchvision.transforms.functional.hflip
    "torchvision.transforms.functional.hflip")(img) | Horizontally flip the given
    image. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| [`hflip`](generated/torchvision.transforms.functional.hflip.html#torchvision.transforms.functional.hflip
    "torchvision.transforms.functional.hflip")(img) | 水平翻转给定图像。 |'
- en: '| [`invert`](generated/torchvision.transforms.functional.invert.html#torchvision.transforms.functional.invert
    "torchvision.transforms.functional.invert")(img) | Invert the colors of an RGB/grayscale
    image. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| [`invert`](generated/torchvision.transforms.functional.invert.html#torchvision.transforms.functional.invert
    "torchvision.transforms.functional.invert")(img) | 反转RGB/灰度图像的颜色。 |'
- en: '| [`normalize`](generated/torchvision.transforms.functional.normalize.html#torchvision.transforms.functional.normalize
    "torchvision.transforms.functional.normalize")(tensor, mean, std[, inplace]) |
    Normalize a float tensor image with mean and standard deviation. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| [`normalize`](generated/torchvision.transforms.functional.normalize.html#torchvision.transforms.functional.normalize
    "torchvision.transforms.functional.normalize")(tensor, mean, std[, inplace]) |
    使用均值和标准差对浮点张量图像进行归一化。 |'
- en: '| [`pad`](generated/torchvision.transforms.functional.pad.html#torchvision.transforms.functional.pad
    "torchvision.transforms.functional.pad")(img, padding[, fill, padding_mode]) |
    Pad the given image on all sides with the given "pad" value. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [`pad`](generated/torchvision.transforms.functional.pad.html#torchvision.transforms.functional.pad
    "torchvision.transforms.functional.pad")(img, padding[, fill, padding_mode]) |
    使用给定的“填充”值在所有边上填充给定的图像。 |'
- en: '| [`perspective`](generated/torchvision.transforms.functional.perspective.html#torchvision.transforms.functional.perspective
    "torchvision.transforms.functional.perspective")(img, startpoints, endpoints[, ...])
    | Perform perspective transform of the given image. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [`perspective`](generated/torchvision.transforms.functional.perspective.html#torchvision.transforms.functional.perspective
    "torchvision.transforms.functional.perspective")(img, startpoints, endpoints[,
    ...]) | 对给定图像执行透视变换。 |'
- en: '| [`pil_to_tensor`](generated/torchvision.transforms.functional.pil_to_tensor.html#torchvision.transforms.functional.pil_to_tensor
    "torchvision.transforms.functional.pil_to_tensor")(pic) | Convert a `PIL Image`
    to a tensor of the same type. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [`pil_to_tensor`](generated/torchvision.transforms.functional.pil_to_tensor.html#torchvision.transforms.functional.pil_to_tensor
    "torchvision.transforms.functional.pil_to_tensor")(pic) | 将`PIL Image`转换为相同类型的张量。
    |'
- en: '| [`posterize`](generated/torchvision.transforms.functional.posterize.html#torchvision.transforms.functional.posterize
    "torchvision.transforms.functional.posterize")(img, bits) | Posterize an image
    by reducing the number of bits for each color channel. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| [`posterize`](generated/torchvision.transforms.functional.posterize.html#torchvision.transforms.functional.posterize
    "torchvision.transforms.functional.posterize")(img, bits) | 通过减少每个颜色通道的位数来制作海报效果。
    |'
- en: '| [`resize`](generated/torchvision.transforms.functional.resize.html#torchvision.transforms.functional.resize
    "torchvision.transforms.functional.resize")(img, size[, interpolation, max_size, ...])
    | Resize the input image to the given size. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [`resize`](generated/torchvision.transforms.functional.resize.html#torchvision.transforms.functional.resize
    "torchvision.transforms.functional.resize")(img, size[, interpolation, max_size,
    ...]) | 将输入图像调整大小为给定大小。 |'
- en: '| [`resized_crop`](generated/torchvision.transforms.functional.resized_crop.html#torchvision.transforms.functional.resized_crop
    "torchvision.transforms.functional.resized_crop")(img, top, left, height, width, size)
    | Crop the given image and resize it to desired size. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [`resized_crop`](generated/torchvision.transforms.functional.resized_crop.html#torchvision.transforms.functional.resized_crop
    "torchvision.transforms.functional.resized_crop")(img, top, left, height, width,
    size) | 裁剪给定的图像并将其调整大小到所需大小。 |'
- en: '| [`rgb_to_grayscale`](generated/torchvision.transforms.functional.rgb_to_grayscale.html#torchvision.transforms.functional.rgb_to_grayscale
    "torchvision.transforms.functional.rgb_to_grayscale")(img[, num_output_channels])
    | Convert RGB image to grayscale version of image. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| [`rgb_to_grayscale`](generated/torchvision.transforms.functional.rgb_to_grayscale.html#torchvision.transforms.functional.rgb_to_grayscale
    "torchvision.transforms.functional.rgb_to_grayscale")(img[, num_output_channels])
    | 将RGB图像转换为灰度图像。 |'
- en: '| [`rotate`](generated/torchvision.transforms.functional.rotate.html#torchvision.transforms.functional.rotate
    "torchvision.transforms.functional.rotate")(img, angle[, interpolation, expand, ...])
    | Rotate the image by angle. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| [`rotate`](generated/torchvision.transforms.functional.rotate.html#torchvision.transforms.functional.rotate
    "torchvision.transforms.functional.rotate")(img, angle[, interpolation, expand,
    ...]) | 以角度旋转图像。 |'
- en: '| [`solarize`](generated/torchvision.transforms.functional.solarize.html#torchvision.transforms.functional.solarize
    "torchvision.transforms.functional.solarize")(img, threshold) | Solarize an RGB/grayscale
    image by inverting all pixel values above a threshold. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| [`solarize`](generated/torchvision.transforms.functional.solarize.html#torchvision.transforms.functional.solarize
    "torchvision.transforms.functional.solarize")(img, threshold) | 通过反转所有高于阈值的像素值来使RGB/灰度图像太阳化。
    |'
- en: '| [`ten_crop`](generated/torchvision.transforms.functional.ten_crop.html#torchvision.transforms.functional.ten_crop
    "torchvision.transforms.functional.ten_crop")(img, size[, vertical_flip]) | Generate
    ten cropped images from the given image. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| [`ten_crop`](generated/torchvision.transforms.functional.ten_crop.html#torchvision.transforms.functional.ten_crop
    "torchvision.transforms.functional.ten_crop")(img, size[, vertical_flip]) | 从给定图像生成十个裁剪图像。
    |'
- en: '| [`to_grayscale`](generated/torchvision.transforms.functional.to_grayscale.html#torchvision.transforms.functional.to_grayscale
    "torchvision.transforms.functional.to_grayscale")(img[, num_output_channels])
    | Convert PIL image of any mode (RGB, HSV, LAB, etc) to grayscale version of image.
    |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [`to_grayscale`](generated/torchvision.transforms.functional.to_grayscale.html#torchvision.transforms.functional.to_grayscale
    "torchvision.transforms.functional.to_grayscale")(img[, num_output_channels])
    | 将任何模式的PIL图像（RGB、HSV、LAB等）转换为灰度图像。 |'
- en: '| [`to_pil_image`](generated/torchvision.transforms.functional.to_pil_image.html#torchvision.transforms.functional.to_pil_image
    "torchvision.transforms.functional.to_pil_image")(pic[, mode]) | Convert a tensor
    or an ndarray to PIL Image. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [`to_pil_image`](generated/torchvision.transforms.functional.to_pil_image.html#torchvision.transforms.functional.to_pil_image
    "torchvision.transforms.functional.to_pil_image")(pic[, mode]) | 将张量或ndarray转换为PIL图像。
    |'
- en: '| [`to_tensor`](generated/torchvision.transforms.functional.to_tensor.html#torchvision.transforms.functional.to_tensor
    "torchvision.transforms.functional.to_tensor")(pic) | Convert a `PIL Image` or
    `numpy.ndarray` to tensor. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| [`to_tensor`](generated/torchvision.transforms.functional.to_tensor.html#torchvision.transforms.functional.to_tensor
    "torchvision.transforms.functional.to_tensor")(pic) | 将`PIL Image`或`numpy.ndarray`转换为张量。
    |'
- en: '| [`vflip`](generated/torchvision.transforms.functional.vflip.html#torchvision.transforms.functional.vflip
    "torchvision.transforms.functional.vflip")(img) | Vertically flip the given image.
    |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| [`vflip`](generated/torchvision.transforms.functional.vflip.html#torchvision.transforms.functional.vflip
    "torchvision.transforms.functional.vflip")(img) | 垂直翻转给定的图像。 |'
