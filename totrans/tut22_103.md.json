["```py\nimport torch\nimport torchvision.models as models\nimport time\n\nmodel = models.resnet50(pretrained=False)\nmodel.eval()\nbatch_size = 32\ndata = torch.rand(batch_size, 3, 224, 224)\n\n# warm up\nfor _ in range(100):\n    model(data)\n\n# measure\n# Intel\u00ae VTune Profiler's ITT context manager\nwith torch.autograd.profiler.emit_itt():\n    start = time.time()\n    for i in range(100):\n   # Intel\u00ae VTune Profiler's ITT to annotate each step\n        torch.profiler.itt.range_push('step_{}'.format(i))\n        model(data)\n        torch.profiler.itt.range_pop()\n    end = time.time()\n\nprint('Inference took {:.2f} ms in average'.format((end-start)/100*1000)) \n```", "```py\ncpu_launcher_enable=true\ncpu_launcher_args=--node_id 0 --use_default_allocator \n```", "```py\ncpu_launcher_enable=true\ncpu_launcher_args=--node_id 0 --enable_jemalloc \n```", "```py\nimport torch\n\nclass Model(torch.nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.conv = torch.nn.Conv2d(16, 33, 3, stride=2)\n        self.relu = torch.nn.ReLU()\n\n    def forward(self, x):\n        x = self.conv(x)\n        x = self.relu(x)\n        return x\n\nmodel = Model()\nmodel.eval()\ndata = torch.rand(20, 16, 50, 100)\n\n#################### code changes ####################\nimport intel_extension_for_pytorch as ipex\nmodel = ipex.optimize(model)\n######################################################\n\nprint(model) \n```", "```py\nimport torch\n\nclass Model(torch.nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.conv = torch.nn.Conv2d(16, 33, 3, stride=2)\n        self.relu = torch.nn.ReLU()\n\n    def forward(self, x):\n        x = self.conv(x)\n        x = self.relu(x)\n        return x\n\nmodel = Model()\nmodel.eval()\ndata = torch.rand(20, 16, 50, 100)\n\n#################### code changes ####################\nimport intel_extension_for_pytorch as ipex\nmodel = ipex.optimize(model)\n######################################################\n\n# torchscript\nwith torch.no_grad():\n    model = torch.jit.trace(model, data)\n    model = torch.jit.freeze(model) \n```", "```py\nimport torch\n\nclass Model(torch.nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.conv = torch.nn.Conv2d(16, 33, 3, stride=2)\n        self.relu = torch.nn.ReLU()\n\n    def forward(self, x):\n        x = self.conv(x)\n        x = self.relu(x)\n        return x\n\nmodel = Model()\nmodel.eval()\ndata = torch.rand(20, 16, 50, 100)\n\nimport intel_extension_for_pytorch as ipex\n############################### code changes ###############################\nipex.disable_auto_channels_last() # omit this line for channels_last (default)\n############################################################################\nmodel = ipex.optimize(model)\n\nwith torch.no_grad():\n    model = torch.jit.trace(model, data)\n    model = torch.jit.freeze(model) \n```", "```py\ncpu_launcher_enable=true\ncpu_launcher_args=--node_id 0 \n```"]