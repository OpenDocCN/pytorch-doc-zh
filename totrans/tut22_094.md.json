["```py\npip install torch torchvision \n```", "```py\nimport torch\nimport torch.nn\nimport torch.optim\nimport torch.profiler\nimport torch.utils.data\nimport torchvision.datasets\nimport torchvision.models\nimport torchvision.transforms as T \n```", "```py\ntransform = [T.Compose](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")(\n    [[T.Resize](https://pytorch.org/vision/stable/generated/torchvision.transforms.Resize.html#torchvision.transforms.Resize \"torchvision.transforms.Resize\")(224),\n     [T.ToTensor](https://pytorch.org/vision/stable/generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor \"torchvision.transforms.ToTensor\")(),\n     [T.Normalize](https://pytorch.org/vision/stable/generated/torchvision.transforms.Normalize.html#torchvision.transforms.Normalize \"torchvision.transforms.Normalize\")((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\ntrain_set = [torchvision.datasets.CIFAR10](https://pytorch.org/vision/stable/generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10 \"torchvision.datasets.CIFAR10\")(root='./data', train=True, download=True, transform=transform)\ntrain_loader = [torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")(train_set, batch_size=32, shuffle=True) \n```", "```py\ndevice = [torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")(\"cuda:0\")\nmodel = [torchvision.models.resnet18](https://pytorch.org/vision/stable/models/generated/torchvision.models.resnet18.html#torchvision.models.resnet18 \"torchvision.models.resnet18\")(weights='IMAGENET1K_V1').cuda(device)\ncriterion = [torch.nn.CrossEntropyLoss](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\")().cuda(device)\noptimizer = [torch.optim.SGD](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")(model.parameters(), lr=0.001, momentum=0.9)\nmodel.train() \n```", "```py\ndef train(data):\n    inputs, labels = data[0].to(device=device), data[1].to(device=device)\n    outputs = model(inputs)\n    loss = criterion(outputs, labels)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step() \n```", "```py\nwith [torch.profiler.profile](https://pytorch.org/docs/stable/profiler.html#torch.profiler.profile \"torch.profiler.profile\")(\n        schedule=[torch.profiler.schedule](https://pytorch.org/docs/stable/profiler.html#torch.profiler.schedule \"torch.profiler.schedule\")(wait=1, warmup=1, active=3, repeat=1),\n        on_trace_ready=[torch.profiler.tensorboard_trace_handler](https://pytorch.org/docs/stable/profiler.html#torch.profiler.tensorboard_trace_handler \"torch.profiler.tensorboard_trace_handler\")('./log/resnet18'),\n        record_shapes=True,\n        profile_memory=True,\n        with_stack=True\n) as prof:\n    for step, batch_data in enumerate(train_loader):\n        prof.step()  # Need to call this at each step to notify profiler of steps' boundary.\n        if step >= 1 + 1 + 3:\n            break\n        train(batch_data) \n```", "```py\nprof = [torch.profiler.profile](https://pytorch.org/docs/stable/profiler.html#torch.profiler.profile \"torch.profiler.profile\")(\n        schedule=[torch.profiler.schedule](https://pytorch.org/docs/stable/profiler.html#torch.profiler.schedule \"torch.profiler.schedule\")(wait=1, warmup=1, active=3, repeat=1),\n        on_trace_ready=[torch.profiler.tensorboard_trace_handler](https://pytorch.org/docs/stable/profiler.html#torch.profiler.tensorboard_trace_handler \"torch.profiler.tensorboard_trace_handler\")('./log/resnet18'),\n        record_shapes=True,\n        with_stack=True)\nprof.start()\nfor step, batch_data in enumerate(train_loader):\n    prof.step()\n    if step >= 1 + 1 + 3:\n        break\n    train(batch_data)\nprof.stop() \n```", "```py\npip install torch_tb_profiler \n```", "```py\ntensorboard --logdir=./log \n```", "```py\nhttp://localhost:6006/#pytorch_profiler \n```", "```py\ntrain_loader = [torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")(train_set, batch_size=32, shuffle=True, num_workers=4) \n```", "```py\npip install azure-storage-blob\ntensorboard --logdir=https://torchtbprofiler.blob.core.windows.net/torchtbprofiler/demo/memory_demo_1_10 \n```", "```py\npip install azure-storage-blob\ntensorboard --logdir=https://torchtbprofiler.blob.core.windows.net/torchtbprofiler/demo/distributed_bert \n```", "```py\nmkdir ~/profiler_tutorial\ncd profiler_tutorial\nvi test_cifar10.py \n```", "```py\ndocker run -it --network=host --device=/dev/kfd --device=/dev/dri --group-add=video --ipc=host --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --shm-size 8G -v ~/profiler_tutorial:/profiler_tutorial rocm/dev-ubuntu-20.04:5.6 \n```", "```py\nsudo apt update\nsudo apt install libjpeg-dev python3-dev -y\npip3 install wheel setuptools\nsudo apt install python-is-python3 \n```", "```py\npip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm5.6 \n```", "```py\npip install torch_tb_profiler\ncd /profiler_tutorial\npython test_cifar10.py \n```", "```py\ntensorboard --logdir=./log \n```"]