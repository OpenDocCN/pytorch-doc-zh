["```py\nffmpeg -muxers\nffmpeg -encoders \n```", "```py\nimport torch\nimport torchaudio\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n\nfrom torchaudio.io import StreamWriter\n\nprint(\"FFmpeg library versions\")\nfor [k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), [v](https://docs.python.org/3/library/stdtypes.html#tuple \"builtins.tuple\") in torchaudio.utils.ffmpeg_utils.get_versions().items():\n    print(f\" {[k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}: {[v](https://docs.python.org/3/library/stdtypes.html#tuple \"builtins.tuple\")}\") \n```", "```py\n2.2.0\n2.2.0\nFFmpeg library versions\n  libavcodec: (60, 3, 100)\n  libavdevice: (60, 1, 100)\n  libavfilter: (9, 3, 100)\n  libavformat: (60, 3, 100)\n  libavutil: (58, 2, 100) \n```", "```py\nimport io\nimport os\nimport tempfile\n\nfrom IPython.display import Audio, Video\n\nfrom torchaudio.utils import download_asset\n\n[SAMPLE_PATH](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\")\n[WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([SAMPLE_PATH](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), channels_first=False)\n[NUM_FRAMES](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [NUM_CHANNELS](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = [WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape\n\n[_BASE_DIR](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory \"tempfile.TemporaryDirectory\") = [tempfile.TemporaryDirectory](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory \"tempfile.TemporaryDirectory\")()\n\ndef get_path(filename):\n    return [os.path.join](https://docs.python.org/3/library/os.path.html#os.path.join \"os.path.join\")([_BASE_DIR.name](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), filename) \n```", "```py\n# 1\\. Define the destination. (local file in this case)\n[path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = get_path(\"test.wav\")\ns = StreamWriter([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\n# 2\\. Configure the stream. (8kHz, Stereo WAV)\ns.add_audio_stream(\n    sample_rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    num_channels=[NUM_CHANNELS](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n) \n```", "```py\n# 3\\. Write the data\nwith s.open():\n    s.write_audio_chunk(0, [WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nAudio([path](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\nStreamWriter(dst=\"audio.wav\")\n\nStreamWriter(dst=\"audio.mp3\") \n```", "```py\nStreamWriter(dst=\"image.jpeg\")\n\nStreamWriter(dst=\"video.mpeg\") \n```", "```py\n# Open the local file as fileobj\nwith open(\"audio.wav\", \"wb\") as dst:\n    StreamWriter(dst=dst) \n```", "```py\n# In-memory encoding\nbuffer = [io.BytesIO](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\")()\nStreamWriter(dst=buffer) \n```", "```py\n# Real-Time Messaging Protocol\nStreamWriter(dst=\"rtmp://localhost:1234/live/app\", format=\"flv\")\n\n# UDP\nStreamWriter(dst=\"udp://localhost:48550\", format=\"mpegts\") \n```", "```py\ns = StreamWriter(\"audio.wav\")\ns.add_audio_stream(sample_rate=8000, num_channels=2) \n```", "```py\ns = StreamWriter(\"audio.mp3\")\ns.add_audio_stream(\n    ...,\n    encoder=\"libmp3lame\",   # \"libmp3lame\" is often the default encoder for mp3,\n                            # but specifying it manually, for the sake of illustration.\n\n    encoder_format=\"s16p\",  # \"libmp3lame\" encoder supports the following sample format.\n                            #  - \"s16p\" (16-bit signed integer)\n                            #  - \"s32p\" (32-bit signed integer)\n                            #  - \"fltp\" (32-bit floating point)\n) \n```", "```py\n# Audio data passed to StreamWriter must be torch.int16\ns.add_audio_stream(..., format=\"s16\") \n```", "```py\ns = StreamWriter(\"video.mp4\")\ns.add_video_stream([frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=10, [height](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=96, [width](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=128) \n```", "```py\ns = StreamWriter(\"image.png\")\ns.add_video_stream([frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=1, ...) \n```", "```py\ns = StreamWriter(\"video.mov\")\ns.add_video_stream(\n    ...,\n    encoder=\"libx264\",  # libx264 supports different YUV formats, such as\n                        # yuv420p yuvj420p yuv422p yuvj422p yuv444p yuvj444p nv12 nv16 nv21\n\n    encoder_format=\"yuv422p\",  # StreamWriter will convert the input data to YUV422 internally\n) \n```", "```py\ns.add_video_stream(..., format=\"bgr24\")\n                   # Image data passed to StreamWriter must have\n                   # three color channels representing Blue Green Red.\n                   #\n                   # The shape of the input tensor has to be\n                   # (time, channel==3, height, width) \n```", "```py\n# Configure stream\ns = StreamWriter(dst=get_path(\"audio.wav\"))\ns.add_audio_stream(sample_rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), num_channels=[NUM_CHANNELS](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n\n# Write data\nwith s.open():\n    s.write_audio_chunk(0, [WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n# Image config\n[height](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 96\n[width](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 128\n\n# Configure stream\ns = StreamWriter(dst=get_path(\"image.png\"))\ns.add_video_stream([frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=1, [height](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[height](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [width](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[width](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), format=\"rgb24\")\n\n# Generate image\n[chunk](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randint](https://pytorch.org/docs/stable/generated/torch.randint.html#torch.randint \"torch.randint\")(256, (1, 3, [height](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [width](https://docs.python.org/3/library/functions.html#int \"builtins.int\")), dtype=[torch.uint8](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"))\n\n# Write data\nwith s.open():\n    s.write_video_chunk(0, [chunk](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n# Video config\n[frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 30\n[height](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 96\n[width](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 128\n\n# Configure stream\ns = StreamWriter(dst=get_path(\"video.mp4\"))\ns.add_video_stream([frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [height](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[height](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [width](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[width](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), format=\"rgb24\")\n\n# Generate video chunk (3 seconds)\n[time](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = int([frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") * 3)\n[chunk](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randint](https://pytorch.org/docs/stable/generated/torch.randint.html#torch.randint \"torch.randint\")(256, ([time](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), 3, [height](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [width](https://docs.python.org/3/library/functions.html#int \"builtins.int\")), dtype=[torch.uint8](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"))\n\n# Write data\nwith s.open():\n    s.write_video_chunk(0, [chunk](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n# Configure stream\ns = StreamWriter(dst=get_path(\"video.mp4\"))\ns.add_audio_stream(sample_rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), num_channels=[NUM_CHANNELS](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\ns.add_video_stream([frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [height](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[height](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [width](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[width](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), format=\"rgb24\")\n\n# Generate audio/video chunk (3 seconds)\n[time](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = int([SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\") * 3)\n[audio_chunk](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(([time](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [NUM_CHANNELS](https://docs.python.org/3/library/functions.html#int \"builtins.int\")))\n[time](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = int([frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") * 3)\n[video_chunk](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randint](https://pytorch.org/docs/stable/generated/torch.randint.html#torch.randint \"torch.randint\")(256, ([time](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), 3, [height](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [width](https://docs.python.org/3/library/functions.html#int \"builtins.int\")), dtype=[torch.uint8](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"))\n\n# Write data\nwith s.open():\n    s.write_audio_chunk(0, [audio_chunk](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n    s.write_video_chunk(1, [video_chunk](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n# Write data in one-go\n[dst1](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\") = [io.BytesIO](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\")()\ns = StreamWriter(dst=[dst1](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\"), format=\"mp3\")\ns.add_audio_stream([SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [NUM_CHANNELS](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\nwith s.open():\n    s.write_audio_chunk(0, [WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n# Write data in smaller chunks\n[dst2](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\") = [io.BytesIO](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\")()\ns = StreamWriter(dst=[dst2](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\"), format=\"mp3\")\ns.add_audio_stream([SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [NUM_CHANNELS](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\nwith s.open():\n    for [start](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in range(0, [NUM_FRAMES](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")):\n        [end](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = [start](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")\n        s.write_audio_chunk(0, [WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[[start](https://docs.python.org/3/library/functions.html#int \"builtins.int\"):[end](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), ...]) \n```", "```py\n# Check that the contents are same\n[dst1](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\").seek(0)\n[bytes1](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\") = [dst1](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\").read()\n\nprint(f\"bytes1: {len([bytes1](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\"))}\")\nprint(f\"{[bytes1](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\")[:10]}...{[bytes1](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\")[-10:]}\\n\")\n\n[dst2](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\").seek(0)\n[bytes2](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\") = [dst2](https://docs.python.org/3/library/io.html#io.BytesIO \"io.BytesIO\").read()\n\nprint(f\"bytes2: {len([bytes2](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\"))}\")\nprint(f\"{[bytes2](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\")[:10]}...{[bytes2](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\")[-10:]}\\n\")\n\nassert [bytes1](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\") == [bytes2](https://docs.python.org/3/library/stdtypes.html#bytes \"builtins.bytes\")\n\nimport matplotlib.pyplot as plt \n```", "```py\nbytes1: 10700\nb'ID3\\x04\\x00\\x00\\x00\\x00\\x00\"'...b'\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa'\n\nbytes2: 10700\nb'ID3\\x04\\x00\\x00\\x00\\x00\\x00\"'...b'\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa' \n```", "```py\nimport torchaudio.transforms as T \n```", "```py\n[frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 20\n[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 4000\n\ntrans = [T.Spectrogram](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(\n    [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    hop_length=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\") // [frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),  # One FFT per one video frame\n    normalized=True,\n    power=1,\n)\n[specs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = trans([WAVEFORM.T](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))[0].T \n```", "```py\n[spec_db](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [T.AmplitudeToDB](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(stype=\"magnitude\", top_db=80)([specs.T](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n_ = plt.imshow([spec_db](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), aspect=\"auto\", origin=\"lower\") \n```", "```py\nfig, ax = plt.subplots(figsize=[3.2, 2.4])\nax.set_position([0, 0, 1, 1])\nax.set_facecolor(\"black\")\n[ncols](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [nrows](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = fig.canvas.get_width_height()\n\ndef _plot(data):\n    ax.clear()\n    x = list(range(len(data)))\n    R, G, B = 238 / 255, 76 / 255, 44 / 255\n    for coeff, alpha in [(0.8, 0.7), (1, 1)]:\n        d = data**coeff\n        ax.fill_between(x, d, -d, color=[R, G, B, alpha])\n    xlim = [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\") // 2 + 1\n    ax.set_xlim([-1, [n_fft](https://docs.python.org/3/library/functions.html#int \"builtins.int\") // 2 + 1])\n    ax.set_ylim([-1, 1])\n    ax.text(\n        xlim,\n        0.95,\n        f\"Created with TorchAudio\\n{[torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}\",\n        color=\"white\",\n        ha=\"right\",\n        va=\"top\",\n        backgroundcolor=\"black\",\n    )\n    fig.canvas.draw()\n    frame = [torch.frombuffer](https://pytorch.org/docs/stable/generated/torch.frombuffer.html#torch.frombuffer \"torch.frombuffer\")(fig.canvas.tostring_rgb(), dtype=[torch.uint8](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"))\n    return frame.reshape([nrows](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [ncols](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), 3).permute(2, 0, 1)\n\n# sphinx_gallery_defer_figures \n```", "```py\ns = StreamWriter(get_path(\"example.mp4\"))\ns.add_audio_stream(sample_rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), num_channels=[NUM_CHANNELS](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\ns.add_video_stream([frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [height](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[nrows](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [width](https://docs.python.org/3/library/functions.html#int \"builtins.int\")=[ncols](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n\nwith s.open():\n    [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 0\n    # Process by second\n    for [t](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in range(0, [NUM_FRAMES](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")):\n        # Write audio chunk\n        s.write_audio_chunk(0, [WAVEFORM](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[[t](https://docs.python.org/3/library/functions.html#int \"builtins.int\") : [t](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), :])\n\n        # write 1 second of video chunk\n        [frames](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = [_plot(spec) for spec in [specs](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[[i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") : [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + [frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")]]\n        if [frames](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"):\n            s.write_video_chunk(1, [torch.stack](https://pytorch.org/docs/stable/generated/torch.stack.html#torch.stack \"torch.stack\")([frames](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")))\n        [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") += [frame_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")\n\nplt.close(fig) \n```", "```py\n/pytorch/audio/examples/tutorials/streamwriter_basic_tutorial.py:566: MatplotlibDeprecationWarning: The tostring_rgb function was deprecated in Matplotlib 3.8 and will be removed two minor releases later. Use buffer_rgba instead.\n  frame = torch.frombuffer(fig.canvas.tostring_rgb(), dtype=torch.uint8)\n/pytorch/audio/examples/tutorials/streamwriter_basic_tutorial.py:566: UserWarning: The given buffer is not writable, and PyTorch does not support non-writable tensors. This means you can write to the underlying (supposedly non-writable) buffer using the tensor. You may want to copy the buffer to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1704987280714/work/torch/csrc/utils/tensor_new.cpp:1521.)\n  frame = torch.frombuffer(fig.canvas.tostring_rgb(), dtype=torch.uint8) \n```", "```py\nVideo(get_path(\"example.mp4\"), embed=True) \n```"]