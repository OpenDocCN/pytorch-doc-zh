- en: Datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/vision/stable/datasets.html](https://pytorch.org/vision/stable/datasets.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Torchvision provides many built-in datasets in the `torchvision.datasets` module,
    as well as utility classes for building your own datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in datasets[](#built-in-datasets "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All datasets are subclasses of [`torch.utils.data.Dataset`](https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset
    "(in PyTorch v2.2)") i.e, they have `__getitem__` and `__len__` methods implemented.
    Hence, they can all be passed to a [`torch.utils.data.DataLoader`](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader
    "(in PyTorch v2.2)") which can load multiple samples in parallel using `torch.multiprocessing`
    workers. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'All the datasets have almost similar API. They all have two common arguments:
    `transform` and `target_transform` to transform the input and target respectively.
    You can also create your own datasets using the provided [base classes](#base-classes-datasets).'
  prefs: []
  type: TYPE_NORMAL
- en: Image classification[](#image-classification "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Caltech101`](generated/torchvision.datasets.Caltech101.html#torchvision.datasets.Caltech101
    "torchvision.datasets.Caltech101")(root[, target_type, transform, ...]) | [Caltech
    101](https://data.caltech.edu/records/20086) Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Caltech256`](generated/torchvision.datasets.Caltech256.html#torchvision.datasets.Caltech256
    "torchvision.datasets.Caltech256")(root[, transform, ...]) | [Caltech 256](https://data.caltech.edu/records/20087)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CelebA`](generated/torchvision.datasets.CelebA.html#torchvision.datasets.CelebA
    "torchvision.datasets.CelebA")(root[, split, target_type, ...]) | [Large-scale
    CelebFaces Attributes (CelebA) Dataset](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CIFAR10`](generated/torchvision.datasets.CIFAR10.html#torchvision.datasets.CIFAR10
    "torchvision.datasets.CIFAR10")(root[, train, transform, ...]) | [CIFAR10](https://www.cs.toronto.edu/~kriz/cifar.html)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CIFAR100`](generated/torchvision.datasets.CIFAR100.html#torchvision.datasets.CIFAR100
    "torchvision.datasets.CIFAR100")(root[, train, transform, ...]) | [CIFAR100](https://www.cs.toronto.edu/~kriz/cifar.html)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Country211`](generated/torchvision.datasets.Country211.html#torchvision.datasets.Country211
    "torchvision.datasets.Country211")(root[, split, transform, ...]) | [The Country211
    Data Set](https://github.com/openai/CLIP/blob/main/data/country211.md) from OpenAI.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DTD`](generated/torchvision.datasets.DTD.html#torchvision.datasets.DTD
    "torchvision.datasets.DTD")(root[, split, partition, transform, ...]) | [Describable
    Textures Dataset (DTD)](https://www.robots.ox.ac.uk/~vgg/data/dtd/). |'
  prefs: []
  type: TYPE_TB
- en: '| [`EMNIST`](generated/torchvision.datasets.EMNIST.html#torchvision.datasets.EMNIST
    "torchvision.datasets.EMNIST")(root, split, **kwargs) | [EMNIST](https://www.westernsydney.edu.au/bens/home/reproducible_research/emnist)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`EuroSAT`](generated/torchvision.datasets.EuroSAT.html#torchvision.datasets.EuroSAT
    "torchvision.datasets.EuroSAT")(root[, transform, target_transform, ...]) | RGB
    version of the [EuroSAT](https://github.com/phelber/eurosat) Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`FakeData`](generated/torchvision.datasets.FakeData.html#torchvision.datasets.FakeData
    "torchvision.datasets.FakeData")([size, image_size, num_classes, ...]) | A fake
    dataset that returns randomly generated images and returns them as PIL images
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`FashionMNIST`](generated/torchvision.datasets.FashionMNIST.html#torchvision.datasets.FashionMNIST
    "torchvision.datasets.FashionMNIST")(root[, train, transform, ...]) | [Fashion-MNIST](https://github.com/zalandoresearch/fashion-mnist)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`FER2013`](generated/torchvision.datasets.FER2013.html#torchvision.datasets.FER2013
    "torchvision.datasets.FER2013")(root[, split, transform, ...]) | [FER2013](https://www.kaggle.com/c/challenges-in-representation-learning-facial-expression-recognition-challenge)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`FGVCAircraft`](generated/torchvision.datasets.FGVCAircraft.html#torchvision.datasets.FGVCAircraft
    "torchvision.datasets.FGVCAircraft")(root[, split, ...]) | [FGVC Aircraft](https://www.robots.ox.ac.uk/~vgg/data/fgvc-aircraft/)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Flickr8k`](generated/torchvision.datasets.Flickr8k.html#torchvision.datasets.Flickr8k
    "torchvision.datasets.Flickr8k")(root, ann_file[, transform, ...]) | [Flickr8k
    Entities](http://hockenmaier.cs.illinois.edu/8k-pictures.html) Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Flickr30k`](generated/torchvision.datasets.Flickr30k.html#torchvision.datasets.Flickr30k
    "torchvision.datasets.Flickr30k")(root, ann_file[, transform, ...]) | [Flickr30k
    Entities](https://bryanplummer.com/Flickr30kEntities/) Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Flowers102`](generated/torchvision.datasets.Flowers102.html#torchvision.datasets.Flowers102
    "torchvision.datasets.Flowers102")(root[, split, transform, ...]) | [Oxford 102
    Flower](https://www.robots.ox.ac.uk/~vgg/data/flowers/102/) Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Food101`](generated/torchvision.datasets.Food101.html#torchvision.datasets.Food101
    "torchvision.datasets.Food101")(root[, split, transform, ...]) | [The Food-101
    Data Set](https://data.vision.ee.ethz.ch/cvl/datasets_extra/food-101/). |'
  prefs: []
  type: TYPE_TB
- en: '| [`GTSRB`](generated/torchvision.datasets.GTSRB.html#torchvision.datasets.GTSRB
    "torchvision.datasets.GTSRB")(root[, split, transform, ...]) | [German Traffic
    Sign Recognition Benchmark (GTSRB)](https://benchmark.ini.rub.de/) Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`INaturalist`](generated/torchvision.datasets.INaturalist.html#torchvision.datasets.INaturalist
    "torchvision.datasets.INaturalist")(root[, version, target_type, ...]) | [iNaturalist](https://github.com/visipedia/inat_comp)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ImageNet`](generated/torchvision.datasets.ImageNet.html#torchvision.datasets.ImageNet
    "torchvision.datasets.ImageNet")(root[, split]) | [ImageNet](http://image-net.org/)
    2012 Classification Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Imagenette`](generated/torchvision.datasets.Imagenette.html#torchvision.datasets.Imagenette
    "torchvision.datasets.Imagenette")(root[, split, size, download, ...]) | [Imagenette](https://github.com/fastai/imagenette#imagenette-1)
    image classification dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`KMNIST`](generated/torchvision.datasets.KMNIST.html#torchvision.datasets.KMNIST
    "torchvision.datasets.KMNIST")(root[, train, transform, ...]) | [Kuzushiji-MNIST](https://github.com/rois-codh/kmnist)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`LFWPeople`](generated/torchvision.datasets.LFWPeople.html#torchvision.datasets.LFWPeople
    "torchvision.datasets.LFWPeople")(root[, split, image_set, ...]) | [LFW](http://vis-www.cs.umass.edu/lfw/)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`LSUN`](generated/torchvision.datasets.LSUN.html#torchvision.datasets.LSUN
    "torchvision.datasets.LSUN")(root[, classes, transform, ...]) | [LSUN](https://www.yf.io/p/lsun)
    dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MNIST`](generated/torchvision.datasets.MNIST.html#torchvision.datasets.MNIST
    "torchvision.datasets.MNIST")(root[, train, transform, ...]) | [MNIST](http://yann.lecun.com/exdb/mnist/)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Omniglot`](generated/torchvision.datasets.Omniglot.html#torchvision.datasets.Omniglot
    "torchvision.datasets.Omniglot")(root[, background, transform, ...]) | [Omniglot](https://github.com/brendenlake/omniglot)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`OxfordIIITPet`](generated/torchvision.datasets.OxfordIIITPet.html#torchvision.datasets.OxfordIIITPet
    "torchvision.datasets.OxfordIIITPet")(root[, split, target_types, ...]) | [Oxford-IIIT
    Pet Dataset](https://www.robots.ox.ac.uk/~vgg/data/pets/). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Places365`](generated/torchvision.datasets.Places365.html#torchvision.datasets.Places365
    "torchvision.datasets.Places365")(root, split, small, download, ...) | [Places365](http://places2.csail.mit.edu/index.html)
    classification dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PCAM`](generated/torchvision.datasets.PCAM.html#torchvision.datasets.PCAM
    "torchvision.datasets.PCAM")(root[, split, transform, ...]) | [PCAM Dataset](https://github.com/basveeling/pcam).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`QMNIST`](generated/torchvision.datasets.QMNIST.html#torchvision.datasets.QMNIST
    "torchvision.datasets.QMNIST")(root[, what, compat, train]) | [QMNIST](https://github.com/facebookresearch/qmnist)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`RenderedSST2`](generated/torchvision.datasets.RenderedSST2.html#torchvision.datasets.RenderedSST2
    "torchvision.datasets.RenderedSST2")(root[, split, transform, ...]) | [The Rendered
    SST2 Dataset](https://github.com/openai/CLIP/blob/main/data/rendered-sst2.md).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SEMEION`](generated/torchvision.datasets.SEMEION.html#torchvision.datasets.SEMEION
    "torchvision.datasets.SEMEION")(root[, transform, target_transform, ...]) | [SEMEION](http://archive.ics.uci.edu/ml/datasets/semeion+handwritten+digit)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SBU`](generated/torchvision.datasets.SBU.html#torchvision.datasets.SBU
    "torchvision.datasets.SBU")(root[, transform, target_transform, ...]) | [SBU Captioned
    Photo](http://www.cs.virginia.edu/~vicente/sbucaptions/) Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StanfordCars`](generated/torchvision.datasets.StanfordCars.html#torchvision.datasets.StanfordCars
    "torchvision.datasets.StanfordCars")(root[, split, transform, ...]) | [Stanford
    Cars](https://ai.stanford.edu/~jkrause/cars/car_dataset.html) Dataset |'
  prefs: []
  type: TYPE_TB
- en: '| [`STL10`](generated/torchvision.datasets.STL10.html#torchvision.datasets.STL10
    "torchvision.datasets.STL10")(root[, split, folds, transform, ...]) | [STL10](https://cs.stanford.edu/~acoates/stl10/)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SUN397`](generated/torchvision.datasets.SUN397.html#torchvision.datasets.SUN397
    "torchvision.datasets.SUN397")(root[, transform, target_transform, ...]) | [The
    SUN397 Data Set](https://vision.princeton.edu/projects/2010/SUN/). |'
  prefs: []
  type: TYPE_TB
- en: '| [`SVHN`](generated/torchvision.datasets.SVHN.html#torchvision.datasets.SVHN
    "torchvision.datasets.SVHN")(root[, split, transform, ...]) | [SVHN](http://ufldl.stanford.edu/housenumbers/)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`USPS`](generated/torchvision.datasets.USPS.html#torchvision.datasets.USPS
    "torchvision.datasets.USPS")(root[, train, transform, ...]) | [USPS](https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass.html#usps)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: Image detection or segmentation[](#image-detection-or-segmentation "Permalink
    to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`CocoDetection`](generated/torchvision.datasets.CocoDetection.html#torchvision.datasets.CocoDetection
    "torchvision.datasets.CocoDetection")(root, annFile[, transform, ...]) | [MS Coco
    Detection](https://cocodataset.org/#detection-2016) Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CelebA`](generated/torchvision.datasets.CelebA.html#torchvision.datasets.CelebA
    "torchvision.datasets.CelebA")(root[, split, target_type, ...]) | [Large-scale
    CelebFaces Attributes (CelebA) Dataset](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Cityscapes`](generated/torchvision.datasets.Cityscapes.html#torchvision.datasets.Cityscapes
    "torchvision.datasets.Cityscapes")(root[, split, mode, target_type, ...]) | [Cityscapes](http://www.cityscapes-dataset.com/)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Kitti`](generated/torchvision.datasets.Kitti.html#torchvision.datasets.Kitti
    "torchvision.datasets.Kitti")(root[, train, transform, ...]) | [KITTI](http://www.cvlibs.net/datasets/kitti/eval_object.php?obj_benchmark)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`OxfordIIITPet`](generated/torchvision.datasets.OxfordIIITPet.html#torchvision.datasets.OxfordIIITPet
    "torchvision.datasets.OxfordIIITPet")(root[, split, target_types, ...]) | [Oxford-IIIT
    Pet Dataset](https://www.robots.ox.ac.uk/~vgg/data/pets/). |'
  prefs: []
  type: TYPE_TB
- en: '| [`SBDataset`](generated/torchvision.datasets.SBDataset.html#torchvision.datasets.SBDataset
    "torchvision.datasets.SBDataset")(root[, image_set, mode, download, ...]) | [Semantic
    Boundaries Dataset](http://home.bharathh.info/pubs/codes/SBD/download.html) |'
  prefs: []
  type: TYPE_TB
- en: '| [`VOCSegmentation`](generated/torchvision.datasets.VOCSegmentation.html#torchvision.datasets.VOCSegmentation
    "torchvision.datasets.VOCSegmentation")(root[, year, image_set, ...]) | [Pascal
    VOC](http://host.robots.ox.ac.uk/pascal/VOC/) Segmentation Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`VOCDetection`](generated/torchvision.datasets.VOCDetection.html#torchvision.datasets.VOCDetection
    "torchvision.datasets.VOCDetection")(root[, year, image_set, ...]) | [Pascal VOC](http://host.robots.ox.ac.uk/pascal/VOC/)
    Detection Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`WIDERFace`](generated/torchvision.datasets.WIDERFace.html#torchvision.datasets.WIDERFace
    "torchvision.datasets.WIDERFace")(root[, split, transform, ...]) | [WIDERFace](http://shuoyang1213.me/WIDERFACE/)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: Optical Flow[](#optical-flow "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`FlyingChairs`](generated/torchvision.datasets.FlyingChairs.html#torchvision.datasets.FlyingChairs
    "torchvision.datasets.FlyingChairs")(root[, split, transforms]) | [FlyingChairs](https://lmb.informatik.uni-freiburg.de/resources/datasets/FlyingChairs.en.html#flyingchairs)
    Dataset for optical flow. |'
  prefs: []
  type: TYPE_TB
- en: '| [`FlyingThings3D`](generated/torchvision.datasets.FlyingThings3D.html#torchvision.datasets.FlyingThings3D
    "torchvision.datasets.FlyingThings3D")(root[, split, pass_name, ...]) | [FlyingThings3D](https://lmb.informatik.uni-freiburg.de/resources/datasets/SceneFlowDatasets.en.html)
    dataset for optical flow. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HD1K`](generated/torchvision.datasets.HD1K.html#torchvision.datasets.HD1K
    "torchvision.datasets.HD1K")(root[, split, transforms]) | [HD1K](http://hci-benchmark.iwr.uni-heidelberg.de/)
    dataset for optical flow. |'
  prefs: []
  type: TYPE_TB
- en: '| [`KittiFlow`](generated/torchvision.datasets.KittiFlow.html#torchvision.datasets.KittiFlow
    "torchvision.datasets.KittiFlow")(root[, split, transforms]) | [KITTI](http://www.cvlibs.net/datasets/kitti/eval_scene_flow.php?benchmark=flow)
    dataset for optical flow (2015). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Sintel`](generated/torchvision.datasets.Sintel.html#torchvision.datasets.Sintel
    "torchvision.datasets.Sintel")(root[, split, pass_name, transforms]) | [Sintel](http://sintel.is.tue.mpg.de/)
    Dataset for optical flow. |'
  prefs: []
  type: TYPE_TB
- en: Stereo Matching[](#stereo-matching "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`CarlaStereo`](generated/torchvision.datasets.CarlaStereo.html#torchvision.datasets.CarlaStereo
    "torchvision.datasets.CarlaStereo")(root[, transforms]) | Carla simulator data
    linked in the [CREStereo github repo](https://github.com/megvii-research/CREStereo).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Kitti2012Stereo`](generated/torchvision.datasets.Kitti2012Stereo.html#torchvision.datasets.Kitti2012Stereo
    "torchvision.datasets.Kitti2012Stereo")(root[, split, transforms]) | KITTI dataset
    from the [2012 stereo evaluation benchmark](http://www.cvlibs.net/datasets/kitti/eval_stereo_flow.php).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Kitti2015Stereo`](generated/torchvision.datasets.Kitti2015Stereo.html#torchvision.datasets.Kitti2015Stereo
    "torchvision.datasets.Kitti2015Stereo")(root[, split, transforms]) | KITTI dataset
    from the [2015 stereo evaluation benchmark](http://www.cvlibs.net/datasets/kitti/eval_scene_flow.php).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CREStereo`](generated/torchvision.datasets.CREStereo.html#torchvision.datasets.CREStereo
    "torchvision.datasets.CREStereo")(root[, transforms]) | Synthetic dataset used
    in training the [CREStereo](https://arxiv.org/pdf/2203.11483.pdf) architecture.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`FallingThingsStereo`](generated/torchvision.datasets.FallingThingsStereo.html#torchvision.datasets.FallingThingsStereo
    "torchvision.datasets.FallingThingsStereo")(root[, variant, transforms]) | [FallingThings](https://research.nvidia.com/publication/2018-06_falling-things-synthetic-dataset-3d-object-detection-and-pose-estimation)
    dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SceneFlowStereo`](generated/torchvision.datasets.SceneFlowStereo.html#torchvision.datasets.SceneFlowStereo
    "torchvision.datasets.SceneFlowStereo")(root[, variant, pass_name, ...]) | Dataset
    interface for [Scene Flow](https://lmb.informatik.uni-freiburg.de/resources/datasets/SceneFlowDatasets.en.html)
    datasets. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SintelStereo`](generated/torchvision.datasets.SintelStereo.html#torchvision.datasets.SintelStereo
    "torchvision.datasets.SintelStereo")(root[, pass_name, transforms]) | Sintel [Stereo
    Dataset](http://sintel.is.tue.mpg.de/stereo). |'
  prefs: []
  type: TYPE_TB
- en: '| [`InStereo2k`](generated/torchvision.datasets.InStereo2k.html#torchvision.datasets.InStereo2k
    "torchvision.datasets.InStereo2k")(root[, split, transforms]) | [InStereo2k](https://github.com/YuhuaXu/StereoDataset)
    dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ETH3DStereo`](generated/torchvision.datasets.ETH3DStereo.html#torchvision.datasets.ETH3DStereo
    "torchvision.datasets.ETH3DStereo")(root[, split, transforms]) | ETH3D [Low-Res
    Two-View](https://www.eth3d.net/datasets) dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Middlebury2014Stereo`](generated/torchvision.datasets.Middlebury2014Stereo.html#torchvision.datasets.Middlebury2014Stereo
    "torchvision.datasets.Middlebury2014Stereo")(root[, split, ...]) | Publicly available
    scenes from the Middlebury dataset 2014 version <https://vision.middlebury.edu/stereo/data/scenes2014/>.
    |'
  prefs: []
  type: TYPE_TB
- en: Image pairs[](#image-pairs "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`LFWPairs`](generated/torchvision.datasets.LFWPairs.html#torchvision.datasets.LFWPairs
    "torchvision.datasets.LFWPairs")(root[, split, image_set, ...]) | [LFW](http://vis-www.cs.umass.edu/lfw/)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PhotoTour`](generated/torchvision.datasets.PhotoTour.html#torchvision.datasets.PhotoTour
    "torchvision.datasets.PhotoTour")(root, name[, train, transform, ...]) | [Multi-view
    Stereo Correspondence](http://matthewalunbrown.com/patchdata/patchdata.html) Dataset.
    |'
  prefs: []
  type: TYPE_TB
- en: Image captioning[](#image-captioning "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`CocoCaptions`](generated/torchvision.datasets.CocoCaptions.html#torchvision.datasets.CocoCaptions
    "torchvision.datasets.CocoCaptions")(root, annFile[, transform, ...]) | [MS Coco
    Captions](https://cocodataset.org/#captions-2015) Dataset. |'
  prefs: []
  type: TYPE_TB
- en: Video classification[](#video-classification "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`HMDB51`](generated/torchvision.datasets.HMDB51.html#torchvision.datasets.HMDB51
    "torchvision.datasets.HMDB51")(root, annotation_path, frames_per_clip) | [HMDB51](https://serre-lab.clps.brown.edu/resource/hmdb-a-large-human-motion-database/)
    dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Kinetics`](generated/torchvision.datasets.Kinetics.html#torchvision.datasets.Kinetics
    "torchvision.datasets.Kinetics")(root, frames_per_clip[, ...]) | [Generic Kinetics](https://www.deepmind.com/open-source/kinetics)
    dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UCF101`](generated/torchvision.datasets.UCF101.html#torchvision.datasets.UCF101
    "torchvision.datasets.UCF101")(root, annotation_path, frames_per_clip) | [UCF101](https://www.crcv.ucf.edu/data/UCF101.php)
    dataset. |'
  prefs: []
  type: TYPE_TB
- en: Video prediction[](#video-prediction "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MovingMNIST`](generated/torchvision.datasets.MovingMNIST.html#torchvision.datasets.MovingMNIST
    "torchvision.datasets.MovingMNIST")(root[, split, split_ratio, ...]) | [MovingMNIST](http://www.cs.toronto.edu/~nitish/unsupervised_video/)
    Dataset. |'
  prefs: []
  type: TYPE_TB
- en: '## Base classes for custom datasets[](#base-classes-for-custom-datasets "Permalink
    to this heading")'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DatasetFolder`](generated/torchvision.datasets.DatasetFolder.html#torchvision.datasets.DatasetFolder
    "torchvision.datasets.DatasetFolder")(root, loader[, extensions, ...]) | A generic
    data loader. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ImageFolder`](generated/torchvision.datasets.ImageFolder.html#torchvision.datasets.ImageFolder
    "torchvision.datasets.ImageFolder")(root, transform, ...) | A generic data loader
    where the images are arranged in this way by default: . |'
  prefs: []
  type: TYPE_TB
- en: '| [`VisionDataset`](generated/torchvision.datasets.VisionDataset.html#torchvision.datasets.VisionDataset
    "torchvision.datasets.VisionDataset")([root, transforms, transform, ...]) | Base
    Class For making datasets which are compatible with torchvision. |'
  prefs: []
  type: TYPE_TB
- en: Transforms v2[](#transforms-v2 "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`wrap_dataset_for_transforms_v2`](generated/torchvision.datasets.wrap_dataset_for_transforms_v2.html#torchvision.datasets.wrap_dataset_for_transforms_v2
    "torchvision.datasets.wrap_dataset_for_transforms_v2")(dataset[, ...]) | Wrap
    a `torchvision.dataset` for usage with `torchvision.transforms.v2`. |'
  prefs: []
  type: TYPE_TB
