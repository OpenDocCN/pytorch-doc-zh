["```py\n# License: BSD\n# Author: Ghassen Hamrouni\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport torchvision\nfrom torchvision import datasets, transforms\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.ion()   # interactive mode \n```", "```py\n<contextlib.ExitStack object at 0x7fc0914a7160> \n```", "```py\nfrom six.moves import urllib\nopener = urllib.request.build_opener()\nopener.addheaders = [('User-agent', 'Mozilla/5.0')]\nurllib.request.install_opener(opener)\n\n[device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\") = [torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")(\"cuda\" if [torch.cuda.is_available](https://pytorch.org/docs/stable/generated/torch.cuda.is_available.html#torch.cuda.is_available \"torch.cuda.is_available\")() else \"cpu\")\n\n# Training dataset\n[train_loader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\") = [torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")(\n    [datasets.MNIST](https://pytorch.org/vision/stable/generated/torchvision.datasets.MNIST.html#torchvision.datasets.MNIST \"torchvision.datasets.MNIST\")(root='.', train=True, download=True,\n                   transform=[transforms.Compose](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")([\n                       [transforms.ToTensor](https://pytorch.org/vision/stable/generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor \"torchvision.transforms.ToTensor\")(),\n                       [transforms.Normalize](https://pytorch.org/vision/stable/generated/torchvision.transforms.Normalize.html#torchvision.transforms.Normalize \"torchvision.transforms.Normalize\")((0.1307,), (0.3081,))\n                   ])), batch_size=64, shuffle=True, num_workers=4)\n# Test dataset\n[test_loader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\") = [torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")(\n    [datasets.MNIST](https://pytorch.org/vision/stable/generated/torchvision.datasets.MNIST.html#torchvision.datasets.MNIST \"torchvision.datasets.MNIST\")(root='.', train=False, transform=[transforms.Compose](https://pytorch.org/vision/stable/generated/torchvision.transforms.Compose.html#torchvision.transforms.Compose \"torchvision.transforms.Compose\")([\n        [transforms.ToTensor](https://pytorch.org/vision/stable/generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor \"torchvision.transforms.ToTensor\")(),\n        [transforms.Normalize](https://pytorch.org/vision/stable/generated/torchvision.transforms.Normalize.html#torchvision.transforms.Normalize \"torchvision.transforms.Normalize\")((0.1307,), (0.3081,))\n    ])), batch_size=64, shuffle=True, num_workers=4) \n```", "```py\nDownloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\nDownloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/raw/train-images-idx3-ubyte.gz\n\n  0%|          | 0/9912422 [00:00<?, ?it/s]\n100%|##########| 9912422/9912422 [00:00<00:00, 367023704.91it/s]\nExtracting ./MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\nDownloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/raw/train-labels-idx1-ubyte.gz\n\n  0%|          | 0/28881 [00:00<?, ?it/s]\n100%|##########| 28881/28881 [00:00<00:00, 47653695.45it/s]\nExtracting ./MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\nDownloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/raw/t10k-images-idx3-ubyte.gz\n\n  0%|          | 0/1648877 [00:00<?, ?it/s]\n100%|##########| 1648877/1648877 [00:00<00:00, 343101225.21it/s]\nExtracting ./MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\nDownloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/raw/t10k-labels-idx1-ubyte.gz\n\n  0%|          | 0/4542 [00:00<?, ?it/s]\n100%|##########| 4542/4542 [00:00<00:00, 48107395.88it/s]\nExtracting ./MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/raw \n```", "```py\nclass Net([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super([Net](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\"), self).__init__()\n        self.conv1 = [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(1, 10, kernel_size=5)\n        self.conv2 = [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(10, 20, kernel_size=5)\n        self.conv2_drop = [nn.Dropout2d](https://pytorch.org/docs/stable/generated/torch.nn.Dropout2d.html#torch.nn.Dropout2d \"torch.nn.Dropout2d\")()\n        self.fc1 = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(320, 50)\n        self.fc2 = [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(50, 10)\n\n        # Spatial transformer localization-network\n        self.localization = [nn.Sequential](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")(\n            [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(1, 8, kernel_size=7),\n            [nn.MaxPool2d](https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html#torch.nn.MaxPool2d \"torch.nn.MaxPool2d\")(2, stride=2),\n            [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(True),\n            [nn.Conv2d](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d \"torch.nn.Conv2d\")(8, 10, kernel_size=5),\n            [nn.MaxPool2d](https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html#torch.nn.MaxPool2d \"torch.nn.MaxPool2d\")(2, stride=2),\n            [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(True)\n        )\n\n        # Regressor for the 3 * 2 affine matrix\n        self.fc_loc = [nn.Sequential](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")(\n            [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(10 * 3 * 3, 32),\n            [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(True),\n            [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(32, 3 * 2)\n        )\n\n        # Initialize the weights/bias with identity transformation\n        self.fc_loc[2].weight.data.zero_()\n        self.fc_loc[2].bias.data.copy_([torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([1, 0, 0, 0, 1, 0], dtype=[torch.float](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\")))\n\n    # Spatial transformer network forward function\n    def stn(self, x):\n        xs = self.localization(x)\n        xs = xs.view(-1, 10 * 3 * 3)\n        theta = self.fc_loc(xs)\n        theta = theta.view(-1, 2, 3)\n\n        grid = [F.affine_grid](https://pytorch.org/docs/stable/generated/torch.nn.functional.affine_grid.html#torch.nn.functional.affine_grid \"torch.nn.functional.affine_grid\")(theta, x.size())\n        x = [F.grid_sample](https://pytorch.org/docs/stable/generated/torch.nn.functional.grid_sample.html#torch.nn.functional.grid_sample \"torch.nn.functional.grid_sample\")(x, grid)\n\n        return x\n\n    def forward(self, x):\n        # transform the input\n        x = self.stn(x)\n\n        # Perform the usual forward pass\n        x = [F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")([F.max_pool2d](https://pytorch.org/docs/stable/generated/torch.nn.functional.max_pool2d.html#torch.nn.functional.max_pool2d \"torch.nn.functional.max_pool2d\")(self.conv1(x), 2))\n        x = [F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")([F.max_pool2d](https://pytorch.org/docs/stable/generated/torch.nn.functional.max_pool2d.html#torch.nn.functional.max_pool2d \"torch.nn.functional.max_pool2d\")(self.conv2_drop(self.conv2(x)), 2))\n        x = x.view(-1, 320)\n        x = [F.relu](https://pytorch.org/docs/stable/generated/torch.nn.functional.relu.html#torch.nn.functional.relu \"torch.nn.functional.relu\")(self.fc1(x))\n        x = [F.dropout](https://pytorch.org/docs/stable/generated/torch.nn.functional.dropout.html#torch.nn.functional.dropout \"torch.nn.functional.dropout\")(x, training=self.training)\n        x = self.fc2(x)\n        return [F.log_softmax](https://pytorch.org/docs/stable/generated/torch.nn.functional.log_softmax.html#torch.nn.functional.log_softmax \"torch.nn.functional.log_softmax\")(x, dim=1)\n\nmodel = [Net](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")().to([device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")) \n```", "```py\n[optimizer](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = [optim.SGD](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")([model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(), lr=0.01)\n\ndef train(epoch):\n    [model.train](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.train \"torch.nn.Module.train\")()\n    for batch_idx, (data, target) in enumerate([train_loader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")):\n        data, target = data.to([device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")), target.to([device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\"))\n\n        [optimizer.zero_grad](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.zero_grad \"torch.optim.SGD.zero_grad\")()\n        output = model(data)\n        loss = [F.nll_loss](https://pytorch.org/docs/stable/generated/torch.nn.functional.nll_loss.html#torch.nn.functional.nll_loss \"torch.nn.functional.nll_loss\")(output, target)\n        loss.backward()\n        [optimizer.step](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.step \"torch.optim.SGD.step\")()\n        if batch_idx % 500 == 0:\n            print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'.format(\n                epoch, batch_idx * len(data), len([train_loader.dataset](https://pytorch.org/vision/stable/generated/torchvision.datasets.MNIST.html#torchvision.datasets.MNIST \"torchvision.datasets.MNIST\")),\n                100. * batch_idx / len([train_loader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")), loss.item()))\n#\n# A simple test procedure to measure the STN performances on MNIST.\n#\n\ndef test():\n    with [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n        [model.eval](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.eval \"torch.nn.Module.eval\")()\n        test_loss = 0\n        correct = 0\n        for data, target in [test_loader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\"):\n            data, target = data.to([device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")), target.to([device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\"))\n            output = model(data)\n\n            # sum up batch loss\n            test_loss += [F.nll_loss](https://pytorch.org/docs/stable/generated/torch.nn.functional.nll_loss.html#torch.nn.functional.nll_loss \"torch.nn.functional.nll_loss\")(output, target, size_average=False).item()\n            # get the index of the max log-probability\n            pred = output.max(1, keepdim=True)[1]\n            correct += pred.eq(target.view_as(pred)).sum().item()\n\n        test_loss /= len([test_loader.dataset](https://pytorch.org/vision/stable/generated/torchvision.datasets.MNIST.html#torchvision.datasets.MNIST \"torchvision.datasets.MNIST\"))\n        print('\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'\n              .format(test_loss, correct, len([test_loader.dataset](https://pytorch.org/vision/stable/generated/torchvision.datasets.MNIST.html#torchvision.datasets.MNIST \"torchvision.datasets.MNIST\")),\n                      100. * correct / len([test_loader.dataset](https://pytorch.org/vision/stable/generated/torchvision.datasets.MNIST.html#torchvision.datasets.MNIST \"torchvision.datasets.MNIST\")))) \n```", "```py\ndef convert_image_np(inp):\n  \"\"\"Convert a Tensor to numpy image.\"\"\"\n    inp = inp.numpy().transpose((1, 2, 0))\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    inp = std * inp + mean\n    inp = np.clip(inp, 0, 1)\n    return inp\n\n# We want to visualize the output of the spatial transformers layer\n# after the training, we visualize a batch of input images and\n# the corresponding transformed batch using STN.\n\ndef visualize_stn():\n    with [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n        # Get a batch of training data\n        data = next(iter([test_loader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")))[0].to([device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\"))\n\n        input_tensor = data.cpu()\n        transformed_input_tensor = model.stn(data).cpu()\n\n        in_grid = convert_image_np(\n            [torchvision.utils.make_grid](https://pytorch.org/vision/stable/generated/torchvision.utils.make_grid.html#torchvision.utils.make_grid \"torchvision.utils.make_grid\")(input_tensor))\n\n        out_grid = convert_image_np(\n            [torchvision.utils.make_grid](https://pytorch.org/vision/stable/generated/torchvision.utils.make_grid.html#torchvision.utils.make_grid \"torchvision.utils.make_grid\")(transformed_input_tensor))\n\n        # Plot the results side-by-side\n        f, axarr = plt.subplots(1, 2)\n        axarr[0].imshow(in_grid)\n        axarr[0].set_title('Dataset Images')\n\n        axarr[1].imshow(out_grid)\n        axarr[1].set_title('Transformed Images')\n\nfor epoch in range(1, 20 + 1):\n    train(epoch)\n    test()\n\n# Visualize the STN transformation on some input batch\nvisualize_stn()\n\nplt.ioff()\nplt.show() \n```", "```py\n/opt/conda/envs/py_3.10/lib/python3.10/site-packages/torch/nn/functional.py:4377: UserWarning:\n\nDefault grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0\\. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.\n\n/opt/conda/envs/py_3.10/lib/python3.10/site-packages/torch/nn/functional.py:4316: UserWarning:\n\nDefault grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0\\. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.\n\nTrain Epoch: 1 [0/60000 (0%)]   Loss: 2.315648\nTrain Epoch: 1 [32000/60000 (53%)]      Loss: 1.051217\n/opt/conda/envs/py_3.10/lib/python3.10/site-packages/torch/nn/_reduction.py:42: UserWarning:\n\nsize_average and reduce args will be deprecated, please use reduction='sum' instead.\n\nTest set: Average loss: 0.2563, Accuracy: 9282/10000 (93%)\n\nTrain Epoch: 2 [0/60000 (0%)]   Loss: 0.544514\nTrain Epoch: 2 [32000/60000 (53%)]      Loss: 0.312879\n\nTest set: Average loss: 0.1506, Accuracy: 9569/10000 (96%)\n\nTrain Epoch: 3 [0/60000 (0%)]   Loss: 0.408838\nTrain Epoch: 3 [32000/60000 (53%)]      Loss: 0.221301\n\nTest set: Average loss: 0.1207, Accuracy: 9634/10000 (96%)\n\nTrain Epoch: 4 [0/60000 (0%)]   Loss: 0.400088\nTrain Epoch: 4 [32000/60000 (53%)]      Loss: 0.166533\n\nTest set: Average loss: 0.1176, Accuracy: 9634/10000 (96%)\n\nTrain Epoch: 5 [0/60000 (0%)]   Loss: 0.274838\nTrain Epoch: 5 [32000/60000 (53%)]      Loss: 0.223936\n\nTest set: Average loss: 0.2812, Accuracy: 9136/10000 (91%)\n\nTrain Epoch: 6 [0/60000 (0%)]   Loss: 0.411823\nTrain Epoch: 6 [32000/60000 (53%)]      Loss: 0.114000\n\nTest set: Average loss: 0.0697, Accuracy: 9790/10000 (98%)\n\nTrain Epoch: 7 [0/60000 (0%)]   Loss: 0.066122\nTrain Epoch: 7 [32000/60000 (53%)]      Loss: 0.208773\n\nTest set: Average loss: 0.0660, Accuracy: 9799/10000 (98%)\n\nTrain Epoch: 8 [0/60000 (0%)]   Loss: 0.201612\nTrain Epoch: 8 [32000/60000 (53%)]      Loss: 0.081877\n\nTest set: Average loss: 0.0672, Accuracy: 9798/10000 (98%)\n\nTrain Epoch: 9 [0/60000 (0%)]   Loss: 0.077046\nTrain Epoch: 9 [32000/60000 (53%)]      Loss: 0.147858\n\nTest set: Average loss: 0.0645, Accuracy: 9811/10000 (98%)\n\nTrain Epoch: 10 [0/60000 (0%)]  Loss: 0.086268\nTrain Epoch: 10 [32000/60000 (53%)]     Loss: 0.185868\n\nTest set: Average loss: 0.0678, Accuracy: 9794/10000 (98%)\n\nTrain Epoch: 11 [0/60000 (0%)]  Loss: 0.138696\nTrain Epoch: 11 [32000/60000 (53%)]     Loss: 0.119381\n\nTest set: Average loss: 0.0663, Accuracy: 9795/10000 (98%)\n\nTrain Epoch: 12 [0/60000 (0%)]  Loss: 0.145220\nTrain Epoch: 12 [32000/60000 (53%)]     Loss: 0.204023\n\nTest set: Average loss: 0.0592, Accuracy: 9808/10000 (98%)\n\nTrain Epoch: 13 [0/60000 (0%)]  Loss: 0.118743\nTrain Epoch: 13 [32000/60000 (53%)]     Loss: 0.100721\n\nTest set: Average loss: 0.0643, Accuracy: 9801/10000 (98%)\n\nTrain Epoch: 14 [0/60000 (0%)]  Loss: 0.066341\nTrain Epoch: 14 [32000/60000 (53%)]     Loss: 0.107528\n\nTest set: Average loss: 0.0551, Accuracy: 9838/10000 (98%)\n\nTrain Epoch: 15 [0/60000 (0%)]  Loss: 0.022679\nTrain Epoch: 15 [32000/60000 (53%)]     Loss: 0.055676\n\nTest set: Average loss: 0.0474, Accuracy: 9862/10000 (99%)\n\nTrain Epoch: 16 [0/60000 (0%)]  Loss: 0.102644\nTrain Epoch: 16 [32000/60000 (53%)]     Loss: 0.165537\n\nTest set: Average loss: 0.0574, Accuracy: 9839/10000 (98%)\n\nTrain Epoch: 17 [0/60000 (0%)]  Loss: 0.280918\nTrain Epoch: 17 [32000/60000 (53%)]     Loss: 0.206559\n\nTest set: Average loss: 0.0533, Accuracy: 9846/10000 (98%)\n\nTrain Epoch: 18 [0/60000 (0%)]  Loss: 0.052316\nTrain Epoch: 18 [32000/60000 (53%)]     Loss: 0.082710\n\nTest set: Average loss: 0.0484, Accuracy: 9865/10000 (99%)\n\nTrain Epoch: 19 [0/60000 (0%)]  Loss: 0.083889\nTrain Epoch: 19 [32000/60000 (53%)]     Loss: 0.121432\n\nTest set: Average loss: 0.0522, Accuracy: 9839/10000 (98%)\n\nTrain Epoch: 20 [0/60000 (0%)]  Loss: 0.067540\nTrain Epoch: 20 [32000/60000 (53%)]     Loss: 0.024880\n\nTest set: Average loss: 0.0868, Accuracy: 9773/10000 (98%) \n```"]