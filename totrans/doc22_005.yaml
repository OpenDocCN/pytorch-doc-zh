- en: PyTorch Governance | Mechanics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/docs/stable/community/governance.html](https://pytorch.org/docs/stable/community/governance.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyTorch adopts a technical governance structure that is hierarchical.
  prefs: []
  type: TYPE_NORMAL
- en: A community of **contributors** who file issues, make pull requests, and contribute
    to the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A small set of **module maintainers** drive each module of the PyTorch project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are overseen by **core maintainers**, who drive the overall project direction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The core maintainers have a **lead core maintainer** who is the catch-all decision
    maker.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All maintainers are expected to have a strong bias towards PyTorch’s design
    philosophy.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond the maintainers, the community is encouraged to contribute, file issues,
    make proposals, review pull requests and be present in the community. Given contributions
    and willingness to invest, anyone can be accepted as a maintainer and provided
    write access or ownership of parts of the codebase.
  prefs: []
  type: TYPE_NORMAL
- en: Technical governance is strictly separated from business governance. Separating
    technical from business governance ensures that there is no way for any person
    or company to “buy their way into” the technical guidance of the project. Additionally,
    membership in the technical governance process is for **individuals**, not companies.
    That is, there are no seats reserved for specific companies, and membership is
    associated with the person rather than the company employing that person.
  prefs: []
  type: TYPE_NORMAL
- en: Module Maintainers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modules are defined as GitHub repositories within the PyTorch org, or as directories
    within the core repository [pytorch/pytorch](https://github.com/pytorch/pytorch).
    Each module will have its own maintainer group. Maintainer groups are responsible
    for reviewing and approving commits, improving design, and changing the scope
    of the module. Each maintainer group may adopt its own rules and procedures for
    making decisions (majority vote being default). Module maintainers have the right
    to dispute decisions made by other module maintainers – especially if it affects
    them. When disputes are made, the module maintainer group should provide a reasonable
    and public explanation of the dispute, the relevant arguments, and the resolution.
    In the exceptional cases where module maintainers cannot come to a conclusion
    themselves, they will escalate to core maintainers for review. The escalations
    are resolved by the core maintainers in accordance with their rules and procedures.
  prefs: []
  type: TYPE_NORMAL
- en: Each maintainer group should publish publicly available communication for their
    module (a vision, rough roadmap, design docs, any disputes and dispute resolutions)
    so that contributors and other interested parties understand the future direction
    of the project and can participate in discussion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Responsibilities of the maintainer includes:'
  prefs: []
  type: TYPE_NORMAL
- en: Triaging high priority issues of the module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triaging and reviewing and landing high priority pull requests of the module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting public documentation related to the module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running public developer meetings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core Maintainers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The core maintainers are expected to have a deep understanding of the PyTorch
    code base and design philosophies. Their responsibilities include:'
  prefs: []
  type: TYPE_NORMAL
- en: Articulating a cohesive long-term vision for the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Negotiating and resolving contentious issues in ways acceptable to all parties
    involved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving broad requests for changes from stakeholders of PyTorch and evaluating
    / accepting them (small module-level requests are handled by module maintainers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The core maintainers as a group have the power to veto any decision made at
    a Module maintainer level. The core maintainers have power to resolve disputes
    as they see fit. The core maintainers should publicly articulate their decision-making,
    and give a clear reasoning for their decisions, vetoes and dispute resolution.
  prefs: []
  type: TYPE_NORMAL
- en: The core maintainers are admins of the PyTorch GitHub Org and are listed in
    [Maintainers](https://pytorch.org/docs/stable/community/persons_of_interest.html).
  prefs: []
  type: TYPE_NORMAL
- en: Lead Core Maintainer (BDFL)[](#lead-core-maintainer-bdfl "Permalink to this
    heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There may be decisions in which the core maintainers cannot come to a consensus.
    To make such difficult decisions, the core maintainers have an assigned and publicly
    declared Lead Core Maintainer amongst them, also commonly known in open-source
    governance models as a BDFL.
  prefs: []
  type: TYPE_NORMAL
- en: The Lead Core Maintainer should publicly articulate their decision-making, and
    give a clear reasoning for their decisions. The Lead Core Maintainer is also responsible
    for confirming or removing core maintainers.
  prefs: []
  type: TYPE_NORMAL
- en: Nominating, Confirming and Removing Maintainers[](#nominating-confirming-and-removing-maintainers
    "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Principles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Membership in module maintainer groups is given to **individuals** on **merit
    basis** after they demonstrated strong expertise of the component through contributions,
    reviews and discussions and are aligned with how the component fits in overall
    PyTorch direction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For membership in the maintainer group the individual has to demonstrate strong
    and continued alignment with the overall PyTorch principles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No term limits for module maintainers or core maintainers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light criteria of moving module maintenance to ‘emeritus’ status if they don’t
    actively participate over long periods of time. Each module maintainer group may
    define the inactive period that’s appropriate for that module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The membership is for an individual, not a company.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Process for Nomination[](#the-process-for-nomination "Permalink to this
    heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each module has its own process. Please contact module maintainers for more
    information. However, if there is no process identified, you can file a request
    to the core maintainers by submitting [this form](https://share.hsforms.com/1fh3SpHFMR2ihEBQ2orgN8A4tvhy).
    Core maintainers are meeting every three months.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are submitting a request to the core maintainers, the information in
    your request must include the following items:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nominees depth and breadth of code, review and design contributions on the
    module
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Testimonials (positive and negative) of the nominee’s interactions with the
    maintainers, users, and the community
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: General testimonials of support from the maintainers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The core maintainers then evaluate all information and make a final decision
    to Confirm or Decline the nomination. The decision of the core maintainers has
    to be articulated well and would be public.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Process for Removal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to the process for nomination, anyone in the community can nominate
    a person to be removed from a Module maintainer position or a Core maintainer
    position.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A person can also self-nominate to be removed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The core maintainers (excluding persons with conflict of interest) will request
    or put together more information around the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Their activity (or lack of) on the project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Their changing thinking of the space, which results in conflict with the overall
    direction of the project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other information that makes them unfit to be a maintainer, such as Code of
    Conduct issues, their activity outside the scope of the project that conflicts
    with the project’s values
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conflicts of interest**: filial or romantic relationships'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The core maintainers then evaluate all information and make a final decision
    to Confirm or Decline the removal. The decision of the core maintainers has to
    be articulated well and would be public.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nominating Core Maintainers[](#nominating-core-maintainers "Permalink to this
    heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any core or module maintainer can nominate someone to become a core maintainer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lead maintainer (BDFL) is responsible for evaluating the nomination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The lead maintainer requests or puts together more information around the strength
    of the candidate to be a core maintainer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letters of support from other core and module maintainers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: General letters of support from stakeholders within the PyTorch community
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Any new relevant information that is befitting for the candidacy
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The lead maintainer evaluates all information and makes a final decision to
    Confirm or Decline the nomination, with a clear public articulation of their reasoning
    behind the decision.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing the Lead Core Maintainer and Nominating a New Lead Core Maintainer[](#removing-the-lead-core-maintainer-and-nominating-a-new-lead-core-maintainer
    "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A super-majority of core maintainers (75%) can choose to remove the Lead Core
    Maintainer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After a removal of the Lead Core Maintainer or in unforeseen circumstances (such
    as permanent unavailability of the Lead Core Maintainer), the core maintainers
    follow a Ranked-Choice voting method to elect a new Lead Core Maintainer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add, Remove, and Re-Scope Modules and Projects[](#add-remove-and-re-scope-modules-and-projects
    "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The core maintainers together are responsible for taking decisions on adding,
    removing and re-scoping new modules in the PyTorch org, either as new repositories
    in the PyTorch GitHub org, or as folders in the [pytorch/pytorch](https://github.com/pytorch/pytorch)
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'They invite proposals from members in the community (including themselves)
    for such changes. The proposals are open-ended, but should have some basic ground-work
    to make a convincing case to make change. The following is an example approach
    to this process:'
  prefs: []
  type: TYPE_NORMAL
- en: Interview researchers / stakeholders, talk to community, gather issues;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read papers, attend conferences, build example pipelines based on experience;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a state of the world - make sure this change is necessary, for example
    adding a new project or module is worth the maintenance cost; or removing a project
    or module will not remove too much value from PyTorch;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a proposal; the proposal covers the maintainership, development and community
    plan once the proposal is approved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The core maintainers take final decisions on the proposal, articulating the
    reasoning behind the decision publicly.
  prefs: []
  type: TYPE_NORMAL
- en: Decision Making
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Uncontroversial Changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Primary work happens through issues and pull requests on GitHub. Maintainers
    should avoid pushing their changes directly to the PyTorch repository, instead
    relying on pull requests. Approving a pull request by a core or module maintainer
    allows it to be merged without further process. Core and module maintainers, as
    listed on the [Maintainers](https://pytorch.org/docs/stable/community/persons_of_interest.html)
    page and within [CODEOWNERS](https://github.com/pytorch/pytorch/blob/master/CODEOWNERS)
    ultimately approve these changes.
  prefs: []
  type: TYPE_NORMAL
- en: Notifying relevant experts about an issue or a pull request is important. Reviews
    from experts in the given interest area are strongly preferred, especially on
    pull request approvals. Failure to do so might end up with the change being reverted
    by the relevant expert.
  prefs: []
  type: TYPE_NORMAL
- en: Controversial Decision Process[](#controversial-decision-process "Permalink
    to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Substantial changes in a given interest area require a GitHub issue to be opened
    for discussion. This includes:'
  prefs: []
  type: TYPE_NORMAL
- en: Any semantic or syntactic change to the PyTorch framework or library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backwards-incompatible changes to the Python or C++ API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additions to the core framework or library, including substantial new functionality
    within an existing library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of core features or platform support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core and module maintainers ultimately approve these changes.
  prefs: []
  type: TYPE_NORMAL
- en: General Project Policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PyTorch has been established as PyTorch a Series of LF Projects, LLC. Policies
    applicable to PyTorch and participants in PyTorch, including guidelines on the
    usage of trademarks, are located at [https://www.lfprojects.org/policies/](https://www.lfprojects.org/policies/).
  prefs: []
  type: TYPE_NORMAL
- en: 'PyTorch participants acknowledge that the copyright in all new contributions
    will be retained by the copyright holder as independent works of authorship and
    that no contributor or copyright holder will be required to assign copyrights
    to the project. Except as described below, all code contributions to the project
    must be made using the 3-Clause-BSD License available here: [https://opensource.org/licenses/BSD-3-Clause](https://opensource.org/licenses/BSD-3-Clause)
    (the “Project License”). All outbound code will be made available under the Project
    License. The Maintainers may approve the use of an alternative open license or
    licenses for inbound or outbound contributions on an exception basis.'
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Q: What if I would like to own (or partly own) a part of the project such
    as a feature area or domain library, for example** [Linear Algebra](https://github.com/pytorch/pytorch/tree/master/torch/linalg)
    **or** [Torch Vision](https://github.com/pytorch/vision) **?** This is absolutely
    possible. The first step is to start contributing to the existing project area
    and supporting its health and success. In addition to this, you can make a proposal
    through a GitHub issue for new functionality or changes to improve the project
    area.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q: What if I am a company looking to use PyTorch internally for development,
    can I be granted or purchase a board seat to drive the project direction?** No,
    the PyTorch project is strictly driven by the a maintainer project philosophy
    and clearly separates technical governance from business governance. However,
    if you want to be involved in sponsorship and support, you can become involved
    in the PyTorch Foundation (PTF) and sponsorship through this. You can also have
    individual engineers look to become maintainers, but this is not guaranteed and
    is merit-based.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q: Does the PyTorch project support grants or ways to support independent
    developers using or contributing to the project?** No, not at this point. We are
    however looking at ways to better support the community of independent developers
    around PyTorch. If you have suggestions or inputs, please reach out on the PyTorch
    forums to discuss.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q: How do I contribute code to the project?** If the change is relatively
    minor, a pull request on GitHub can be opened up immediately for review and merge
    by the project committers. For larger changes, please open an issue to make a
    proposal to discuss prior. Please also see the [PyTorch Contributor Wiki](https://github.com/pytorch/pytorch/wiki/The-Ultimate-Guide-to-PyTorch-Contributions)
    for contribution for a walkthrough.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q: Can I become a committer on the project?** Unfortunately, the current
    commit process to PyTorch involves an interaction with Facebook infrastructure
    that can only be triggered by Facebook employees. We are however looking at ways
    to expand the committer base to individuals outside of Facebook and will provide
    an update when the tooling exists to allow this.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q: What if I would like to deliver a PyTorch tutorial at a conference or
    otherwise? Do I need to be ‘officially’ a committer to do this?** No, we encourage
    community members to showcase their work wherever and whenever they can. Please
    reach out to [marketing@pytorch.org](mailto:marketing%40pytorch.org) for marketing
    support.'
  prefs: []
  type: TYPE_NORMAL
