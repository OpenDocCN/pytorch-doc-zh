- en: Optimizing Model Parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/tutorials/beginner/basics/optimization_tutorial.html](https://pytorch.org/tutorials/beginner/basics/optimization_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-beginner-basics-optimization-tutorial-py) to
    download the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '[Learn the Basics](intro.html) || [Quickstart](quickstart_tutorial.html) ||
    [Tensors](tensorqs_tutorial.html) || [Datasets & DataLoaders](data_tutorial.html)
    || [Transforms](transforms_tutorial.html) || [Build Model](buildmodel_tutorial.html)
    || [Autograd](autogradqs_tutorial.html) || **Optimization** || [Save & Load Model](saveloadrun_tutorial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a model and data it’s time to train, validate and test our
    model by optimizing its parameters on our data. Training a model is an iterative
    process; in each iteration the model makes a guess about the output, calculates
    the error in its guess (*loss*), collects the derivatives of the error with respect
    to its parameters (as we saw in the [previous section](autograd_tutorial.html)),
    and **optimizes** these parameters using gradient descent. For a more detailed
    walkthrough of this process, check out this video on [backpropagation from 3Blue1Brown](https://www.youtube.com/watch?v=tIeHLnjs5U8).
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisite Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We load the code from the previous sections on [Datasets & DataLoaders](data_tutorial.html)
    and [Build Model](buildmodel_tutorial.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Hyperparameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hyperparameters are adjustable parameters that let you control the model optimization
    process. Different hyperparameter values can impact model training and convergence
    rates ([read more](https://pytorch.org/tutorials/beginner/hyperparameter_tuning_tutorial.html)
    about hyperparameter tuning)
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the following hyperparameters for training:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Number of Epochs** - the number times to iterate over the dataset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Batch Size** - the number of data samples propagated through the network
    before the parameters are updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learning Rate** - how much to update models parameters at each batch/epoch.
    Smaller values yield slow learning speed, while large values may result in unpredictable
    behavior during training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Optimization Loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we set our hyperparameters, we can then train and optimize our model with
    an optimization loop. Each iteration of the optimization loop is called an **epoch**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each epoch consists of two main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Train Loop** - iterate over the training dataset and try to converge
    to optimal parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Validation/Test Loop** - iterate over the test dataset to check if model
    performance is improving.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s briefly familiarize ourselves with some of the concepts used in the training
    loop. Jump ahead to see the [Full Implementation](#full-impl-label) of the optimization
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: Loss Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When presented with some training data, our untrained network is likely not
    to give the correct answer. **Loss function** measures the degree of dissimilarity
    of obtained result to the target value, and it is the loss function that we want
    to minimize during training. To calculate the loss we make a prediction using
    the inputs of our given data sample and compare it against the true data label
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Common loss functions include [nn.MSELoss](https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html#torch.nn.MSELoss)
    (Mean Square Error) for regression tasks, and [nn.NLLLoss](https://pytorch.org/docs/stable/generated/torch.nn.NLLLoss.html#torch.nn.NLLLoss)
    (Negative Log Likelihood) for classification. [nn.CrossEntropyLoss](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss)
    combines `nn.LogSoftmax` and `nn.NLLLoss`.
  prefs: []
  type: TYPE_NORMAL
- en: We pass our model’s output logits to `nn.CrossEntropyLoss`, which will normalize
    the logits and compute the prediction error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Optimizer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Optimization is the process of adjusting model parameters to reduce model error
    in each training step. **Optimization algorithms** define how this process is
    performed (in this example we use Stochastic Gradient Descent). All optimization
    logic is encapsulated in the `optimizer` object. Here, we use the SGD optimizer;
    additionally, there are many [different optimizers](https://pytorch.org/docs/stable/optim.html)
    available in PyTorch such as ADAM and RMSProp, that work better for different
    kinds of models and data.
  prefs: []
  type: TYPE_NORMAL
- en: We initialize the optimizer by registering the model’s parameters that need
    to be trained, and passing in the learning rate hyperparameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the training loop, optimization happens in three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Call `optimizer.zero_grad()` to reset the gradients of model parameters. Gradients
    by default add up; to prevent double-counting, we explicitly zero them at each
    iteration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backpropagate the prediction loss with a call to `loss.backward()`. PyTorch
    deposits the gradients of the loss w.r.t. each parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we have our gradients, we call `optimizer.step()` to adjust the parameters
    by the gradients collected in the backward pass.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Full Implementation'
  prefs: []
  type: TYPE_NORMAL
- en: We define `train_loop` that loops over our optimization code, and `test_loop`
    that evaluates the model’s performance against our test data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We initialize the loss function and optimizer, and pass it to `train_loop` and
    `test_loop`. Feel free to increase the number of epochs to track the model’s improving
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Further Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Loss Functions](https://pytorch.org/docs/stable/nn.html#loss-functions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[torch.optim](https://pytorch.org/docs/stable/optim.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Warmstart Training a Model](https://pytorch.org/tutorials/recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 2 minutes 0.365 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: optimization_tutorial.py`](../../_downloads/0662a149d54bd776924742c96eb6282d/optimization_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: optimization_tutorial.ipynb`](../../_downloads/91d72708edab956d7293bb263e2ab53f/optimization_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
