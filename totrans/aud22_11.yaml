- en: Building on Windows
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上构建
- en: 原文：[https://pytorch.org/audio/stable/build.windows.html](https://pytorch.org/audio/stable/build.windows.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/audio/stable/build.windows.html](https://pytorch.org/audio/stable/build.windows.html)
- en: To build TorchAudio on Windows, we need to enable C++ compiler and install build
    tools and runtime dependencies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上构建TorchAudio，我们需要启用C++编译器并安装构建工具和运行时依赖。
- en: We use Microsoft Visual C++ for compiling C++ and Conda for managing the other
    build tools and runtime dependencies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Microsoft Visual C++来编译C++代码，使用Conda来管理其他构建工具和运行时依赖。
- en: 1\. Install build tools[](#install-build-tools "Permalink to this heading")
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 安装构建工具[](#install-build-tools "此标题的永久链接")
- en: MSVC[](#msvc "Permalink to this heading")
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSVC[](#msvc "此标题的永久链接")
- en: Please follow the instruction at [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/),
    and make sure to install C++ development tools.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照[https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)上的说明操作，并确保安装了C++开发工具。
- en: Note
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The official binary distribution are compiled with MSVC 2019. The following
    section uses path from MSVC 2019 Community Edition.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的二进制发行版是使用MSVC 2019编译的。以下部分使用的路径来自于MSVC 2019社区版。
- en: Conda[](#conda "Permalink to this heading")
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Conda[](#conda "此标题的永久链接")
- en: Please follow the instruction at [https://docs.conda.io/en/latest/miniconda.html](https://docs.conda.io/en/latest/miniconda.html).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照[https://docs.conda.io/en/latest/miniconda.html](https://docs.conda.io/en/latest/miniconda.html)上的说明操作。
- en: 2\. Start the dev environment[](#start-the-dev-environment "Permalink to this
    heading")
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 启动开发环境[](#start-the-dev-environment "此标题的永久链接")
- en: In the following, we need to use C++ compiler (`cl`), and Conda package manager
    (`conda`). We also use Bash for the sake of similar experience to Linux/macOS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们需要使用C++编译器（`cl`）和Conda包管理器（`conda`）。我们还使用Bash以便与Linux/macOS有类似的体验。
- en: To do so, the following three steps are required.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，需要执行以下三个步骤。
- en: Open command prompt
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符
- en: Enable developer environment
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用开发环境
- en: '[Optional] Launch bash'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[可选] 启动Bash'
- en: The following combination is known to work.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下组合已知可行。
- en: Launch Anaconda3 Command Prompt.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Anaconda3命令提示符。
- en: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-conda.png](../Images/e359bffec700153e5b0c8c00a8b001f7.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-conda.png)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-conda.png](../Images/e359bffec700153e5b0c8c00a8b001f7.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-conda.png)'
- en: Please make sure that `conda` command is recognized.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请确保`conda`命令被识别。
- en: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-conda2.png](../Images/13a95ff6452fc2a52bb6a6b9bf666630.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-conda2.png)'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-conda2.png](../Images/13a95ff6452fc2a52bb6a6b9bf666630.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-conda2.png)'
- en: Activate dev tools by running the following command.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令激活开发工具。
- en: We need to use the MSVC x64 toolset for compilation. To enable the toolset,
    one can use `vcvarsall.bat` or `vcvars64.bat` file, which are found under Visual
    Studio’s installation folder, under `VC\Auxiliary\Build\`. More information are
    available at [https://docs.microsoft.com/en-us/cpp/build/how-to-enable-a-64-bit-visual-cpp-toolset-on-the-command-line?view=msvc-160#use-vcvarsallbat-to-set-a-64-bit-hosted-build-architecture](https://docs.microsoft.com/en-us/cpp/build/how-to-enable-a-64-bit-visual-cpp-toolset-on-the-command-line?view=msvc-160#use-vcvarsallbat-to-set-a-64-bit-hosted-build-architecture)
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要使用MSVC x64工具集进行编译。要启用该工具集，可以使用`vcvarsall.bat`或`vcvars64.bat`文件，这些文件位于Visual
    Studio的安装文件夹下的`VC\Auxiliary\Build\`目录中。更多信息请参考[https://docs.microsoft.com/en-us/cpp/build/how-to-enable-a-64-bit-visual-cpp-toolset-on-the-command-line?view=msvc-160#use-vcvarsallbat-to-set-a-64-bit-hosted-build-architecture](https://docs.microsoft.com/en-us/cpp/build/how-to-enable-a-64-bit-visual-cpp-toolset-on-the-command-line?view=msvc-160#use-vcvarsallbat-to-set-a-64-bit-hosted-build-architecture)
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Please makes sure that `cl` command is recognized.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请确保`cl`命令被识别。
- en: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-msvc.png](../Images/323d3a6ff776378e8f39d87a6893379c.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-msvc.png)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-msvc.png](../Images/323d3a6ff776378e8f39d87a6893379c.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-msvc.png)'
- en: '[Optional] Launch bash with the following command.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[可选] 使用以下命令启动Bash。'
- en: If you want a similar UX as Linux/macOS, you can launch Bash. However, please
    note that in Bash environment, the file paths are different from native Windows
    style, and `torchaudio.datasets` module does not work.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想要与Linux/macOS类似的用户体验，可以启动Bash。但请注意，在Bash环境中，文件路径与本机Windows风格不同，并且`torchaudio.datasets`模块不起作用。
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-bash.png](../Images/c02c1db4f464de7562d28e7eb2f1f87a.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-bash.png)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-bash.png](../Images/c02c1db4f464de7562d28e7eb2f1f87a.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-bash.png)'
- en: 3\. Install PyTorch[](#install-pytorch "Permalink to this heading")
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 安装PyTorch[](#install-pytorch "此标题的永久链接")
- en: Please refer to [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)
    for the up-to-date way to install PyTorch.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)以获取安装PyTorch的最新方法。
- en: The following command installs the nightly build version of PyTorch.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令安装PyTorch的夜间构建版本。
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When installing CUDA-enabled version, it also install CUDA toolkit.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装启用CUDA版本时，也会安装CUDA工具包。
- en: 4\. [Optional] cuDNN[](#optional-cudnn "Permalink to this heading")
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. [可选] cuDNN[](#optional-cudnn "此标题的永久链接")
- en: If you intend to build CUDA-related features, please install cuDNN.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算构建与CUDA相关的功能，请安装cuDNN。
- en: Download CuDNN from [https://developer.nvidia.com/cudnn](https://developer.nvidia.com/cudnn),
    and extract files in the same directories as CUDA toolkit.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://developer.nvidia.com/cudnn](https://developer.nvidia.com/cudnn)下载CuDNN，并将文件提取到与CUDA工具包相同的目录中。
- en: When using conda, the directories are `${CONDA_PREFIX}/bin`, `${CONDA_PREFIX}/include`,
    `${CONDA_PREFIX}/Lib/x64`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用conda时，目录为`${CONDA_PREFIX}/bin`，`${CONDA_PREFIX}/include`，`${CONDA_PREFIX}/Lib/x64`。
- en: 5\. Install external dependencies[](#install-external-dependencies "Permalink
    to this heading")
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5. 安装外部依赖项
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 6\. Build TorchAudio[](#build-torchaudio "Permalink to this heading")
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6. 构建TorchAudio
- en: Now that we have everything ready, we can build TorchAudio.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了，可以构建TorchAudio了。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Due to the complexity of build process, TorchAudio only supports in-place build.
    To use `pip`, please use `--no-use-pep517` option.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于构建过程的复杂性，TorchAudio仅支持原地构建。要使用`pip`，请使用`--no-use-pep517`选项。
- en: '`pip install -v -e . --no-use-pep517`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip install -v -e . --no-use-pep517`'
- en: '[Optional] Build TorchAudio with a custom FFmpeg[](#optional-build-torchaudio-with-a-custom-ffmpeg
    "Permalink to this heading")'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[可选] 使用自定义FFmpeg构建TorchAudio'
- en: By default, torchaudio tries to build FFmpeg extension with support for multiple
    FFmpeg versions. This process uses pre-built FFmpeg libraries compiled for specific
    CPU architectures like `x86_64`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，torchaudio尝试构建支持多个FFmpeg版本的FFmpeg扩展。此过程使用为特定CPU架构编译的预构建FFmpeg库，如`x86_64`。
- en: If your CPU is different, then the build process can fail. To workaround, one
    can disable FFmpeg integration (by setting the environment variable `USE_FFMPEG=0`)
    or switch to the single version FFmpeg extension.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的CPU不同，那么构建过程可能会失败。为了解决问题，可以禁用FFmpeg集成（通过设置环境变量`USE_FFMPEG=0`）或切换到单版本FFmpeg扩展。
- en: To build single version FFmpeg extension, FFmpeg binaries must be provided by
    user and available in the build environment. To do so, install FFmpeg and set
    `FFMPEG_ROOT` environment variable to specify the location of FFmpeg.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建单版本FFmpeg扩展，用户必须提供FFmpeg二进制文件，并且在构建环境中可用。为此，请安装FFmpeg并设置`FFMPEG_ROOT`环境变量以指定FFmpeg的位置。
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Optional] Building FFmpeg from source[](#optional-building-ffmpeg-from-source
    "Permalink to this heading")'
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[可选] 从源代码构建FFmpeg'
- en: The following section illustrates a way to build FFmpeg libraries from source.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分说明了从源代码构建FFmpeg库的方法。
- en: Conda-forge’s FFmpeg package comes with support for major codecs and GPU decoders,
    so regular users and developers do not need to build FFmpeg from source.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Conda-forge的FFmpeg软件包具有对主要编解码器和GPU解码器的支持，因此常规用户和开发人员不需要从源代码构建FFmpeg。
- en: If you are not using Conda, then you can either find a pre-built binary distribution
    or build FFmpeg by yourself.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不使用Conda，则可以找到预构建的二进制发行版，或者自己构建FFmpeg。
- en: Also, in case torchaudio developer needs to update and customize the CI for
    FFmpeg build, this section might be helpful.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果torchaudio开发人员需要更新和定制FFmpeg构建的CI，本节可能会有所帮助。
- en: 1\. Install MSYS2[](#install-msys2 "Permalink to this heading")
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1. 安装MSYS2
- en: To build FFmpeg in a way it is usable from the TorchAudio development environment,
    we need to build binaries native to `MINGW64`. To do so, we need tools required
    by FFmpeg’s build process, such as `pkg-config` and `make`, that work in `MINGW64`
    environment. For this purpose, we use MSYS2.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以一种在TorchAudio开发环境中可用的方式构建FFmpeg，我们需要构建适用于`MINGW64`的本机二进制文件。为此，我们需要FFmpeg构建过程所需的工具，如在`MINGW64`环境中工作的`pkg-config`和`make`。为此目的，我们使用MSYS2。
- en: FFmpeg’s official documentation touches this [https://trac.ffmpeg.org/wiki/CompilationGuide/MinGW](https://trac.ffmpeg.org/wiki/CompilationGuide/MinGW)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: FFmpeg的官方文档涉及到这一点[https://trac.ffmpeg.org/wiki/CompilationGuide/MinGW](https://trac.ffmpeg.org/wiki/CompilationGuide/MinGW)
- en: Please follow the instruction at [https://www.msys2.org/](https://www.msys2.org/)
    to install MSYS2.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照[https://www.msys2.org/](https://www.msys2.org/)上的说明安装MSYS2。
- en: Note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In CI environment, often [Chocolatery](https://chocolatey.org/) can be used
    to install MSYS2.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI环境中，通常可以使用[Chocolatery](https://chocolatey.org/)来安装MSYS2。
- en: 2\. Launch MSYS2[](#launch-msys2 "Permalink to this heading")
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2. 启动MSYS2
- en: Use the shortcut to launch MSYS2 (MINGW64).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用快捷方式启动MSYS2（MINGW64）。
- en: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-msys2.png](../Images/59237156547c1a97b95f4271157a9c1e.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-msys2.png)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-msys2.png](../Images/59237156547c1a97b95f4271157a9c1e.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-msys2.png)'
- en: Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Bash environment in MSYS2 does not play well with Conda env, so do not add
    Conda initialization script in `~/.bashrc` of MSYS2 environment. (i.e. `C:\msys2\home\USER\.bashrc`)
    Instead, add it in `C:\Users\USER\.bashrc`)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: MSYS2中的Bash环境与Conda环境不兼容，因此不要在MSYS2环境的`~/.bashrc`中添加Conda初始化脚本（即`C:\msys2\home\USER\.bashrc`）。而是将其添加到`C:\Users\USER\.bashrc`中。
- en: 3\. Install build tools[](#id1 "Permalink to this heading")
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3. 安装构建工具
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After the installation, you should have packages similar to the following;
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您应该有类似以下的软件包;
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 4\. Build FFmpeg[](#build-ffmpeg "Permalink to this heading")
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4. 构建FFmpeg
- en: Check out FFmpeg source code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 查看FFmpeg源代码。
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Build
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 构建
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the build succeeds, `ffmpeg.exe` should be found in the same directory. Make
    sure that you can run it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建成功，`ffmpeg.exe`应该在同一目录中找到。确保您可以运行它。
- en: 5\. Verify the build[](#verify-the-build "Permalink to this heading")
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5. 验证构建
- en: Check that the resulting FFmpeg binary is accessible from Conda env
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 检查生成的FFmpeg二进制文件是否可以从Conda环境访问。
- en: Now launch a new command prompt and enable the TorchAudio development environment.
    Make sure that you can run the `ffmpeg.exe` command generated in the previous
    step.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动一个新的命令提示符并启用TorchAudio开发环境。确保您可以运行在上一步生成的`ffmpeg.exe`命令。
