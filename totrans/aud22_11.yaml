- en: Building on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/build.windows.html](https://pytorch.org/audio/stable/build.windows.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To build TorchAudio on Windows, we need to enable C++ compiler and install build
    tools and runtime dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: We use Microsoft Visual C++ for compiling C++ and Conda for managing the other
    build tools and runtime dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Install build tools[](#install-build-tools "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MSVC[](#msvc "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please follow the instruction at [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/),
    and make sure to install C++ development tools.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The official binary distribution are compiled with MSVC 2019. The following
    section uses path from MSVC 2019 Community Edition.
  prefs: []
  type: TYPE_NORMAL
- en: Conda[](#conda "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please follow the instruction at [https://docs.conda.io/en/latest/miniconda.html](https://docs.conda.io/en/latest/miniconda.html).
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Start the dev environment[](#start-the-dev-environment "Permalink to this
    heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following, we need to use C++ compiler (`cl`), and Conda package manager
    (`conda`). We also use Bash for the sake of similar experience to Linux/macOS.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, the following three steps are required.
  prefs: []
  type: TYPE_NORMAL
- en: Open command prompt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable developer environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Optional] Launch bash'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following combination is known to work.
  prefs: []
  type: TYPE_NORMAL
- en: Launch Anaconda3 Command Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-conda.png](../Images/e359bffec700153e5b0c8c00a8b001f7.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-conda.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Please make sure that `conda` command is recognized.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-conda2.png](../Images/13a95ff6452fc2a52bb6a6b9bf666630.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-conda2.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Activate dev tools by running the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to use the MSVC x64 toolset for compilation. To enable the toolset,
    one can use `vcvarsall.bat` or `vcvars64.bat` file, which are found under Visual
    Studio’s installation folder, under `VC\Auxiliary\Build\`. More information are
    available at [https://docs.microsoft.com/en-us/cpp/build/how-to-enable-a-64-bit-visual-cpp-toolset-on-the-command-line?view=msvc-160#use-vcvarsallbat-to-set-a-64-bit-hosted-build-architecture](https://docs.microsoft.com/en-us/cpp/build/how-to-enable-a-64-bit-visual-cpp-toolset-on-the-command-line?view=msvc-160#use-vcvarsallbat-to-set-a-64-bit-hosted-build-architecture)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Please makes sure that `cl` command is recognized.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-msvc.png](../Images/323d3a6ff776378e8f39d87a6893379c.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-msvc.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Optional] Launch bash with the following command.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want a similar UX as Linux/macOS, you can launch Bash. However, please
    note that in Bash environment, the file paths are different from native Windows
    style, and `torchaudio.datasets` module does not work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-bash.png](../Images/c02c1db4f464de7562d28e7eb2f1f87a.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-bash.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3\. Install PyTorch[](#install-pytorch "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)
    for the up-to-date way to install PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: The following command installs the nightly build version of PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When installing CUDA-enabled version, it also install CUDA toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. [Optional] cuDNN[](#optional-cudnn "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you intend to build CUDA-related features, please install cuDNN.
  prefs: []
  type: TYPE_NORMAL
- en: Download CuDNN from [https://developer.nvidia.com/cudnn](https://developer.nvidia.com/cudnn),
    and extract files in the same directories as CUDA toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: When using conda, the directories are `${CONDA_PREFIX}/bin`, `${CONDA_PREFIX}/include`,
    `${CONDA_PREFIX}/Lib/x64`.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Install external dependencies[](#install-external-dependencies "Permalink
    to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Build TorchAudio[](#build-torchaudio "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have everything ready, we can build TorchAudio.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Due to the complexity of build process, TorchAudio only supports in-place build.
    To use `pip`, please use `--no-use-pep517` option.
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install -v -e . --no-use-pep517`'
  prefs: []
  type: TYPE_NORMAL
- en: '[Optional] Build TorchAudio with a custom FFmpeg[](#optional-build-torchaudio-with-a-custom-ffmpeg
    "Permalink to this heading")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, torchaudio tries to build FFmpeg extension with support for multiple
    FFmpeg versions. This process uses pre-built FFmpeg libraries compiled for specific
    CPU architectures like `x86_64`.
  prefs: []
  type: TYPE_NORMAL
- en: If your CPU is different, then the build process can fail. To workaround, one
    can disable FFmpeg integration (by setting the environment variable `USE_FFMPEG=0`)
    or switch to the single version FFmpeg extension.
  prefs: []
  type: TYPE_NORMAL
- en: To build single version FFmpeg extension, FFmpeg binaries must be provided by
    user and available in the build environment. To do so, install FFmpeg and set
    `FFMPEG_ROOT` environment variable to specify the location of FFmpeg.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[Optional] Building FFmpeg from source[](#optional-building-ffmpeg-from-source
    "Permalink to this heading")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following section illustrates a way to build FFmpeg libraries from source.
  prefs: []
  type: TYPE_NORMAL
- en: Conda-forge’s FFmpeg package comes with support for major codecs and GPU decoders,
    so regular users and developers do not need to build FFmpeg from source.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not using Conda, then you can either find a pre-built binary distribution
    or build FFmpeg by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in case torchaudio developer needs to update and customize the CI for
    FFmpeg build, this section might be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Install MSYS2[](#install-msys2 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To build FFmpeg in a way it is usable from the TorchAudio development environment,
    we need to build binaries native to `MINGW64`. To do so, we need tools required
    by FFmpeg’s build process, such as `pkg-config` and `make`, that work in `MINGW64`
    environment. For this purpose, we use MSYS2.
  prefs: []
  type: TYPE_NORMAL
- en: FFmpeg’s official documentation touches this [https://trac.ffmpeg.org/wiki/CompilationGuide/MinGW](https://trac.ffmpeg.org/wiki/CompilationGuide/MinGW)
  prefs: []
  type: TYPE_NORMAL
- en: Please follow the instruction at [https://www.msys2.org/](https://www.msys2.org/)
    to install MSYS2.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In CI environment, often [Chocolatery](https://chocolatey.org/) can be used
    to install MSYS2.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Launch MSYS2[](#launch-msys2 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the shortcut to launch MSYS2 (MINGW64).
  prefs: []
  type: TYPE_NORMAL
- en: '[![https://download.pytorch.org/torchaudio/doc-assets/windows-msys2.png](../Images/59237156547c1a97b95f4271157a9c1e.png)](https://download.pytorch.org/torchaudio/doc-assets/windows-msys2.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Bash environment in MSYS2 does not play well with Conda env, so do not add
    Conda initialization script in `~/.bashrc` of MSYS2 environment. (i.e. `C:\msys2\home\USER\.bashrc`)
    Instead, add it in `C:\Users\USER\.bashrc`)
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Install build tools[](#id1 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After the installation, you should have packages similar to the following;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Build FFmpeg[](#build-ffmpeg "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check out FFmpeg source code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Build
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If the build succeeds, `ffmpeg.exe` should be found in the same directory. Make
    sure that you can run it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Verify the build[](#verify-the-build "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check that the resulting FFmpeg binary is accessible from Conda env
  prefs: []
  type: TYPE_NORMAL
- en: Now launch a new command prompt and enable the TorchAudio development environment.
    Make sure that you can run the `ffmpeg.exe` command generated in the previous
    step.
  prefs: []
  type: TYPE_NORMAL
