["```py\n>>> a = torch.tensor([[0, 2.], [3, 0]])\n>>> a.to_sparse()\ntensor(indices=tensor([[0, 1],\n [1, 0]]),\n values=tensor([2., 3.]),\n size=(2, 2), nnz=2, layout=torch.sparse_coo) \n```", "```py\n>>> t = torch.tensor([[[1., 0], [2., 3.]], [[4., 0], [5., 6.]]])\n>>> t.dim()\n3\n>>> t.to_sparse_csr()\ntensor(crow_indices=tensor([[0, 1, 3],\n [0, 1, 3]]),\n col_indices=tensor([[0, 0, 1],\n [0, 0, 1]]),\n values=tensor([[1., 2., 3.],\n [4., 5., 6.]]), size=(2, 2, 2), nnz=3,\n layout=torch.sparse_csr) \n```", "```py\n>>> t = torch.tensor([[[0., 0], [1., 2.]], [[0., 0], [3., 4.]]])\n>>> t.to_sparse(sparse_dim=2)\ntensor(indices=tensor([[0, 1],\n [1, 1]]),\n values=tensor([[1., 2.],\n [3., 4.]]),\n size=(2, 2, 2), nnz=2, layout=torch.sparse_coo) \n```", "```py\n>>> b = torch.tensor([[0, 0, 1, 2, 3, 0], [4, 5, 0, 6, 0, 0]])\n>>> b_s = b.to_sparse_csr()\n>>> b_s.cos()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: unsupported tensor layout: SparseCsr\n>>> b_s.sin()\ntensor(crow_indices=tensor([0, 3, 6]),\n col_indices=tensor([2, 3, 4, 0, 1, 3]),\n values=tensor([ 0.8415,  0.9093,  0.1411, -0.7568, -0.9589, -0.2794]),\n size=(2, 6), nnz=6, layout=torch.sparse_csr) \n```", "```py\n>>> b_s.to_dense().cos()\ntensor([[ 1.0000, -0.4161],\n [-0.9900,  1.0000]]) \n```", "```py\n>>> a + b.to_sparse()\ntensor([[0., 3.],\n [3., 0.]]) \n```", "```py\n>>> from torch.sparse import to_sparse_semi_structured\n>>> A = torch.Tensor([0, 0, 1, 1]).tile((128, 32)).half().cuda()\ntensor([[0., 0., 1.,  ..., 0., 1., 1.],\n [0., 0., 1.,  ..., 0., 1., 1.],\n [0., 0., 1.,  ..., 0., 1., 1.],\n ...,\n [0., 0., 1.,  ..., 0., 1., 1.],\n [0., 0., 1.,  ..., 0., 1., 1.],\n [0., 0., 1.,  ..., 0., 1., 1.]], device='cuda:0', dtype=torch.float16)\n>>> A_sparse = to_sparse_semi_structured(A)\nSparseSemiStructuredTensor(shape=torch.Size([128, 128]), transposed=False, values=tensor([[1., 1., 1.,  ..., 1., 1., 1.],\n [1., 1., 1.,  ..., 1., 1., 1.],\n [1., 1., 1.,  ..., 1., 1., 1.],\n ...,\n [1., 1., 1.,  ..., 1., 1., 1.],\n [1., 1., 1.,  ..., 1., 1., 1.],\n [1., 1., 1.,  ..., 1., 1., 1.]], device='cuda:0', dtype=torch.float16), metadata=tensor([[-4370, -4370, -4370,  ..., -4370, -4370, -4370],\n [-4370, -4370, -4370,  ..., -4370, -4370, -4370],\n [-4370, -4370, -4370,  ..., -4370, -4370, -4370],\n ...,\n [-4370, -4370, -4370,  ..., -4370, -4370, -4370],\n [-4370, -4370, -4370,  ..., -4370, -4370, -4370],\n [-4370, -4370, -4370,  ..., -4370, -4370, -4370]], device='cuda:0',\ndtype=torch.int16)) \n```", "```py\n>>> a = torch.Tensor([0, 0, 1, 1]).tile((64, 16)).half().cuda()\n>>> b = torch.rand(64, 64).half().cuda()\n>>> c = torch.mm(a, b)\n>>> a_sparse = to_sparse_semi_structured(a)\n>>> torch.allclose(c, torch.mm(a_sparse, b))\nTrue \n```", "```py\n>>> input = torch.rand(64, 64).half().cuda()\n>>> mask = torch.Tensor([0, 0, 1, 1]).tile((64, 16)).cuda().bool()\n>>> linear = nn.Linear(64, 64).half().cuda()\n>>> linear.weight = nn.Parameter(to_sparse_semi_structured(linear.weight.masked_fill(~mask, 0))) \n```", "```py\n>>> i = [[0, 1, 1],\n [2, 0, 2]]\n>>> v =  [3, 4, 5]\n>>> s = torch.sparse_coo_tensor(i, v, (2, 3))\n>>> s\ntensor(indices=tensor([[0, 1, 1],\n [2, 0, 2]]),\n values=tensor([3, 4, 5]),\n size=(2, 3), nnz=3, layout=torch.sparse_coo)\n>>> s.to_dense()\ntensor([[0, 0, 3],\n [4, 0, 5]]) \n```", "```py\n>>> i = [[0, 2], [1, 0], [1, 2]]\n>>> v =  [3,      4,      5    ]\n>>> s = torch.sparse_coo_tensor(list(zip(*i)), v, (2, 3))\n>>> # Or another equivalent formulation to get s\n>>> s = torch.sparse_coo_tensor(torch.tensor(i).t(), v, (2, 3))\n>>> torch.sparse_coo_tensor(i.t(), v, torch.Size([2,3])).to_dense()\ntensor([[0, 0, 3],\n [4, 0, 5]]) \n```", "```py\n>>> torch.sparse_coo_tensor(size=(2, 3))\ntensor(indices=tensor([], size=(2, 0)),\n values=tensor([], size=(0,)),\n size=(2, 3), nnz=0, layout=torch.sparse_coo) \n```", "```py\n>>> i = [[0, 1, 1],\n [2, 0, 2]]\n>>> v =  [[3, 4], [5, 6], [7, 8]]\n>>> s = torch.sparse_coo_tensor(i, v, (2, 3, 2))\n>>> s\ntensor(indices=tensor([[0, 1, 1],\n [2, 0, 2]]),\n values=tensor([[3, 4],\n [5, 6],\n [7, 8]]),\n size=(2, 3, 2), nnz=3, layout=torch.sparse_coo) \n```", "```py\n>>> s.to_dense()\ntensor([[[0, 0],\n [0, 0],\n [3, 4]],\n [[5, 6],\n [0, 0],\n [7, 8]]]) \n```", "```py\n>>> i = [[1, 1]]\n>>> v =  [3, 4]\n>>> s=torch.sparse_coo_tensor(i, v, (3,))\n>>> s\ntensor(indices=tensor([[1, 1]]),\n values=tensor(  [3, 4]),\n size=(3,), nnz=2, layout=torch.sparse_coo) \n```", "```py\n>>> s.coalesce()\ntensor(indices=tensor([[1]]),\n values=tensor([7]),\n size=(3,), nnz=1, layout=torch.sparse_coo) \n```", "```py\n>>> a = torch.sparse_coo_tensor([[1, 1]], [5, 6], (2,))\n>>> b = torch.sparse_coo_tensor([[0, 0]], [7, 8], (2,))\n>>> a + b\ntensor(indices=tensor([[0, 0, 1, 1]]),\n values=tensor([7, 8, 5, 6]),\n size=(2,), nnz=4, layout=torch.sparse_coo) \n```", "```py\n>>> i = [[0, 1, 1],\n [2, 0, 2]]\n>>> v =  [[3, 4], [5, 6], [7, 8]]\n>>> s = torch.sparse_coo_tensor(i, v, (2, 3, 2)) \n```", "```py\n>>> isinstance(s, torch.Tensor)\nTrue\n>>> s.is_sparse\nTrue\n>>> s.layout == torch.sparse_coo\nTrue \n```", "```py\n>>> s.sparse_dim(), s.dense_dim()\n(2, 1) \n```", "```py\n>>> s.indices()\nRuntimeError: Cannot get indices on an uncoalesced tensor, please call .coalesce() first \n```", "```py\n>>> s._indices()\ntensor([[0, 1, 1],\n [2, 0, 2]]) \n```", "```py\n>>> s.is_coalesced()\nFalse \n```", "```py\n>>> s2 = s.coalesce()\n>>> s2.indices()\ntensor([[0, 1, 1],\n [2, 0, 2]]) \n```", "```py\n>>> s[1]\ntensor(indices=tensor([[0, 2]]),\n values=tensor([[5, 6],\n [7, 8]]),\n size=(3, 2), nnz=2, layout=torch.sparse_coo)\n>>> s[1, 0, 1]\ntensor(6)\n>>> s[1, 0, 1:]\ntensor([6]) \n```", "```py\n>>> crow_indices = torch.tensor([0, 2, 4])\n>>> col_indices = torch.tensor([0, 1, 0, 1])\n>>> values = torch.tensor([1, 2, 3, 4])\n>>> csr = torch.sparse_csr_tensor(crow_indices, col_indices, values, dtype=torch.float64)\n>>> csr\ntensor(crow_indices=tensor([0, 2, 4]),\n col_indices=tensor([0, 1, 0, 1]),\n values=tensor([1., 2., 3., 4.]), size=(2, 2), nnz=4,\n dtype=torch.float64)\n>>> csr.to_dense()\ntensor([[1., 2.],\n [3., 4.]], dtype=torch.float64) \n```", "```py\n>>> a = torch.tensor([[0, 0, 1, 0], [1, 2, 0, 0], [0, 0, 0, 0]], dtype=torch.float64)\n>>> sp = a.to_sparse_csr()\n>>> sp\ntensor(crow_indices=tensor([0, 1, 3, 3]),\n col_indices=tensor([2, 0, 1]),\n values=tensor([1., 1., 2.]), size=(3, 4), nnz=3, dtype=torch.float64) \n```", "```py\n>>> vec = torch.randn(4, 1, dtype=torch.float64)\n>>> sp.matmul(vec)\ntensor([[0.9078],\n [1.3180],\n [0.0000]], dtype=torch.float64) \n```", "```py\n>>> ccol_indices = torch.tensor([0, 2, 4])\n>>> row_indices = torch.tensor([0, 1, 0, 1])\n>>> values = torch.tensor([1, 2, 3, 4])\n>>> csc = torch.sparse_csc_tensor(ccol_indices, row_indices, values, dtype=torch.float64)\n>>> csc\ntensor(ccol_indices=tensor([0, 2, 4]),\n row_indices=tensor([0, 1, 0, 1]),\n values=tensor([1., 2., 3., 4.]), size=(2, 2), nnz=4,\n dtype=torch.float64, layout=torch.sparse_csc)\n>>> csc.to_dense()\ntensor([[1., 3.],\n [2., 4.]], dtype=torch.float64) \n```", "```py\n>>> a = torch.tensor([[0, 0, 1, 0], [1, 2, 0, 0], [0, 0, 0, 0]], dtype=torch.float64)\n>>> sp = a.to_sparse_csc()\n>>> sp\ntensor(ccol_indices=tensor([0, 1, 2, 3, 3]),\n row_indices=tensor([1, 1, 0]),\n values=tensor([1., 2., 1.]), size=(3, 4), nnz=3, dtype=torch.float64,\n layout=torch.sparse_csc) \n```", "```py\n>>> crow_indices = torch.tensor([0, 2, 4])\n>>> col_indices = torch.tensor([0, 1, 0, 1])\n>>> values = torch.tensor([[[0, 1, 2], [6, 7, 8]],\n...                        [[3, 4, 5], [9, 10, 11]],\n...                        [[12, 13, 14], [18, 19, 20]],\n...                        [[15, 16, 17], [21, 22, 23]]])\n>>> bsr = torch.sparse_bsr_tensor(crow_indices, col_indices, values, dtype=torch.float64)\n>>> bsr\ntensor(crow_indices=tensor([0, 2, 4]),\n col_indices=tensor([0, 1, 0, 1]),\n values=tensor([[[ 0.,  1.,  2.],\n [ 6.,  7.,  8.]],\n [[ 3.,  4.,  5.],\n [ 9., 10., 11.]],\n [[12., 13., 14.],\n [18., 19., 20.]],\n [[15., 16., 17.],\n [21., 22., 23.]]]),\n size=(4, 6), nnz=4, dtype=torch.float64, layout=torch.sparse_bsr)\n>>> bsr.to_dense()\ntensor([[ 0.,  1.,  2.,  3.,  4.,  5.],\n [ 6.,  7.,  8.,  9., 10., 11.],\n [12., 13., 14., 15., 16., 17.],\n [18., 19., 20., 21., 22., 23.]], dtype=torch.float64) \n```", "```py\n>>> dense = torch.tensor([[0, 1, 2, 3, 4, 5],\n...                       [6, 7, 8, 9, 10, 11],\n...                       [12, 13, 14, 15, 16, 17],\n...                       [18, 19, 20, 21, 22, 23]])\n>>> bsr = dense.to_sparse_bsr(blocksize=(2, 3))\n>>> bsr\ntensor(crow_indices=tensor([0, 2, 4]),\n col_indices=tensor([0, 1, 0, 1]),\n values=tensor([[[ 0,  1,  2],\n [ 6,  7,  8]],\n [[ 3,  4,  5],\n [ 9, 10, 11]],\n [[12, 13, 14],\n [18, 19, 20]],\n [[15, 16, 17],\n [21, 22, 23]]]), size=(4, 6), nnz=4,\n layout=torch.sparse_bsr) \n```", "```py\n>>> ccol_indices = torch.tensor([0, 2, 4])\n>>> row_indices = torch.tensor([0, 1, 0, 1])\n>>> values = torch.tensor([[[0, 1, 2], [6, 7, 8]],\n...                        [[3, 4, 5], [9, 10, 11]],\n...                        [[12, 13, 14], [18, 19, 20]],\n...                        [[15, 16, 17], [21, 22, 23]]])\n>>> bsc = torch.sparse_bsc_tensor(ccol_indices, row_indices, values, dtype=torch.float64)\n>>> bsc\ntensor(ccol_indices=tensor([0, 2, 4]),\n row_indices=tensor([0, 1, 0, 1]),\n values=tensor([[[ 0.,  1.,  2.],\n [ 6.,  7.,  8.]],\n [[ 3.,  4.,  5.],\n [ 9., 10., 11.]],\n [[12., 13., 14.],\n [18., 19., 20.]],\n [[15., 16., 17.],\n [21., 22., 23.]]]), size=(4, 6), nnz=4,\n dtype=torch.float64, layout=torch.sparse_bsc) \n```", "```py\n>>> compressed_indices = torch.tensor([0, 2, 4])\n>>> plain_indices = torch.tensor([0, 1, 0, 1])\n>>> values = torch.tensor([1, 2, 3, 4])\n>>> csr = torch.sparse_compressed_tensor(compressed_indices, plain_indices, values, layout=torch.sparse_csr)\n>>> csr\ntensor(crow_indices=tensor([0, 2, 4]),\n col_indices=tensor([0, 1, 0, 1]),\n values=tensor([1, 2, 3, 4]), size=(2, 2), nnz=4,\n layout=torch.sparse_csr)\n>>> csc = torch.sparse_compressed_tensor(compressed_indices, plain_indices, values, layout=torch.sparse_csc)\n>>> csc\ntensor(ccol_indices=tensor([0, 2, 4]),\n row_indices=tensor([0, 1, 0, 1]),\n values=tensor([1, 2, 3, 4]), size=(2, 2), nnz=4,\n layout=torch.sparse_csc)\n>>> (csr.transpose(0, 1).to_dense() == csc.to_dense()).all()\ntensor(True) \n```"]