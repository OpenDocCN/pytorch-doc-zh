- en: Audio Data Augmentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/tutorials/audio_data_augmentation_tutorial.html](https://pytorch.org/audio/stable/tutorials/audio_data_augmentation_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-tutorials-audio-data-augmentation-tutorial-py)
    to download the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '**Author**: [Moto Hira](mailto:moto%40meta.com)'
  prefs: []
  type: TYPE_NORMAL
- en: '`torchaudio` provides a variety of ways to augment audio data.'
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we look into a way to apply effects, filters, RIR (room impulse
    response) and codecs.
  prefs: []
  type: TYPE_NORMAL
- en: At the end, we synthesize noisy speech over phone from clean speech.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Preparation[](#preparation "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we import the modules and download the audio assets we use in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Applying effects and filtering[](#applying-effects-and-filtering "Permalink
    to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`torchaudio.io.AudioEffector`](../generated/torchaudio.io.AudioEffector.html#torchaudio.io.AudioEffector
    "torchaudio.io.AudioEffector") allows for directly applying filters and codecs
    to Tensor objects, in a similar way as `ffmpeg` command'
  prefs: []
  type: TYPE_NORMAL
- en: AudioEffector Usages <./effector_tutorial.html> explains how to use this class,
    so for the detail, please refer to the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that the number of frames and number of channels are different from those
    of the original after the effects are applied. Let’s listen to the audio.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Original[](#original "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Original](../Images/fd3a3a2790a98d9fbdf35ffecf8587e9.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Original](../Images/f52e4934ba626b863f8e8a2d4790f2c6.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Effects applied[](#effects-applied "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Effects Applied](../Images/a82e5c6d55bae10c1c9e2581fc308d54.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Effects Applied](../Images/5e9bb14130f4a614142bdb66ad8e731f.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating room reverberation[](#simulating-room-reverberation "Permalink to
    this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Convolution reverb](https://en.wikipedia.org/wiki/Convolution_reverb) is a
    technique that’s used to make clean audio sound as though it has been produced
    in a different environment.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Room Impulse Response (RIR), for instance, we can make clean speech sound
    as though it has been uttered in a conference room.
  prefs: []
  type: TYPE_NORMAL
- en: For this process, we need RIR data. The following data are from the VOiCES dataset,
    but you can record your own — just turn on your microphone and clap your hands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Room Impulse Response (raw)](../Images/f73a484c4bc6e6778cfb4ad26a629b7a.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Room Impulse Response (raw)](../Images/c37679ae712317905097e6ad96d57ed1.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to clean up the RIR. We extract the main impulse and normalize
    it by its power.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Room Impulse Response](../Images/788c83e33cb0b55e5f21cf93bca8808f.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, using [`torchaudio.functional.fftconvolve()`](../generated/torchaudio.functional.fftconvolve.html#torchaudio.functional.fftconvolve
    "torchaudio.functional.fftconvolve"), we convolve the speech signal with the RIR.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Original[](#id1 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Original](../Images/0f2a5c0e0bfb1d0890035e4da34d5498.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Original](../Images/4b10804a900de5f0e8495b94b28ed9a3.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: RIR applied[](#rir-applied "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![RIR Applied](../Images/0e27d20e2c9282fff85ef0e288df2461.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![RIR Applied](../Images/e378af1235090badb424a929fa3699d3.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Adding background noise[](#adding-background-noise "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To introduce background noise to audio data, we can add a noise Tensor to the
    Tensor representing the audio data according to some desired signal-to-noise ratio
    (SNR) [[wikipedia](https://en.wikipedia.org/wiki/Signal-to-noise_ratio)], which
    determines the intensity of the audio data relative to that of the noise in the
    output.
  prefs: []
  type: TYPE_NORMAL
- en: $$ \mathrm{SNR} = \frac{P_{signal}}{P_{noise}} $$
  prefs: []
  type: TYPE_NORMAL
- en: $$ \mathrm{SNR_{dB}} = 10 \log _{{10}} \mathrm {SNR} $$
  prefs: []
  type: TYPE_NORMAL
- en: To add noise to audio data per SNRs, we use [`torchaudio.functional.add_noise()`](../generated/torchaudio.functional.add_noise.html#torchaudio.functional.add_noise
    "torchaudio.functional.add_noise").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Background noise[](#background-noise "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Background noise](../Images/2195bd8e66f6a6580ee504b1adb91363.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Background noise](../Images/0d5bd7d1f937b6ae3f831e3e52acfd63.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: SNR 20 dB[](#snr-20-db "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![SNR: 20 [dB]](../Images/f7a8cf1735194651621a1350821f57dd.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![SNR: 20 [dB]](../Images/cdb0c54dbc451ae3a5fcdbf39808ecc1.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: SNR 10 dB[](#snr-10-db "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![SNR: 10 [dB]](../Images/8fd46e30c011a829fcb048b98e4f1ab6.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![SNR: 10 [dB]](../Images/17d02f8b37a65e6ba53bbba437582a37.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: SNR 3 dB[](#snr-3-db "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![SNR: 3 [dB]](../Images/37e0900a5daa43f41c546c972044c4a0.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![SNR: 3 [dB]](../Images/f50ed2b87b84504cbdb4d465036f9918.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Applying codec to Tensor object[](#applying-codec-to-tensor-object "Permalink
    to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`torchaudio.io.AudioEffector`](../generated/torchaudio.io.AudioEffector.html#torchaudio.io.AudioEffector
    "torchaudio.io.AudioEffector") can also apply codecs to a Tensor object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Original[](#id2 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![Original](../Images/7e4df06a19a9b0b5cb5dbb489245e170.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Original](../Images/f1649f72c67453bb1a4f5aa7df74834d.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: 8 bit mu-law[](#bit-mu-law "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![8 bit mu-law](../Images/da7d3b00ec3c94bda66e5ed9dcecc4ef.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![8 bit mu-law](../Images/233500bee78b4550f44ff61a1e4265d0.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: G.722[](#g-722 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![G.722](../Images/97bb1fc2f122f9baab51c4d4178c0369.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![G.722](../Images/79494d74bcb76479497243b7b87b4a1e.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Vorbis[](#vorbis "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Vorbis](../Images/3d2870afbcb3f87befd96c079f07422b.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Vorbis](../Images/e4d754f05dbc5041ae2702eef0a6e5fc.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating a phone recoding[](#simulating-a-phone-recoding "Permalink to this
    heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Combining the previous techniques, we can simulate audio that sounds like a
    person talking over a phone in a echoey room with people talking in the background.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![Original](../Images/5691335d0652824bed1251f32ebb4df8.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![RIR Applied](../Images/2d426224493946d97ab5a594c6ffac62.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![BG noise added](../Images/7814889105a2285420d8412a167108c0.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Filtered](../Images/95fad1dd9f3d229a7e22a16e829686f3.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![G.722 Codec Applied](../Images/b087cc2781e5c09b6c5e4e2d541fd64b.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: Original speech[](#original-speech "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: RIR applied[](#id3 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Background noise added[](#background-noise-added "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Filtered[](#filtered "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Codec applied[](#codec-applied "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 0 minutes 13.432 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: audio_data_augmentation_tutorial.py`](../_downloads/5035f46f2e1c1557dfa0ffabb90a0b0a/audio_data_augmentation_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: audio_data_augmentation_tutorial.ipynb`](../_downloads/08314ca72c2aad9b7951279f0a24a983/audio_data_augmentation_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
