["```py\ndef entrypoint_name(*args, **kwargs):\n    # args & kwargs are optional, for models which take positional/keyword arguments.\n    ... \n```", "```py\ndependencies = ['torch']\nfrom torchvision.models.resnet import resnet18 as _resnet18\n\n# resnet18 is the name of entrypoint\ndef resnet18(pretrained=False, **kwargs):\n  \"\"\" # This docstring shows up in hub.help()\n Resnet18 model\n pretrained (bool): kwargs, load pretrained weights into the model\n \"\"\"\n    # Call the model, load pretrained weights\n    model = _resnet18(pretrained=pretrained, **kwargs)\n    return model \n```", "```py\nif pretrained:\n    # For checkpoint saved in local GitHub repo, e.g. <RELATIVE_PATH_TO_CHECKPOINT>=weights/save.pth\n    dirname = os.path.dirname(__file__)\n    checkpoint = os.path.join(dirname, <RELATIVE_PATH_TO_CHECKPOINT>)\n    state_dict = torch.load(checkpoint)\n    model.load_state_dict(state_dict)\n\n    # For checkpoint saved elsewhere\n    checkpoint = 'https://download.pytorch.org/models/resnet18-5c106cde.pth'\n    model.load_state_dict(torch.hub.load_state_dict_from_url(checkpoint, progress=False)) \n```", "```py\ntorch.hub.list(github, force_reload=False, skip_validation=False, trust_repo=None)\u00b6\n```", "```py\n>>> entrypoints = torch.hub.list('pytorch/vision', force_reload=True) \n```", "```py\ntorch.hub.help(github, model, force_reload=False, skip_validation=False, trust_repo=None)\u00b6\n```", "```py\n>>> print(torch.hub.help('pytorch/vision', 'resnet18', force_reload=True)) \n```", "```py\ntorch.hub.load(repo_or_dir, model, *args, source='github', trust_repo=None, force_reload=False, verbose=True, skip_validation=False, **kwargs)\u00b6\n```", "```py\n>>> # from a github repo\n>>> repo = 'pytorch/vision'\n>>> model = torch.hub.load(repo, 'resnet50', weights='ResNet50_Weights.IMAGENET1K_V1')\n>>> # from a local directory\n>>> path = '/some/local/path/pytorch/vision'\n>>> model = torch.hub.load(path, 'resnet50', weights='ResNet50_Weights.DEFAULT') \n```", "```py\ntorch.hub.download_url_to_file(url, dst, hash_prefix=None, progress=True)\u00b6\n```", "```py\n>>> torch.hub.download_url_to_file('https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth', '/tmp/temporary_file') \n```", "```py\ntorch.hub.load_state_dict_from_url(url, model_dir=None, map_location=None, progress=True, check_hash=False, file_name=None, weights_only=False)\u00b6\n```", "```py\n>>> state_dict = torch.hub.load_state_dict_from_url('https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth') \n```", "```py\ntorch.hub.get_dir()\u00b6\n```", "```py\ntorch.hub.set_dir(d)\u00b6\n```"]