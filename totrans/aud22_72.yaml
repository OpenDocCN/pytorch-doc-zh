- en: torio::io::StreamingMediaDecoder¶
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/libtorio.stream_reader.html](https://pytorch.org/audio/stable/libtorio.stream_reader.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: TorchAudio’s C++ API is a prototype feature. API/ABI backward compatibility
    is not guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The top-level namespace has been changed from `torchaudio` to `torio`. `StreamReader`
    has been renamed to `StreamingMediaDecoder`.
  prefs: []
  type: TYPE_NORMAL
- en: '`StreamingMediaDecoder` is the implementation used by Python equivalent and
    provides similar interface. When working with custom I/O, such as in-memory data,
    `StreamingMediaDecoderCustomIO` class can be used.'
  prefs: []
  type: TYPE_NORMAL
- en: Both classes have the same methods defined, so their usages are the same.
  prefs: []
  type: TYPE_NORMAL
- en: Constructors[¶](#constructors "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: StreamingMediaDecoder[¶](#streamingmediadecoder "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: class  StreamingMediaDecoder[¶](#_CPPv4N5torio2io21StreamingMediaDecoderE "Permalink
    to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Fetch and decode audio/video streams chunk by chunk.
  prefs: []
  type: TYPE_NORMAL
- en: Subclassed by [torio::io::StreamingMediaDecoderCustomIO](#classtorio_1_1io_1_1StreamingMediaDecoderCustomIO)
  prefs: []
  type: TYPE_NORMAL
- en: explicit  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")::StreamingMediaDecoder(const  std::string  &src,
    const  c10::optional<std::string>  &format  =  c10::nullopt, const  c10::optional<OptionDict>  &option  =  c10::nullopt)[¶](#_CPPv4N5torio2io21StreamingMediaDecoder21StreamingMediaDecoderERKNSt6stringERKN3c108optionalINSt6stringEEERKN3c108optionalI10OptionDictEE
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Construct media processor from soruce URI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**src** – URL of source media, in the format FFmpeg can understand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**format** – Specifies format (such as mp4) or device (such as lavfi and avfoundation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**option** – Custom option passed when initializing format context (opening
    source).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StreamingMediaDecoderCustomIO[¶](#streamingmediadecodercustomio "Permalink to
    this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'class  StreamingMediaDecoderCustomIO  :  private  detail::CustomInput,  public  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")[¶](#_CPPv4N5torio2io29StreamingMediaDecoderCustomIOE
    "Permalink to this definition")'
  prefs: []
  type: TYPE_NORMAL
- en: A subclass of [StreamingMediaDecoder](#classtorio_1_1io_1_1StreamingMediaDecoder)
    which works with custom read function. Can be used for decoding media from memory
    or custom object.
  prefs: []
  type: TYPE_NORMAL
- en: torio::io::[StreamingMediaDecoderCustomIO](#_CPPv4N5torio2io29StreamingMediaDecoderCustomIOE
    "torio::io::StreamingMediaDecoderCustomIO")::StreamingMediaDecoderCustomIO(void  *opaque,
    const  c10::optional<std::string>  &format, int  buffer_size, int  (*read_packet)(void  *opaque,  uint8_t  *buf,  int  buf_size),
    int64_t  (*seek)(void  *opaque,  int64_t  offset,  int  whence)  =  nullptr, const  c10::optional<OptionDict>  &option  =  c10::nullopt)[¶](#_CPPv4N5torio2io29StreamingMediaDecoderCustomIO29StreamingMediaDecoderCustomIOEPvRKN3c108optionalINSt6stringEEEiPFiPvP7uint8_tiEPF7int64_tPv7int64_tiERKN3c108optionalI10OptionDictEE
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Construct [StreamingMediaDecoder](#classtorio_1_1io_1_1StreamingMediaDecoder)
    with custom read and seek functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**opaque** – Custom data used by `read_packet` and `seek` functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**format** – Specify input format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**buffer_size** – The size of the intermediate buffer, which FFmpeg uses to
    pass data to function read_packet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**read_packet** – Custom read function that is called from FFmpeg to read data
    from the destination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**seek** – Optional seek function that is used to seek the destination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**option** – Custom option passed when initializing format context.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query Methods[¶](#query-methods "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: find_best_audio_stream[¶](#find-best-audio-stream "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: int64_t  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")::find_best_audio_stream()  const[¶](#_CPPv4NK5torio2io21StreamingMediaDecoder22find_best_audio_streamEv
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Find a suitable audio stream using heuristics from ffmpeg.
  prefs: []
  type: TYPE_NORMAL
- en: If successful, the index of the best stream (>=0) is returned. Otherwise a negative
    value is returned.
  prefs: []
  type: TYPE_NORMAL
- en: find_best_video_stream[¶](#find-best-video-stream "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: int64_t  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")::find_best_video_stream()  const[¶](#_CPPv4NK5torio2io21StreamingMediaDecoder22find_best_video_streamEv
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Find a suitable video stream using heuristics from ffmpeg.
  prefs: []
  type: TYPE_NORMAL
- en: If successful, the index of the best stream (0>=) is returned. otherwise a negative
    value is returned.
  prefs: []
  type: TYPE_NORMAL
- en: get_metadata[¶](#get-metadata "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OptionDict  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")::get_metadata()  const[¶](#_CPPv4NK5torio2io21StreamingMediaDecoder12get_metadataEv
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Fetch metadata of the source media.
  prefs: []
  type: TYPE_NORMAL
- en: num_src_streams[¶](#num-src-streams "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: int64_t  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")::num_src_streams()  const[¶](#_CPPv4NK5torio2io21StreamingMediaDecoder15num_src_streamsEv
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Fetch the number of source streams found in the input media.
  prefs: []
  type: TYPE_NORMAL
- en: The source streams include not only audio/video streams but also subtitle and
    others.
  prefs: []
  type: TYPE_NORMAL
- en: get_src_stream_info[¶](#get-src-stream-info "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[SrcStreamInfo](#_CPPv4N5torio2io13SrcStreamInfoE "torio::io::SrcStreamInfo")  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")::get_src_stream_info(int  i)  const[¶](#_CPPv4NK5torio2io21StreamingMediaDecoder19get_src_stream_infoEi
    "Permalink to this definition")'
  prefs: []
  type: TYPE_NORMAL
- en: Fetch information about the specified source stream.
  prefs: []
  type: TYPE_NORMAL
- en: The valid value range is `[0, [num_src_streams()](#classtorio_1_1io_1_1StreamingMediaDecoder_1a6b3e5fd480cc50ee5ec9b389641c4512))`.
  prefs: []
  type: TYPE_NORMAL
- en: num_out_streams[¶](#num-out-streams "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: int64_t  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")::num_out_streams()  const[¶](#_CPPv4NK5torio2io21StreamingMediaDecoder15num_out_streamsEv
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Fetch the number of output streams defined by client code.
  prefs: []
  type: TYPE_NORMAL
- en: get_out_stream_info[¶](#get-out-stream-info "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[OutputStreamInfo](#_CPPv4N5torio2io16OutputStreamInfoE "torio::io::OutputStreamInfo")  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")::get_out_stream_info(int  i)  const[¶](#_CPPv4NK5torio2io21StreamingMediaDecoder19get_out_stream_infoEi
    "Permalink to this definition")'
  prefs: []
  type: TYPE_NORMAL
- en: Fetch information about the specified output stream.
  prefs: []
  type: TYPE_NORMAL
- en: The valid value range is `[0, [num_out_streams()](#classtorio_1_1io_1_1StreamingMediaDecoder_1a2675b80361ce5ac9da29bb63105f1135))`.
  prefs: []
  type: TYPE_NORMAL
- en: is_buffer_ready[¶](#is-buffer-ready "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: bool  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")::is_buffer_ready()  const[¶](#_CPPv4NK5torio2io21StreamingMediaDecoder15is_buffer_readyEv
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Check if all the buffers of the output streams have enough decoded frames.
  prefs: []
  type: TYPE_NORMAL
- en: Configure Methods[¶](#configure-methods "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: add_audio_stream[¶](#add-audio-stream "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: void  torio::io::[StreamingMediaDecoder](#_CPPv4N5torio2io21StreamingMediaDecoderE
    "torio::io::StreamingMediaDecoder")::add_audio_stream(int64_t  i, int64_t  frames_per_chunk,
    int64_t  num_chunks, const  c10::optional<std::string>  &filter_desc  =  c10::nullopt,
    const  c10::optional<std::string>  &decoder  =  c10::nullopt, const  c10::optional<OptionDict>  &decoder_option  =  c10::nullopt)[¶](#_CPPv4N5torio2io21StreamingMediaDecoder16add_audio_streamE7int64_t7int64_t7int64_tRKN3c108optionalINSt6stringEEERKN3c108optionalINSt6stringEEERKN3c108optionalI10OptionDictEE
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Define an output audio stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**i** – The index of the source stream.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frames_per_chunk** – Number of frames returned as one chunk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a source stream is exhausted before `frames_per_chunk` frames are buffered,
    the chunk is returned as-is. Thus the number of frames in the chunk may be smaller
    than [PRE0]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"title": "foo",'
  prefs: []
  type: TYPE_NORMAL
- en: '"artist": "bar",'
  prefs: []
  type: TYPE_NORMAL
- en: '"date": "2017"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: AUDIO-SPECIFIC MEMBERS
  prefs: []
  type: TYPE_NORMAL
- en: double  sample_rate  =  0[¶](#_CPPv4N5torio2io13SrcStreamInfo11sample_rateE
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Sample rate.
  prefs: []
  type: TYPE_NORMAL
- en: int  num_channels  =  0[¶](#_CPPv4N5torio2io13SrcStreamInfo12num_channelsE "Permalink
    to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: The number of channels.
  prefs: []
  type: TYPE_NORMAL
- en: VIDEO-SPECIFIC MEMBERS
  prefs: []
  type: TYPE_NORMAL
- en: int  width  =  0[¶](#_CPPv4N5torio2io13SrcStreamInfo5widthE "Permalink to this
    definition")
  prefs: []
  type: TYPE_NORMAL
- en: Width.
  prefs: []
  type: TYPE_NORMAL
- en: int  height  =  0[¶](#_CPPv4N5torio2io13SrcStreamInfo6heightE "Permalink to
    this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Height.
  prefs: []
  type: TYPE_NORMAL
- en: double  frame_rate  =  0[¶](#_CPPv4N5torio2io13SrcStreamInfo10frame_rateE "Permalink
    to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Frame rate.
  prefs: []
  type: TYPE_NORMAL
- en: OutputStreaminfo[¶](#outputstreaminfo "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: struct  OutputStreamInfo[¶](#_CPPv4N5torio2io16OutputStreamInfoE "Permalink
    to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Information about output stream configured by user code.
  prefs: []
  type: TYPE_NORMAL
- en: AUDIO-SPECIFIC MEMBERS
  prefs: []
  type: TYPE_NORMAL
- en: double  sample_rate  =  -1[¶](#_CPPv4N5torio2io16OutputStreamInfo11sample_rateE
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Sample rate.
  prefs: []
  type: TYPE_NORMAL
- en: int  num_channels  =  -1[¶](#_CPPv4N5torio2io16OutputStreamInfo12num_channelsE
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: The number of channels.
  prefs: []
  type: TYPE_NORMAL
- en: VIDEO-SPECIFIC MEMBERS
  prefs: []
  type: TYPE_NORMAL
- en: int  width  =  -1[¶](#_CPPv4N5torio2io16OutputStreamInfo5widthE "Permalink to
    this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Width.
  prefs: []
  type: TYPE_NORMAL
- en: int  height  =  -1[¶](#_CPPv4N5torio2io16OutputStreamInfo6heightE "Permalink
    to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Height.
  prefs: []
  type: TYPE_NORMAL
- en: AVRational  frame_rate  =  {0,  1}[¶](#_CPPv4N5torio2io16OutputStreamInfo10frame_rateE
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Frame rate.
  prefs: []
  type: TYPE_NORMAL
- en: Public Members
  prefs: []
  type: TYPE_NORMAL
- en: int  source_index[¶](#_CPPv4N5torio2io16OutputStreamInfo12source_indexE "Permalink
    to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: The index of the input source stream.
  prefs: []
  type: TYPE_NORMAL
- en: AVMediaType  media_type  =  AVMEDIA_TYPE_UNKNOWN[¶](#_CPPv4N5torio2io16OutputStreamInfo10media_typeE
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: The stream media type.
  prefs: []
  type: TYPE_NORMAL
- en: Please see refer to [the FFmpeg documentation](https://ffmpeg.org/doxygen/4.1/group__lavu__misc.html#ga9a84bba4713dfced21a1a56163be1f48)
    for the available values
  prefs: []
  type: TYPE_NORMAL
- en: '*Todo:*'
  prefs: []
  type: TYPE_NORMAL
- en: Introduce own enum and get rid of FFmpeg dependency
  prefs: []
  type: TYPE_NORMAL
- en: int  format  =  -1[¶](#_CPPv4N5torio2io16OutputStreamInfo6formatE "Permalink
    to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Media format. AVSampleFormat for audio or AVPixelFormat for video.
  prefs: []
  type: TYPE_NORMAL
- en: std::string  filter_description  =  {}[¶](#_CPPv4N5torio2io16OutputStreamInfo18filter_descriptionE
    "Permalink to this definition")
  prefs: []
  type: TYPE_NORMAL
- en: Filter graph definition, such as `"aresample=16000,aformat=sample_fmts=fltp"`.
  prefs: []
  type: TYPE_NORMAL
