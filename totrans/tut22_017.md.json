["```py\nimport torch\nimport math \n```", "```py\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.empty](https://pytorch.org/docs/stable/generated/torch.empty.html#torch.empty \"torch.empty\")(3, 4)\nprint(type([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\nprint([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n<class 'torch.Tensor'>\ntensor([[6.0864e-06, 0.0000e+00, 1.9431e-19, 1.1024e+24],\n        [8.8221e-04, 0.0000e+00, 3.9172e-05, 0.0000e+00],\n        [1.1978e-35, 0.0000e+00, 7.7463e-37, 0.0000e+00]]) \n```", "```py\n[zeros](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")(2, 3)\nprint([zeros](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 3)\nprint([ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[torch.manual_seed](https://pytorch.org/docs/stable/generated/torch.manual_seed.html#torch.manual_seed \"torch.manual_seed\")(1729)\n[random](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 3)\nprint([random](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[0., 0., 0.],\n        [0., 0., 0.]])\ntensor([[1., 1., 1.],\n        [1., 1., 1.]])\ntensor([[0.3126, 0.3791, 0.3087],\n        [0.0736, 0.4216, 0.0691]]) \n```", "```py\n[torch.manual_seed](https://pytorch.org/docs/stable/generated/torch.manual_seed.html#torch.manual_seed \"torch.manual_seed\")(1729)\n[random1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 3)\nprint([random1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[random2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 3)\nprint([random2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[torch.manual_seed](https://pytorch.org/docs/stable/generated/torch.manual_seed.html#torch.manual_seed \"torch.manual_seed\")(1729)\n[random3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 3)\nprint([random3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[random4](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 3)\nprint([random4](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[0.3126, 0.3791, 0.3087],\n        [0.0736, 0.4216, 0.0691]])\ntensor([[0.2332, 0.4047, 0.2162],\n        [0.9927, 0.4128, 0.5938]])\ntensor([[0.3126, 0.3791, 0.3087],\n        [0.0736, 0.4216, 0.0691]])\ntensor([[0.2332, 0.4047, 0.2162],\n        [0.9927, 0.4128, 0.5938]]) \n```", "```py\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.empty](https://pytorch.org/docs/stable/generated/torch.empty.html#torch.empty \"torch.empty\")(2, 2, 3)\nprint([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[empty_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.empty_like](https://pytorch.org/docs/stable/generated/torch.empty_like.html#torch.empty_like \"torch.empty_like\")([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([empty_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([empty_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[zeros_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.zeros_like](https://pytorch.org/docs/stable/generated/torch.zeros_like.html#torch.zeros_like \"torch.zeros_like\")([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([zeros_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([zeros_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[ones_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones_like](https://pytorch.org/docs/stable/generated/torch.ones_like.html#torch.ones_like \"torch.ones_like\")([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([ones_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([ones_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[rand_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand_like](https://pytorch.org/docs/stable/generated/torch.rand_like.html#torch.rand_like \"torch.rand_like\")([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([rand_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([rand_like_x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntorch.Size([2, 2, 3])\ntensor([[[ 8.7595e-05,  0.0000e+00,  1.4013e-45],\n         [ 0.0000e+00,  7.7463e-37,  0.0000e+00]],\n\n        [[ 0.0000e+00,  0.0000e+00,  8.6286e-05],\n         [ 0.0000e+00, -1.7707e+28,  4.5849e-41]]])\ntorch.Size([2, 2, 3])\ntensor([[[ 0.0000e+00,  0.0000e+00,  1.4013e-45],\n         [ 0.0000e+00,  7.7463e-37,  0.0000e+00]],\n\n        [[ 0.0000e+00,  0.0000e+00,  8.6408e-05],\n         [ 0.0000e+00, -1.7707e+28,  4.5849e-41]]])\ntorch.Size([2, 2, 3])\ntensor([[[0., 0., 0.],\n         [0., 0., 0.]],\n\n        [[0., 0., 0.],\n         [0., 0., 0.]]])\ntorch.Size([2, 2, 3])\ntensor([[[1., 1., 1.],\n         [1., 1., 1.]],\n\n        [[1., 1., 1.],\n         [1., 1., 1.]]])\ntorch.Size([2, 2, 3])\ntensor([[[0.6128, 0.1519, 0.0453],\n         [0.5035, 0.9978, 0.3884]],\n\n        [[0.6929, 0.1703, 0.1384],\n         [0.4759, 0.7481, 0.0361]]]) \n```", "```py\n[some_constants](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([[3.1415926, 2.71828], [1.61803, 0.0072897]])\nprint([some_constants](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[some_integers](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")((2, 3, 5, 7, 11, 13, 17, 19))\nprint([some_integers](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[more_integers](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")(((2, 4, 6), [3, 6, 9]))\nprint([more_integers](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[3.1416, 2.7183],\n        [1.6180, 0.0073]])\ntensor([ 2,  3,  5,  7, 11, 13, 17, 19])\ntensor([[2, 4, 6],\n        [3, 6, 9]]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")((2, 3), dtype=[torch.int16](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"))\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")((2, 3), dtype=[torch.float64](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\")) * 20.\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").to([torch.int32](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"))\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[1, 1, 1],\n        [1, 1, 1]], dtype=torch.int16)\ntensor([[ 0.9956,  1.4148,  5.8364],\n        [11.2406, 11.2083, 11.6692]], dtype=torch.float64)\ntensor([[ 0,  1,  5],\n        [11, 11, 11]], dtype=torch.int32) \n```", "```py\n[ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")(2, 2) + 1\n[twos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 2) * 2\n[threes](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = ([torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 2) * 7 - 1) / 2\n[fours](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [twos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") ** 2\n[sqrt2s](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [twos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") ** 0.5\n\nprint([ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([twos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([threes](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([fours](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([sqrt2s](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[1., 1.],\n        [1., 1.]])\ntensor([[2., 2.],\n        [2., 2.]])\ntensor([[3., 3.],\n        [3., 3.]])\ntensor([[4., 4.],\n        [4., 4.]])\ntensor([[1.4142, 1.4142],\n        [1.4142, 1.4142]]) \n```", "```py\n[powers2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [twos](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") ** [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([[1, 2], [3, 4]])\nprint([powers2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[fives](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [fours](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\nprint([fives](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[dozens](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [threes](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [fours](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\nprint([dozens](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[ 2.,  4.],\n        [ 8., 16.]])\ntensor([[5., 5.],\n        [5., 5.]])\ntensor([[12., 12.],\n        [12., 12.]]) \n```", "```py\na  =  torch.rand(2,  3)\nb  =  torch.rand(3,  2)\n\nprint(a  *  b) \n```", "```py\n[rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 4)\n[doubled](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * ([torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(1, 4) * 2)\n\nprint([rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([doubled](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[0.6146, 0.5999, 0.5013, 0.9397],\n        [0.8656, 0.5207, 0.6865, 0.3614]])\ntensor([[1.2291, 1.1998, 1.0026, 1.8793],\n        [1.7312, 1.0413, 1.3730, 0.7228]]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") =     [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(4, 3, 2)\n\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(   3, 2) # 3rd & 2nd dims identical to a, dim 1 absent\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(   3, 1) # 3rd dim = 1, 2nd dim identical to a\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(   1, 2) # 3rd dim identical to a, 2nd dim = 1\nprint([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[[0.6493, 0.2633],\n         [0.4762, 0.0548],\n         [0.2024, 0.5731]],\n\n        [[0.6493, 0.2633],\n         [0.4762, 0.0548],\n         [0.2024, 0.5731]],\n\n        [[0.6493, 0.2633],\n         [0.4762, 0.0548],\n         [0.2024, 0.5731]],\n\n        [[0.6493, 0.2633],\n         [0.4762, 0.0548],\n         [0.2024, 0.5731]]])\ntensor([[[0.7191, 0.7191],\n         [0.4067, 0.4067],\n         [0.7301, 0.7301]],\n\n        [[0.7191, 0.7191],\n         [0.4067, 0.4067],\n         [0.7301, 0.7301]],\n\n        [[0.7191, 0.7191],\n         [0.4067, 0.4067],\n         [0.7301, 0.7301]],\n\n        [[0.7191, 0.7191],\n         [0.4067, 0.4067],\n         [0.7301, 0.7301]]])\ntensor([[[0.6276, 0.7357],\n         [0.6276, 0.7357],\n         [0.6276, 0.7357]],\n\n        [[0.6276, 0.7357],\n         [0.6276, 0.7357],\n         [0.6276, 0.7357]],\n\n        [[0.6276, 0.7357],\n         [0.6276, 0.7357],\n         [0.6276, 0.7357]],\n\n        [[0.6276, 0.7357],\n         [0.6276, 0.7357],\n         [0.6276, 0.7357]]]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") =     [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(4, 3, 2)\n\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(4, 3)    # dimensions must match last-to-first\n\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(   2, 3) # both 3rd & 2nd dims different\n\n[d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")((0, ))   # can't broadcast with an empty tensor \n```", "```py\n# common functions\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 4) * 2 - 1\nprint('Common functions:')\nprint([torch.abs](https://pytorch.org/docs/stable/generated/torch.abs.html#torch.abs \"torch.abs\")([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\nprint([torch.ceil](https://pytorch.org/docs/stable/generated/torch.ceil.html#torch.ceil \"torch.ceil\")([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\nprint([torch.floor](https://pytorch.org/docs/stable/generated/torch.floor.html#torch.floor \"torch.floor\")([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\nprint([torch.clamp](https://pytorch.org/docs/stable/generated/torch.clamp.html#torch.clamp \"torch.clamp\")([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), -0.5, 0.5))\n\n# trigonometric functions and their inverses\n[angles](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([0, math.pi / 4, math.pi / 2, 3 * math.pi / 4])\n[sines](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.sin](https://pytorch.org/docs/stable/generated/torch.sin.html#torch.sin \"torch.sin\")([angles](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[inverses](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.asin](https://pytorch.org/docs/stable/generated/torch.asin.html#torch.asin \"torch.asin\")([sines](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint('\\nSine and arcsine:')\nprint([angles](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([sines](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([inverses](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n# bitwise operations\nprint('\\nBitwise XOR:')\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([1, 5, 11])\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([2, 7, 10])\nprint([torch.bitwise_xor](https://pytorch.org/docs/stable/generated/torch.bitwise_xor.html#torch.bitwise_xor \"torch.bitwise_xor\")([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\n\n# comparisons:\nprint('\\nBroadcasted, element-wise equality comparison:')\n[d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([[1., 2.], [3., 4.]])\n[e](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(1, 2)  # many comparison ops support broadcasting!\nprint([torch.eq](https://pytorch.org/docs/stable/generated/torch.eq.html#torch.eq \"torch.eq\")([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [e](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) # returns a tensor of type bool\n\n# reductions:\nprint('\\nReduction ops:')\nprint([torch.max](https://pytorch.org/docs/stable/generated/torch.max.html#torch.max \"torch.max\")([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))        # returns a single-element tensor\nprint([torch.max](https://pytorch.org/docs/stable/generated/torch.max.html#torch.max \"torch.max\")([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")).item()) # extracts the value from the returned tensor\nprint([torch.mean](https://pytorch.org/docs/stable/generated/torch.mean.html#torch.mean \"torch.mean\")([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))       # average\nprint([torch.std](https://pytorch.org/docs/stable/generated/torch.std.html#torch.std \"torch.std\")([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))        # standard deviation\nprint([torch.prod](https://pytorch.org/docs/stable/generated/torch.prod.html#torch.prod \"torch.prod\")([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))       # product of all numbers\nprint([torch.unique](https://pytorch.org/docs/stable/generated/torch.unique.html#torch.unique \"torch.unique\")([torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([1, 2, 1, 2, 1, 2]))) # filter unique elements\n\n# vector and linear algebra operations\n[v1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([1., 0., 0.])         # x unit vector\n[v2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([0., 1., 0.])         # y unit vector\n[m1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2)                   # random matrix\n[m2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([[3., 0.], [0., 3.]]) # three times identity matrix\n\nprint('\\nVectors & Matrices:')\nprint([torch.cross](https://pytorch.org/docs/stable/generated/torch.cross.html#torch.cross \"torch.cross\")([v2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [v1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))) # negative of z unit vector (v1 x v2 == -v2 x v1)\nprint([m1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[m3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.matmul](https://pytorch.org/docs/stable/generated/torch.matmul.html#torch.matmul \"torch.matmul\")([m1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [m2](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([m3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))                  # 3 times m1\nprint([torch.svd](https://pytorch.org/docs/stable/generated/torch.svd.html#torch.svd \"torch.svd\")([m3](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))       # singular value decomposition \n```", "```py\nCommon functions:\ntensor([[0.9238, 0.5724, 0.0791, 0.2629],\n        [0.1986, 0.4439, 0.6434, 0.4776]])\ntensor([[-0., -0., 1., -0.],\n        [-0., 1., 1., -0.]])\ntensor([[-1., -1.,  0., -1.],\n        [-1.,  0.,  0., -1.]])\ntensor([[-0.5000, -0.5000,  0.0791, -0.2629],\n        [-0.1986,  0.4439,  0.5000, -0.4776]])\n\nSine and arcsine:\ntensor([0.0000, 0.7854, 1.5708, 2.3562])\ntensor([0.0000, 0.7071, 1.0000, 0.7071])\ntensor([0.0000, 0.7854, 1.5708, 0.7854])\n\nBitwise XOR:\ntensor([3, 2, 1])\n\nBroadcasted, element-wise equality comparison:\ntensor([[ True, False],\n        [False, False]])\n\nReduction ops:\ntensor(4.)\n4.0\ntensor(2.5000)\ntensor(1.2910)\ntensor(24.)\ntensor([1, 2])\n\nVectors & Matrices:\n/var/lib/jenkins/workspace/beginner_source/introyt/tensors_deeper_tutorial.py:462: UserWarning:\n\nUsing torch.cross without specifying the dim arg is deprecated.\nPlease either pass the dim explicitly or simply use torch.linalg.cross.\nThe default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at ../aten/src/ATen/native/Cross.cpp:63.)\n\ntensor([ 0.,  0., -1.])\ntensor([[0.7375, 0.8328],\n        [0.8444, 0.2941]])\ntensor([[2.2125, 2.4985],\n        [2.5332, 0.8822]])\ntorch.return_types.svd(\nU=tensor([[-0.7889, -0.6145],\n        [-0.6145,  0.7889]]),\nS=tensor([4.1498, 1.0548]),\nV=tensor([[-0.7957,  0.6056],\n        [-0.6056, -0.7957]])) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([0, math.pi / 4, math.pi / 2, 3 * math.pi / 4])\nprint('a:')\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([torch.sin](https://pytorch.org/docs/stable/generated/torch.sin.html#torch.sin \"torch.sin\")([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))   # this operation creates a new tensor in memory\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))              # a has not changed\n\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([0, math.pi / 4, math.pi / 2, 3 * math.pi / 4])\nprint('\\nb:')\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint(torch.sin_([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))  # note the underscore\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))              # b has changed \n```", "```py\na:\ntensor([0.0000, 0.7854, 1.5708, 2.3562])\ntensor([0.0000, 0.7071, 1.0000, 0.7071])\ntensor([0.0000, 0.7854, 1.5708, 2.3562])\n\nb:\ntensor([0.0000, 0.7854, 1.5708, 2.3562])\ntensor([0.0000, 0.7071, 1.0000, 0.7071])\ntensor([0.0000, 0.7071, 1.0000, 0.7071]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 2)\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2)\n\nprint('Before:')\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint('\\nAfter adding:')\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").add_([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint('\\nAfter multiplying')\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").mul_([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nBefore:\ntensor([[1., 1.],\n        [1., 1.]])\ntensor([[0.3788, 0.4567],\n        [0.0649, 0.6677]])\n\nAfter adding:\ntensor([[1.3788, 1.4567],\n        [1.0649, 1.6677]])\ntensor([[1.3788, 1.4567],\n        [1.0649, 1.6677]])\ntensor([[0.3788, 0.4567],\n        [0.0649, 0.6677]])\n\nAfter multiplying\ntensor([[0.1435, 0.2086],\n        [0.0042, 0.4459]])\ntensor([[0.1435, 0.2086],\n        [0.0042, 0.4459]]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2)\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2)\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")(2, 2)\nold_id = id([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.matmul](https://pytorch.org/docs/stable/generated/torch.matmul.html#torch.matmul \"torch.matmul\")([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), out=[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))                # contents of c have changed\n\nassert [c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") is [d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")           # test c & d are same object, not just containing equal values\nassert id([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) == old_id  # make sure that our new c is the same object as the old one\n\n[torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2, out=[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) # works for creation too!\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))                # c has changed again\nassert id([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) == old_id  # still the same object! \n```", "```py\ntensor([[0., 0.],\n        [0., 0.]])\ntensor([[0.3653, 0.8699],\n        [0.2364, 0.3604]])\ntensor([[0.0776, 0.4004],\n        [0.9877, 0.0352]]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 2)\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0][1] = 561  # we change a...\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))       # ...and b is also altered \n```", "```py\ntensor([[  1., 561.],\n        [  1.,   1.]]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(2, 2)\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").clone()\n\nassert [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") is not [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")      # different objects in memory...\nprint([torch.eq](https://pytorch.org/docs/stable/generated/torch.eq.html#torch.eq \"torch.eq\")([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")))  # ...but still with the same contents!\n\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0][1] = 561          # a changes...\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))               # ...but b is still all ones \n```", "```py\ntensor([[True, True],\n        [True, True]])\ntensor([[1., 1.],\n        [1., 1.]]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2, requires_grad=True) # turn on autograd\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").clone()\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").detach().clone()\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[0.0905, 0.4485],\n        [0.8740, 0.2526]], requires_grad=True)\ntensor([[0.0905, 0.4485],\n        [0.8740, 0.2526]], grad_fn=<CloneBackward0>)\ntensor([[0.0905, 0.4485],\n        [0.8740, 0.2526]])\ntensor([[0.0905, 0.4485],\n        [0.8740, 0.2526]], requires_grad=True) \n```", "```py\nif [torch.cuda.is_available](https://pytorch.org/docs/stable/generated/torch.cuda.is_available.html#torch.cuda.is_available \"torch.cuda.is_available\")():\n    print('We have a GPU!')\nelse:\n    print('Sorry, CPU only.') \n```", "```py\nWe have a GPU! \n```", "```py\nif [torch.cuda.is_available](https://pytorch.org/docs/stable/generated/torch.cuda.is_available.html#torch.cuda.is_available \"torch.cuda.is_available\")():\n    [gpu_rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2, device='cuda')\n    print([gpu_rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nelse:\n    print('Sorry, CPU only.') \n```", "```py\ntensor([[0.3344, 0.2640],\n        [0.2119, 0.0582]], device='cuda:0') \n```", "```py\nif [torch.cuda.is_available](https://pytorch.org/docs/stable/generated/torch.cuda.is_available.html#torch.cuda.is_available \"torch.cuda.is_available\")():\n    [my_device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\") = [torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")('cuda')\nelse:\n    [my_device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\") = [torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")('cpu')\nprint('Device: {}'.format([my_device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")))\n\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2, device=[my_device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\"))\nprint([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nDevice: cuda\ntensor([[0.0024, 0.6778],\n        [0.2441, 0.6812]], device='cuda:0') \n```", "```py\n[y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2)\n[y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").to([my_device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")) \n```", "```py\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2)\n[y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2, device='gpu')\nz = [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")  # exception will be thrown \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 226, 226)\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").unsqueeze(0)\n\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape) \n```", "```py\ntorch.Size([3, 226, 226])\ntorch.Size([1, 3, 226, 226]) \n```", "```py\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(1, 1, 1, 1, 1)\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[[[[0.2347]]]]]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(1, 20)\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").squeeze(0)\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 2)\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\n\n[d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").squeeze(0)\nprint([d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape) \n```", "```py\ntorch.Size([1, 20])\ntensor([[0.1899, 0.4067, 0.1519, 0.1506, 0.9585, 0.7756, 0.8973, 0.4929, 0.2367,\n         0.8194, 0.4509, 0.2690, 0.8381, 0.8207, 0.6818, 0.5057, 0.9335, 0.9769,\n         0.2792, 0.3277]])\ntorch.Size([20])\ntensor([0.1899, 0.4067, 0.1519, 0.1506, 0.9585, 0.7756, 0.8973, 0.4929, 0.2367,\n        0.8194, 0.4509, 0.2690, 0.8381, 0.8207, 0.6818, 0.5057, 0.9335, 0.9769,\n        0.2792, 0.3277])\ntorch.Size([2, 2])\ntorch.Size([2, 2]) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(4, 3, 2)\n\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(   3, 1) # 3rd dim = 1, 2nd dim identical to a\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n[a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(4, 3, 2)\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(   3)     # trying to multiply a * b will give a runtime error\n[c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").unsqueeze(1)       # change to a 2-dimensional tensor, adding new dim at the end\nprint([c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([a](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") * [c](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))             # broadcasting works again! \n```", "```py\ntorch.Size([3, 1])\ntensor([[[0.1891, 0.1891],\n         [0.3952, 0.3952],\n         [0.9176, 0.9176]],\n\n        [[0.1891, 0.1891],\n         [0.3952, 0.3952],\n         [0.9176, 0.9176]],\n\n        [[0.1891, 0.1891],\n         [0.3952, 0.3952],\n         [0.9176, 0.9176]],\n\n        [[0.1891, 0.1891],\n         [0.3952, 0.3952],\n         [0.9176, 0.9176]]]) \n```", "```py\n[batch_me](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(3, 226, 226)\nprint([batch_me](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\n[batch_me](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").unsqueeze_(0)\nprint([batch_me](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape) \n```", "```py\ntorch.Size([3, 226, 226])\ntorch.Size([1, 3, 226, 226]) \n```", "```py\n[output3d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(6, 20, 20)\nprint([output3d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\n\n[input1d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [output3d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").reshape(6 * 20 * 20)\nprint([input1d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\n\n# can also call it as a method on the torch module:\nprint([torch.reshape](https://pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape \"torch.reshape\")([output3d](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), (6 * 20 * 20,)).shape) \n```", "```py\ntorch.Size([6, 20, 20])\ntorch.Size([2400])\ntorch.Size([2400]) \n```", "```py\nimport numpy as np\n\nnumpy_array = np.[ones](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")((2, 3))\nprint(numpy_array)\n\n[pytorch_tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.from_numpy](https://pytorch.org/docs/stable/generated/torch.from_numpy.html#torch.from_numpy \"torch.from_numpy\")(numpy_array)\nprint([pytorch_tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n[[1\\. 1\\. 1.]\n [1\\. 1\\. 1.]]\ntensor([[1., 1., 1.],\n        [1., 1., 1.]], dtype=torch.float64) \n```", "```py\n[pytorch_rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.rand](https://pytorch.org/docs/stable/generated/torch.rand.html#torch.rand \"torch.rand\")(2, 3)\nprint([pytorch_rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\nnumpy_rand = [pytorch_rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").numpy()\nprint(numpy_rand) \n```", "```py\ntensor([[0.8716, 0.2459, 0.3499],\n        [0.2853, 0.9091, 0.5695]])\n[[0.87163675 0.2458961  0.34993553]\n [0.2853077  0.90905803 0.5695162 ]] \n```", "```py\nnumpy_array[1, 1] = 23\nprint([pytorch_tensor](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[pytorch_rand](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[1, 1] = 17\nprint(numpy_rand) \n```", "```py\ntensor([[ 1.,  1.,  1.],\n        [ 1., 23.,  1.]], dtype=torch.float64)\n[[ 0.87163675  0.2458961   0.34993553]\n [ 0.2853077  17\\.          0.5695162 ]] \n```"]