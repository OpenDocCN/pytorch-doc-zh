- en: torch.random
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/docs/stable/random.html](https://pytorch.org/docs/stable/random.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Forks the RNG, so that when you return, the RNG is reset to the state that it
    was previously in.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**devices** (*iterable* *of* *Device IDs*) – devices for which to fork the
    RNG. CPU RNG state is always forked. By default, [`fork_rng()`](#torch.random.fork_rng
    "torch.random.fork_rng") operates on all devices, but will emit a warning if your
    machine has a lot of devices, since this function will run very slowly in that
    case. If you explicitly specify devices, this warning will be suppressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**enabled** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")) – if `False`, the RNG is not forked. This is a convenience
    argument for easily disabling the context manager without having to delete it
    and unindent your Python code under it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**deivce_type** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – device type str, default is cuda. As for custom device,
    see details in [Note: support the custom device with privateuse1]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[*Generator*](https://docs.python.org/3/library/typing.html#typing.Generator
    "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Returns the random number generator state as a torch.ByteTensor.
  prefs: []
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns the initial seed for generating random numbers as a Python long.
  prefs: []
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sets the seed for generating random numbers. Returns a torch.Generator object.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**seed** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – The desired seed. Value must be within the inclusive range
    [-0x8000_0000_0000_0000, 0xffff_ffff_ffff_ffff]. Otherwise, a RuntimeError is
    raised. Negative inputs are remapped to positive values with the formula 0xffff_ffff_ffff_ffff
    + seed.'
  prefs: []
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[*Generator*](generated/torch.Generator.html#torch.Generator "torch._C.Generator")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Sets the seed for generating random numbers to a non-deterministic random number.
    Returns a 64 bit number used to seed the RNG.
  prefs: []
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Sets the random number generator state.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**new_state** (*torch.ByteTensor*) – The desired state'
  prefs: []
  type: TYPE_NORMAL
