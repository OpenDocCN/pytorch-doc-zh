["```py\n@torch.jit.script\ndef compute_z(x):\n    return torch.mm(x, self.w_z)\n\n@torch.jit.script\ndef forward(x):\n    # launch compute_z asynchronously:\n    fut = torch.jit._fork(compute_z, x)\n    # execute the next operation in parallel to compute_z:\n    y = torch.mm(x, self.w_y)\n    # wait for the result of compute_z:\n    z = torch.jit._wait(fut)\n    return y + z \n```", "```py\nimport timeit\nruntimes = []\nthreads = [1] + [t for t in range(2, 49, 2)]\nfor t in threads:\n    torch.set_num_threads(t)\n    r = timeit.timeit(setup = \"import torch; x = torch.randn(1024, 1024); y = torch.randn(1024, 1024)\", stmt=\"torch.mm(x, y)\", number=100)\n    runtimes.append(r)\n# ... plotting (threads, runtimes) ... \n```"]