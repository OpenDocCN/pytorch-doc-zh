["```py\nimport torch\n\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.ones](https://pytorch.org/docs/stable/generated/torch.ones.html#torch.ones \"torch.ones\")(5)  # input tensor\n[y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")(3)  # expected output\n[w](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(5, 3, requires_grad=True)\n[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(3, requires_grad=True)\n[z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.matmul](https://pytorch.org/docs/stable/generated/torch.matmul.html#torch.matmul \"torch.matmul\")([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [w](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))+[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n[loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.nn.functional.binary_cross_entropy_with_logits](https://pytorch.org/docs/stable/generated/torch.nn.functional.binary_cross_entropy_with_logits.html#torch.nn.functional.binary_cross_entropy_with_logits \"torch.nn.functional.binary_cross_entropy_with_logits\")([z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [y](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nprint(f\"Gradient function for z = {[z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad_fn}\")\nprint(f\"Gradient function for loss = {[loss](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").grad_fn}\") \n```", "```py\nGradient function for z = <AddBackward0 object at 0x7f1bd884c130>\nGradient function for loss = <BinaryCrossEntropyWithLogitsBackward0 object at 0x7f1bd884c670> \n```", "```py\n[loss.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")()\nprint([w.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\nprint([b.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ntensor([[0.3313, 0.0626, 0.2530],\n        [0.3313, 0.0626, 0.2530],\n        [0.3313, 0.0626, 0.2530],\n        [0.3313, 0.0626, 0.2530],\n        [0.3313, 0.0626, 0.2530]])\ntensor([0.3313, 0.0626, 0.2530]) \n```", "```py\n[z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.matmul](https://pytorch.org/docs/stable/generated/torch.matmul.html#torch.matmul \"torch.matmul\")([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [w](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))+[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\nprint([z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").requires_grad)\n\nwith [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n    [z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.matmul](https://pytorch.org/docs/stable/generated/torch.matmul.html#torch.matmul \"torch.matmul\")([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [w](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))+[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\nprint([z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").requires_grad) \n```", "```py\nTrue\nFalse \n```", "```py\n[z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.matmul](https://pytorch.org/docs/stable/generated/torch.matmul.html#torch.matmul \"torch.matmul\")([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [w](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))+[b](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n[z_det](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [z](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").detach()\nprint([z_det](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").requires_grad) \n```", "```py\nFalse \n```", "```py\n[inp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.eye](https://pytorch.org/docs/stable/generated/torch.eye.html#torch.eye \"torch.eye\")(4, 5, requires_grad=True)\n[out](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = ([inp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")+1).pow(2).t()\n[out.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")([torch.ones_like](https://pytorch.org/docs/stable/generated/torch.ones_like.html#torch.ones_like \"torch.ones_like\")([out](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), retain_graph=True)\nprint(f\"First call\\n{[inp.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}\")\n[out.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")([torch.ones_like](https://pytorch.org/docs/stable/generated/torch.ones_like.html#torch.ones_like \"torch.ones_like\")([out](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), retain_graph=True)\nprint(f\"\\nSecond call\\n{[inp.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}\")\n[inp.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").zero_()\n[out.backward](https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html#torch.Tensor.backward \"torch.Tensor.backward\")([torch.ones_like](https://pytorch.org/docs/stable/generated/torch.ones_like.html#torch.ones_like \"torch.ones_like\")([out](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), retain_graph=True)\nprint(f\"\\nCall after zeroing gradients\\n{[inp.grad](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")}\") \n```", "```py\nFirst call\ntensor([[4., 2., 2., 2., 2.],\n        [2., 4., 2., 2., 2.],\n        [2., 2., 4., 2., 2.],\n        [2., 2., 2., 4., 2.]])\n\nSecond call\ntensor([[8., 4., 4., 4., 4.],\n        [4., 8., 4., 4., 4.],\n        [4., 4., 8., 4., 4.],\n        [4., 4., 4., 8., 4.]])\n\nCall after zeroing gradients\ntensor([[4., 2., 2., 2., 2.],\n        [2., 4., 2., 2., 2.],\n        [2., 2., 4., 2., 2.],\n        [2., 2., 2., 4., 2.]]) \n```"]