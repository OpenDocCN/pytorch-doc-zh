- en: torchaudio¶
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/torchaudio.html](https://pytorch.org/audio/stable/torchaudio.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I/O[¶](#i-o "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`torchaudio` top-level module provides the following functions that make it
    easy to handle audio data.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`info`](generated/torchaudio.info.html#torchaudio.info "torchaudio.info")
    | Get signal information of an audio file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`load`](generated/torchaudio.load.html#torchaudio.load "torchaudio.load")
    | Load audio data from source. |'
  prefs: []
  type: TYPE_TB
- en: '| [`save`](generated/torchaudio.save.html#torchaudio.save "torchaudio.save")
    | Save audio data to file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`list_audio_backends`](generated/torchaudio.list_audio_backends.html#torchaudio.list_audio_backends
    "torchaudio.list_audio_backends") | List available backends |'
  prefs: []
  type: TYPE_TB
- en: '## Backend and Dispatcher[¶](#backend-and-dispatcher "Permalink to this heading")'
  prefs: []
  type: TYPE_NORMAL
- en: Decoding and encoding media is highly elaborated process. Therefore, TorchAudio
    relies on third party libraries to perform these operations. These third party
    libraries are called `backend`, and currently TorchAudio integrates the following
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [Installation](./installation.html) for how to enable backends.
  prefs: []
  type: TYPE_NORMAL
- en: Conventionally, TorchAudio has had its I/O backend set globally at runtime based
    on availability. However, this approach does not allow applications to use different
    backends, and it is not well-suited for large codebases.
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, in v2.0, we introduced a dispatcher, a new mechanism to allow
    users to choose a backend for each function call.
  prefs: []
  type: TYPE_NORMAL
- en: When dispatcher mode is enabled, all the I/O functions accept extra keyward
    argument `backend`, which specifies the desired backend. If the specified backend
    is not available, the function call will fail.
  prefs: []
  type: TYPE_NORMAL
- en: If a backend is not explicitly chosen, the functions will select a backend to
    use given order of precedence and library availability.
  prefs: []
  type: TYPE_NORMAL
- en: The following table summarizes the backends.
  prefs: []
  type: TYPE_NORMAL
- en: '| Priority | Backend | Supported OS | Note |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | FFmpeg | Linux, macOS, Windows | Use [`get_audio_decoders()`](generated/torchaudio.utils.ffmpeg_utils.html#torchaudio.utils.ffmpeg_utils.get_audio_decoders
    "torchaudio.utils.ffmpeg_utils.get_audio_decoders") and [`get_audio_encoders()`](generated/torchaudio.utils.ffmpeg_utils.html#torchaudio.utils.ffmpeg_utils.get_audio_encoders
    "torchaudio.utils.ffmpeg_utils.get_audio_encoders") to retrieve the supported
    codecs.This backend Supports various protocols, such as HTTPS and MP4, and file-like
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | SoX | Linux, macOS | Use [`list_read_formats()`](generated/torchaudio.utils.sox_utils.html#torchaudio.utils.sox_utils.list_read_formats
    "torchaudio.utils.sox_utils.list_read_formats") and [`list_write_formats()`](generated/torchaudio.utils.sox_utils.html#torchaudio.utils.sox_utils.list_write_formats
    "torchaudio.utils.sox_utils.list_write_formats") to retrieve the supported codecs.This
    backend does *not* support file-like objects. |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | SoundFile | Linux, macOS, Windows | Please refer to [the official document](https://pysoundfile.readthedocs.io/)
    for the supported codecs.This backend supports file-like objects. |'
  prefs: []
  type: TYPE_TB
- en: '### Dispatcher Migration[¶](#dispatcher-migration "Permalink to this heading")'
  prefs: []
  type: TYPE_NORMAL
- en: We are migrating the I/O functions to use the dispatcher mechanism, and this
    incurs multiple changes, some of which involve backward-compatibility-breaking
    changes, and require users to change their function call.
  prefs: []
  type: TYPE_NORMAL
- en: The (planned) changes are as follows. For up-to-date information, please refer
    to [https://github.com/pytorch/audio/issues/2950](https://github.com/pytorch/audio/issues/2950)
  prefs: []
  type: TYPE_NORMAL
- en: In 2.0, audio I/O backend dispatcher was introduced. Users can opt-in to using
    dispatcher by setting the environment variable `TORCHAUDIO_USE_BACKEND_DISPATCHER=1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 2.1, the disptcher became the default mechanism for I/O.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 2.2, the legacy global backend mechanism is removed. Utility functions `get_audio_backend()`
    and `set_audio_backend()` became no-op.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Furthermore, we removed file-like object support from libsox backend, as this
    is better supported by FFmpeg backend and makes the build process simpler. Therefore,
    beginning with 2.1, FFmpeg and Soundfile are the sole backends that support file-like
    objects.
  prefs: []
  type: TYPE_NORMAL
