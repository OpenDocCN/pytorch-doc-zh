- en: torchaudio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: torchaudio
- en: 原文：[https://pytorch.org/audio/stable/torchaudio.html](https://pytorch.org/audio/stable/torchaudio.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/audio/stable/torchaudio.html](https://pytorch.org/audio/stable/torchaudio.html)
- en: I/O[](#i-o "Permalink to this heading")
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: I/O[](#i-o "Permalink to this heading")
- en: '`torchaudio` top-level module provides the following functions that make it
    easy to handle audio data.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`torchaudio`顶级模块提供了以下函数，使处理音频数据变得容易。'
- en: '| [`info`](generated/torchaudio.info.html#torchaudio.info "torchaudio.info")
    | Get signal information of an audio file. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`info`](generated/torchaudio.info.html#torchaudio.info "torchaudio.info")
    | 获取音频文件的信号信息。 |'
- en: '| [`load`](generated/torchaudio.load.html#torchaudio.load "torchaudio.load")
    | Load audio data from source. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`load`](generated/torchaudio.load.html#torchaudio.load "torchaudio.load")
    | 从源加载音频数据。 |'
- en: '| [`save`](generated/torchaudio.save.html#torchaudio.save "torchaudio.save")
    | Save audio data to file. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`save`](generated/torchaudio.save.html#torchaudio.save "torchaudio.save")
    | 将音频数据保存到文件。 |'
- en: '| [`list_audio_backends`](generated/torchaudio.list_audio_backends.html#torchaudio.list_audio_backends
    "torchaudio.list_audio_backends") | List available backends |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`list_audio_backends`](generated/torchaudio.list_audio_backends.html#torchaudio.list_audio_backends
    "torchaudio.list_audio_backends") | 列出可用的后端 |'
- en: '## Backend and Dispatcher[](#backend-and-dispatcher "Permalink to this heading")'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '## 后端和调度程序[](#backend-and-dispatcher "Permalink to this heading")'
- en: Decoding and encoding media is highly elaborated process. Therefore, TorchAudio
    relies on third party libraries to perform these operations. These third party
    libraries are called `backend`, and currently TorchAudio integrates the following
    libraries.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 解码和编码媒体是一个非常复杂的过程。因此，TorchAudio依赖于第三方库来执行这些操作。这些第三方库称为`backend`，目前TorchAudio集成了以下库。
- en: Please refer to [Installation](./installation.html) for how to enable backends.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何启用后端，请参阅[安装](./installation.html)。
- en: Conventionally, TorchAudio has had its I/O backend set globally at runtime based
    on availability. However, this approach does not allow applications to use different
    backends, and it is not well-suited for large codebases.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，TorchAudio在运行时全局设置其I/O后端，基于可用性。然而，这种方法不允许应用程序使用不同的后端，并且不适用于大型代码库。
- en: For these reasons, in v2.0, we introduced a dispatcher, a new mechanism to allow
    users to choose a backend for each function call.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 出于这些原因，在v2.0中，我们引入了调度程序，一种允许用户为每个函数调用选择后端的新机制。
- en: When dispatcher mode is enabled, all the I/O functions accept extra keyward
    argument `backend`, which specifies the desired backend. If the specified backend
    is not available, the function call will fail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用调度程序模式时，所有I/O函数都接受额外的关键字参数`backend`，指定所需的后端。如果指定的后端不可用，函数调用将失败。
- en: If a backend is not explicitly chosen, the functions will select a backend to
    use given order of precedence and library availability.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有明确选择后端，函数将根据优先顺序和库可用性选择要使用的后端。
- en: The following table summarizes the backends.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了后端。
- en: '| Priority | Backend | Supported OS | Note |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 优先级 | 后端 | 支持的操作系统 | 备注 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 1 | FFmpeg | Linux, macOS, Windows | Use [`get_audio_decoders()`](generated/torchaudio.utils.ffmpeg_utils.html#torchaudio.utils.ffmpeg_utils.get_audio_decoders
    "torchaudio.utils.ffmpeg_utils.get_audio_decoders") and [`get_audio_encoders()`](generated/torchaudio.utils.ffmpeg_utils.html#torchaudio.utils.ffmpeg_utils.get_audio_encoders
    "torchaudio.utils.ffmpeg_utils.get_audio_encoders") to retrieve the supported
    codecs.This backend Supports various protocols, such as HTTPS and MP4, and file-like
    objects. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 1 | FFmpeg | Linux, macOS, Windows | 使用[`get_audio_decoders()`](generated/torchaudio.utils.ffmpeg_utils.html#torchaudio.utils.ffmpeg_utils.get_audio_decoders
    "torchaudio.utils.ffmpeg_utils.get_audio_decoders")和[`get_audio_encoders()`](generated/torchaudio.utils.ffmpeg_utils.html#torchaudio.utils.ffmpeg_utils.get_audio_encoders
    "torchaudio.utils.ffmpeg_utils.get_audio_encoders")来检索支持的编解码器。此后端支持各种协议，如HTTPS和MP4，以及类似文件的对象。
    |'
- en: '| 2 | SoX | Linux, macOS | Use [`list_read_formats()`](generated/torchaudio.utils.sox_utils.html#torchaudio.utils.sox_utils.list_read_formats
    "torchaudio.utils.sox_utils.list_read_formats") and [`list_write_formats()`](generated/torchaudio.utils.sox_utils.html#torchaudio.utils.sox_utils.list_write_formats
    "torchaudio.utils.sox_utils.list_write_formats") to retrieve the supported codecs.This
    backend does *not* support file-like objects. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 2 | SoX | Linux, macOS | 使用[`list_read_formats()`](generated/torchaudio.utils.sox_utils.html#torchaudio.utils.sox_utils.list_read_formats
    "torchaudio.utils.sox_utils.list_read_formats")和[`list_write_formats()`](generated/torchaudio.utils.sox_utils.html#torchaudio.utils.sox_utils.list_write_formats
    "torchaudio.utils.sox_utils.list_write_formats")来检索支持的编解码器。此后端*不*支持类似文件的对象。 |'
- en: '| 3 | SoundFile | Linux, macOS, Windows | Please refer to [the official document](https://pysoundfile.readthedocs.io/)
    for the supported codecs.This backend supports file-like objects. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 3 | SoundFile | Linux, macOS, Windows | 请参阅[官方文档](https://pysoundfile.readthedocs.io/)以获取支持的编解码器。此后端支持类似文件的对象。
    |'
- en: '### Dispatcher Migration[](#dispatcher-migration "Permalink to this heading")'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '### 调度程序迁移[](#dispatcher-migration "Permalink to this heading")'
- en: We are migrating the I/O functions to use the dispatcher mechanism, and this
    incurs multiple changes, some of which involve backward-compatibility-breaking
    changes, and require users to change their function call.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在将I/O函数迁移到使用调度程序机制，这会导致多个更改，其中一些涉及向后不兼容的更改，并要求用户更改其函数调用。
- en: The (planned) changes are as follows. For up-to-date information, please refer
    to [https://github.com/pytorch/audio/issues/2950](https://github.com/pytorch/audio/issues/2950)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: （计划中的）更改如下。有关最新信息，请参阅[https://github.com/pytorch/audio/issues/2950](https://github.com/pytorch/audio/issues/2950)
- en: In 2.0, audio I/O backend dispatcher was introduced. Users can opt-in to using
    dispatcher by setting the environment variable `TORCHAUDIO_USE_BACKEND_DISPATCHER=1`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在2.0中，引入了音频I/O后端调度程序。用户可以通过设置环境变量`TORCHAUDIO_USE_BACKEND_DISPATCHER=1`选择使用调度程序。
- en: In 2.1, the disptcher became the default mechanism for I/O.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在2.1中，调度程序成为I/O的默认机制。
- en: In 2.2, the legacy global backend mechanism is removed. Utility functions `get_audio_backend()`
    and `set_audio_backend()` became no-op.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在2.2中，传统的全局后端机制被移除。实用函数`get_audio_backend()`和`set_audio_backend()`变为无操作。
- en: Furthermore, we removed file-like object support from libsox backend, as this
    is better supported by FFmpeg backend and makes the build process simpler. Therefore,
    beginning with 2.1, FFmpeg and Soundfile are the sole backends that support file-like
    objects.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们从libsox后端中移除了对类似文件对象的支持，因为这在FFmpeg后端中得到了更好的支持，并且使构建过程更简单。因此，从2.1版本开始，FFmpeg和Soundfile是唯一支持类似文件对象的后端。
