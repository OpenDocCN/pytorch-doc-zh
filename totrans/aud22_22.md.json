["```py\nimport torch\nimport torchaudio\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\n2.2.0\n2.2.0 \n```", "```py\nfrom torchaudio.io import AudioEffector, CodecConfig\n\nimport matplotlib.pyplot as plt\nfrom IPython.display import Audio \n```", "```py\nfor [k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), [v](https://docs.python.org/3/library/stdtypes.html#tuple \"builtins.tuple\") in torchaudio.utils.ffmpeg_utils.get_versions().items():\n    print([k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), [v](https://docs.python.org/3/library/stdtypes.html#tuple \"builtins.tuple\")) \n```", "```py\nlibavcodec (60, 3, 100)\nlibavdevice (60, 1, 100)\nlibavfilter (9, 3, 100)\nlibavformat (60, 3, 100)\nlibavutil (58, 2, 100) \n```", "```py\neffector = AudioEffector(effect=..., format=...,)\n\n# Apply at once\napplied = effector.apply([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), sample_rate) \n```", "```py\n# Apply chunk by chunk\nfor applied_chunk = effector.stream([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), sample_rate):\n    ... \n```", "```py\n[src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = torchaudio.utils.download_asset(\"tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\")\n[waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sr](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([src](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), channels_first=False) \n```", "```py\ndef show(effect, *, stereo=False):\n    wf = [torch.cat](https://pytorch.org/docs/stable/generated/torch.cat.html#torch.cat \"torch.cat\")([[waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")] * 2, dim=1) if stereo else [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n    figsize = (6.4, 2.1 if stereo else 1.2)\n\n    effector = AudioEffector(effect=effect, pad_end=False)\n    result = effector.apply(wf, int([sr](https://docs.python.org/3/library/functions.html#int \"builtins.int\")))\n\n    num_channels = result.size(1)\n    f, ax = plt.subplots(num_channels, 1, squeeze=False, figsize=figsize, sharex=True)\n    for i in range(num_channels):\n        ax[i][0].specgram(result[:, i], Fs=[sr](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n    f.set_tight_layout(True)\n\n    return Audio(result.numpy().T, rate=[sr](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\nshow(effect=None) \n```", "```py\nshow(\"atempo=0.7\") \n```", "```py\nshow(\"atempo=1.8\") \n```", "```py\nshow(\"highpass=frequency=1500\") \n```", "```py\nshow(\"lowpass=frequency=1000\") \n```", "```py\nshow(\"allpass\") \n```", "```py\nshow(\"bandpass=frequency=3000\") \n```", "```py\nshow(\"bandreject=frequency=3000\") \n```", "```py\nshow(\"aecho=in_gain=0.8:out_gain=0.88:delays=6:decays=0.4\") \n```", "```py\nshow(\"aecho=in_gain=0.8:out_gain=0.88:delays=60:decays=0.4\") \n```", "```py\nshow(\"aecho=in_gain=0.8:out_gain=0.9:delays=1000:decays=0.3\") \n```", "```py\nshow(\"chorus=0.5:0.9:50|60|40:0.4|0.32|0.3:0.25|0.4|0.3:2|2.3|1.3\") \n```", "```py\n# fmt: off\nshow(\n    \"afftfilt=\"\n    \"real='re * (1-clip(b * (b/nb), 0, 1))':\"\n    \"imag='im * (1-clip(b * (b/nb), 0, 1))'\"\n) \n```", "```py\nshow(\n    \"afftfilt=\"\n    \"real='hypot(re,im) * sin(0)':\"\n    \"imag='hypot(re,im) * cos(0)':\"\n    \"win_size=512:\"\n    \"overlap=0.75\"\n) \n```", "```py\nshow(\n    \"afftfilt=\"\n    \"real='hypot(re,im) * cos(2 * 3.14 * (random(0) * 2-1))':\"\n    \"imag='hypot(re,im) * sin(2 * 3.14 * (random(1) * 2-1))':\"\n    \"win_size=128:\"\n    \"overlap=0.8\"\n)\n# fmt: on \n```", "```py\nshow(\"vibrato=f=10:d=0.8\") \n```", "```py\nshow(\"tremolo=f=8:d=0.8\") \n```", "```py\nshow(\"crystalizer\") \n```", "```py\nshow(\"flanger\") \n```", "```py\nshow(\"aphaser\") \n```", "```py\nshow(\"apulsator\", stereo=True) \n```", "```py\nshow(\"haas\") \n```", "```py\ndef show_multi(configs):\n    [results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = []\n    for config in configs:\n        effector = AudioEffector(**config)\n        [results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\").append(effector.apply([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), int([sr](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))))\n\n    num_configs = len(configs)\n    figsize = (6.4, 0.3 + num_configs * 0.9)\n    f, axes = plt.subplots(num_configs, 1, figsize=figsize, sharex=True)\n    for result, ax in zip([results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), axes):\n        ax.specgram(result[:, 0], Fs=[sr](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n    f.set_tight_layout(True)\n\n    return [Audio(r.numpy().T, rate=[sr](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) for r in [results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")] \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = show_multi(\n    [\n        {\"format\": \"ogg\"},\n        {\"format\": \"ogg\", \"encoder\": \"vorbis\"},\n        {\"format\": \"ogg\", \"encoder\": \"opus\"},\n    ]\n) \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[0] \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[1] \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[2] \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = show_multi(\n    [\n        {\"format\": \"mp3\"},\n        {\"format\": \"mp3\", \"codec_config\": CodecConfig(compression_level=1)},\n        {\"format\": \"mp3\", \"codec_config\": CodecConfig(compression_level=9)},\n        {\"format\": \"mp3\", \"codec_config\": CodecConfig(bit_rate=192_000)},\n        {\"format\": \"mp3\", \"codec_config\": CodecConfig(bit_rate=8_000)},\n        {\"format\": \"mp3\", \"codec_config\": CodecConfig(qscale=9)},\n        {\"format\": \"mp3\", \"codec_config\": CodecConfig(qscale=1)},\n    ]\n) \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[0] \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[1] \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[2] \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[3] \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[4] \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[5] \n```", "```py\n[results](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[6] \n```"]