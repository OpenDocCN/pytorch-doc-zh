- en: Audio Feature Extractions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/tutorials/audio_feature_extractions_tutorial.html](https://pytorch.org/audio/stable/tutorials/audio_feature_extractions_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-tutorials-audio-feature-extractions-tutorial-py)
    to download the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '**Author**: [Moto Hira](mailto:moto%40meta.com)'
  prefs: []
  type: TYPE_NORMAL
- en: '`torchaudio` implements feature extractions commonly used in the audio domain.
    They are available in `torchaudio.functional` and `torchaudio.transforms`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`functional` implements features as standalone functions. They are stateless.'
  prefs: []
  type: TYPE_NORMAL
- en: '`transforms` implements features as objects, using implementations from `functional`
    and `torch.nn.Module`. They can be serialized using TorchScript.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Overview of audio features[](#overview-of-audio-features "Permalink to this
    heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following diagram shows the relationship between common audio features and
    torchaudio APIs to generate them.
  prefs: []
  type: TYPE_NORMAL
- en: '![https://download.pytorch.org/torchaudio/tutorial-assets/torchaudio_feature_extractions.png](../Images/82ba49f78e3cd14b6e337acaf57b11e2.png)'
  prefs: []
  type: TYPE_IMG
- en: For the complete list of available features, please refer to the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Preparation[](#preparation "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When running this tutorial in Google Colab, install the required packages
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Spectrogram[](#spectrogram "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get the frequency make-up of an audio signal as it varies with time, you
    can use [`torchaudio.transforms.Spectrogram()`](../generated/torchaudio.transforms.Spectrogram.html#torchaudio.transforms.Spectrogram
    "torchaudio.transforms.Spectrogram").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Original waveform, spectrogram](../Images/787b5dbf919118f579d77973c5a30652.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: The effect of `n_fft` parameter[](#the-effect-of-n-fft-parameter "Permalink
    to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core of spectrogram computation is (short-term) Fourier transform, and the
    `n_fft` parameter corresponds to the \(N\) in the following definition of descrete
    Fourier transform.
  prefs: []
  type: TYPE_NORMAL
- en: $$ X_k = \sum_{n=0}^{N-1} x_n e^{-\frac{2\pi i}{N} nk} $$
  prefs: []
  type: TYPE_NORMAL
- en: (For the detail of Fourier transform, please refer to [Wikipedia](https://en.wikipedia.org/wiki/Fast_Fourier_transform).
  prefs: []
  type: TYPE_NORMAL
- en: The value of `n_fft` determines the resolution of frequency axis. However, with
    the higher `n_fft` value, the energy will be distributed among more bins, so when
    you visualize it, it might look more blurry, even thought they are higher resolution.
  prefs: []
  type: TYPE_NORMAL
- en: The following illustrates this;
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`hop_length` determines the time axis resolution. By default, (i.e. `hop_length=None`
    and `win_length=None`), the value of `n_fft // 4` is used. Here we use the same
    `hop_length` value across different `n_fft` so that they have the same number
    of elemets in the time axis.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![audio feature extractions tutorial](../Images/ac72de68cdabfdc2ad8f166dcb01c27c.png)'
  prefs: []
  type: TYPE_IMG
- en: When comparing signals, it is desirable to use the same sampling rate, however
    if you must use the different sampling rate, care must be taken for interpretating
    the meaning of `n_fft`. Recall that `n_fft` determines the resolution of the frequency
    axis for a given sampling rate. In other words, what each bin on the frequency
    axis represents is subject to the sampling rate.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen above, changing the value of `n_fft` does not change the coverage
    of frequency range for the same input signal.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s downsample the audio and apply spectrogram with the same `n_fft` value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![audio feature extractions tutorial](../Images/e78e0e1cf66866b1f0dd8dadbb0e8612.png)'
  prefs: []
  type: TYPE_IMG
- en: In the above visualization, the second plot (“Downsampled”) might give the impression
    that the spectrogram is streched. This is because the meaning of frequency bins
    is different from the original one. Even though, they have the same number of
    bins, in the second plot, the frequency is only covered to the half of the original
    sampling rate. This becomes more clear if we resample the downsampled signal again
    so that it has the same sample rate as the original.
  prefs: []
  type: TYPE_NORMAL
- en: GriffinLim[](#griffinlim "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To recover a waveform from a spectrogram, you can use [`torchaudio.transforms.GriffinLim`](../generated/torchaudio.transforms.GriffinLim.html#torchaudio.transforms.GriffinLim
    "torchaudio.transforms.GriffinLim").
  prefs: []
  type: TYPE_NORMAL
- en: The same set of parameters used for spectrogram must be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Original, Reconstructed](../Images/32c66b5b578711def753dbb923cb7f66.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Mel Filter Bank[](#mel-filter-bank "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`torchaudio.functional.melscale_fbanks()`](../generated/torchaudio.functional.melscale_fbanks.html#torchaudio.functional.melscale_fbanks
    "torchaudio.functional.melscale_fbanks") generates the filter bank for converting
    frequency bins to mel-scale bins.'
  prefs: []
  type: TYPE_NORMAL
- en: Since this function does not require input audio/features, there is no equivalent
    transform in [`torchaudio.transforms()`](../transforms.html#module-torchaudio.transforms
    "torchaudio.transforms").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Mel Filter Bank - torchaudio](../Images/bd8afdf50a081e6142ab13cdd7cdbd51.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison against librosa[](#comparison-against-librosa "Permalink to this
    heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For reference, here is the equivalent way to get the mel filter bank with `librosa`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Mel Filter Bank - librosa](../Images/0cf17a8f91bb1c63d22591f5bf2b7ccb.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: MelSpectrogram[](#melspectrogram "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generating a mel-scale spectrogram involves generating a spectrogram and performing
    mel-scale conversion. In `torchaudio`, [`torchaudio.transforms.MelSpectrogram()`](../generated/torchaudio.transforms.MelSpectrogram.html#torchaudio.transforms.MelSpectrogram
    "torchaudio.transforms.MelSpectrogram") provides this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![MelSpectrogram - torchaudio](../Images/3292985cec53c36aa443a745edd38599.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison against librosa[](#id1 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For reference, here is the equivalent means of generating mel-scale spectrograms
    with `librosa`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![MelSpectrogram - librosa](../Images/a38262177175977c17a412eacff0306e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: MFCC[](#mfcc "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![MFCC](../Images/8453f28c3b04b95f3edf395b34622a94.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison against librosa[](#id2 "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![MFCC (librosa)](../Images/94712cdb94274c1cacc312e88a22632c.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: LFCC[](#lfcc "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![LFCC](../Images/099b6c76722336c25d2347c22bb1022a.png)'
  prefs: []
  type: TYPE_IMG
- en: Pitch[](#pitch "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![Pitch Feature](../Images/1f2e9b4055fe894039bd0dc8f5a98bc2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Total running time of the script:** ( 0 minutes 9.372 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: audio_feature_extractions_tutorial.py`](../_downloads/0face80178ed0d1cefd2a173a7262afb/audio_feature_extractions_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: audio_feature_extractions_tutorial.ipynb`](../_downloads/743bf71677318e38b748ce39acd11a62/audio_feature_extractions_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
