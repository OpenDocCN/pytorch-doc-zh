["```py\nimport torch\nfrom torchvision.models import resnet50\nfrom torchvision.models.feature_extraction import get_graph_node_names\nfrom torchvision.models.feature_extraction import create_feature_extractor\nfrom torchvision.models.detection.mask_rcnn import MaskRCNN\nfrom torchvision.models.detection.backbone_utils import LastLevelMaxPool\nfrom torchvision.ops.feature_pyramid_network import FeaturePyramidNetwork\n\n# To assist you in designing the feature extractor you may want to print out\n# the available nodes for resnet50.\nm = resnet50()\ntrain_nodes, eval_nodes = get_graph_node_names(resnet50())\n\n# The lists returned, are the names of all the graph nodes (in order of\n# execution) for the input model traced in train mode and in eval mode\n# respectively. You'll find that `train_nodes` and `eval_nodes` are the same\n# for this example. But if the model contains control flow that's dependent\n# on the training mode, they may be different.\n\n# To specify the nodes you want to extract, you could select the final node\n# that appears in each of the main layers:\nreturn_nodes = {\n    # node_name: user-specified key for output dict\n    'layer1.2.relu_2': 'layer1',\n    'layer2.3.relu_2': 'layer2',\n    'layer3.5.relu_2': 'layer3',\n    'layer4.2.relu_2': 'layer4',\n}\n\n# But `create_feature_extractor` can also accept truncated node specifications\n# like \"layer1\", as it will just pick the last node that's a descendent of\n# of the specification. (Tip: be careful with this, especially when a layer\n# has multiple outputs. It's not always guaranteed that the last operation\n# performed is the one that corresponds to the output you desire. You should\n# consult the source code for the input model to confirm.)\nreturn_nodes = {\n    'layer1': 'layer1',\n    'layer2': 'layer2',\n    'layer3': 'layer3',\n    'layer4': 'layer4',\n}\n\n# Now you can build the feature extractor. This returns a module whose forward\n# method returns a dictionary like:\n# {\n#     'layer1': output of layer 1,\n#     'layer2': output of layer 2,\n#     'layer3': output of layer 3,\n#     'layer4': output of layer 4,\n# }\ncreate_feature_extractor(m, return_nodes=return_nodes)\n\n# Let's put all that together to wrap resnet50 with MaskRCNN\n\n# MaskRCNN requires a backbone with an attached FPN\nclass Resnet50WithFPN(torch.nn.Module):\n    def __init__(self):\n        super(Resnet50WithFPN, self).__init__()\n        # Get a resnet50 backbone\n        m = resnet50()\n        # Extract 4 main layers (note: MaskRCNN needs this particular name\n        # mapping for return nodes)\n        self.body = create_feature_extractor(\n            m, return_nodes={f'layer{k}': str(v)\n                             for v, k in enumerate([1, 2, 3, 4])})\n        # Dry run to get number of channels for FPN\n        inp = torch.randn(2, 3, 224, 224)\n        with torch.no_grad():\n            out = self.body(inp)\n        in_channels_list = [o.shape[1] for o in out.values()]\n        # Build FPN\n        self.out_channels = 256\n        self.fpn = FeaturePyramidNetwork(\n            in_channels_list, out_channels=self.out_channels,\n            extra_blocks=LastLevelMaxPool())\n\n    def forward(self, x):\n        x = self.body(x)\n        x = self.fpn(x)\n        return x\n\n# Now we can build our model!\nmodel = MaskRCNN(Resnet50WithFPN(), num_classes=91).eval() \n```"]