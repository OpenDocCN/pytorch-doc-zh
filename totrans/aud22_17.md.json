["```py\nimport torch\nimport torchaudio\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n\nimport IPython\nimport matplotlib.pyplot as plt\nfrom torchaudio.io import StreamReader\n\n[base_url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = \"https://download.pytorch.org/torchaudio/tutorial-assets\"\n[AUDIO_URL](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = f\"{[base_url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\"\n[VIDEO_URL](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = f\"{[base_url](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}/stream-api/NASAs_Most_Scientifically_Complex_Space_Observatory_Requires_Precision-MP4.mp4\" \n```", "```py\n2.2.0\n2.2.0 \n```", "```py\n$ ffmpeg -f avfoundation -list_devices true -i \"\"\n[AVFoundation indev @ 0x143f04e50] AVFoundation video devices:\n[AVFoundation indev @ 0x143f04e50] [0] FaceTime HD Camera\n[AVFoundation indev @ 0x143f04e50] [1] Capture screen 0\n[AVFoundation indev @ 0x143f04e50] AVFoundation audio devices:\n[AVFoundation indev @ 0x143f04e50] [0] MacBook Pro Microphone \n```", "```py\n>>> StreamReader(\n...     src=\"0:0\",  # The first 0 means `FaceTime HD Camera`, and\n...                 # the second 0 indicates `MacBook Pro Microphone`.\n...     format=\"avfoundation\",\n... )\n[avfoundation @ 0x125d4fe00] Selected framerate (29.970030) is not supported by the device.\n[avfoundation @ 0x125d4fe00] Supported modes:\n[avfoundation @ 0x125d4fe00]   1280x720@[1.000000 30.000000]fps\n[avfoundation @ 0x125d4fe00]   640x480@[1.000000 30.000000]fps\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  ...\nRuntimeError: Failed to open the input: 0:0 \n```", "```py\n>>> streamer = StreamReader(\n...     src=\"0:0\",\n...     format=\"avfoundation\",\n...     option={\"framerate\": \"30\", \"pixel_format\": \"bgr0\"},\n... )\n>>> for i in range(streamer.num_src_streams):\n...     print(streamer.get_src_stream_info(i))\nSourceVideoStream(media_type='video', codec='rawvideo', codec_long_name='raw video', format='bgr0', bit_rate=0, width=640, height=480, frame_rate=30.0)\nSourceAudioStream(media_type='audio', codec='pcm_f32le', codec_long_name='PCM 32-bit floating point little-endian', format='flt', bit_rate=3072000, sample_rate=48000.0, num_channels=2) \n```", "```py\nStreamReader(src=\"sine=sample_rate=8000:frequency=360\", format=\"lavfi\") \n```", "```py\n# 5 Hz binaural beats on a 360 Hz carrier\nStreamReader(\n    src=(\n        'aevalsrc='\n        'sample_rate=8000:'\n        'exprs=0.1*sin(2*PI*(360-5/2)*t)|0.1*sin(2*PI*(360+5/2)*t)'\n    ),\n    format='lavfi',\n ) \n```", "```py\nStreamReader(src=\"anoisesrc=color=pink:sample_rate=8000:amplitude=0.5\", format=\"lavfi\") \n```", "```py\nStreamReader(src=f\"cellauto\", format=\"lavfi\") \n```", "```py\nStreamReader(src=f\"mandelbrot\", format=\"lavfi\") \n```", "```py\nStreamReader(src=f\"mptestsrc\", format=\"lavfi\") \n```", "```py\nStreamReader(src=f\"life\", format=\"lavfi\") \n```", "```py\nStreamReader(src=f\"sierpinski\", format=\"lavfi\") \n```", "```py\n# fmt: off\n[descs](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = [\n    # No filtering\n    \"anull\",\n    # Apply a highpass filter then a lowpass filter\n    \"highpass=f=200,lowpass=f=1000\",\n    # Manipulate spectrogram\n    (\n        \"afftfilt=\"\n        \"real='hypot(re,im)*sin(0)':\"\n        \"imag='hypot(re,im)*cos(0)':\"\n        \"win_size=512:\"\n        \"overlap=0.75\"\n    ),\n    # Manipulate spectrogram\n    (\n        \"afftfilt=\"\n        \"real='hypot(re,im)*cos((random(0)*2-1)*2*3.14)':\"\n        \"imag='hypot(re,im)*sin((random(1)*2-1)*2*3.14)':\"\n        \"win_size=128:\"\n        \"overlap=0.8\"\n    ),\n]\n# fmt: on \n```", "```py\n[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 8000\n\nstreamer = StreamReader([AUDIO_URL](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\nfor [desc](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") in [descs](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"):\n    streamer.add_audio_stream(\n        frames_per_chunk=40000,\n        filter_desc=f\"aresample={[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")},{[desc](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")},aformat=sample_fmts=fltp\",\n    )\n\n[chunks](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = next(streamer.stream())\n\ndef _display(i):\n    print(\"filter_desc:\", streamer.get_out_stream_info(i).filter_description)\n    fig, axs = plt.subplots(2, 1)\n    waveform = [chunks](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[i][:, 0]\n    axs[0].plot(waveform)\n    axs[0].grid(True)\n    axs[0].set_ylim([-1, 1])\n    plt.setp(axs[0].get_xticklabels(), visible=False)\n    axs[1].specgram(waveform, Fs=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n    fig.tight_layout()\n    return IPython.display.Audio([chunks](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[i].T, rate=[sample_rate](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\n_display(0) \n```", "```py\nfilter_desc: aresample=8000,anull,aformat=sample_fmts=fltp \n```", "```py\n_display(1) \n```", "```py\nfilter_desc: aresample=8000,highpass=f=200,lowpass=f=1000,aformat=sample_fmts=fltp \n```", "```py\n_display(2) \n```", "```py\nfilter_desc: aresample=8000,afftfilt=real='hypot(re,im)*sin(0)':imag='hypot(re,im)*cos(0)':win_size=512:overlap=0.75,aformat=sample_fmts=fltp \n```", "```py\n_display(3) \n```", "```py\nfilter_desc: aresample=8000,afftfilt=real='hypot(re,im)*cos((random(0)*2-1)*2*3.14)':imag='hypot(re,im)*sin((random(1)*2-1)*2*3.14)':win_size=128:overlap=0.8,aformat=sample_fmts=fltp \n```", "```py\n# fmt: off\n[descs](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = [\n    # No effect\n    \"null\",\n    # Split the input stream and apply horizontal flip to the right half.\n    (\n        \"split [main][tmp];\"\n        \"[tmp] crop=iw/2:ih:0:0, hflip [flip];\"\n        \"[main][flip] overlay=W/2:0\"\n    ),\n    # Edge detection\n    \"edgedetect=mode=canny\",\n    # Rotate image by randomly and fill the background with brown\n    \"rotate=angle=-random(1)*PI:fillcolor=brown\",\n    # Manipulate pixel values based on the coordinate\n    \"geq=r='X/W*r(X,Y)':g='(1-X/W)*g(X,Y)':b='(H-Y)/H*b(X,Y)'\"\n]\n# fmt: on \n```", "```py\nstreamer = StreamReader([VIDEO_URL](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\nfor [desc](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") in [descs](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"):\n    streamer.add_video_stream(\n        frames_per_chunk=30,\n        filter_desc=f\"fps=10,{[desc](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")},format=pix_fmts=rgb24\",\n    )\n\nstreamer.seek(12)\n\n[chunks](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = next(streamer.stream())\n\ndef _display(i):\n    print(\"filter_desc:\", streamer.get_out_stream_info(i).filter_description)\n    _, axs = plt.subplots(1, 3, figsize=(8, 1.9))\n    chunk = [chunks](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[i]\n    for j in range(3):\n        axs[j].imshow(chunk[10 * j + 1].permute(1, 2, 0))\n        axs[j].set_axis_off()\n    plt.tight_layout() \n```", "```py\n_display(0) \n```", "```py\nfilter_desc: fps=10,null,format=pix_fmts=rgb24 \n```", "```py\n_display(1) \n```", "```py\nfilter_desc: fps=10,split [main][tmp];[tmp] crop=iw/2:ih:0:0, hflip [flip];[main][flip] overlay=W/2:0,format=pix_fmts=rgb24 \n```", "```py\n_display(2) \n```", "```py\nfilter_desc: fps=10,edgedetect=mode=canny,format=pix_fmts=rgb24 \n```", "```py\n_display(3) \n```", "```py\nfilter_desc: fps=10,rotate=angle=-random(1)*PI:fillcolor=brown,format=pix_fmts=rgb24 \n```", "```py\n_display(4) \n```", "```py\nfilter_desc: fps=10,geq=r='X/W*r(X,Y)':g='(1-X/W)*g(X,Y)':b='(H-Y)/H*b(X,Y)',format=pix_fmts=rgb24 \n```"]