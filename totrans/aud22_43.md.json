["```py\nimport torch\nimport torchaudio\nimport torchaudio.functional as F\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n\nimport matplotlib.pyplot as plt\nimport mir_eval\nfrom IPython.display import Audio \n```", "```py\n2.2.0\n2.2.0 \n```", "```py\n# When running this example in notebook, install the following packages.\n# !pip3 install mir_eval\n# !pip3 install pesq\n# !pip3 install pystoi\n\nfrom pesq import pesq\nfrom pystoi import stoi\nfrom torchaudio.utils import download_asset \n```", "```py\n[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 16000\n[SAMPLE_CLEAN](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/mvdr/clean_speech.wav\")\n[SAMPLE_NOISE](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = download_asset(\"tutorial-assets/mvdr/noise.wav\") \n```", "```py\n 0%|          | 0.00/0.98M [00:00<?, ?B/s]\n100%|##########| 0.98M/0.98M [00:00<00:00, 176MB/s]\n\n  0%|          | 0.00/1.95M [00:00<?, ?B/s]\n100%|##########| 1.95M/1.95M [00:00<00:00, 285MB/s] \n```", "```py\ndef plot_spectrogram(stft, title=\"Spectrogram\"):\n    magnitude = stft.abs()\n    spectrogram = 20 * [torch.log10](https://pytorch.org/docs/stable/generated/torch.log10.html#torch.log10 \"torch.log10\")(magnitude + 1e-8).numpy()\n    figure, axis = plt.subplots(1, 1)\n    img = axis.imshow(spectrogram, cmap=\"viridis\", vmin=-100, vmax=0, origin=\"lower\", aspect=\"auto\")\n    axis.set_title(title)\n    plt.colorbar(img, ax=axis)\n\ndef plot_mask(mask, title=\"Mask\"):\n    mask = mask.numpy()\n    figure, axis = plt.subplots(1, 1)\n    img = axis.imshow(mask, cmap=\"viridis\", origin=\"lower\", aspect=\"auto\")\n    axis.set_title(title)\n    plt.colorbar(img, ax=axis)\n\ndef si_snr(estimate, reference, epsilon=1e-8):\n    estimate = estimate - estimate.mean()\n    reference = reference - reference.mean()\n    reference_pow = reference.pow(2).mean(axis=1, keepdim=True)\n    mix_pow = (estimate * reference).mean(axis=1, keepdim=True)\n    scale = mix_pow / (reference_pow + epsilon)\n\n    reference = scale * reference\n    error = estimate - reference\n\n    reference_pow = reference.pow(2)\n    error_pow = error.pow(2)\n\n    reference_pow = reference_pow.mean(axis=1)\n    error_pow = error_pow.mean(axis=1)\n\n    si_snr = 10 * [torch.log10](https://pytorch.org/docs/stable/generated/torch.log10.html#torch.log10 \"torch.log10\")(reference_pow) - 10 * [torch.log10](https://pytorch.org/docs/stable/generated/torch.log10.html#torch.log10 \"torch.log10\")(error_pow)\n    return si_snr.item()\n\ndef generate_mixture([waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [waveform_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [target_snr](https://docs.python.org/3/library/functions.html#int \"builtins.int\")):\n    power_clean_signal = [waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").pow(2).mean()\n    power_noise_signal = [waveform_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").pow(2).mean()\n    current_snr = 10 * [torch.log10](https://pytorch.org/docs/stable/generated/torch.log10.html#torch.log10 \"torch.log10\")(power_clean_signal / power_noise_signal)\n    [waveform_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") *= 10 ** (-([target_snr](https://docs.python.org/3/library/functions.html#int \"builtins.int\") - current_snr) / 20)\n    return [waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") + [waveform_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")\n\ndef evaluate(estimate, reference):\n    si_snr_score = si_snr(estimate, reference)\n    (\n        sdr,\n        _,\n        _,\n        _,\n    ) = mir_eval.separation.bss_eval_sources(reference.numpy(), estimate.numpy(), False)\n    pesq_mix = pesq([SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), estimate[0].numpy(), reference[0].numpy(), \"wb\")\n    stoi_mix = stoi(reference[0].numpy(), estimate[0].numpy(), [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), extended=False)\n    print(f\"SDR score: {sdr[0]}\")\n    print(f\"Si-SNR score: {si_snr_score}\")\n    print(f\"PESQ score: {pesq_mix}\")\n    print(f\"STOI score: {stoi_mix}\") \n```", "```py\n[waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sr](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([SAMPLE_CLEAN](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n[waveform_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [sr2](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = torchaudio.load([SAMPLE_NOISE](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\nassert [sr](https://docs.python.org/3/library/functions.html#int \"builtins.int\") == [sr2](https://docs.python.org/3/library/functions.html#int \"builtins.int\") == [SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")\n# The mixture waveform is a combination of clean and noise waveforms with a desired SNR.\n[target_snr](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 3\n[waveform_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = generate_mixture([waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [waveform_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [target_snr](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\n[waveform_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [waveform_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").to([torch.double](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"))\n[waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").to([torch.double](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"))\n[waveform_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [waveform_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").to([torch.double](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\")) \n```", "```py\n[N_FFT](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 1024\n[N_HOP](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 256\nstft = [torchaudio.transforms.Spectrogram](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(\n    n_fft=[N_FFT](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    hop_length=[N_HOP](https://docs.python.org/3/library/functions.html#int \"builtins.int\"),\n    power=None,\n)\nistft = [torchaudio.transforms.InverseSpectrogram](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")(n_fft=[N_FFT](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), hop_length=[N_HOP](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n\n[stft_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = stft([waveform_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[stft_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = stft([waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[stft_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = stft([waveform_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nplot_spectrogram([stft_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], \"Spectrogram of Mixture Speech (dB)\")\nevaluate([waveform_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:1], [waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:1])\nAudio([waveform_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\nSDR score: 4.140362181778018\nSi-SNR score: 4.104058905536078\nPESQ score: 2.0084526538848877\nSTOI score: 0.7724339398714715 \n```", "```py\nplot_spectrogram([stft_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], \"Spectrogram of Clean Speech (dB)\")\nAudio([waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\nplot_spectrogram([stft_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], \"Spectrogram of Noise (dB)\")\nAudio([waveform_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\n[REFERENCE_CHANNEL](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 0 \n```", "```py\ndef get_irms([stft_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [stft_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    mag_clean = [stft_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").abs() ** 2\n    mag_noise = [stft_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").abs() ** 2\n    [irm_speech](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = mag_clean / (mag_clean + mag_noise)\n    [irm_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = mag_noise / (mag_clean + mag_noise)\n    return [irm_speech](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[[REFERENCE_CHANNEL](https://docs.python.org/3/library/functions.html#int \"builtins.int\")], [irm_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[[REFERENCE_CHANNEL](https://docs.python.org/3/library/functions.html#int \"builtins.int\")]\n\n[irm_speech](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [irm_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = get_irms([stft_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [stft_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nplot_mask([irm_speech](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), \"IRM of the Target Speech\") \n```", "```py\nplot_mask([irm_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), \"IRM of the Noise\") \n```", "```py\npsd_transform = [torchaudio.transforms.PSD](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\n\n[psd_speech](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = psd_transform([stft_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [irm_speech](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[psd_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = psd_transform([stft_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [irm_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nmvdr_transform = [torchaudio.transforms.SoudenMVDR](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\n[stft_souden](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = mvdr_transform([stft_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [psd_speech](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [psd_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), reference_channel=[REFERENCE_CHANNEL](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n[waveform_souden](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = istft([stft_souden](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), length=[waveform_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape[-1]) \n```", "```py\nplot_spectrogram([stft_souden](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), \"Enhanced Spectrogram by SoudenMVDR (dB)\")\n[waveform_souden](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [waveform_souden](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").reshape(1, -1)\nevaluate([waveform_souden](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:1])\nAudio([waveform_souden](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\nSDR score: 17.946234447508765\nSi-SNR score: 12.215202612266587\nPESQ score: 3.3447437286376953\nSTOI score: 0.8712864479161743 \n```", "```py\n[rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = F.[rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")([psd_speech](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = F.[rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")([psd_speech](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [psd_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), reference_channel=[REFERENCE_CHANNEL](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\nmvdr_transform = [torchaudio.transforms.RTFMVDR](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")()\n\n# compute the enhanced speech based on F.rtf_evd\n[stft_rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = mvdr_transform([stft_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [psd_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), reference_channel=[REFERENCE_CHANNEL](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n[waveform_rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = istft([stft_rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), length=[waveform_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape[-1])\n\n# compute the enhanced speech based on F.rtf_power\n[stft_rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = mvdr_transform([stft_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [psd_noise](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), reference_channel=[REFERENCE_CHANNEL](https://docs.python.org/3/library/functions.html#int \"builtins.int\"))\n[waveform_rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = istft([stft_rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), length=[waveform_mix](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape[-1]) \n```", "```py\nplot_spectrogram([stft_rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), \"Enhanced Spectrogram by RTFMVDR and F.rtf_evd (dB)\")\n[waveform_rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [waveform_rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").reshape(1, -1)\nevaluate([waveform_rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:1])\nAudio([waveform_rtf_evd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\nSDR score: 11.880210635280273\nSi-SNR score: 10.714419996128061\nPESQ score: 3.083890914916992\nSTOI score: 0.8261544910053075 \n```", "```py\nplot_spectrogram([stft_rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), \"Enhanced Spectrogram by RTFMVDR and F.rtf_power (dB)\")\n[waveform_rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [waveform_rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").reshape(1, -1)\nevaluate([waveform_rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [waveform_clean](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0:1])\nAudio([waveform_rtf_power](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), rate=[SAMPLE_RATE](https://docs.python.org/3/library/functions.html#int \"builtins.int\")) \n```", "```py\nSDR score: 15.424590276934103\nSi-SNR score: 13.035440892133451\nPESQ score: 3.487997531890869\nSTOI score: 0.8798278461896808 \n```"]