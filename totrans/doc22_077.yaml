- en: torch.masked
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/docs/stable/masked.html](https://pytorch.org/docs/stable/masked.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Introduction'
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The PyTorch API of masked tensors is in the prototype stage and may or may not
    change in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'MaskedTensor serves as an extension to [`torch.Tensor`](tensors.html#torch.Tensor
    "torch.Tensor") that provides the user with the ability to:'
  prefs: []
  type: TYPE_NORMAL
- en: use any masked semantics (e.g. variable length tensors, nan* operators, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: differentiate between 0 and NaN gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: various sparse applications (see tutorial below)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Specified” and “unspecified” have a long history in PyTorch without formal
    semantics and certainly without consistency; indeed, MaskedTensor was born out
    of a build up of issues that the vanilla [`torch.Tensor`](tensors.html#torch.Tensor
    "torch.Tensor") class could not properly address. Thus, a primary goal of MaskedTensor
    is to become the source of truth for said “specified” and “unspecified” values
    in PyTorch where they are a first class citizen instead of an afterthought. In
    turn, this should further unlock [sparsity’s](https://pytorch.org/docs/stable/sparse.html)
    potential, enable safer and more consistent operators, and provide a smoother
    and more intuitive experience for users and developers alike.
  prefs: []
  type: TYPE_NORMAL
- en: What is a MaskedTensor?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A MaskedTensor is a tensor subclass that consists of 1) an input (data), and
    2) a mask. The mask tells us which entries from the input should be included or
    ignored.
  prefs: []
  type: TYPE_NORMAL
- en: 'By way of example, suppose that we wanted to mask out all values that are equal
    to 0 (represented by the gray) and take the max:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/tensor_comparison.jpg](../Images/f5788f266e7378201824743b6b1b7283.png)](_images/tensor_comparison.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: On top is the vanilla tensor example while the bottom is MaskedTensor where
    all the 0’s are masked out. This clearly yields a different result depending on
    whether we have the mask, but this flexible structure allows the user to systematically
    ignore any elements they’d like during computation.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are already a number of existing tutorials that we’ve written to help
    users onboard, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Overview - the place to start for new users, discusses how to use MaskedTensors
    and why they’re useful](https://pytorch.org/tutorials/prototype/maskedtensor_overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sparsity - MaskedTensor supports sparse COO and CSR data and mask Tensors](https://pytorch.org/tutorials/prototype/maskedtensor_sparsity)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Adagrad sparse semantics - a practical example of how MaskedTensor can simplify
    sparse semantics and implementations](https://pytorch.org/tutorials/prototype/maskedtensor_adagrad)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Advanced semantics - discussion on why certain decisions were made (e.g. requiring
    masks to match for binary/reduction operations), differences with NumPy’s MaskedArray,
    and reduction semantics](https://pytorch.org/tutorials/prototype/maskedtensor_advanced_semantics)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supported Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unary Operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unary operators are operators that only contain only a single input. Applying
    them to MaskedTensors is relatively straightforward: if the data is masked out
    at a given index, we apply the operator, otherwise we’ll continue to mask out
    the data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The available unary operators are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`abs`](generated/torch.abs.html#torch.abs "torch.abs") | Computes the absolute
    value of each element in `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`absolute`](generated/torch.absolute.html#torch.absolute "torch.absolute")
    | Alias for [`torch.abs()`](generated/torch.abs.html#torch.abs "torch.abs") |'
  prefs: []
  type: TYPE_TB
- en: '| [`acos`](generated/torch.acos.html#torch.acos "torch.acos") | Computes the
    inverse cosine of each element in `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arccos`](generated/torch.arccos.html#torch.arccos "torch.arccos") | Alias
    for [`torch.acos()`](generated/torch.acos.html#torch.acos "torch.acos"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`acosh`](generated/torch.acosh.html#torch.acosh "torch.acosh") | Returns
    a new tensor with the inverse hyperbolic cosine of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arccosh`](generated/torch.arccosh.html#torch.arccosh "torch.arccosh") |
    Alias for [`torch.acosh()`](generated/torch.acosh.html#torch.acosh "torch.acosh").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`angle`](generated/torch.angle.html#torch.angle "torch.angle") | Computes
    the element-wise angle (in radians) of the given `input` tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asin`](generated/torch.asin.html#torch.asin "torch.asin") | Returns a new
    tensor with the arcsine of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsin`](generated/torch.arcsin.html#torch.arcsin "torch.arcsin") | Alias
    for [`torch.asin()`](generated/torch.asin.html#torch.asin "torch.asin"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`asinh`](generated/torch.asinh.html#torch.asinh "torch.asinh") | Returns
    a new tensor with the inverse hyperbolic sine of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsinh`](generated/torch.arcsinh.html#torch.arcsinh "torch.arcsinh") |
    Alias for [`torch.asinh()`](generated/torch.asinh.html#torch.asinh "torch.asinh").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`atan`](generated/torch.atan.html#torch.atan "torch.atan") | Returns a new
    tensor with the arctangent of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctan`](generated/torch.arctan.html#torch.arctan "torch.arctan") | Alias
    for [`torch.atan()`](generated/torch.atan.html#torch.atan "torch.atan"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`atanh`](generated/torch.atanh.html#torch.atanh "torch.atanh") | Returns
    a new tensor with the inverse hyperbolic tangent of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctanh`](generated/torch.arctanh.html#torch.arctanh "torch.arctanh") |
    Alias for [`torch.atanh()`](generated/torch.atanh.html#torch.atanh "torch.atanh").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`bitwise_not`](generated/torch.bitwise_not.html#torch.bitwise_not "torch.bitwise_not")
    | Computes the bitwise NOT of the given input tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ceil`](generated/torch.ceil.html#torch.ceil "torch.ceil") | Returns a new
    tensor with the ceil of the elements of `input`, the smallest integer greater
    than or equal to each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`clamp`](generated/torch.clamp.html#torch.clamp "torch.clamp") | Clamps
    all elements in `input` into the range [ [`min`](generated/torch.min.html#torch.min
    "torch.min"), [`max`](generated/torch.max.html#torch.max "torch.max") ]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`clip`](generated/torch.clip.html#torch.clip "torch.clip") | Alias for [`torch.clamp()`](generated/torch.clamp.html#torch.clamp
    "torch.clamp"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`conj_physical`](generated/torch.conj_physical.html#torch.conj_physical
    "torch.conj_physical") | Computes the element-wise conjugate of the given `input`
    tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cos`](generated/torch.cos.html#torch.cos "torch.cos") | Returns a new tensor
    with the cosine of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cosh`](generated/torch.cosh.html#torch.cosh "torch.cosh") | Returns a new
    tensor with the hyperbolic cosine of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`deg2rad`](generated/torch.deg2rad.html#torch.deg2rad "torch.deg2rad") |
    Returns a new tensor with each of the elements of `input` converted from angles
    in degrees to radians. |'
  prefs: []
  type: TYPE_TB
- en: '| [`digamma`](generated/torch.digamma.html#torch.digamma "torch.digamma") |
    Alias for [`torch.special.digamma()`](special.html#torch.special.digamma "torch.special.digamma").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`erf`](generated/torch.erf.html#torch.erf "torch.erf") | Alias for [`torch.special.erf()`](special.html#torch.special.erf
    "torch.special.erf"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`erfc`](generated/torch.erfc.html#torch.erfc "torch.erfc") | Alias for [`torch.special.erfc()`](special.html#torch.special.erfc
    "torch.special.erfc"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`erfinv`](generated/torch.erfinv.html#torch.erfinv "torch.erfinv") | Alias
    for [`torch.special.erfinv()`](special.html#torch.special.erfinv "torch.special.erfinv").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`exp`](generated/torch.exp.html#torch.exp "torch.exp") | Returns a new tensor
    with the exponential of the elements of the input tensor `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exp2`](generated/torch.exp2.html#torch.exp2 "torch.exp2") | Alias for [`torch.special.exp2()`](special.html#torch.special.exp2
    "torch.special.exp2"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`expm1`](generated/torch.expm1.html#torch.expm1 "torch.expm1") | Alias for
    [`torch.special.expm1()`](special.html#torch.special.expm1 "torch.special.expm1").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`fix`](generated/torch.fix.html#torch.fix "torch.fix") | Alias for [`torch.trunc()`](generated/torch.trunc.html#torch.trunc
    "torch.trunc") |'
  prefs: []
  type: TYPE_TB
- en: '| [`floor`](generated/torch.floor.html#torch.floor "torch.floor") | Returns
    a new tensor with the floor of the elements of `input`, the largest integer less
    than or equal to each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`frac`](generated/torch.frac.html#torch.frac "torch.frac") | Computes the
    fractional portion of each element in `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lgamma`](generated/torch.lgamma.html#torch.lgamma "torch.lgamma") | Computes
    the natural logarithm of the absolute value of the gamma function on `input`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`log`](generated/torch.log.html#torch.log "torch.log") | Returns a new tensor
    with the natural logarithm of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log10`](generated/torch.log10.html#torch.log10 "torch.log10") | Returns
    a new tensor with the logarithm to the base 10 of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log1p`](generated/torch.log1p.html#torch.log1p "torch.log1p") | Returns
    a new tensor with the natural logarithm of (1 + `input`). |'
  prefs: []
  type: TYPE_TB
- en: '| [`log2`](generated/torch.log2.html#torch.log2 "torch.log2") | Returns a new
    tensor with the logarithm to the base 2 of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logit`](generated/torch.logit.html#torch.logit "torch.logit") | Alias for
    [`torch.special.logit()`](special.html#torch.special.logit "torch.special.logit").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`i0`](generated/torch.i0.html#torch.i0 "torch.i0") | Alias for [`torch.special.i0()`](special.html#torch.special.i0
    "torch.special.i0"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`isnan`](generated/torch.isnan.html#torch.isnan "torch.isnan") | Returns
    a new tensor with boolean elements representing if each element of `input` is
    NaN or not. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nan_to_num`](generated/torch.nan_to_num.html#torch.nan_to_num "torch.nan_to_num")
    | Replaces `NaN`, positive infinity, and negative infinity values in `input` with
    the values specified by `nan`, `posinf`, and `neginf`, respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| [`neg`](generated/torch.neg.html#torch.neg "torch.neg") | Returns a new tensor
    with the negative of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`negative`](generated/torch.negative.html#torch.negative "torch.negative")
    | Alias for [`torch.neg()`](generated/torch.neg.html#torch.neg "torch.neg") |'
  prefs: []
  type: TYPE_TB
- en: '| [`positive`](generated/torch.positive.html#torch.positive "torch.positive")
    | Returns `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pow`](generated/torch.pow.html#torch.pow "torch.pow") | Takes the power
    of each element in `input` with `exponent` and returns a tensor with the result.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`rad2deg`](generated/torch.rad2deg.html#torch.rad2deg "torch.rad2deg") |
    Returns a new tensor with each of the elements of `input` converted from angles
    in radians to degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reciprocal`](generated/torch.reciprocal.html#torch.reciprocal "torch.reciprocal")
    | Returns a new tensor with the reciprocal of the elements of `input` |'
  prefs: []
  type: TYPE_TB
- en: '| [`round`](generated/torch.round.html#torch.round "torch.round") | Rounds
    elements of `input` to the nearest integer. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rsqrt`](generated/torch.rsqrt.html#torch.rsqrt "torch.rsqrt") | Returns
    a new tensor with the reciprocal of the square-root of each of the elements of
    `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sigmoid`](generated/torch.sigmoid.html#torch.sigmoid "torch.sigmoid") |
    Alias for [`torch.special.expit()`](special.html#torch.special.expit "torch.special.expit").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`sign`](generated/torch.sign.html#torch.sign "torch.sign") | Returns a new
    tensor with the signs of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sgn`](generated/torch.sgn.html#torch.sgn "torch.sgn") | This function is
    an extension of torch.sign() to complex tensors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`signbit`](generated/torch.signbit.html#torch.signbit "torch.signbit") |
    Tests if each element of `input` has its sign bit set or not. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sin`](generated/torch.sin.html#torch.sin "torch.sin") | Returns a new tensor
    with the sine of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sinc`](generated/torch.sinc.html#torch.sinc "torch.sinc") | Alias for [`torch.special.sinc()`](special.html#torch.special.sinc
    "torch.special.sinc"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`sinh`](generated/torch.sinh.html#torch.sinh "torch.sinh") | Returns a new
    tensor with the hyperbolic sine of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sqrt`](generated/torch.sqrt.html#torch.sqrt "torch.sqrt") | Returns a new
    tensor with the square-root of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`square`](generated/torch.square.html#torch.square "torch.square") | Returns
    a new tensor with the square of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tan`](generated/torch.tan.html#torch.tan "torch.tan") | Returns a new tensor
    with the tangent of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tanh`](generated/torch.tanh.html#torch.tanh "torch.tanh") | Returns a new
    tensor with the hyperbolic tangent of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trunc`](generated/torch.trunc.html#torch.trunc "torch.trunc") | Returns
    a new tensor with the truncated integer values of the elements of `input`. |'
  prefs: []
  type: TYPE_TB
- en: 'The available inplace unary operators are all of the above **except**:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`angle`](generated/torch.angle.html#torch.angle "torch.angle") | Computes
    the element-wise angle (in radians) of the given `input` tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`positive`](generated/torch.positive.html#torch.positive "torch.positive")
    | Returns `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`signbit`](generated/torch.signbit.html#torch.signbit "torch.signbit") |
    Tests if each element of `input` has its sign bit set or not. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isnan`](generated/torch.isnan.html#torch.isnan "torch.isnan") | Returns
    a new tensor with boolean elements representing if each element of `input` is
    NaN or not. |'
  prefs: []
  type: TYPE_TB
- en: Binary Operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you may have seen in the tutorial, `MaskedTensor` also has binary operations
    implemented with the caveat that the masks in the two MaskedTensors must match
    or else an error will be raised. As noted in the error, if you need support for
    a particular operator or have proposed semantics for how they should behave instead,
    please open an issue on GitHub. For now, we have decided to go with the most conservative
    implementation to ensure that users know exactly what is going on and are being
    intentional about their decisions with masked semantics.
  prefs: []
  type: TYPE_NORMAL
- en: 'The available binary operators are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`add`](generated/torch.add.html#torch.add "torch.add") | Adds `other`, scaled
    by `alpha`, to `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`atan2`](generated/torch.atan2.html#torch.atan2 "torch.atan2") | Element-wise
    arctangent of <math><semantics><mrow><msub><mtext>input</mtext><mi>i</mi></msub><mi
    mathvariant="normal">/</mi><msub><mtext>other</mtext><mi>i</mi></msub></mrow><annotation
    encoding="application/x-tex">\text{input}_{i} / \text{other}_{i}</annotation></semantics></math>inputi​/otheri​
    with consideration of the quadrant. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctan2`](generated/torch.arctan2.html#torch.arctan2 "torch.arctan2") |
    Alias for [`torch.atan2()`](generated/torch.atan2.html#torch.atan2 "torch.atan2").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`bitwise_and`](generated/torch.bitwise_and.html#torch.bitwise_and "torch.bitwise_and")
    | Computes the bitwise AND of `input` and `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bitwise_or`](generated/torch.bitwise_or.html#torch.bitwise_or "torch.bitwise_or")
    | Computes the bitwise OR of `input` and `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bitwise_xor`](generated/torch.bitwise_xor.html#torch.bitwise_xor "torch.bitwise_xor")
    | Computes the bitwise XOR of `input` and `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bitwise_left_shift`](generated/torch.bitwise_left_shift.html#torch.bitwise_left_shift
    "torch.bitwise_left_shift") | Computes the left arithmetic shift of `input` by
    `other` bits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bitwise_right_shift`](generated/torch.bitwise_right_shift.html#torch.bitwise_right_shift
    "torch.bitwise_right_shift") | Computes the right arithmetic shift of `input`
    by `other` bits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`div`](generated/torch.div.html#torch.div "torch.div") | Divides each element
    of the input `input` by the corresponding element of `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`divide`](generated/torch.divide.html#torch.divide "torch.divide") | Alias
    for [`torch.div()`](generated/torch.div.html#torch.div "torch.div"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`floor_divide`](generated/torch.floor_divide.html#torch.floor_divide "torch.floor_divide")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmod`](generated/torch.fmod.html#torch.fmod "torch.fmod") | Applies C++''s
    [std::fmod](https://en.cppreference.com/w/cpp/numeric/math/fmod) entrywise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logaddexp`](generated/torch.logaddexp.html#torch.logaddexp "torch.logaddexp")
    | Logarithm of the sum of exponentiations of the inputs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logaddexp2`](generated/torch.logaddexp2.html#torch.logaddexp2 "torch.logaddexp2")
    | Logarithm of the sum of exponentiations of the inputs in base-2. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mul`](generated/torch.mul.html#torch.mul "torch.mul") | Multiplies `input`
    by `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multiply`](generated/torch.multiply.html#torch.multiply "torch.multiply")
    | Alias for [`torch.mul()`](generated/torch.mul.html#torch.mul "torch.mul"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`nextafter`](generated/torch.nextafter.html#torch.nextafter "torch.nextafter")
    | Return the next floating-point value after `input` towards `other`, elementwise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`remainder`](generated/torch.remainder.html#torch.remainder "torch.remainder")
    | Computes [Python''s modulus operation](https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations)
    entrywise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sub`](generated/torch.sub.html#torch.sub "torch.sub") | Subtracts `other`,
    scaled by `alpha`, from `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`subtract`](generated/torch.subtract.html#torch.subtract "torch.subtract")
    | Alias for [`torch.sub()`](generated/torch.sub.html#torch.sub "torch.sub"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`true_divide`](generated/torch.true_divide.html#torch.true_divide "torch.true_divide")
    | Alias for [`torch.div()`](generated/torch.div.html#torch.div "torch.div") with
    `rounding_mode=None`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eq`](generated/torch.eq.html#torch.eq "torch.eq") | Computes element-wise
    equality |'
  prefs: []
  type: TYPE_TB
- en: '| [`ne`](generated/torch.ne.html#torch.ne "torch.ne") | Computes <math><semantics><mrow><mtext>input</mtext><mo
    mathvariant="normal">≠</mo><mtext>other</mtext></mrow><annotation encoding="application/x-tex">\text{input}
    \neq \text{other}</annotation></semantics></math>input=other element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`le`](generated/torch.le.html#torch.le "torch.le") | Computes $\text{input} \leq \text{other}$input≤other
    element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ge`](generated/torch.ge.html#torch.ge "torch.ge") | Computes $\text{input} \geq \text{other}$input≥other
    element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`greater`](generated/torch.greater.html#torch.greater "torch.greater") |
    Alias for [`torch.gt()`](generated/torch.gt.html#torch.gt "torch.gt"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`greater_equal`](generated/torch.greater_equal.html#torch.greater_equal
    "torch.greater_equal") | Alias for [`torch.ge()`](generated/torch.ge.html#torch.ge
    "torch.ge"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`gt`](generated/torch.gt.html#torch.gt "torch.gt") | Computes $\text{input} > \text{other}$input>other
    element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`less_equal`](generated/torch.less_equal.html#torch.less_equal "torch.less_equal")
    | Alias for [`torch.le()`](generated/torch.le.html#torch.le "torch.le"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`lt`](generated/torch.lt.html#torch.lt "torch.lt") | Computes $\text{input} < \text{other}$input<other
    element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`less`](generated/torch.less.html#torch.less "torch.less") | Alias for [`torch.lt()`](generated/torch.lt.html#torch.lt
    "torch.lt"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum`](generated/torch.maximum.html#torch.maximum "torch.maximum") |
    Computes the element-wise maximum of `input` and `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum`](generated/torch.minimum.html#torch.minimum "torch.minimum") |
    Computes the element-wise minimum of `input` and `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmax`](generated/torch.fmax.html#torch.fmax "torch.fmax") | Computes the
    element-wise maximum of `input` and `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmin`](generated/torch.fmin.html#torch.fmin "torch.fmin") | Computes the
    element-wise minimum of `input` and `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`not_equal`](generated/torch.not_equal.html#torch.not_equal "torch.not_equal")
    | Alias for [`torch.ne()`](generated/torch.ne.html#torch.ne "torch.ne"). |'
  prefs: []
  type: TYPE_TB
- en: 'The available inplace binary operators are all of the above **except**:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`logaddexp`](generated/torch.logaddexp.html#torch.logaddexp "torch.logaddexp")
    | Logarithm of the sum of exponentiations of the inputs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logaddexp2`](generated/torch.logaddexp2.html#torch.logaddexp2 "torch.logaddexp2")
    | Logarithm of the sum of exponentiations of the inputs in base-2. |'
  prefs: []
  type: TYPE_TB
- en: '| [`equal`](generated/torch.equal.html#torch.equal "torch.equal") | `True`
    if two tensors have the same size and elements, `False` otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmin`](generated/torch.fmin.html#torch.fmin "torch.fmin") | Computes the
    element-wise minimum of `input` and `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum`](generated/torch.minimum.html#torch.minimum "torch.minimum") |
    Computes the element-wise minimum of `input` and `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmax`](generated/torch.fmax.html#torch.fmax "torch.fmax") | Computes the
    element-wise maximum of `input` and `other`. |'
  prefs: []
  type: TYPE_TB
- en: Reductions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following reductions are available (with autograd support). For more information,
    the [Overview](https://pytorch.org/tutorials/prototype/maskedtensor_overview.html)
    tutorial details some examples of reductions, while the [Advanced semantics](https://pytorch.org/tutorials/prototype/maskedtensor_advanced_semantics.html)
    tutorial has some further in-depth discussions about how we decided on certain
    reduction semantics.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`sum`](generated/torch.sum.html#torch.sum "torch.sum") | Returns the sum
    of all elements in the `input` tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](generated/torch.mean.html#torch.mean "torch.mean") | Returns the
    mean value of all elements in the `input` tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`amin`](generated/torch.amin.html#torch.amin "torch.amin") | Returns the
    minimum value of each slice of the `input` tensor in the given dimension(s) `dim`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`amax`](generated/torch.amax.html#torch.amax "torch.amax") | Returns the
    maximum value of each slice of the `input` tensor in the given dimension(s) `dim`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmin`](generated/torch.argmin.html#torch.argmin "torch.argmin") | Returns
    the indices of the minimum value(s) of the flattened tensor or along a dimension
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmax`](generated/torch.argmax.html#torch.argmax "torch.argmax") | Returns
    the indices of the maximum value of all elements in the `input` tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`prod`](generated/torch.prod.html#torch.prod "torch.prod") | Returns the
    product of all elements in the `input` tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`all`](generated/torch.all.html#torch.all "torch.all") | Tests if all elements
    in `input` evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`norm`](generated/torch.norm.html#torch.norm "torch.norm") | Returns the
    matrix norm or vector norm of a given tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`var`](generated/torch.var.html#torch.var "torch.var") | Calculates the
    variance over the dimensions specified by `dim`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`std`](generated/torch.std.html#torch.std "torch.std") | Calculates the
    standard deviation over the dimensions specified by `dim`. |'
  prefs: []
  type: TYPE_TB
- en: View and select functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ve included a number of view and select functions as well; intuitively,
    these operators will apply to both the data and the mask and then wrap the result
    in a `MaskedTensor`. For a quick example, consider [`select()`](generated/torch.select.html#torch.select
    "torch.select"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following ops are currently supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`atleast_1d`](generated/torch.atleast_1d.html#torch.atleast_1d "torch.atleast_1d")
    | Returns a 1-dimensional view of each input tensor with zero dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`broadcast_tensors`](generated/torch.broadcast_tensors.html#torch.broadcast_tensors
    "torch.broadcast_tensors") | Broadcasts the given tensors according to [Broadcasting
    semantics](notes/broadcasting.html#broadcasting-semantics). |'
  prefs: []
  type: TYPE_TB
- en: '| [`broadcast_to`](generated/torch.broadcast_to.html#torch.broadcast_to "torch.broadcast_to")
    | Broadcasts `input` to the shape `shape`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cat`](generated/torch.cat.html#torch.cat "torch.cat") | Concatenates the
    given sequence of `seq` tensors in the given dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chunk`](generated/torch.chunk.html#torch.chunk "torch.chunk") | Attempts
    to split a tensor into the specified number of chunks. |'
  prefs: []
  type: TYPE_TB
- en: '| [`column_stack`](generated/torch.column_stack.html#torch.column_stack "torch.column_stack")
    | Creates a new tensor by horizontally stacking the tensors in `tensors`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dsplit`](generated/torch.dsplit.html#torch.dsplit "torch.dsplit") | Splits
    `input`, a tensor with three or more dimensions, into multiple tensors depthwise
    according to `indices_or_sections`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`flatten`](generated/torch.flatten.html#torch.flatten "torch.flatten") |
    Flattens `input` by reshaping it into a one-dimensional tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hsplit`](generated/torch.hsplit.html#torch.hsplit "torch.hsplit") | Splits
    `input`, a tensor with one or more dimensions, into multiple tensors horizontally
    according to `indices_or_sections`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hstack`](generated/torch.hstack.html#torch.hstack "torch.hstack") | Stack
    tensors in sequence horizontally (column wise). |'
  prefs: []
  type: TYPE_TB
- en: '| [`kron`](generated/torch.kron.html#torch.kron "torch.kron") | Computes the
    Kronecker product, denoted by $\otimes$⊗, of `input`
    and `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`meshgrid`](generated/torch.meshgrid.html#torch.meshgrid "torch.meshgrid")
    | Creates grids of coordinates specified by the 1D inputs in attr:tensors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`narrow`](generated/torch.narrow.html#torch.narrow "torch.narrow") | Returns
    a new tensor that is a narrowed version of `input` tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ravel`](generated/torch.ravel.html#torch.ravel "torch.ravel") | Return
    a contiguous flattened tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`select`](generated/torch.select.html#torch.select "torch.select") | Slices
    the `input` tensor along the selected dimension at the given index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`split`](generated/torch.split.html#torch.split "torch.split") | Splits
    the tensor into chunks. |'
  prefs: []
  type: TYPE_TB
- en: '| [`t`](generated/torch.t.html#torch.t "torch.t") | Expects `input` to be <=
    2-D tensor and transposes dimensions 0 and 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`transpose`](generated/torch.transpose.html#torch.transpose "torch.transpose")
    | Returns a tensor that is a transposed version of `input`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vsplit`](generated/torch.vsplit.html#torch.vsplit "torch.vsplit") | Splits
    `input`, a tensor with two or more dimensions, into multiple tensors vertically
    according to `indices_or_sections`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vstack`](generated/torch.vstack.html#torch.vstack "torch.vstack") | Stack
    tensors in sequence vertically (row wise). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Tensor.expand`](generated/torch.Tensor.expand.html#torch.Tensor.expand
    "torch.Tensor.expand") | Returns a new view of the `self` tensor with singleton
    dimensions expanded to a larger size. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Tensor.expand_as`](generated/torch.Tensor.expand_as.html#torch.Tensor.expand_as
    "torch.Tensor.expand_as") | Expand this tensor to the same size as `other`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Tensor.reshape`](generated/torch.Tensor.reshape.html#torch.Tensor.reshape
    "torch.Tensor.reshape") | Returns a tensor with the same data and number of elements
    as `self` but with the specified shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Tensor.reshape_as`](generated/torch.Tensor.reshape_as.html#torch.Tensor.reshape_as
    "torch.Tensor.reshape_as") | Returns this tensor as the same shape as `other`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Tensor.view`](generated/torch.Tensor.view.html#torch.Tensor.view "torch.Tensor.view")
    | Returns a new tensor with the same data as the `self` tensor but of a different
    `shape`. |'
  prefs: []
  type: TYPE_TB
