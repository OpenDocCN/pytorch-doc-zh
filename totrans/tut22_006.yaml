- en: Quickstart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html](https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-beginner-basics-quickstart-tutorial-py) to download
    the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '[Learn the Basics](intro.html) || **Quickstart** || [Tensors](tensorqs_tutorial.html)
    || [Datasets & DataLoaders](data_tutorial.html) || [Transforms](transforms_tutorial.html)
    || [Build Model](buildmodel_tutorial.html) || [Autograd](autogradqs_tutorial.html)
    || [Optimization](optimization_tutorial.html) || [Save & Load Model](saveloadrun_tutorial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: This section runs through the API for common tasks in machine learning. Refer
    to the links in each section to dive deeper.
  prefs: []
  type: TYPE_NORMAL
- en: Working with data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PyTorch has two [primitives to work with data](https://pytorch.org/docs/stable/data.html):
    `torch.utils.data.DataLoader` and `torch.utils.data.Dataset`. `Dataset` stores
    the samples and their corresponding labels, and `DataLoader` wraps an iterable
    around the `Dataset`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: PyTorch offers domain-specific libraries such as [TorchText](https://pytorch.org/text/stable/index.html),
    [TorchVision](https://pytorch.org/vision/stable/index.html), and [TorchAudio](https://pytorch.org/audio/stable/index.html),
    all of which include datasets. For this tutorial, we will be using a TorchVision
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `torchvision.datasets` module contains `Dataset` objects for many real-world
    vision data like CIFAR, COCO ([full list here](https://pytorch.org/vision/stable/datasets.html)).
    In this tutorial, we use the FashionMNIST dataset. Every TorchVision `Dataset`
    includes two arguments: `transform` and `target_transform` to modify the samples
    and labels respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We pass the `Dataset` as an argument to `DataLoader`. This wraps an iterable
    over our dataset, and supports automatic batching, sampling, shuffling and multiprocess
    data loading. Here we define a batch size of 64, i.e. each element in the dataloader
    iterable will return a batch of 64 features and labels.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Read more about [loading data in PyTorch](data_tutorial.html).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To define a neural network in PyTorch, we create a class that inherits from
    [nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html). We
    define the layers of the network in the `__init__` function and specify how data
    will pass through the network in the `forward` function. To accelerate operations
    in the neural network, we move it to the GPU or MPS if available.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Read more about [building neural networks in PyTorch](buildmodel_tutorial.html).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing the Model Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To train a model, we need a [loss function](https://pytorch.org/docs/stable/nn.html#loss-functions)
    and an [optimizer](https://pytorch.org/docs/stable/optim.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In a single training loop, the model makes predictions on the training dataset
    (fed to it in batches), and backpropagates the prediction error to adjust the
    model’s parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We also check the model’s performance against the test dataset to ensure it
    is learning.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The training process is conducted over several iterations (*epochs*). During
    each epoch, the model learns parameters to make better predictions. We print the
    model’s accuracy and loss at each epoch; we’d like to see the accuracy increase
    and the loss decrease with every epoch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Read more about [Training your model](optimization_tutorial.html).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Saving Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common way to save a model is to serialize the internal state dictionary (containing
    the model parameters).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Loading Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process for loading a model includes re-creating the model structure and
    loading the state dictionary into it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This model can now be used to make predictions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Read more about [Saving & Loading your model](saveloadrun_tutorial.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 0 minutes 58.630 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: quickstart_tutorial.py`](../../_downloads/51f1e1167acc0fda8f9d8fd8597ee626/quickstart_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: quickstart_tutorial.ipynb`](../../_downloads/af0caf6d7af0dda755f4c9d7af9ccc2c/quickstart_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
