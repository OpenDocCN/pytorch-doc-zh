["```py\nimport torch\nimport torchaudio\n\nprint(torch.__version__)\nprint([torchaudio.__version__](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\n2.2.0\n2.2.0 \n```", "```py\n[device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\") = [torch.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")(\"cuda\" if [torch.cuda.is_available](https://pytorch.org/docs/stable/generated/torch.cuda.is_available.html#torch.cuda.is_available \"torch.cuda.is_available\")() else \"cpu\")\nprint([device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")) \n```", "```py\ncuda \n```", "```py\nimport IPython\nimport matplotlib.pyplot as plt\n\nimport torchaudio.functional as F \n```", "```py\n[SPEECH_FILE](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\") = torchaudio.utils.download_asset(\"tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav\")\n[waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), _ = torchaudio.load([SPEECH_FILE](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"))\n[TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = \"i had that curiosity beside me at this moment\".split() \n```", "```py\nbundle = torchaudio.pipelines.MMS_FA\n\nmodel = bundle.get_model(with_star=False).to([device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\"))\nwith [torch.inference_mode](https://pytorch.org/docs/stable/generated/torch.inference_mode.html#torch.inference_mode \"torch.inference_mode\")():\n    [emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), _ = model([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").to([device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\"))) \n```", "```py\nDownloading: \"https://dl.fbaipublicfiles.com/mms/torchaudio/ctc_alignment_mling_uroman/model.pt\" to /root/.cache/torch/hub/checkpoints/model.pt\n\n  0%|          | 0.00/1.18G [00:00<?, ?B/s]\n  2%|1         | 19.7M/1.18G [00:00<00:06, 207MB/s]\n  4%|3         | 42.2M/1.18G [00:00<00:05, 222MB/s]\n  5%|5         | 63.4M/1.18G [00:00<00:05, 222MB/s]\n  7%|7         | 84.5M/1.18G [00:00<00:05, 207MB/s]\n  9%|8         | 107M/1.18G [00:00<00:05, 219MB/s]\n 11%|#         | 132M/1.18G [00:00<00:04, 232MB/s]\n 13%|#3        | 157M/1.18G [00:00<00:04, 241MB/s]\n 15%|#4        | 180M/1.18G [00:00<00:04, 236MB/s]\n 17%|#6        | 203M/1.18G [00:00<00:04, 229MB/s]\n 19%|#8        | 225M/1.18G [00:01<00:04, 227MB/s]\n 21%|##        | 248M/1.18G [00:01<00:04, 230MB/s]\n 23%|##2       | 273M/1.18G [00:01<00:04, 238MB/s]\n 25%|##4       | 295M/1.18G [00:01<00:04, 222MB/s]\n 26%|##6       | 317M/1.18G [00:01<00:04, 217MB/s]\n 28%|##8       | 339M/1.18G [00:01<00:04, 222MB/s]\n 30%|###       | 364M/1.18G [00:01<00:03, 232MB/s]\n 32%|###2      | 387M/1.18G [00:01<00:03, 234MB/s]\n 34%|###4      | 410M/1.18G [00:01<00:03, 236MB/s]\n 37%|###6      | 441M/1.18G [00:01<00:03, 261MB/s]\n 39%|###8      | 468M/1.18G [00:02<00:02, 266MB/s]\n 41%|####1     | 494M/1.18G [00:02<00:02, 250MB/s]\n 43%|####3     | 518M/1.18G [00:02<00:02, 250MB/s]\n 45%|####5     | 542M/1.18G [00:02<00:03, 208MB/s]\n 47%|####6     | 564M/1.18G [00:02<00:03, 214MB/s]\n 49%|####8     | 585M/1.18G [00:02<00:03, 210MB/s]\n 50%|#####     | 606M/1.18G [00:02<00:03, 206MB/s]\n 52%|#####1    | 626M/1.18G [00:02<00:03, 199MB/s]\n 54%|#####4    | 651M/1.18G [00:03<00:02, 217MB/s]\n 56%|#####6    | 676M/1.18G [00:03<00:02, 229MB/s]\n 58%|#####8    | 700M/1.18G [00:03<00:02, 235MB/s]\n 60%|######    | 724M/1.18G [00:03<00:02, 239MB/s]\n 62%|######2   | 749M/1.18G [00:03<00:01, 245MB/s]\n 64%|######4   | 772M/1.18G [00:03<00:01, 237MB/s]\n 66%|######6   | 795M/1.18G [00:03<00:01, 239MB/s]\n 68%|######7   | 818M/1.18G [00:03<00:01, 229MB/s]\n 70%|#######   | 844M/1.18G [00:03<00:01, 240MB/s]\n 72%|#######2  | 867M/1.18G [00:03<00:01, 238MB/s]\n 74%|#######3  | 890M/1.18G [00:04<00:01, 215MB/s]\n 76%|#######5  | 911M/1.18G [00:04<00:01, 199MB/s]\n 77%|#######7  | 931M/1.18G [00:04<00:01, 204MB/s]\n 79%|#######9  | 952M/1.18G [00:04<00:01, 207MB/s]\n 81%|########1 | 978M/1.18G [00:04<00:01, 227MB/s]\n 83%|########3 | 0.98G/1.18G [00:04<00:00, 226MB/s]\n 85%|########4 | 1.00G/1.18G [00:04<00:00, 226MB/s]\n 87%|########7 | 1.02G/1.18G [00:04<00:00, 242MB/s]\n 89%|########9 | 1.05G/1.18G [00:04<00:00, 244MB/s]\n 91%|#########1| 1.07G/1.18G [00:05<00:00, 233MB/s]\n 93%|#########2| 1.09G/1.18G [00:05<00:00, 231MB/s]\n 95%|#########4| 1.11G/1.18G [00:05<00:00, 234MB/s]\n 97%|#########6| 1.14G/1.18G [00:05<00:00, 234MB/s]\n 99%|#########8| 1.16G/1.18G [00:05<00:00, 243MB/s]\n100%|##########| 1.18G/1.18G [00:05<00:00, 229MB/s] \n```", "```py\ndef plot_emission([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    fig, ax = plt.subplots()\n    ax.imshow([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").cpu().T)\n    ax.set_title(\"Frame-wise class probabilities\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Labels\")\n    fig.tight_layout()\n\nplot_emission([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]) \n```", "```py\n[LABELS](https://docs.python.org/3/library/stdtypes.html#tuple \"builtins.tuple\") = bundle.get_labels(star=None)\n[DICTIONARY](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\") = bundle.get_dict(star=None)\nfor [k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\"), [v](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in [DICTIONARY](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\").items():\n    print(f\"{[k](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")}: {[v](https://docs.python.org/3/library/functions.html#int \"builtins.int\")}\") \n```", "```py\n-: 0\na: 1\ni: 2\ne: 3\nn: 4\no: 5\nu: 6\nt: 7\ns: 8\nr: 9\nm: 10\nk: 11\nl: 12\nd: 13\ng: 14\nh: 15\ny: 16\nb: 17\np: 18\nw: 19\nc: 20\nv: 21\nj: 22\nz: 23\nf: 24\n': 25\nq: 26\nx: 27 \n```", "```py\n[tokenized_transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = [[DICTIONARY](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\")[c] for word in [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") for c in word]\n\nfor [t](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in [tokenized_transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"):\n    print([t](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), end=\" \")\nprint() \n```", "```py\n2 15 1 13 7 15 1 7 20 6 9 2 5 8 2 7 16 17 3 8 2 13 3 10 3 1 7 7 15 2 8 10 5 10 3 4 7 \n```", "```py\ndef align([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), tokens):\n    targets = [torch.tensor](https://pytorch.org/docs/stable/generated/torch.tensor.html#torch.tensor \"torch.tensor\")([tokens], dtype=[torch.int32](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"), [device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")=[device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\"))\n    alignments, scores = F.forced_align([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), targets, blank=0)\n\n    alignments, scores = alignments[0], scores[0]  # remove batch dimension for simplicity\n    scores = scores.exp()  # convert back to probability\n    return alignments, scores\n\n[aligned_tokens](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [alignment_scores](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = align([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [tokenized_transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")) \n```", "```py\nfor [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), ([ali](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [score](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) in enumerate(zip([aligned_tokens](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [alignment_scores](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))):\n    print(f\"{[i](https://docs.python.org/3/library/functions.html#int \"builtins.int\"):3d}:\\t{[ali](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"):2d} [{[LABELS](https://docs.python.org/3/library/stdtypes.html#tuple \"builtins.tuple\")[[ali](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")]}], {[score](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"):.2f}\") \n```", "```py\n 0:     0 [-], 1.00\n  1:     0 [-], 1.00\n  2:     0 [-], 1.00\n  3:     0 [-], 1.00\n  4:     0 [-], 1.00\n  5:     0 [-], 1.00\n  6:     0 [-], 1.00\n  7:     0 [-], 1.00\n  8:     0 [-], 1.00\n  9:     0 [-], 1.00\n 10:     0 [-], 1.00\n 11:     0 [-], 1.00\n 12:     0 [-], 1.00\n 13:     0 [-], 1.00\n 14:     0 [-], 1.00\n 15:     0 [-], 1.00\n 16:     0 [-], 1.00\n 17:     0 [-], 1.00\n 18:     0 [-], 1.00\n 19:     0 [-], 1.00\n 20:     0 [-], 1.00\n 21:     0 [-], 1.00\n 22:     0 [-], 1.00\n 23:     0 [-], 1.00\n 24:     0 [-], 1.00\n 25:     0 [-], 1.00\n 26:     0 [-], 1.00\n 27:     0 [-], 1.00\n 28:     0 [-], 1.00\n 29:     0 [-], 1.00\n 30:     0 [-], 1.00\n 31:     0 [-], 1.00\n 32:     2 [i], 1.00\n 33:     0 [-], 1.00\n 34:     0 [-], 1.00\n 35:    15 [h], 1.00\n 36:    15 [h], 0.93\n 37:     1 [a], 1.00\n 38:     0 [-], 0.96\n 39:     0 [-], 1.00\n 40:     0 [-], 1.00\n 41:    13 [d], 1.00\n 42:     0 [-], 1.00\n 43:     0 [-], 0.97\n 44:     7 [t], 1.00\n 45:    15 [h], 1.00\n 46:     0 [-], 0.98\n 47:     1 [a], 1.00\n 48:     0 [-], 1.00\n 49:     0 [-], 1.00\n 50:     7 [t], 1.00\n 51:     0 [-], 1.00\n 52:     0 [-], 1.00\n 53:     0 [-], 1.00\n 54:    20 [c], 1.00\n 55:     0 [-], 1.00\n 56:     0 [-], 1.00\n 57:     0 [-], 1.00\n 58:     6 [u], 1.00\n 59:     6 [u], 0.96\n 60:     0 [-], 1.00\n 61:     0 [-], 1.00\n 62:     0 [-], 0.53\n 63:     9 [r], 1.00\n 64:     0 [-], 1.00\n 65:     2 [i], 1.00\n 66:     0 [-], 1.00\n 67:     0 [-], 1.00\n 68:     0 [-], 1.00\n 69:     0 [-], 1.00\n 70:     0 [-], 1.00\n 71:     0 [-], 0.96\n 72:     5 [o], 1.00\n 73:     0 [-], 1.00\n 74:     0 [-], 1.00\n 75:     0 [-], 1.00\n 76:     0 [-], 1.00\n 77:     0 [-], 1.00\n 78:     0 [-], 1.00\n 79:     8 [s], 1.00\n 80:     0 [-], 1.00\n 81:     0 [-], 1.00\n 82:     0 [-], 0.99\n 83:     2 [i], 1.00\n 84:     0 [-], 1.00\n 85:     7 [t], 1.00\n 86:     0 [-], 1.00\n 87:     0 [-], 1.00\n 88:    16 [y], 1.00\n 89:     0 [-], 1.00\n 90:     0 [-], 1.00\n 91:     0 [-], 1.00\n 92:     0 [-], 1.00\n 93:    17 [b], 1.00\n 94:     0 [-], 1.00\n 95:     3 [e], 1.00\n 96:     0 [-], 1.00\n 97:     0 [-], 1.00\n 98:     0 [-], 1.00\n 99:     0 [-], 1.00\n100:     0 [-], 1.00\n101:     8 [s], 1.00\n102:     0 [-], 1.00\n103:     0 [-], 1.00\n104:     0 [-], 1.00\n105:     0 [-], 1.00\n106:     0 [-], 1.00\n107:     0 [-], 1.00\n108:     0 [-], 1.00\n109:     0 [-], 0.64\n110:     2 [i], 1.00\n111:     0 [-], 1.00\n112:     0 [-], 1.00\n113:    13 [d], 1.00\n114:     3 [e], 0.85\n115:     0 [-], 1.00\n116:    10 [m], 1.00\n117:     0 [-], 1.00\n118:     0 [-], 1.00\n119:     3 [e], 1.00\n120:     0 [-], 1.00\n121:     0 [-], 1.00\n122:     0 [-], 1.00\n123:     0 [-], 1.00\n124:     1 [a], 1.00\n125:     0 [-], 1.00\n126:     0 [-], 1.00\n127:     7 [t], 1.00\n128:     0 [-], 1.00\n129:     7 [t], 1.00\n130:    15 [h], 1.00\n131:     0 [-], 0.79\n132:     2 [i], 1.00\n133:     0 [-], 1.00\n134:     0 [-], 1.00\n135:     0 [-], 1.00\n136:     8 [s], 1.00\n137:     0 [-], 1.00\n138:     0 [-], 1.00\n139:     0 [-], 1.00\n140:     0 [-], 1.00\n141:    10 [m], 1.00\n142:     0 [-], 1.00\n143:     0 [-], 1.00\n144:     5 [o], 1.00\n145:     0 [-], 1.00\n146:     0 [-], 1.00\n147:     0 [-], 1.00\n148:    10 [m], 1.00\n149:     0 [-], 1.00\n150:     0 [-], 1.00\n151:     3 [e], 1.00\n152:     0 [-], 1.00\n153:     4 [n], 1.00\n154:     0 [-], 1.00\n155:     7 [t], 1.00\n156:     0 [-], 1.00\n157:     0 [-], 1.00\n158:     0 [-], 1.00\n159:     0 [-], 1.00\n160:     0 [-], 1.00\n161:     0 [-], 1.00\n162:     0 [-], 1.00\n163:     0 [-], 1.00\n164:     0 [-], 1.00\n165:     0 [-], 1.00\n166:     0 [-], 1.00\n167:     0 [-], 1.00\n168:     0 [-], 1.00 \n```", "```py\n31:     0 [-], 1.00\n32:     2 [[i](https://docs.python.org/3/library/functions.html#int \"builtins.int\")], 1.00  \"i\" starts and ends\n33:     0 [-], 1.00\n34:     0 [-], 1.00\n35:    15 [h], 1.00  \"h\" starts\n36:    15 [h], 0.93  \"h\" ends\n37:     1 [a], 1.00  \"a\" starts and ends\n38:     0 [-], 0.96\n39:     0 [-], 1.00\n40:     0 [-], 1.00\n41:    13 [d], 1.00  \"d\" starts and ends\n42:     0 [-], 1.00 \n```", "```py\na a a b -> a b\na - - b -> a b\na a - b -> a b\na - a b -> a a b\n  ^^^       ^^^ \n```", "```py\n[token_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = F.merge_tokens([aligned_tokens](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [alignment_scores](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\nprint(\"Token\\tTime\\tScore\")\nfor s in [token_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"):\n    print(f\"{[LABELS](https://docs.python.org/3/library/stdtypes.html#tuple \"builtins.tuple\")[[s.token](https://docs.python.org/3/library/functions.html#int \"builtins.int\")]}\\t[{[s.start](https://docs.python.org/3/library/functions.html#int \"builtins.int\"):3d}, {[s.end](https://docs.python.org/3/library/functions.html#int \"builtins.int\"):3d})\\t{[s.score](https://docs.python.org/3/library/functions.html#float \"builtins.float\"):.2f}\") \n```", "```py\nToken   Time    Score\ni       [ 32,  33)      1.00\nh       [ 35,  37)      0.96\na       [ 37,  38)      1.00\nd       [ 41,  42)      1.00\nt       [ 44,  45)      1.00\nh       [ 45,  46)      1.00\na       [ 47,  48)      1.00\nt       [ 50,  51)      1.00\nc       [ 54,  55)      1.00\nu       [ 58,  60)      0.98\nr       [ 63,  64)      1.00\ni       [ 65,  66)      1.00\no       [ 72,  73)      1.00\ns       [ 79,  80)      1.00\ni       [ 83,  84)      1.00\nt       [ 85,  86)      1.00\ny       [ 88,  89)      1.00\nb       [ 93,  94)      1.00\ne       [ 95,  96)      1.00\ns       [101, 102)      1.00\ni       [110, 111)      1.00\nd       [113, 114)      1.00\ne       [114, 115)      0.85\nm       [116, 117)      1.00\ne       [119, 120)      1.00\na       [124, 125)      1.00\nt       [127, 128)      1.00\nt       [129, 130)      1.00\nh       [130, 131)      1.00\ni       [132, 133)      1.00\ns       [136, 137)      1.00\nm       [141, 142)      1.00\no       [144, 145)      1.00\nm       [148, 149)      1.00\ne       [151, 152)      1.00\nn       [153, 154)      1.00\nt       [155, 156)      1.00 \n```", "```py\ndef unflatten(list_, lengths):\n    assert len(list_) == sum(lengths)\n    [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = 0\n    ret = []\n    for l in lengths:\n        ret.append(list_[[i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") : [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + l])\n        [i](https://docs.python.org/3/library/functions.html#int \"builtins.int\") += l\n    return ret\n\n[word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = unflatten([token_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [len(word) for word in [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")]) \n```", "```py\n# Compute average score weighted by the span length\ndef _score(spans):\n    return sum([s.score](https://docs.python.org/3/library/functions.html#float \"builtins.float\") * len(s) for s in spans) / sum(len(s) for s in spans)\n\ndef preview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), spans, [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), sample_rate=bundle.sample_rate):\n    ratio = [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").size(1) / [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\")\n    x0 = int(ratio * spans[0].start)\n    x1 = int(ratio * spans[-1].end)\n    print(f\"{[transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")} ({_score(spans):.2f}): {x0  /  sample_rate:.3f} - {x1  /  sample_rate:.3f} sec\")\n    segment = [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[:, x0:x1]\n    return IPython.display.Audio(segment.numpy(), rate=sample_rate)\n\n[num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\") = [emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").size(1) \n```", "```py\n# Generate the audio for each segment\nprint([TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"))\nIPython.display.Audio([SPEECH_FILE](https://docs.python.org/3/library/stdtypes.html#str \"builtins.str\")) \n```", "```py\n['i', 'had', 'that', 'curiosity', 'beside', 'me', 'at', 'this', 'moment'] \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[0], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[0]) \n```", "```py\ni (1.00): 0.644 - 0.664 sec \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[1], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[1]) \n```", "```py\nhad (0.98): 0.704 - 0.845 sec \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[2], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[2]) \n```", "```py\nthat (1.00): 0.885 - 1.026 sec \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[3], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[3]) \n```", "```py\ncuriosity (1.00): 1.086 - 1.790 sec \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[4], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[4]) \n```", "```py\nbeside (0.97): 1.871 - 2.314 sec \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[5], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[5]) \n```", "```py\nme (1.00): 2.334 - 2.414 sec \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[6], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[6]) \n```", "```py\nat (1.00): 2.495 - 2.575 sec \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[7], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[7]) \n```", "```py\nthis (1.00): 2.595 - 2.756 sec \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[8], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[8]) \n```", "```py\nmoment (1.00): 2.837 - 3.138 sec \n```", "```py\ndef plot_alignments([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [token_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), sample_rate=bundle.sample_rate):\n    ratio = [waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").size(1) / [emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").size(1) / sample_rate\n\n    fig, axes = plt.subplots(2, 1)\n    axes[0].imshow([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0].detach().cpu().T, aspect=\"auto\")\n    axes[0].set_title(\"Emission\")\n    axes[0].set_xticks([])\n\n    axes[1].specgram([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0], Fs=sample_rate)\n    for t_spans, chars in zip([token_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")):\n        t0, t1 = t_spans[0].start + 0.1, t_spans[-1].end - 0.1\n        axes[0].axvspan(t0 - 0.5, t1 - 0.5, facecolor=\"None\", hatch=\"/\", edgecolor=\"white\")\n        axes[1].axvspan(ratio * t0, ratio * t1, facecolor=\"None\", hatch=\"/\", edgecolor=\"white\")\n        axes[1].annotate(f\"{_score(t_spans):.2f}\", (ratio * t0, sample_rate * 0.51), annotation_clip=False)\n\n        for span, char in zip(t_spans, chars):\n            t0 = span.start * ratio\n            axes[1].annotate(char, (t0, sample_rate * 0.55), annotation_clip=False)\n\n    axes[1].set_xlabel(\"time [second]\")\n    axes[1].set_xlim([0, None])\n    fig.tight_layout() \n```", "```py\nplot_alignments([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")) \n```", "```py\ndef plot_scores([word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), scores):\n    fig, ax = plt.subplots()\n    span_xs, span_hs = [], []\n    ax.axvspan([word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[0][0].start - 0.05, [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[-1][-1].end + 0.05, facecolor=\"paleturquoise\", edgecolor=\"none\", zorder=-1)\n    for t_span in [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"):\n        for span in t_span:\n            for [t](https://docs.python.org/3/library/functions.html#int \"builtins.int\") in range(span.start, span.end):\n                span_xs.append([t](https://docs.python.org/3/library/functions.html#int \"builtins.int\") + 0.5)\n                span_hs.append(scores[[t](https://docs.python.org/3/library/functions.html#int \"builtins.int\")].item())\n            ax.annotate([LABELS](https://docs.python.org/3/library/stdtypes.html#tuple \"builtins.tuple\")[span.token], (span.start, -0.07))\n        ax.axvspan(t_span[0].start - 0.05, t_span[-1].end + 0.05, facecolor=\"mistyrose\", edgecolor=\"none\", zorder=-1)\n    ax.bar(span_xs, span_hs, color=\"lightsalmon\", edgecolor=\"coral\")\n    ax.set_title(\"Frame-level scores and word segments\")\n    ax.set_ylim(-0.1, None)\n    ax.grid(True, axis=\"y\")\n    ax.axhline(0, color=\"black\")\n    fig.tight_layout()\n\nplot_scores([word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [alignment_scores](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n[DICTIONARY](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\")[\"*\"] = len([DICTIONARY](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\")) \n```", "```py\n[star_dim](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.zeros](https://pytorch.org/docs/stable/generated/torch.zeros.html#torch.zeros \"torch.zeros\")((1, [emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").size(1), 1), [device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\")=[emission.device](https://pytorch.org/docs/stable/tensor_attributes.html#torch.device \"torch.device\"), dtype=[emission.dtype](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\"))\n[emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.cat](https://pytorch.org/docs/stable/generated/torch.cat.html#torch.cat \"torch.cat\")(([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [star_dim](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), 2)\n\nassert len([DICTIONARY](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\")) == [emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape[2]\n\nplot_emission([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0]) \n```", "```py\ndef compute_alignments([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), dictionary):\n    tokens = [dictionary[char] for word in [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") for char in word]\n    alignment, scores = align([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), tokens)\n    [token_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = F.merge_tokens(alignment, scores)\n    [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = unflatten([token_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [len(word) for word in [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")])\n    return [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") \n```", "```py\n[word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = compute_alignments([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [DICTIONARY](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\"))\nplot_alignments([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [TRANSCRIPT](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")) \n```", "```py\n[transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = \"* this moment\".split()\n[word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = compute_alignments([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [DICTIONARY](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\"))\nplot_alignments([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")) \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[0], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[0]) \n```", "```py\n* (1.00): 0.000 - 2.595 sec \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[1], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[1]) \n```", "```py\nthis (1.00): 2.595 - 2.756 sec \n```", "```py\npreview_word([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[2], [num_frames](https://docs.python.org/3/library/functions.html#int \"builtins.int\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")[2]) \n```", "```py\nmoment (1.00): 2.837 - 3.138 sec \n```", "```py\n[transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = \"this moment\".split()\n[word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\") = compute_alignments([emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [DICTIONARY](https://docs.python.org/3/library/stdtypes.html#dict \"builtins.dict\"))\nplot_alignments([waveform](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [word_spans](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\"), [emission](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [transcript](https://docs.python.org/3/library/stdtypes.html#list \"builtins.list\")) \n```"]