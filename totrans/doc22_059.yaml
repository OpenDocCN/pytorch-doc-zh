- en: torch.hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/docs/stable/hub.html](https://pytorch.org/docs/stable/hub.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pytorch Hub is a pre-trained model repository designed to facilitate research
    reproducibility.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pytorch Hub supports publishing pre-trained models(model definitions and pre-trained
    weights) to a GitHub repository by adding a simple `hubconf.py` file;
  prefs: []
  type: TYPE_NORMAL
- en: '`hubconf.py` can have multiple entrypoints. Each entrypoint is defined as a
    python function (example: a pre-trained model you want to publish).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to implement an entrypoint?[](#how-to-implement-an-entrypoint "Permalink
    to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is a code snippet specifies an entrypoint for `resnet18` model if we expand
    the implementation in `pytorch/vision/hubconf.py`. In most case importing the
    right function in `hubconf.py` is sufficient. Here we just want to use the expanded
    version as an example to show how it works. You can see the full script in [pytorch/vision
    repo](https://github.com/pytorch/vision/blob/master/hubconf.py)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`dependencies` variable is a **list** of package names required to **load**
    the model. Note this might be slightly different from dependencies required for
    training a model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args` and `kwargs` are passed along to the real callable function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docstring of the function works as a help message. It explains what does the
    model do and what are the allowed positional/keyword arguments. It’s highly recommended
    to add a few examples here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entrypoint function can either return a model(nn.module), or auxiliary tools
    to make the user workflow smoother, e.g. tokenizers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Callables prefixed with underscore are considered as helper functions which
    won’t show up in [`torch.hub.list()`](#torch.hub.list "torch.hub.list").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pretrained weights can either be stored locally in the GitHub repo, or loadable
    by [`torch.hub.load_state_dict_from_url()`](#torch.hub.load_state_dict_from_url
    "torch.hub.load_state_dict_from_url"). If less than 2GB, it’s recommended to attach
    it to a [project release](https://help.github.com/en/articles/distributing-large-binaries)
    and use the url from the release. In the example above `torchvision.models.resnet.resnet18`
    handles `pretrained`, alternatively you can put the following logic in the entrypoint
    definition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Important Notice
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The published models should be at least in a branch/tag. It can’t be a random
    commit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading models from Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pytorch Hub provides convenient APIs to explore all available models in hub
    through [`torch.hub.list()`](#torch.hub.list "torch.hub.list"), show docstring
    and examples through [`torch.hub.help()`](#torch.hub.help "torch.hub.help") and
    load the pre-trained models using [`torch.hub.load()`](#torch.hub.load "torch.hub.load").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: List all callable entrypoints available in the repo specified by `github`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**github** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – a string with format “repo_owner/repo_name[:ref]” with an optional
    ref (tag or branch). If `ref` is not specified, the default branch is assumed
    to be `main` if it exists, and otherwise `master`. Example: ‘pytorch/vision:0.10’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**force_reload** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – whether to discard the existing cache and
    force a fresh download. Default is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**skip_validation** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – if `False`, torchhub will check that the
    branch or commit specified by the `github` argument properly belongs to the repo
    owner. This will make requests to the GitHub API; you can specify a non-default
    GitHub token by setting the `GITHUB_TOKEN` environment variable. Default is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trust_repo** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") *or* *None*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"check"`, `True`, `False` or `None`. This parameter was introduced in v1.12
    and helps ensuring that users only run code from repos that they trust.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `False`, a prompt will ask the user whether the repo should be trusted.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True`, the repo will be added to the trusted list and loaded without requiring
    explicit confirmation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `"check"`, the repo will be checked against the list of trusted repos in
    the cache. If it is not present in that list, the behaviour will fall back onto
    the `trust_repo=False` option.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If `None`: this will raise a warning, inviting the user to set `trust_repo`
    to either `False`, `True` or `"check"`. This is only present for backward compatibility
    and will be removed in v2.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Default is `None` and will eventually change to `"check"` in v2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: The available callables entrypoint
  prefs: []
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Show the docstring of entrypoint `model`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**github** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – a string with format <repo_owner/repo_name[:ref]> with an optional
    ref (a tag or a branch). If `ref` is not specified, the default branch is assumed
    to be `main` if it exists, and otherwise `master`. Example: ‘pytorch/vision:0.10’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**model** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – a string of entrypoint name defined in repo’s `hubconf.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**force_reload** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – whether to discard the existing cache and
    force a fresh download. Default is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**skip_validation** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – if `False`, torchhub will check that the
    ref specified by the `github` argument properly belongs to the repo owner. This
    will make requests to the GitHub API; you can specify a non-default GitHub token
    by setting the `GITHUB_TOKEN` environment variable. Default is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trust_repo** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") *or* *None*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"check"`, `True`, `False` or `None`. This parameter was introduced in v1.12
    and helps ensuring that users only run code from repos that they trust.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `False`, a prompt will ask the user whether the repo should be trusted.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True`, the repo will be added to the trusted list and loaded without requiring
    explicit confirmation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `"check"`, the repo will be checked against the list of trusted repos in
    the cache. If it is not present in that list, the behaviour will fall back onto
    the `trust_repo=False` option.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If `None`: this will raise a warning, inviting the user to set `trust_repo`
    to either `False`, `True` or `"check"`. This is only present for backward compatibility
    and will be removed in v2.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Default is `None` and will eventually change to `"check"` in v2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Load a model from a github repo or a local directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Loading a model is the typical use case, but this can also be used to
    for loading other objects such as tokenizers, loss functions, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: If `source` is ‘github’, `repo_or_dir` is expected to be of the form `repo_owner/repo_name[:ref]`
    with an optional ref (a tag or a branch).
  prefs: []
  type: TYPE_NORMAL
- en: If `source` is ‘local’, `repo_or_dir` is expected to be a path to a local directory.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**repo_or_dir** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – If `source` is ‘github’, this should correspond to a github
    repo with format `repo_owner/repo_name[:ref]` with an optional ref (tag or branch),
    for example ‘pytorch/vision:0.10’. If `ref` is not specified, the default branch
    is assumed to be `main` if it exists, and otherwise `master`. If `source` is ‘local’
    then it should be a path to a local directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**model** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – the name of a callable (entrypoint) defined in the repo/dir’s
    `hubconf.py`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***args** (*optional*) – the corresponding args for callable `model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**source** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")*,* *optional*) – ‘github’ or ‘local’. Specifies how `repo_or_dir`
    is to be interpreted. Default is ‘github’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trust_repo** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") *or* *None*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"check"`, `True`, `False` or `None`. This parameter was introduced in v1.12
    and helps ensuring that users only run code from repos that they trust.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `False`, a prompt will ask the user whether the repo should be trusted.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True`, the repo will be added to the trusted list and loaded without requiring
    explicit confirmation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `"check"`, the repo will be checked against the list of trusted repos in
    the cache. If it is not present in that list, the behaviour will fall back onto
    the `trust_repo=False` option.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If `None`: this will raise a warning, inviting the user to set `trust_repo`
    to either `False`, `True` or `"check"`. This is only present for backward compatibility
    and will be removed in v2.0.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Default is `None` and will eventually change to `"check"` in v2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**force_reload** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – whether to force a fresh download of the
    github repo unconditionally. Does not have any effect if `source = ''local''`.
    Default is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**verbose** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – If `False`, mute messages about hitting
    local caches. Note that the message about first download cannot be muted. Does
    not have any effect if `source = ''local''`. Default is `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**skip_validation** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – if `False`, torchhub will check that the
    branch or commit specified by the `github` argument properly belongs to the repo
    owner. This will make requests to the GitHub API; you can specify a non-default
    GitHub token by setting the `GITHUB_TOKEN` environment variable. Default is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs** (*optional*) – the corresponding kwargs for callable `model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: The output of the `model` callable when called with the given `*args` and `**kwargs`.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Download object at the given URL to a local path.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**url** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")) – URL of the object to download'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dst** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")) – Full path where object will be saved, e.g. `/tmp/temporary_file`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hash_prefix** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *optional*) – If not None, the SHA256 downloaded file
    should start with `hash_prefix`. Default: None'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – whether or not to display a progress bar
    to stderr Default: True'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Loads the Torch serialized object at the given URL.
  prefs: []
  type: TYPE_NORMAL
- en: If downloaded file is a zip file, it will be automatically decompressed.
  prefs: []
  type: TYPE_NORMAL
- en: If the object is already present in model_dir, it’s deserialized and returned.
    The default value of `model_dir` is `<hub_dir>/checkpoints` where `hub_dir` is
    the directory returned by [`get_dir()`](#torch.hub.get_dir "torch.hub.get_dir").
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**url** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")) – URL of the object to download'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**model_dir** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *optional*) – directory in which to save the object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**map_location** (*optional*) – a function or a dict specifying how to remap
    storage locations (see torch.load)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**progress** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – whether or not to display a progress bar
    to stderr. Default: True'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**check_hash** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – If True, the filename part of the URL should
    follow the naming convention `filename-<sha256>.ext` where `<sha256>` is the first
    eight or more digits of the SHA256 hash of the contents of the file. The hash
    is used to ensure unique names and to verify the contents of the file. Default:
    False'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**file_name** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* *optional*) – name for the downloaded file. Filename from
    `url` will be used if not set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**weights_only** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*,* *optional*) – If True, only weights will be loaded and
    no complex pickled objects. Recommended for untrusted sources. See [`load()`](generated/torch.load.html#torch.load
    "torch.load") for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return type
  prefs: []
  type: TYPE_NORMAL
- en: '[*Dict*](https://docs.python.org/3/library/typing.html#typing.Dict "(in Python
    v3.12)")[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)"), [*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in
    Python v3.12)")]'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Running a loaded model:
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that `*args` and `**kwargs` in [`torch.hub.load()`](#torch.hub.load "torch.hub.load")
    are used to **instantiate** a model. After you have loaded a model, how can you
    find out what you can do with the model? A suggested workflow is
  prefs: []
  type: TYPE_NORMAL
- en: '`dir(model)` to see all available methods of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`help(model.foo)` to check what arguments `model.foo` takes to run'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To help users explore without referring to documentation back and forth, we
    strongly recommend repo owners make function help messages clear and succinct.
    It’s also helpful to include a minimal working example.
  prefs: []
  type: TYPE_NORMAL
- en: Where are my downloaded models saved?[](#where-are-my-downloaded-models-saved
    "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The locations are used in the order of
  prefs: []
  type: TYPE_NORMAL
- en: Calling `hub.set_dir(<PATH_TO_HUB_DIR>)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$TORCH_HOME/hub`, if environment variable `TORCH_HOME` is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$XDG_CACHE_HOME/torch/hub`, if environment variable `XDG_CACHE_HOME` is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~/.cache/torch/hub`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Get the Torch Hub cache directory used for storing downloaded models & weights.
  prefs: []
  type: TYPE_NORMAL
- en: If [`set_dir()`](#torch.hub.set_dir "torch.hub.set_dir") is not called, default
    path is `$TORCH_HOME/hub` where environment variable `$TORCH_HOME` defaults to
    `$XDG_CACHE_HOME/torch`. `$XDG_CACHE_HOME` follows the X Design Group specification
    of the Linux filesystem layout, with a default value `~/.cache` if the environment
    variable is not set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Optionally set the Torch Hub directory used to save downloaded models & weights.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**d** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)")) – path to a local folder to save downloaded models & weights.'
  prefs: []
  type: TYPE_NORMAL
- en: Caching logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, we don’t clean up files after loading it. Hub uses the cache by
    default if it already exists in the directory returned by [`get_dir()`](#torch.hub.get_dir
    "torch.hub.get_dir").
  prefs: []
  type: TYPE_NORMAL
- en: Users can force a reload by calling `hub.load(..., force_reload=True)`. This
    will delete the existing GitHub folder and downloaded weights, reinitialize a
    fresh download. This is useful when updates are published to the same branch,
    users can keep up with the latest release.
  prefs: []
  type: TYPE_NORMAL
- en: Known limitations:
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Torch hub works by importing the package as if it was installed. There are some
    side effects introduced by importing in Python. For example, you can see new items
    in Python caches `sys.modules` and `sys.path_importer_cache` which is normal Python
    behavior. This also means that you may have import errors when importing different
    models from different repos, if the repos have the same sub-package names (typically,
    a `model` subpackage). A workaround for these kinds of import errors is to remove
    the offending sub-package from the `sys.modules` dict; more details can be found
    in [this GitHub issue](https://github.com/pytorch/hub/issues/243#issuecomment-942403391).
  prefs: []
  type: TYPE_NORMAL
- en: 'A known limitation that is worth mentioning here: users **CANNOT** load two
    different branches of the same repo in the **same python process**. It’s just
    like installing two packages with the same name in Python, which is not good.
    Cache might join the party and give you surprises if you actually try that. Of
    course it’s totally fine to load them in separate processes.'
  prefs: []
  type: TYPE_NORMAL
