["```py\nimport torch\nimport torch.nn.functional as F\nfrom functools import partial\n[_](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.manual_seed](https://pytorch.org/docs/stable/generated/torch.manual_seed.html#torch.manual_seed \"torch.manual_seed\")(0) \n```", "```py\ndef predict([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    return [F.linear](https://pytorch.org/docs/stable/generated/torch.nn.functional.linear.html#torch.nn.functional.linear \"torch.nn.functional.linear\")([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")).tanh() \n```", "```py\nD = 16\n[weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(D, D)\n[bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(D)\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(D)  # feature vector \n```", "```py\ndef compute_jac([xp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    jacobian_rows = [[torch.autograd.grad](https://pytorch.org/docs/stable/generated/torch.autograd.grad.html#torch.autograd.grad \"torch.autograd.grad\")(predict([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [xp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [xp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), vec)[0]\n                     for vec in [unit_vectors](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")]\n    return [torch.stack](https://pytorch.org/docs/stable/generated/torch.stack.html#torch.stack \"torch.stack\")(jacobian_rows)\n\n[xp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").clone().requires_grad_()\n[unit_vectors](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.eye](https://pytorch.org/docs/stable/generated/torch.eye.html#torch.eye \"torch.eye\")(D)\n\n[jacobian](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = compute_jac([xp](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\nprint([jacobian](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\nprint([jacobian](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0])  # show first row \n```", "```py\ntorch.Size([16, 16])\ntensor([-0.5956, -0.6096, -0.1326, -0.2295,  0.4490,  0.3661, -0.1672, -1.1190,\n         0.1705, -0.6683,  0.1851,  0.1630,  0.0634,  0.6547,  0.5908, -0.1308]) \n```", "```py\nfrom torch.func import [vmap](https://pytorch.org/docs/stable/generated/torch.vmap.html#torch.vmap \"torch.vmap\"), [vjp](https://pytorch.org/docs/stable/generated/torch.func.vjp.html#torch.func.vjp \"torch.func.vjp\")\n\n[_](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), vjp_fn = [vjp](https://pytorch.org/docs/stable/generated/torch.func.vjp.html#torch.func.vjp \"torch.func.vjp\")(partial(predict, [weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n[ft_jacobian](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), = [vmap](https://pytorch.org/docs/stable/generated/torch.vmap.html#torch.vmap \"torch.vmap\")(vjp_fn)([unit_vectors](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n# let's confirm both methods compute the same result\nassert [torch.allclose](https://pytorch.org/docs/stable/generated/torch.allclose.html#torch.allclose \"torch.allclose\")([ft_jacobian](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [jacobian](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nfrom torch.func import [jacrev](https://pytorch.org/docs/stable/generated/torch.func.jacrev.html#torch.func.jacrev \"torch.func.jacrev\")\n\n[ft_jacobian](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [jacrev](https://pytorch.org/docs/stable/generated/torch.func.jacrev.html#torch.func.jacrev \"torch.func.jacrev\")(predict, argnums=2)([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n\n# Confirm by running the following:\nassert [torch.allclose](https://pytorch.org/docs/stable/generated/torch.allclose.html#torch.allclose \"torch.allclose\")([ft_jacobian](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [jacobian](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ndef get_perf(first, first_descriptor, second, second_descriptor):\n  \"\"\"takes torch.benchmark objects and compares delta of second vs first.\"\"\"\n    faster = second.times[0]\n    slower = first.times[0]\n    gain = (slower-faster)/slower\n    if gain < 0: gain *=-1\n    final_gain = gain*100\n    print(f\" Performance delta: {final_gain:.4f} percent improvement with {second_descriptor} \") \n```", "```py\nfrom torch.utils.benchmark import [Timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\")\n\n[without_vmap](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\") = [Timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\")(stmt=\"compute_jac(xp)\", globals=globals())\n[with_vmap](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\") = [Timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\")(stmt=\"jacrev(predict, argnums=2)(weight, bias, x)\", globals=globals())\n\n[no_vmap_timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\") = [without_vmap.timeit](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer.timeit \"torch.utils.benchmark.Timer.timeit\")(500)\n[with_vmap_timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\") = [with_vmap.timeit](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer.timeit \"torch.utils.benchmark.Timer.timeit\")(500)\n\nprint([no_vmap_timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\"))\nprint([with_vmap_timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\")) \n```", "```py\n<torch.utils.benchmark.utils.common.Measurement object at 0x7fc093552980>\ncompute_jac(xp)\n  1.43 ms\n  1 measurement, 500 runs , 1 thread\n<torch.utils.benchmark.utils.common.Measurement object at 0x7fc0914a7790>\njacrev(predict, argnums=2)(weight, bias, x)\n  435.16 us\n  1 measurement, 500 runs , 1 thread \n```", "```py\nget_perf([no_vmap_timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\"), \"without vmap\",  [with_vmap_timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\"), \"vmap\") \n```", "```py\nPerformance delta: 69.4681 percent improvement with vmap \n```", "```py\n# note the change in input via ``argnums`` parameters of 0,1 to map to weight and bias\n[ft_jac_weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [ft_jac_bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [jacrev](https://pytorch.org/docs/stable/generated/torch.func.jacrev.html#torch.func.jacrev \"torch.func.jacrev\")(predict, argnums=(0, 1))([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nfrom torch.func import [jacrev](https://pytorch.org/docs/stable/generated/torch.func.jacrev.html#torch.func.jacrev \"torch.func.jacrev\"), [jacfwd](https://pytorch.org/docs/stable/generated/torch.func.jacfwd.html#torch.func.jacfwd \"torch.func.jacfwd\") \n```", "```py\nDin = 32\nDout = 2048\n[weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Dout, Din)\n\n[bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Dout)\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Din)\n\n# remember the general rule about taller vs wider... here we have a taller matrix:\nprint([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape)\n\n[using_fwd](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\") = [Timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\")(stmt=\"jacfwd(predict, argnums=2)(weight, bias, x)\", globals=globals())\n[using_bwd](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\") = [Timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\")(stmt=\"jacrev(predict, argnums=2)(weight, bias, x)\", globals=globals())\n\n[jacfwd_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\") = [using_fwd.timeit](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer.timeit \"torch.utils.benchmark.Timer.timeit\")(500)\n[jacrev_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\") = [using_bwd.timeit](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer.timeit \"torch.utils.benchmark.Timer.timeit\")(500)\n\nprint(f'jacfwd time: {[jacfwd_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\")}')\nprint(f'jacrev time: {[jacrev_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\")}') \n```", "```py\ntorch.Size([2048, 32])\njacfwd time: <torch.utils.benchmark.utils.common.Measurement object at 0x7fc091472d10>\njacfwd(predict, argnums=2)(weight, bias, x)\n  773.29 us\n  1 measurement, 500 runs , 1 thread\njacrev time: <torch.utils.benchmark.utils.common.Measurement object at 0x7fc0936e6b00>\njacrev(predict, argnums=2)(weight, bias, x)\n  8.54 ms\n  1 measurement, 500 runs , 1 thread \n```", "```py\nget_perf([jacfwd_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\"), \"jacfwd\", [jacrev_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\"), \"jacrev\", ); \n```", "```py\nPerformance delta: 1004.5112 percent improvement with jacrev \n```", "```py\nDin = 2048\nDout = 32\n[weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Dout, Din)\n[bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Dout)\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Din)\n\n[using_fwd](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\") = [Timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\")(stmt=\"jacfwd(predict, argnums=2)(weight, bias, x)\", globals=globals())\n[using_bwd](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\") = [Timer](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer \"torch.utils.benchmark.utils.timer.Timer\")(stmt=\"jacrev(predict, argnums=2)(weight, bias, x)\", globals=globals())\n\n[jacfwd_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\") = [using_fwd.timeit](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer.timeit \"torch.utils.benchmark.Timer.timeit\")(500)\n[jacrev_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\") = [using_bwd.timeit](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Timer.timeit \"torch.utils.benchmark.Timer.timeit\")(500)\n\nprint(f'jacfwd time: {[jacfwd_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\")}')\nprint(f'jacrev time: {[jacrev_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\")}') \n```", "```py\njacfwd time: <torch.utils.benchmark.utils.common.Measurement object at 0x7fc0915995a0>\njacfwd(predict, argnums=2)(weight, bias, x)\n  7.15 ms\n  1 measurement, 500 runs , 1 thread\njacrev time: <torch.utils.benchmark.utils.common.Measurement object at 0x7fc091473d60>\njacrev(predict, argnums=2)(weight, bias, x)\n  533.13 us\n  1 measurement, 500 runs , 1 thread \n```", "```py\nget_perf([jacrev_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\"), \"jacrev\", [jacfwd_timing](https://pytorch.org/docs/stable/benchmark_utils.html#torch.utils.benchmark.Measurement \"torch.utils.benchmark.utils.common.Measurement\"), \"jacfwd\") \n```", "```py\nPerformance delta: 1241.8207 percent improvement with jacfwd \n```", "```py\nfrom torch.func import [hessian](https://pytorch.org/docs/stable/generated/torch.func.hessian.html#torch.func.hessian \"torch.func.hessian\")\n\n# lets reduce the size in order not to overwhelm Colab. Hessians require\n# significant memory:\nDin = 512\nDout = 32\n[weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Dout, Din)\n[bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Dout)\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Din)\n\n[hess_api](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [hessian](https://pytorch.org/docs/stable/generated/torch.func.hessian.html#torch.func.hessian \"torch.func.hessian\")(predict, argnums=2)([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[hess_fwdfwd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [jacfwd](https://pytorch.org/docs/stable/generated/torch.func.jacfwd.html#torch.func.jacfwd \"torch.func.jacfwd\")([jacfwd](https://pytorch.org/docs/stable/generated/torch.func.jacfwd.html#torch.func.jacfwd \"torch.func.jacfwd\")(predict, argnums=2), argnums=2)([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[hess_revrev](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [jacrev](https://pytorch.org/docs/stable/generated/torch.func.jacrev.html#torch.func.jacrev \"torch.func.jacrev\")([jacrev](https://pytorch.org/docs/stable/generated/torch.func.jacrev.html#torch.func.jacrev \"torch.func.jacrev\")(predict, argnums=2), argnums=2)([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\n[torch.allclose](https://pytorch.org/docs/stable/generated/torch.allclose.html#torch.allclose \"torch.allclose\")([hess_api](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [hess_fwdfwd](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nTrue \n```", "```py\nbatch_size = 64\nDin = 31\nDout = 33\n\n[weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Dout, Din)\nprint(f\"weight shape = {[weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape}\")\n\n[bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(Dout)\n\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(batch_size, Din)\n\ncompute_batch_jacobian = [vmap](https://pytorch.org/docs/stable/generated/torch.vmap.html#torch.vmap \"torch.vmap\")([jacrev](https://pytorch.org/docs/stable/generated/torch.func.jacrev.html#torch.func.jacrev \"torch.func.jacrev\")(predict, argnums=2), in_dims=(None, None, 0))\n[batch_jacobian0](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = compute_batch_jacobian([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\nweight shape = torch.Size([33, 31]) \n```", "```py\ndef predict_with_output_summed([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n    return predict([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")).sum(0)\n\n[batch_jacobian1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [jacrev](https://pytorch.org/docs/stable/generated/torch.func.jacrev.html#torch.func.jacrev \"torch.func.jacrev\")(predict_with_output_summed, argnums=2)([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")).movedim(1, 0)\nassert [torch.allclose](https://pytorch.org/docs/stable/generated/torch.allclose.html#torch.allclose \"torch.allclose\")([batch_jacobian0](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [batch_jacobian1](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")) \n```", "```py\ncompute_batch_hessian = [vmap](https://pytorch.org/docs/stable/generated/torch.vmap.html#torch.vmap \"torch.vmap\")([hessian](https://pytorch.org/docs/stable/generated/torch.func.hessian.html#torch.func.hessian \"torch.func.hessian\")(predict, argnums=2), in_dims=(None, None, 0))\n\n[batch_hess](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = compute_batch_hessian([weight](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [bias](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n[batch_hess](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape \n```", "```py\ntorch.Size([64, 33, 31, 31]) \n```", "```py\nfrom torch.func import [jvp](https://pytorch.org/docs/stable/generated/torch.func.jvp.html#torch.func.jvp \"torch.func.jvp\"), [grad](https://pytorch.org/docs/stable/generated/torch.func.grad.html#torch.func.grad \"torch.func.grad\"), [vjp](https://pytorch.org/docs/stable/generated/torch.func.vjp.html#torch.func.vjp \"torch.func.vjp\")\n\ndef hvp(f, primals, tangents):\n  return [jvp](https://pytorch.org/docs/stable/generated/torch.func.jvp.html#torch.func.jvp \"torch.func.jvp\")([grad](https://pytorch.org/docs/stable/generated/torch.func.grad.html#torch.func.grad \"torch.func.grad\")(f), primals, tangents)[1] \n```", "```py\ndef f([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n  return [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").sin().sum()\n\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(2048)\n[tangent](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [torch.randn](https://pytorch.org/docs/stable/generated/torch.randn.html#torch.randn \"torch.randn\")(2048)\n\n[result](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = hvp(f, ([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"),), ([tangent](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"),)) \n```", "```py\ndef hvp_revrev(f, primals, tangents):\n  [_](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), vjp_fn = [vjp](https://pytorch.org/docs/stable/generated/torch.func.vjp.html#torch.func.vjp \"torch.func.vjp\")([grad](https://pytorch.org/docs/stable/generated/torch.func.grad.html#torch.func.grad \"torch.func.grad\")(f), *primals)\n  return vjp_fn(*tangents)\n\nresult_hvp_revrev = hvp_revrev(f, ([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"),), ([tangent](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"),))\nassert [torch.allclose](https://pytorch.org/docs/stable/generated/torch.allclose.html#torch.allclose \"torch.allclose\")([result](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), result_hvp_revrev[0]) \n```"]