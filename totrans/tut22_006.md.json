["```py\nimport torch\nfrom torch import nn\nfrom torch.utils.data import [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")\nfrom torchvision import datasets\nfrom torchvision.transforms import [ToTensor](https://pytorch.org/vision/stable/generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor \"torchvision.transforms.ToTensor\") \n```", "```py\n# Download training data from open datasets.\n[training_data](https://pytorch.org/vision/stable/generated/torchvision.datasets.FashionMNIST.html#torchvision.datasets.FashionMNIST \"torchvision.datasets.FashionMNIST\") = [datasets.FashionMNIST](https://pytorch.org/vision/stable/generated/torchvision.datasets.FashionMNIST.html#torchvision.datasets.FashionMNIST \"torchvision.datasets.FashionMNIST\")(\n    root=\"data\",\n    train=True,\n    download=True,\n    transform=[ToTensor](https://pytorch.org/vision/stable/generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor \"torchvision.transforms.ToTensor\")(),\n)\n\n# Download test data from open datasets.\n[test_data](https://pytorch.org/vision/stable/generated/torchvision.datasets.FashionMNIST.html#torchvision.datasets.FashionMNIST \"torchvision.datasets.FashionMNIST\") = [datasets.FashionMNIST](https://pytorch.org/vision/stable/generated/torchvision.datasets.FashionMNIST.html#torchvision.datasets.FashionMNIST \"torchvision.datasets.FashionMNIST\")(\n    root=\"data\",\n    train=False,\n    download=True,\n    transform=[ToTensor](https://pytorch.org/vision/stable/generated/torchvision.transforms.ToTensor.html#torchvision.transforms.ToTensor \"torchvision.transforms.ToTensor\")(),\n) \n```", "```py\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz\n\n  0%|          | 0/26421880 [00:00<?, ?it/s]\n  0%|          | 65536/26421880 [00:00<01:12, 362268.71it/s]\n  1%|          | 229376/26421880 [00:00<00:38, 680481.08it/s]\n  3%|3         | 819200/26421880 [00:00<00:13, 1853717.26it/s]\n 11%|#1        | 3014656/26421880 [00:00<00:03, 7167253.78it/s]\n 24%|##3       | 6258688/26421880 [00:00<00:01, 11757636.19it/s]\n 42%|####1     | 11075584/26421880 [00:00<00:00, 20718315.26it/s]\n 55%|#####4    | 14483456/26421880 [00:01<00:00, 20324854.10it/s]\n 74%|#######4  | 19562496/26421880 [00:01<00:00, 27572084.42it/s]\n 87%|########7 | 23068672/26421880 [00:01<00:00, 27527140.28it/s]\n100%|#########9| 26312704/26421880 [00:01<00:00, 26297445.36it/s]\n100%|##########| 26421880/26421880 [00:01<00:00, 18147607.68it/s]\nExtracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz\n\n  0%|          | 0/29515 [00:00<?, ?it/s]\n100%|##########| 29515/29515 [00:00<00:00, 327172.52it/s]\nExtracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz\n\n  0%|          | 0/4422102 [00:00<?, ?it/s]\n  1%|1         | 65536/4422102 [00:00<00:11, 363567.22it/s]\n  5%|5         | 229376/4422102 [00:00<00:06, 694276.06it/s]\n 19%|#9        | 851968/4422102 [00:00<00:01, 1962897.43it/s]\n 64%|######3   | 2818048/4422102 [00:00<00:00, 5508389.41it/s]\n100%|##########| 4422102/4422102 [00:00<00:00, 6087122.93it/s]\nExtracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz\n\n  0%|          | 0/5148 [00:00<?, ?it/s]\n100%|##########| 5148/5148 [00:00<00:00, 36228652.67it/s]\nExtracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw \n```", "```py\nbatch_size = 64\n\n# Create data loaders.\n[train_dataloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\") = [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")([training_data](https://pytorch.org/vision/stable/generated/torchvision.datasets.FashionMNIST.html#torchvision.datasets.FashionMNIST \"torchvision.datasets.FashionMNIST\"), batch_size=batch_size)\n[test_dataloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\") = [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\")([test_data](https://pytorch.org/vision/stable/generated/torchvision.datasets.FashionMNIST.html#torchvision.datasets.FashionMNIST \"torchvision.datasets.FashionMNIST\"), batch_size=batch_size)\n\nfor [X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), y in [test_dataloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\"):\n    print(f\"Shape of X [N, C, H, W]: {[X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").shape}\")\n    print(f\"Shape of y: {y.shape}  {y.dtype}\")\n    break \n```", "```py\nShape of X [N, C, H, W]: torch.Size([64, 1, 28, 28])\nShape of y: torch.Size([64]) torch.int64 \n```", "```py\n# Get cpu, gpu or mps device for training.\ndevice = (\n    \"cuda\"\n    if [torch.cuda.is_available](https://pytorch.org/docs/stable/generated/torch.cuda.is_available.html#torch.cuda.is_available \"torch.cuda.is_available\")()\n    else \"mps\"\n    if [torch.backends.mps.is_available](https://pytorch.org/docs/stable/backends.html#torch.backends.mps.is_available \"torch.backends.mps.is_available\")()\n    else \"cpu\"\n)\nprint(f\"Using {device} device\")\n\n# Define model\nclass NeuralNetwork([nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")):\n    def __init__(self):\n        super().__init__()\n        self.flatten = [nn.Flatten](https://pytorch.org/docs/stable/generated/torch.nn.Flatten.html#torch.nn.Flatten \"torch.nn.Flatten\")()\n        self.linear_relu_stack = [nn.Sequential](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html#torch.nn.Sequential \"torch.nn.Sequential\")(\n            [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(28*28, 512),\n            [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(),\n            [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(512, 512),\n            [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html#torch.nn.ReLU \"torch.nn.ReLU\")(),\n            [nn.Linear](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear \"torch.nn.Linear\")(512, 10)\n        )\n\n    def forward(self, [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")):\n        [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = self.flatten([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        logits = self.linear_relu_stack([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        return logits\n\nmodel = [NeuralNetwork](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")().to(device)\nprint(model) \n```", "```py\nUsing cuda device\nNeuralNetwork(\n  (flatten): Flatten(start_dim=1, end_dim=-1)\n  (linear_relu_stack): Sequential(\n    (0): Linear(in_features=784, out_features=512, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=512, out_features=512, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=512, out_features=10, bias=True)\n  )\n) \n```", "```py\n[loss_fn](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\") = [nn.CrossEntropyLoss](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\")()\n[optimizer](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\") = [torch.optim.SGD](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")([model.parameters](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.parameters \"torch.nn.Module.parameters\")(), lr=1e-3) \n```", "```py\ndef train(dataloader, model, [loss_fn](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\"), [optimizer](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\")):\n    size = len(dataloader.dataset)\n    [model.train](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.train \"torch.nn.Module.train\")()\n    for batch, ([X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), y) in enumerate(dataloader):\n        [X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), y = [X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").to(device), y.to(device)\n\n        # Compute prediction error\n        [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = model([X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n        loss = [loss_fn](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\")([pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), y)\n\n        # Backpropagation\n        loss.backward()\n        [optimizer.step](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.step \"torch.optim.SGD.step\")()\n        [optimizer.zero_grad](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD.zero_grad \"torch.optim.SGD.zero_grad\")()\n\n        if batch % 100 == 0:\n            loss, current = loss.item(), (batch + 1) * len([X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n            print(f\"loss: {loss:>7f} [{current:>5d}/{size:>5d}]\") \n```", "```py\ndef test(dataloader, model, [loss_fn](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\")):\n    size = len(dataloader.dataset)\n    num_batches = len(dataloader)\n    [model.eval](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.eval \"torch.nn.Module.eval\")()\n    test_loss, correct = 0, 0\n    with [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n        for [X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), y in dataloader:\n            [X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), y = [X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").to(device), y.to(device)\n            [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = model([X](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n            test_loss += [loss_fn](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\")([pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), y).item()\n            correct += ([pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").argmax(1) == y).type([torch.float](https://pytorch.org/docs/stable/tensor_attributes.html#torch.dtype \"torch.dtype\")).sum().item()\n    test_loss /= num_batches\n    correct /= size\n    print(f\"Test Error: \\n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f}  \\n\") \n```", "```py\nepochs = 5\nfor t in range(epochs):\n    print(f\"Epoch {t+1}\\n-------------------------------\")\n    train([train_dataloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\"), model, [loss_fn](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\"), [optimizer](https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD \"torch.optim.SGD\"))\n    test([test_dataloader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader \"torch.utils.data.DataLoader\"), model, [loss_fn](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss \"torch.nn.CrossEntropyLoss\"))\nprint(\"Done!\") \n```", "```py\nEpoch 1\n-------------------------------\nloss: 2.303494  [   64/60000]\nloss: 2.294637  [ 6464/60000]\nloss: 2.277102  [12864/60000]\nloss: 2.269977  [19264/60000]\nloss: 2.254235  [25664/60000]\nloss: 2.237146  [32064/60000]\nloss: 2.231055  [38464/60000]\nloss: 2.205037  [44864/60000]\nloss: 2.203240  [51264/60000]\nloss: 2.170889  [57664/60000]\nTest Error:\n Accuracy: 53.9%, Avg loss: 2.168588\n\nEpoch 2\n-------------------------------\nloss: 2.177787  [   64/60000]\nloss: 2.168083  [ 6464/60000]\nloss: 2.114910  [12864/60000]\nloss: 2.130412  [19264/60000]\nloss: 2.087473  [25664/60000]\nloss: 2.039670  [32064/60000]\nloss: 2.054274  [38464/60000]\nloss: 1.985457  [44864/60000]\nloss: 1.996023  [51264/60000]\nloss: 1.917241  [57664/60000]\nTest Error:\n Accuracy: 60.2%, Avg loss: 1.920374\n\nEpoch 3\n-------------------------------\nloss: 1.951705  [   64/60000]\nloss: 1.919516  [ 6464/60000]\nloss: 1.808730  [12864/60000]\nloss: 1.846550  [19264/60000]\nloss: 1.740618  [25664/60000]\nloss: 1.698733  [32064/60000]\nloss: 1.708889  [38464/60000]\nloss: 1.614436  [44864/60000]\nloss: 1.646475  [51264/60000]\nloss: 1.524308  [57664/60000]\nTest Error:\n Accuracy: 61.4%, Avg loss: 1.547092\n\nEpoch 4\n-------------------------------\nloss: 1.612695  [   64/60000]\nloss: 1.570870  [ 6464/60000]\nloss: 1.424730  [12864/60000]\nloss: 1.489542  [19264/60000]\nloss: 1.367256  [25664/60000]\nloss: 1.373464  [32064/60000]\nloss: 1.376744  [38464/60000]\nloss: 1.304962  [44864/60000]\nloss: 1.347154  [51264/60000]\nloss: 1.230661  [57664/60000]\nTest Error:\n Accuracy: 62.7%, Avg loss: 1.260891\n\nEpoch 5\n-------------------------------\nloss: 1.337803  [   64/60000]\nloss: 1.313278  [ 6464/60000]\nloss: 1.151837  [12864/60000]\nloss: 1.252142  [19264/60000]\nloss: 1.123048  [25664/60000]\nloss: 1.159531  [32064/60000]\nloss: 1.175011  [38464/60000]\nloss: 1.115554  [44864/60000]\nloss: 1.160974  [51264/60000]\nloss: 1.062730  [57664/60000]\nTest Error:\n Accuracy: 64.6%, Avg loss: 1.087374\n\nDone! \n```", "```py\n[torch.save](https://pytorch.org/docs/stable/generated/torch.save.html#torch.save \"torch.save\")([model.state_dict](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.state_dict \"torch.nn.Module.state_dict\")(), \"model.pth\")\nprint(\"Saved PyTorch Model State to model.pth\") \n```", "```py\nSaved PyTorch Model State to model.pth \n```", "```py\nmodel = [NeuralNetwork](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module \"torch.nn.Module\")().to(device)\n[model.load_state_dict](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.load_state_dict \"torch.nn.Module.load_state_dict\")([torch.load](https://pytorch.org/docs/stable/generated/torch.load.html#torch.load \"torch.load\")(\"model.pth\")) \n```", "```py\n<All keys matched successfully> \n```", "```py\nclasses = [\n    \"T-shirt/top\",\n    \"Trouser\",\n    \"Pullover\",\n    \"Dress\",\n    \"Coat\",\n    \"Sandal\",\n    \"Shirt\",\n    \"Sneaker\",\n    \"Bag\",\n    \"Ankle boot\",\n]\n\n[model.eval](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.eval \"torch.nn.Module.eval\")()\n[x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"), y = [test_data](https://pytorch.org/vision/stable/generated/torchvision.datasets.FashionMNIST.html#torchvision.datasets.FashionMNIST \"torchvision.datasets.FashionMNIST\")[0][0], [test_data](https://pytorch.org/vision/stable/generated/torchvision.datasets.FashionMNIST.html#torchvision.datasets.FashionMNIST \"torchvision.datasets.FashionMNIST\")[0][1]\nwith [torch.no_grad](https://pytorch.org/docs/stable/generated/torch.no_grad.html#torch.no_grad \"torch.no_grad\")():\n    [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = [x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\").to(device)\n    [pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\") = model([x](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\"))\n    predicted, actual = classes[[pred](https://pytorch.org/docs/stable/tensors.html#torch.Tensor \"torch.Tensor\")[0].argmax(0)], classes[y]\n    print(f'Predicted: \"{predicted}\", Actual: \"{actual}\"') \n```", "```py\nPredicted: \"Ankle boot\", Actual: \"Ankle boot\" \n```"]