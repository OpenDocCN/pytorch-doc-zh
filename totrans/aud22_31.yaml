- en: Subtractive synthesis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/audio/stable/tutorials/subtractive_synthesis_tutorial.html](https://pytorch.org/audio/stable/tutorials/subtractive_synthesis_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-tutorials-subtractive-synthesis-tutorial-py)
    to download the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '**Author**: [Moto Hira](mailto:moto%40meta.com)'
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial is the continuation of [Filter Design Tutorial](./filter_design_tutorial.html).
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial shows how to perform subtractive synthesis with TorchAudio’s DSP
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: Subtractive synthesis creates timbre by applying filters to source waveform.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial requires prototype DSP features, which are available in nightly
    builds.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [https://pytorch.org/get-started/locally](https://pytorch.org/get-started/locally)
    for instructions for installing a nightly build.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Overview[](#overview "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Filtered Noise[](#filtered-noise "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Subtractive synthesis starts with a waveform and applies filters to some frequency
    components.
  prefs: []
  type: TYPE_NORMAL
- en: For the first example of subtractive synthesis, we apply time-varying low pass
    filter to white noise.
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a white noise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![subtractive synthesis tutorial](../Images/5f81f6c913894a8ab0a7079ccd43f49c.png)'
  prefs: []
  type: TYPE_IMG
- en: Windowed-sinc filter[](#windowed-sinc-filter "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sweeping cutoff frequency[](#sweeping-cutoff-frequency "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use [`sinc_impulse_response()`](../generated/torchaudio.prototype.functional.sinc_impulse_response.html#torchaudio.prototype.functional.sinc_impulse_response
    "torchaudio.prototype.functional.sinc_impulse_response") to create series of low
    pass filters, while changing the cut-off frequency from zero to Nyquist frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To apply time-varying filter, we use [`filter_waveform()`](../generated/torchaudio.prototype.functional.filter_waveform.html#torchaudio.prototype.functional.filter_waveform
    "torchaudio.prototype.functional.filter_waveform")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let’s look at the spectrogram of the resulting audio and listen to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![subtractive synthesis tutorial](../Images/ceefcd60c63f2946e39ad0990b7155b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Oscillating cutoff frequency[](#oscillating-cutoff-frequency "Permalink to
    this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By oscillating the cutoff frequency, we can emulate an effect of Low-frequency
    oscillation (LFO).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![subtractive synthesis tutorial](../Images/182685e937771cc0a7faca830ceb342e.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Wah-wah effects[](#wah-wah-effects "Permalink to this heading")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wah-wah effects are applications of low-pass filter or band-pass filter. They
    change the cut-off freuqnecy or Q-factor quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![subtractive synthesis tutorial](../Images/e9ff5f9e9c061f13bae0ec580bdeb333.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary frequence response[](#arbitrary-frequence-response "Permalink to
    this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By using `frequency_impulse_response()`, one can directly control the power
    distribution over frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![subtractive synthesis tutorial](../Images/42510a4fdeec6970edc7639991890336.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to make a non-stationary filter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![subtractive synthesis tutorial](../Images/9a202ed12bf47c24689691bc6257be5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: Of course it is also possible to emulate simple low pass filter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![subtractive synthesis tutorial](../Images/c033cb83ebd88e9333d1f5ee3d969d0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  prefs: []
  type: TYPE_NORMAL
- en: References[](#references "Permalink to this heading")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Additive_synthesis](https://en.wikipedia.org/wiki/Additive_synthesis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://computermusicresource.com/Simple.bell.tutorial.html](https://computermusicresource.com/Simple.bell.tutorial.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://computermusicresource.com/Definitions/additive.synthesis.html](https://computermusicresource.com/Definitions/additive.synthesis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total running time of the script:** ( 0 minutes 7.629 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Python source code: subtractive_synthesis_tutorial.py`](../_downloads/d3b39e207bd40f4cddd5c53e3fdae429/subtractive_synthesis_tutorial.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Download Jupyter notebook: subtractive_synthesis_tutorial.ipynb`](../_downloads/704d5dbcf9fe3b5e90a8eaa9f949e8cf/subtractive_synthesis_tutorial.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  prefs: []
  type: TYPE_NORMAL
