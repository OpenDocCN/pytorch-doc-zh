- en: Visualizing Models, Data, and Training with TensorBoard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/tutorials/intermediate/tensorboard_tutorial.html](https://pytorch.org/tutorials/intermediate/tensorboard_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In the [60 Minute Blitz](https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html),
    we show you how to load in data, feed it through a model we define as a subclass
    of `nn.Module`, train this model on training data, and test it on test data. To
    see what’s happening, we print out some statistics as the model is training to
    get a sense for whether training is progressing. However, we can do much better
    than that: PyTorch integrates with TensorBoard, a tool designed for visualizing
    the results of neural network training runs. This tutorial illustrates some of
    its functionality, using the [Fashion-MNIST dataset](https://github.com/zalandoresearch/fashion-mnist)
    which can be read into PyTorch using torchvision.datasets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tutorial, we’ll learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Read in data and with appropriate transforms (nearly identical to the prior
    tutorial).
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Set up TensorBoard.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Write to TensorBoard.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Inspect a model architecture using TensorBoard.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Use TensorBoard to create interactive versions of the visualizations we created
    in last tutorial, with less code
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specifically, on point #5, we’ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: A couple of ways to inspect our training data
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: How to track our model’s performance as it trains
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: How to assess our model’s performance once it is trained.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We’ll begin with similar boilerplate code as in the [CIFAR-10 tutorial](https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll define a similar model architecture from that tutorial, making only minor
    modifications to account for the fact that the images are now one channel instead
    of three and 28x28 instead of 32x32:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll define the same `optimizer` and `criterion` from before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 1\. TensorBoard setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we’ll set up TensorBoard, importing `tensorboard` from `torch.utils` and
    defining a `SummaryWriter`, our key object for writing information to TensorBoard.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that this line alone creates a `runs/fashion_mnist_experiment_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Writing to TensorBoard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s write an image to our TensorBoard - specifically, a grid - using [make_grid](https://pytorch.org/vision/stable/utils.html#torchvision.utils.make_grid).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now running
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: from the command line and then navigating to [http://localhost:6006](http://localhost:6006)
    should show the following.
  prefs: []
  type: TYPE_NORMAL
- en: '![../_static/img/tensorboard_first_view.png](../Images/8b09d6361316e495383ceedf9b8407ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you know how to use TensorBoard! This example, however, could be done in
    a Jupyter Notebook - where TensorBoard really excels is in creating interactive
    visualizations. We’ll cover one of those next, and several more by the end of
    the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Inspect the model using TensorBoard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of TensorBoard’s strengths is its ability to visualize complex model structures.
    Let’s visualize the model we built.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now upon refreshing TensorBoard you should see a “Graphs” tab that looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_static/img/tensorboard_model_viz.png](../Images/8f596b99dbb3c262b61db267d5db2d63.png)'
  prefs: []
  type: TYPE_IMG
- en: Go ahead and double click on “Net” to see it expand, seeing a detailed view
    of the individual operations that make up the model.
  prefs: []
  type: TYPE_NORMAL
- en: TensorBoard has a very handy feature for visualizing high dimensional data such
    as image data in a lower dimensional space; we’ll cover this next.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Adding a “Projector” to TensorBoard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can visualize the lower dimensional representation of higher dimensional
    data via the [add_embedding](https://pytorch.org/docs/stable/tensorboard.html#torch.utils.tensorboard.writer.SummaryWriter.add_embedding)
    method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in the “Projector” tab of TensorBoard, you can see these 100 images - each
    of which is 784 dimensional - projected down into three dimensional space. Furthermore,
    this is interactive: you can click and drag to rotate the three dimensional projection.
    Finally, a couple of tips to make the visualization easier to see: select “color:
    label” on the top left, as well as enabling “night mode”, which will make the
    images easier to see since their background is white:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_static/img/tensorboard_projector.png](../Images/f4990a0920dff7e4647a23cfc1639a8a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we’ve thoroughly inspected our data, let’s show how TensorBoard can make
    tracking model training and evaluation clearer, starting with training.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Tracking model training with TensorBoard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example, we simply *printed* the model’s running loss every
    2000 iterations. Now, we’ll instead log the running loss to TensorBoard, along
    with a view into the predictions the model is making via the `plot_classes_preds`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let’s train the model using the same model training code from the prior
    tutorial, but writing results to TensorBoard every 1000 batches instead of printing
    to console; this is done using the [add_scalar](https://pytorch.org/docs/stable/tensorboard.html#torch.utils.tensorboard.writer.SummaryWriter.add_scalar)
    function.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, as we train, we’ll generate an image showing the model’s predictions
    vs. the actual results on the four images included in that batch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now look at the scalars tab to see the running loss plotted over the
    15,000 iterations of training:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_static/img/tensorboard_scalar_runs.png](../Images/afda8238ecd1f547d61be4d155844f68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition, we can look at the predictions the model made on arbitrary batches
    throughout learning. See the “Images” tab and scroll down under the “predictions
    vs. actuals” visualization to see this; this shows us that, for example, after
    just 3000 training iterations, the model was already able to distinguish between
    visually distinct classes such as shirts, sneakers, and coats, though it isn’t
    as confident as it becomes later on in training:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_static/img/tensorboard_images.png](../Images/d5ab1f07cb4a9d9200c2a2d3b238340d.png)'
  prefs: []
  type: TYPE_IMG
- en: In the prior tutorial, we looked at per-class accuracy once the model had been
    trained; here, we’ll use TensorBoard to plot precision-recall curves (good explanation
    [here](https://www.scikit-yb.org/en/latest/api/classifier/prcurve.html)) for each
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Assessing trained models with TensorBoard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You will now see a “PR Curves” tab that contains the precision-recall curves
    for each class. Go ahead and poke around; you’ll see that on some classes the
    model has nearly 100% “area under the curve”, whereas on others this area is lower:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_static/img/tensorboard_pr_curves.png](../Images/d15de2be2b754f9a4f46418764232b5e.png)'
  prefs: []
  type: TYPE_IMG
- en: And that’s an intro to TensorBoard and PyTorch’s integration with it. Of course,
    you could do everything TensorBoard does in your Jupyter Notebook, but with TensorBoard,
    you gets visuals that are interactive by default.
  prefs: []
  type: TYPE_NORMAL
