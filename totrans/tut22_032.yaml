- en: DCGAN Tutorial
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html](https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-beginner-dcgan-faces-tutorial-py) to download
    the full example code
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '**Author**: [Nathan Inkawhich](https://github.com/inkawhich)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tutorial will give an introduction to DCGANs through an example. We will
    train a generative adversarial network (GAN) to generate new celebrities after
    showing it pictures of many real celebrities. Most of the code here is from the
    DCGAN implementation in [pytorch/examples](https://github.com/pytorch/examples),
    and this document will give a thorough explanation of the implementation and shed
    light on how and why this model works. But don’t worry, no prior knowledge of
    GANs is required, but it may require a first-timer to spend some time reasoning
    about what is actually happening under the hood. Also, for the sake of time it
    will help to have a GPU, or two. Lets start from the beginning.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Generative Adversarial Networks
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is a GAN?
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GANs are a framework for teaching a deep learning model to capture the training
    data distribution so we can generate new data from that same distribution. GANs
    were invented by Ian Goodfellow in 2014 and first described in the paper [Generative
    Adversarial Nets](https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf).
    They are made of two distinct models, a *generator* and a *discriminator*. The
    job of the generator is to spawn ‘fake’ images that look like the training images.
    The job of the discriminator is to look at an image and output whether or not
    it is a real training image or a fake image from the generator. During training,
    the generator is constantly trying to outsmart the discriminator by generating
    better and better fakes, while the discriminator is working to become a better
    detective and correctly classify the real and fake images. The equilibrium of
    this game is when the generator is generating perfect fakes that look as if they
    came directly from the training data, and the discriminator is left to always
    guess at 50% confidence that the generator output is real or fake.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Now, lets define some notation to be used throughout tutorial starting with
    the discriminator. Let \(x\) be data representing an image. \(D(x)\) is the discriminator
    network which outputs the (scalar) probability that \(x\) came from training data
    rather than the generator. Here, since we are dealing with images, the input to
    \(D(x)\) is an image of CHW size 3x64x64\. Intuitively, \(D(x)\) should be HIGH
    when \(x\) comes from training data and LOW when \(x\) comes from the generator.
    \(D(x)\) can also be thought of as a traditional binary classifier.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: For the generator’s notation, let \(z\) be a latent space vector sampled from
    a standard normal distribution. \(G(z)\) represents the generator function which
    maps the latent vector \(z\) to data-space. The goal of \(G\) is to estimate the
    distribution that the training data comes from (\(p_{data}\)) so it can generate
    fake samples from that estimated distribution (\(p_g\)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: So, \(D(G(z))\) is the probability (scalar) that the output of the generator
    \(G\) is a real image. As described in [Goodfellow’s paper](https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf),
    \(D\) and \(G\) play a minimax game in which \(D\) tries to maximize the probability
    it correctly classifies reals and fakes (\(logD(x)\)), and \(G\) tries to minimize
    the probability that \(D\) will predict its outputs are fake (\(log(1-D(G(z)))\)).
    From the paper, the GAN loss function is
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: \[\underset{G}{\text{min}} \underset{D}{\text{max}}V(D,G) = \mathbb{E}_{x\sim
    p_{data}(x)}\big[logD(x)\big] + \mathbb{E}_{z\sim p_{z}(z)}\big[log(1-D(G(z)))\big]
    \]
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: In theory, the solution to this minimax game is where \(p_g = p_{data}\), and
    the discriminator guesses randomly if the inputs are real or fake. However, the
    convergence theory of GANs is still being actively researched and in reality models
    do not always train to this point.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，这个极小极大博弈的解是当\(p_g = p_{data}\)时，如果输入是真实的还是伪造的，鉴别器会随机猜测。然而，GAN的收敛理论仍在积极研究中，实际上模型并不总是训练到这一点。
- en: What is a DCGAN?
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是DCGAN？
- en: A DCGAN is a direct extension of the GAN described above, except that it explicitly
    uses convolutional and convolutional-transpose layers in the discriminator and
    generator, respectively. It was first described by Radford et. al. in the paper
    [Unsupervised Representation Learning With Deep Convolutional Generative Adversarial
    Networks](https://arxiv.org/pdf/1511.06434.pdf). The discriminator is made up
    of strided [convolution](https://pytorch.org/docs/stable/nn.html#torch.nn.Conv2d)
    layers, [batch norm](https://pytorch.org/docs/stable/nn.html#torch.nn.BatchNorm2d)
    layers, and [LeakyReLU](https://pytorch.org/docs/stable/nn.html#torch.nn.LeakyReLU)
    activations. The input is a 3x64x64 input image and the output is a scalar probability
    that the input is from the real data distribution. The generator is comprised
    of [convolutional-transpose](https://pytorch.org/docs/stable/nn.html#torch.nn.ConvTranspose2d)
    layers, batch norm layers, and [ReLU](https://pytorch.org/docs/stable/nn.html#relu)
    activations. The input is a latent vector, \(z\), that is drawn from a standard
    normal distribution and the output is a 3x64x64 RGB image. The strided conv-transpose
    layers allow the latent vector to be transformed into a volume with the same shape
    as an image. In the paper, the authors also give some tips about how to setup
    the optimizers, how to calculate the loss functions, and how to initialize the
    model weights, all of which will be explained in the coming sections.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: DCGAN是上述GAN的直接扩展，除了明确在鉴别器和生成器中使用卷积和卷积转置层。它首次由Radford等人在论文[使用深度卷积生成对抗网络进行无监督表示学习](https://arxiv.org/pdf/1511.06434.pdf)中描述。鉴别器由步进的[卷积](https://pytorch.org/docs/stable/nn.html#torch.nn.Conv2d)层、[批量归一化](https://pytorch.org/docs/stable/nn.html#torch.nn.BatchNorm2d)层和[LeakyReLU](https://pytorch.org/docs/stable/nn.html#torch.nn.LeakyReLU)激活组成。输入是一个3x64x64的输入图像，输出是一个标量概率，表示输入来自真实数据分布。生成器由[卷积转置](https://pytorch.org/docs/stable/nn.html#torch.nn.ConvTranspose2d)层、批量归一化层和[ReLU](https://pytorch.org/docs/stable/nn.html#relu)激活组成。输入是一个从标准正态分布中抽取的潜在向量\(z\)，输出是一个3x64x64的RGB图像。步进的卷积转置层允许将潜在向量转换为与图像形状相同的体积。在论文中，作者还提供了一些建议，关于如何设置优化器、如何计算损失函数以及如何初始化模型权重，所有这些将在接下来的章节中解释。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Inputs
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入
- en: 'Let’s define some inputs for the run:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为运行定义一些输入：
- en: '`dataroot` - the path to the root of the dataset folder. We will talk more
    about the dataset in the next section.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataroot` - 数据集文件夹根目录的路径。我们将在下一节详细讨论数据集。'
- en: '`workers` - the number of worker threads for loading the data with the `DataLoader`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workers` - 用于使用`DataLoader`加载数据的工作线程数。'
- en: '`batch_size` - the batch size used in training. The DCGAN paper uses a batch
    size of 128.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch_size` - 训练中使用的批量大小。DCGAN论文使用批量大小为128。'
- en: '`image_size` - the spatial size of the images used for training. This implementation
    defaults to 64x64\. If another size is desired, the structures of D and G must
    be changed. See [here](https://github.com/pytorch/examples/issues/70) for more
    details.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_size` - 用于训练的图像的空间尺寸。此实现默认为64x64。如果需要其他尺寸，则必须更改D和G的结构。有关更多详细信息，请参见[这里](https://github.com/pytorch/examples/issues/70)。'
- en: '`nc` - number of color channels in the input images. For color images this
    is 3.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nc` - 输入图像中的颜色通道数。对于彩色图像，这是3。'
- en: '`nz` - length of latent vector.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nz` - 潜在向量的长度。'
- en: '`ngf` - relates to the depth of feature maps carried through the generator.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngf` - 与通过生成器传递的特征图的深度有关。'
- en: '`ndf` - sets the depth of feature maps propagated through the discriminator.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ndf` - 设置通过鉴别器传播的特征图的深度。'
- en: '`num_epochs` - number of training epochs to run. Training for longer will probably
    lead to better results but will also take much longer.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_epochs` - 要运行的训练周期数。训练时间更长可能会导致更好的结果，但也会花费更多时间。'
- en: '`lr` - learning rate for training. As described in the DCGAN paper, this number
    should be 0.0002.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lr` - 训练的学习率。如DCGAN论文所述，此数字应为0.0002。'
- en: '`beta1` - beta1 hyperparameter for Adam optimizers. As described in paper,
    this number should be 0.5.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beta1` - Adam优化器的beta1超参数。如论文所述，此数字应为0.5。'
- en: '`ngpu` - number of GPUs available. If this is 0, code will run in CPU mode.
    If this number is greater than 0 it will run on that number of GPUs.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngpu` - 可用的GPU数量。如果为0，则代码将在CPU模式下运行。如果此数字大于0，则将在该数量的GPU上运行。'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Data
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据
- en: 'In this tutorial we will use the [Celeb-A Faces dataset](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html)
    which can be downloaded at the linked site, or in [Google Drive](https://drive.google.com/drive/folders/0B7EVK8r0v71pTUZsaXdaSnZBZzg).
    The dataset will download as a file named `img_align_celeba.zip`. Once downloaded,
    create a directory named `celeba` and extract the zip file into that directory.
    Then, set the `dataroot` input for this notebook to the `celeba` directory you
    just created. The resulting directory structure should be:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用[Celeb-A Faces数据集](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html)，可以在链接的网站上下载，或在[Google
    Drive](https://drive.google.com/drive/folders/0B7EVK8r0v71pTUZsaXdaSnZBZzg)中下载。数据集将下载为名为`img_align_celeba.zip`的文件。下载后，创建一个名为`celeba`的目录，并将zip文件解压缩到该目录中。然后，将此笔记本的`dataroot`输入设置为您刚刚创建的`celeba`目录。生成的目录结构应为：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is an important step because we will be using the `ImageFolder` dataset
    class, which requires there to be subdirectories in the dataset root folder. Now,
    we can create the dataset, create the dataloader, set the device to run on, and
    finally visualize some of the training data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重要的步骤，因为我们将使用`ImageFolder`数据集类，这要求数据集根文件夹中有子目录。现在，我们可以创建数据集，创建数据加载器，设置设备运行，并最终可视化一些训练数据。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Training Images](../Images/04fb3a8ed8e63cf7cffb5f29224decca.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![训练图片](../Images/04fb3a8ed8e63cf7cffb5f29224decca.png)'
- en: Implementation
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: With our input parameters set and the dataset prepared, we can now get into
    the implementation. We will start with the weight initialization strategy, then
    talk about the generator, discriminator, loss functions, and training loop in
    detail.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好我们的输入参数并准备好数据集后，现在可以开始实现了。我们将从权重初始化策略开始，然后详细讨论生成器、鉴别器、损失函数和训练循环。
- en: Weight Initialization
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 权重初始化
- en: From the DCGAN paper, the authors specify that all model weights shall be randomly
    initialized from a Normal distribution with `mean=0`, `stdev=0.02`. The `weights_init`
    function takes an initialized model as input and reinitializes all convolutional,
    convolutional-transpose, and batch normalization layers to meet this criteria.
    This function is applied to the models immediately after initialization.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 根据DCGAN论文，作者规定所有模型权重应该从正态分布中随机初始化，`mean=0`，`stdev=0.02`。`weights_init`函数接受一个初始化的模型作为输入，并重新初始化所有卷积、卷积转置和批量归一化层，以满足这个标准。这个函数在初始化后立即应用于模型。
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Generator
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成器
- en: The generator, \(G\), is designed to map the latent space vector (\(z\)) to
    data-space. Since our data are images, converting \(z\) to data-space means ultimately
    creating a RGB image with the same size as the training images (i.e. 3x64x64).
    In practice, this is accomplished through a series of strided two dimensional
    convolutional transpose layers, each paired with a 2d batch norm layer and a relu
    activation. The output of the generator is fed through a tanh function to return
    it to the input data range of \([-1,1]\). It is worth noting the existence of
    the batch norm functions after the conv-transpose layers, as this is a critical
    contribution of the DCGAN paper. These layers help with the flow of gradients
    during training. An image of the generator from the DCGAN paper is shown below.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器\(G\)旨在将潜在空间向量(\(z\))映射到数据空间。由于我们的数据是图像，将\(z\)转换为数据空间最终意味着创建一个与训练图像相同大小的RGB图像（即3x64x64）。在实践中，通过一系列步进的二维卷积转置层来实现这一点，每个层都与一个2D批量归一化层和一个relu激活函数配对。生成器的输出通过tanh函数传递，将其返回到输入数据范围\([-1,1]\)。值得注意的是，在卷积转置层之后存在批量归一化函数，这是DCGAN论文的一个重要贡献。这些层有助于训练过程中梯度的流动。下面是生成器的代码。
- en: '![dcgan_generator](../Images/85974d98be6202902f21ce274418953f.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![dcgan_generator](../Images/85974d98be6202902f21ce274418953f.png)'
- en: Notice, how the inputs we set in the input section (`nz`, `ngf`, and `nc`) influence
    the generator architecture in code. `nz` is the length of the z input vector,
    `ngf` relates to the size of the feature maps that are propagated through the
    generator, and `nc` is the number of channels in the output image (set to 3 for
    RGB images). Below is the code for the generator.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在输入部分设置的输入（`nz`、`ngf`和`nc`）如何影响代码中的生成器架构。`nz`是z输入向量的长度，`ngf`与通过生成器传播的特征图的大小有关，`nc`是输出图像中的通道数（对于RGB图像设置为3）。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we can instantiate the generator and apply the `weights_init` function.
    Check out the printed model to see how the generator object is structured.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以实例化生成器并应用`weights_init`函数。查看打印出的模型，看看生成器对象的结构是如何的。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discriminator
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 鉴别器
- en: As mentioned, the discriminator, \(D\), is a binary classification network that
    takes an image as input and outputs a scalar probability that the input image
    is real (as opposed to fake). Here, \(D\) takes a 3x64x64 input image, processes
    it through a series of Conv2d, BatchNorm2d, and LeakyReLU layers, and outputs
    the final probability through a Sigmoid activation function. This architecture
    can be extended with more layers if necessary for the problem, but there is significance
    to the use of the strided convolution, BatchNorm, and LeakyReLUs. The DCGAN paper
    mentions it is a good practice to use strided convolution rather than pooling
    to downsample because it lets the network learn its own pooling function. Also
    batch norm and leaky relu functions promote healthy gradient flow which is critical
    for the learning process of both \(G\) and \(D\).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，鉴别器\(D\)是一个二元分类网络，接受图像作为输入，并输出一个标量概率，表示输入图像是真实的（而不是假的）。在这里，\(D\)接受一个3x64x64的输入图像，通过一系列的Conv2d、BatchNorm2d和LeakyReLU层处理，通过Sigmoid激活函数输出最终概率。如果需要，可以通过添加更多层来扩展这个架构，但是使用步进卷积、BatchNorm和LeakyReLU具有重要意义。DCGAN论文提到，使用步进卷积而不是池化进行下采样是一个好的做法，因为它让网络学习自己的池化函数。此外，批量归一化和LeakyReLU函数有助于促进健康的梯度流，这对于\(G\)和\(D\)的学习过程至关重要。
- en: Discriminator Code
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴别器代码
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, as with the generator, we can create the discriminator, apply the `weights_init`
    function, and print the model’s structure.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，就像生成器一样，我们可以创建鉴别器，应用`weights_init`函数，并打印模型的结构。
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Loss Functions and Optimizers
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 损失函数和优化器
- en: 'With \(D\) and \(G\) setup, we can specify how they learn through the loss
    functions and optimizers. We will use the Binary Cross Entropy loss ([BCELoss](https://pytorch.org/docs/stable/generated/torch.nn.BCELoss.html#torch.nn.BCELoss))
    function which is defined in PyTorch as:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好\(D\)和\(G\)后，我们可以通过损失函数和优化器指定它们的学习方式。我们将使用二元交叉熵损失（[BCELoss](https://pytorch.org/docs/stable/generated/torch.nn.BCELoss.html#torch.nn.BCELoss)）函数，PyTorch中定义如下：
- en: \[\ell(x, y) = L = \{l_1,\dots,l_N\}^\top, \quad l_n = - \left[ y_n \cdot \log
    x_n + (1 - y_n) \cdot \log (1 - x_n) \right] \]
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: \[\ell(x, y) = L = \{l_1,\dots,l_N\}^\top, \quad l_n = - \left[ y_n \cdot \log
    x_n + (1 - y_n) \cdot \log (1 - x_n) \right] \]
- en: Notice how this function provides the calculation of both log components in
    the objective function (i.e. \(log(D(x))\) and \(log(1-D(G(z)))\)). We can specify
    what part of the BCE equation to use with the \(y\) input. This is accomplished
    in the training loop which is coming up soon, but it is important to understand
    how we can choose which component we wish to calculate just by changing \(y\)
    (i.e. GT labels).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此函数提供了目标函数中两个log组件的计算（即\(log(D(x))\)和\(log(1-D(G(z)))\)）。我们可以通过输入\(y\)来指定要使用BCE方程的哪一部分。这将在即将到来的训练循环中完成，但重要的是要理解我们如何通过改变\(y\)（即GT标签）来选择我们希望计算的组件。
- en: Next, we define our real label as 1 and the fake label as 0\. These labels will
    be used when calculating the losses of \(D\) and \(G\), and this is also the convention
    used in the original GAN paper. Finally, we set up two separate optimizers, one
    for \(D\) and one for \(G\). As specified in the DCGAN paper, both are Adam optimizers
    with learning rate 0.0002 and Beta1 = 0.5\. For keeping track of the generator’s
    learning progression, we will generate a fixed batch of latent vectors that are
    drawn from a Gaussian distribution (i.e. fixed_noise) . In the training loop,
    we will periodically input this fixed_noise into \(G\), and over the iterations
    we will see images form out of the noise.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把真实标签定义为1，将假标签定义为0。在计算\(D\)和\(G\)的损失时将使用这些标签，这也是原始GAN论文中使用的惯例。最后，我们设置了两个单独的优化器，一个用于\(D\)，一个用于\(G\)。如DCGAN论文中所指定的，两者都是Adam优化器，学习率为0.0002，Beta1
    = 0.5。为了跟踪生成器的学习进展，我们将生成一批固定的潜在向量，这些向量是从高斯分布中抽取的（即fixed_noise）。在训练循环中，我们将定期将这个fixed_noise输入到\(G\)中，随着迭代的进行，我们将看到图像从噪音中生成出来。
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Training
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 训练
- en: Finally, now that we have all of the parts of the GAN framework defined, we
    can train it. Be mindful that training GANs is somewhat of an art form, as incorrect
    hyperparameter settings lead to mode collapse with little explanation of what
    went wrong. Here, we will closely follow Algorithm 1 from the [Goodfellow’s paper](https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf),
    while abiding by some of the best practices shown in [ganhacks](https://github.com/soumith/ganhacks).
    Namely, we will “construct different mini-batches for real and fake” images, and
    also adjust G’s objective function to maximize \(log(D(G(z)))\). Training is split
    up into two main parts. Part 1 updates the Discriminator and Part 2 updates the
    Generator.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，现在我们已经定义了GAN框架的所有部分，我们可以开始训练。请注意，训练GAN有点像一种艺术形式，因为不正确的超参数设置会导致模式崩溃，而对出现问题的原因却没有太多解释。在这里，我们将紧密遵循[Goodfellow的论文](https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf)中的算法1，同时遵循[ganhacks](https://github.com/soumith/ganhacks)中显示的一些最佳实践。换句话说，我们将“为真实和伪造图像构建不同的小批量”，并调整G的目标函数以最大化\(log(D(G(z)))\)。训练分为两个主要部分。第一部分更新鉴别器，第二部分更新生成器。
- en: '**Part 1 - Train the Discriminator**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一部分 - 训练鉴别器**'
- en: Recall, the goal of training the discriminator is to maximize the probability
    of correctly classifying a given input as real or fake. In terms of Goodfellow,
    we wish to “update the discriminator by ascending its stochastic gradient”. Practically,
    we want to maximize \(log(D(x)) + log(1-D(G(z)))\). Due to the separate mini-batch
    suggestion from [ganhacks](https://github.com/soumith/ganhacks), we will calculate
    this in two steps. First, we will construct a batch of real samples from the training
    set, forward pass through \(D\), calculate the loss (\(log(D(x))\)), then calculate
    the gradients in a backward pass. Secondly, we will construct a batch of fake
    samples with the current generator, forward pass this batch through \(D\), calculate
    the loss (\(log(1-D(G(z)))\)), and *accumulate* the gradients with a backward
    pass. Now, with the gradients accumulated from both the all-real and all-fake
    batches, we call a step of the Discriminator’s optimizer.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，训练鉴别器的目标是最大化将给定输入正确分类为真实或伪造的概率。就Goodfellow而言，我们希望“通过升高其随机梯度来更新鉴别器”。实际上，我们希望最大化\(log(D(x))
    + log(1-D(G(z)))\)。由于[ganhacks](https://github.com/soumith/ganhacks)中的单独小批量建议，我们将分两步计算这个过程。首先，我们将从训练集中构建一批真实样本，通过\(D\)进行前向传播，计算损失（\(log(D(x))\)），然后通过反向传播计算梯度。其次，我们将使用当前生成器构建一批伪造样本，将这批样本通过\(D\)进行前向传播，计算损失（\(log(1-D(G(z)))\)），并通过反向传播*累积*梯度。现在，通过从所有真实和所有伪造批次中累积的梯度，我们调用鉴别器的优化器步骤。
- en: '**Part 2 - Train the Generator**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二部分 - 训练生成器**'
- en: 'As stated in the original paper, we want to train the Generator by minimizing
    \(log(1-D(G(z)))\) in an effort to generate better fakes. As mentioned, this was
    shown by Goodfellow to not provide sufficient gradients, especially early in the
    learning process. As a fix, we instead wish to maximize \(log(D(G(z)))\). In the
    code we accomplish this by: classifying the Generator output from Part 1 with
    the Discriminator, computing G’s loss *using real labels as GT*, computing G’s
    gradients in a backward pass, and finally updating G’s parameters with an optimizer
    step. It may seem counter-intuitive to use the real labels as GT labels for the
    loss function, but this allows us to use the \(log(x)\) part of the `BCELoss`
    (rather than the \(log(1-x)\) part) which is exactly what we want.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如原始论文所述，我们希望通过最小化\(log(1-D(G(z)))\)来训练生成器，以生成更好的伪造品。正如提到的，Goodfellow指出，特别是在学习过程的早期，这并不能提供足够的梯度。为了解决这个问题，我们希望最大化\(log(D(G(z)))\)。在代码中，我们通过以下方式实现这一点：用鉴别器对第一部分的生成器输出进行分类，使用真实标签作为GT计算G的损失，通过反向传播计算G的梯度，最后使用优化器步骤更新G的参数。在损失函数中使用真实标签作为GT标签可能看起来有些反直觉，但这使我们可以使用`BCELoss`中的\(log(x)\)部分（而不是\(log(1-x)\)部分），这正是我们想要的。
- en: 'Finally, we will do some statistic reporting and at the end of each epoch we
    will push our fixed_noise batch through the generator to visually track the progress
    of G’s training. The training statistics reported are:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将进行一些统计报告，并在每个时代结束时将我们的fixed_noise批次通过生成器，以直观地跟踪G的训练进度。报告的训练统计数据为：
- en: '**Loss_D** - discriminator loss calculated as the sum of losses for the all
    real and all fake batches (\(log(D(x)) + log(1 - D(G(z)))\)).'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Loss_D** - 判别器损失，计算为所有真实批次和所有虚假批次的损失之和(\(log(D(x)) + log(1 - D(G(z)))\))。'
- en: '**Loss_G** - generator loss calculated as \(log(D(G(z)))\)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Loss_G** - 生成器损失，计算为\(log(D(G(z)))\)'
- en: '**D(x)** - the average output (across the batch) of the discriminator for the
    all real batch. This should start close to 1 then theoretically converge to 0.5
    when G gets better. Think about why this is.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**D(x)** - 判别器对所有真实批次的平均输出（跨批次）。这应该从接近1开始，然后在生成器变得更好时理论上收敛到0.5。想一想为什么会这样。'
- en: '**D(G(z))** - average discriminator outputs for the all fake batch. The first
    number is before D is updated and the second number is after D is updated. These
    numbers should start near 0 and converge to 0.5 as G gets better. Think about
    why this is.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**D(G(z))** - 所有虚假批次的平均判别器输出。第一个数字是在更新D之前，第二个数字是在更新D之后。这些数字应该从接近0开始，随着G变得更好而收敛到0.5。想一想为什么会这样。'
- en: '**Note:** This step might take a while, depending on how many epochs you run
    and if you removed some data from the dataset.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 这一步可能需要一段时间，取决于您运行了多少个epochs以及是否从数据集中删除了一些数据。'
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Results
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果
- en: Finally, lets check out how we did. Here, we will look at three different results.
    First, we will see how D and G’s losses changed during training. Second, we will
    visualize G’s output on the fixed_noise batch for every epoch. And third, we will
    look at a batch of real data next to a batch of fake data from G.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看我们的表现如何。在这里，我们将看到三种不同的结果。首先，我们将看到D和G的损失在训练过程中如何变化。其次，我们将可视化G在每个epoch的fixed_noise批次上的输出。第三，我们将查看一批真实数据和G生成的虚假数据相邻。
- en: '**Loss versus training iteration**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**损失与训练迭代次数**'
- en: Below is a plot of D & G’s losses versus training iterations.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是D和G的损失与训练迭代次数的图表。
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Generator and Discriminator Loss During Training](../Images/097cd68a7de6371c697afbe4230ef328.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: 训练过程中的生成器和判别器损失
- en: '**Visualization of G’s progression**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**G的进展可视化**'
- en: Remember how we saved the generator’s output on the fixed_noise batch after
    every epoch of training. Now, we can visualize the training progression of G with
    an animation. Press the play button to start the animation.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们在每个训练epoch后保存了生成器在fixed_noise批次上的输出。现在，我们可以通过动画来可视化G的训练进展。点击播放按钮开始动画。
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![dcgan faces tutorial](../Images/2a31b55ef7bfff0c24c35bc635656078.png)<link
    href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css"
    rel="stylesheet">'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![dcgan faces tutorial](../Images/2a31b55ef7bfff0c24c35bc635656078.png)<link
    href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css"
    rel="stylesheet">'
