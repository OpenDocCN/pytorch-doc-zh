- en: DCGAN Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html](https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Click [here](#sphx-glr-download-beginner-dcgan-faces-tutorial-py) to download
    the full example code
  prefs: []
  type: TYPE_NORMAL
- en: '**Author**: [Nathan Inkawhich](https://github.com/inkawhich)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tutorial will give an introduction to DCGANs through an example. We will
    train a generative adversarial network (GAN) to generate new celebrities after
    showing it pictures of many real celebrities. Most of the code here is from the
    DCGAN implementation in [pytorch/examples](https://github.com/pytorch/examples),
    and this document will give a thorough explanation of the implementation and shed
    light on how and why this model works. But don’t worry, no prior knowledge of
    GANs is required, but it may require a first-timer to spend some time reasoning
    about what is actually happening under the hood. Also, for the sake of time it
    will help to have a GPU, or two. Lets start from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: Generative Adversarial Networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is a GAN?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GANs are a framework for teaching a deep learning model to capture the training
    data distribution so we can generate new data from that same distribution. GANs
    were invented by Ian Goodfellow in 2014 and first described in the paper [Generative
    Adversarial Nets](https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf).
    They are made of two distinct models, a *generator* and a *discriminator*. The
    job of the generator is to spawn ‘fake’ images that look like the training images.
    The job of the discriminator is to look at an image and output whether or not
    it is a real training image or a fake image from the generator. During training,
    the generator is constantly trying to outsmart the discriminator by generating
    better and better fakes, while the discriminator is working to become a better
    detective and correctly classify the real and fake images. The equilibrium of
    this game is when the generator is generating perfect fakes that look as if they
    came directly from the training data, and the discriminator is left to always
    guess at 50% confidence that the generator output is real or fake.
  prefs: []
  type: TYPE_NORMAL
- en: Now, lets define some notation to be used throughout tutorial starting with
    the discriminator. Let \(x\) be data representing an image. \(D(x)\) is the discriminator
    network which outputs the (scalar) probability that \(x\) came from training data
    rather than the generator. Here, since we are dealing with images, the input to
    \(D(x)\) is an image of CHW size 3x64x64\. Intuitively, \(D(x)\) should be HIGH
    when \(x\) comes from training data and LOW when \(x\) comes from the generator.
    \(D(x)\) can also be thought of as a traditional binary classifier.
  prefs: []
  type: TYPE_NORMAL
- en: For the generator’s notation, let \(z\) be a latent space vector sampled from
    a standard normal distribution. \(G(z)\) represents the generator function which
    maps the latent vector \(z\) to data-space. The goal of \(G\) is to estimate the
    distribution that the training data comes from (\(p_{data}\)) so it can generate
    fake samples from that estimated distribution (\(p_g\)).
  prefs: []
  type: TYPE_NORMAL
- en: So, \(D(G(z))\) is the probability (scalar) that the output of the generator
    \(G\) is a real image. As described in [Goodfellow’s paper](https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf),
    \(D\) and \(G\) play a minimax game in which \(D\) tries to maximize the probability
    it correctly classifies reals and fakes (\(logD(x)\)), and \(G\) tries to minimize
    the probability that \(D\) will predict its outputs are fake (\(log(1-D(G(z)))\)).
    From the paper, the GAN loss function is
  prefs: []
  type: TYPE_NORMAL
- en: \[\underset{G}{\text{min}} \underset{D}{\text{max}}V(D,G) = \mathbb{E}_{x\sim
    p_{data}(x)}\big[logD(x)\big] + \mathbb{E}_{z\sim p_{z}(z)}\big[log(1-D(G(z)))\big]
    \]
  prefs: []
  type: TYPE_NORMAL
- en: In theory, the solution to this minimax game is where \(p_g = p_{data}\), and
    the discriminator guesses randomly if the inputs are real or fake. However, the
    convergence theory of GANs is still being actively researched and in reality models
    do not always train to this point.
  prefs: []
  type: TYPE_NORMAL
- en: What is a DCGAN?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A DCGAN is a direct extension of the GAN described above, except that it explicitly
    uses convolutional and convolutional-transpose layers in the discriminator and
    generator, respectively. It was first described by Radford et. al. in the paper
    [Unsupervised Representation Learning With Deep Convolutional Generative Adversarial
    Networks](https://arxiv.org/pdf/1511.06434.pdf). The discriminator is made up
    of strided [convolution](https://pytorch.org/docs/stable/nn.html#torch.nn.Conv2d)
    layers, [batch norm](https://pytorch.org/docs/stable/nn.html#torch.nn.BatchNorm2d)
    layers, and [LeakyReLU](https://pytorch.org/docs/stable/nn.html#torch.nn.LeakyReLU)
    activations. The input is a 3x64x64 input image and the output is a scalar probability
    that the input is from the real data distribution. The generator is comprised
    of [convolutional-transpose](https://pytorch.org/docs/stable/nn.html#torch.nn.ConvTranspose2d)
    layers, batch norm layers, and [ReLU](https://pytorch.org/docs/stable/nn.html#relu)
    activations. The input is a latent vector, \(z\), that is drawn from a standard
    normal distribution and the output is a 3x64x64 RGB image. The strided conv-transpose
    layers allow the latent vector to be transformed into a volume with the same shape
    as an image. In the paper, the authors also give some tips about how to setup
    the optimizers, how to calculate the loss functions, and how to initialize the
    model weights, all of which will be explained in the coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Inputs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s define some inputs for the run:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dataroot` - the path to the root of the dataset folder. We will talk more
    about the dataset in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`workers` - the number of worker threads for loading the data with the `DataLoader`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`batch_size` - the batch size used in training. The DCGAN paper uses a batch
    size of 128.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_size` - the spatial size of the images used for training. This implementation
    defaults to 64x64\. If another size is desired, the structures of D and G must
    be changed. See [here](https://github.com/pytorch/examples/issues/70) for more
    details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nc` - number of color channels in the input images. For color images this
    is 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nz` - length of latent vector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ngf` - relates to the depth of feature maps carried through the generator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ndf` - sets the depth of feature maps propagated through the discriminator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_epochs` - number of training epochs to run. Training for longer will probably
    lead to better results but will also take much longer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lr` - learning rate for training. As described in the DCGAN paper, this number
    should be 0.0002.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beta1` - beta1 hyperparameter for Adam optimizers. As described in paper,
    this number should be 0.5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ngpu` - number of GPUs available. If this is 0, code will run in CPU mode.
    If this number is greater than 0 it will run on that number of GPUs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this tutorial we will use the [Celeb-A Faces dataset](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html)
    which can be downloaded at the linked site, or in [Google Drive](https://drive.google.com/drive/folders/0B7EVK8r0v71pTUZsaXdaSnZBZzg).
    The dataset will download as a file named `img_align_celeba.zip`. Once downloaded,
    create a directory named `celeba` and extract the zip file into that directory.
    Then, set the `dataroot` input for this notebook to the `celeba` directory you
    just created. The resulting directory structure should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is an important step because we will be using the `ImageFolder` dataset
    class, which requires there to be subdirectories in the dataset root folder. Now,
    we can create the dataset, create the dataloader, set the device to run on, and
    finally visualize some of the training data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Training Images](../Images/04fb3a8ed8e63cf7cffb5f29224decca.png)'
  prefs: []
  type: TYPE_IMG
- en: Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With our input parameters set and the dataset prepared, we can now get into
    the implementation. We will start with the weight initialization strategy, then
    talk about the generator, discriminator, loss functions, and training loop in
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Weight Initialization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From the DCGAN paper, the authors specify that all model weights shall be randomly
    initialized from a Normal distribution with `mean=0`, `stdev=0.02`. The `weights_init`
    function takes an initialized model as input and reinitializes all convolutional,
    convolutional-transpose, and batch normalization layers to meet this criteria.
    This function is applied to the models immediately after initialization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Generator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The generator, \(G\), is designed to map the latent space vector (\(z\)) to
    data-space. Since our data are images, converting \(z\) to data-space means ultimately
    creating a RGB image with the same size as the training images (i.e. 3x64x64).
    In practice, this is accomplished through a series of strided two dimensional
    convolutional transpose layers, each paired with a 2d batch norm layer and a relu
    activation. The output of the generator is fed through a tanh function to return
    it to the input data range of \([-1,1]\). It is worth noting the existence of
    the batch norm functions after the conv-transpose layers, as this is a critical
    contribution of the DCGAN paper. These layers help with the flow of gradients
    during training. An image of the generator from the DCGAN paper is shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![dcgan_generator](../Images/85974d98be6202902f21ce274418953f.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice, how the inputs we set in the input section (`nz`, `ngf`, and `nc`) influence
    the generator architecture in code. `nz` is the length of the z input vector,
    `ngf` relates to the size of the feature maps that are propagated through the
    generator, and `nc` is the number of channels in the output image (set to 3 for
    RGB images). Below is the code for the generator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can instantiate the generator and apply the `weights_init` function.
    Check out the printed model to see how the generator object is structured.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Discriminator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned, the discriminator, \(D\), is a binary classification network that
    takes an image as input and outputs a scalar probability that the input image
    is real (as opposed to fake). Here, \(D\) takes a 3x64x64 input image, processes
    it through a series of Conv2d, BatchNorm2d, and LeakyReLU layers, and outputs
    the final probability through a Sigmoid activation function. This architecture
    can be extended with more layers if necessary for the problem, but there is significance
    to the use of the strided convolution, BatchNorm, and LeakyReLUs. The DCGAN paper
    mentions it is a good practice to use strided convolution rather than pooling
    to downsample because it lets the network learn its own pooling function. Also
    batch norm and leaky relu functions promote healthy gradient flow which is critical
    for the learning process of both \(G\) and \(D\).
  prefs: []
  type: TYPE_NORMAL
- en: Discriminator Code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, as with the generator, we can create the discriminator, apply the `weights_init`
    function, and print the model’s structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Loss Functions and Optimizers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With \(D\) and \(G\) setup, we can specify how they learn through the loss
    functions and optimizers. We will use the Binary Cross Entropy loss ([BCELoss](https://pytorch.org/docs/stable/generated/torch.nn.BCELoss.html#torch.nn.BCELoss))
    function which is defined in PyTorch as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\ell(x, y) = L = \{l_1,\dots,l_N\}^\top, \quad l_n = - \left[ y_n \cdot \log
    x_n + (1 - y_n) \cdot \log (1 - x_n) \right] \]
  prefs: []
  type: TYPE_NORMAL
- en: Notice how this function provides the calculation of both log components in
    the objective function (i.e. \(log(D(x))\) and \(log(1-D(G(z)))\)). We can specify
    what part of the BCE equation to use with the \(y\) input. This is accomplished
    in the training loop which is coming up soon, but it is important to understand
    how we can choose which component we wish to calculate just by changing \(y\)
    (i.e. GT labels).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we define our real label as 1 and the fake label as 0\. These labels will
    be used when calculating the losses of \(D\) and \(G\), and this is also the convention
    used in the original GAN paper. Finally, we set up two separate optimizers, one
    for \(D\) and one for \(G\). As specified in the DCGAN paper, both are Adam optimizers
    with learning rate 0.0002 and Beta1 = 0.5\. For keeping track of the generator’s
    learning progression, we will generate a fixed batch of latent vectors that are
    drawn from a Gaussian distribution (i.e. fixed_noise) . In the training loop,
    we will periodically input this fixed_noise into \(G\), and over the iterations
    we will see images form out of the noise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Training
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, now that we have all of the parts of the GAN framework defined, we
    can train it. Be mindful that training GANs is somewhat of an art form, as incorrect
    hyperparameter settings lead to mode collapse with little explanation of what
    went wrong. Here, we will closely follow Algorithm 1 from the [Goodfellow’s paper](https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf),
    while abiding by some of the best practices shown in [ganhacks](https://github.com/soumith/ganhacks).
    Namely, we will “construct different mini-batches for real and fake” images, and
    also adjust G’s objective function to maximize \(log(D(G(z)))\). Training is split
    up into two main parts. Part 1 updates the Discriminator and Part 2 updates the
    Generator.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 1 - Train the Discriminator**'
  prefs: []
  type: TYPE_NORMAL
- en: Recall, the goal of training the discriminator is to maximize the probability
    of correctly classifying a given input as real or fake. In terms of Goodfellow,
    we wish to “update the discriminator by ascending its stochastic gradient”. Practically,
    we want to maximize \(log(D(x)) + log(1-D(G(z)))\). Due to the separate mini-batch
    suggestion from [ganhacks](https://github.com/soumith/ganhacks), we will calculate
    this in two steps. First, we will construct a batch of real samples from the training
    set, forward pass through \(D\), calculate the loss (\(log(D(x))\)), then calculate
    the gradients in a backward pass. Secondly, we will construct a batch of fake
    samples with the current generator, forward pass this batch through \(D\), calculate
    the loss (\(log(1-D(G(z)))\)), and *accumulate* the gradients with a backward
    pass. Now, with the gradients accumulated from both the all-real and all-fake
    batches, we call a step of the Discriminator’s optimizer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 2 - Train the Generator**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As stated in the original paper, we want to train the Generator by minimizing
    \(log(1-D(G(z)))\) in an effort to generate better fakes. As mentioned, this was
    shown by Goodfellow to not provide sufficient gradients, especially early in the
    learning process. As a fix, we instead wish to maximize \(log(D(G(z)))\). In the
    code we accomplish this by: classifying the Generator output from Part 1 with
    the Discriminator, computing G’s loss *using real labels as GT*, computing G’s
    gradients in a backward pass, and finally updating G’s parameters with an optimizer
    step. It may seem counter-intuitive to use the real labels as GT labels for the
    loss function, but this allows us to use the \(log(x)\) part of the `BCELoss`
    (rather than the \(log(1-x)\) part) which is exactly what we want.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will do some statistic reporting and at the end of each epoch we
    will push our fixed_noise batch through the generator to visually track the progress
    of G’s training. The training statistics reported are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Loss_D** - discriminator loss calculated as the sum of losses for the all
    real and all fake batches (\(log(D(x)) + log(1 - D(G(z)))\)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loss_G** - generator loss calculated as \(log(D(G(z)))\)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**D(x)** - the average output (across the batch) of the discriminator for the
    all real batch. This should start close to 1 then theoretically converge to 0.5
    when G gets better. Think about why this is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**D(G(z))** - average discriminator outputs for the all fake batch. The first
    number is before D is updated and the second number is after D is updated. These
    numbers should start near 0 and converge to 0.5 as G gets better. Think about
    why this is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note:** This step might take a while, depending on how many epochs you run
    and if you removed some data from the dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, lets check out how we did. Here, we will look at three different results.
    First, we will see how D and G’s losses changed during training. Second, we will
    visualize G’s output on the fixed_noise batch for every epoch. And third, we will
    look at a batch of real data next to a batch of fake data from G.
  prefs: []
  type: TYPE_NORMAL
- en: '**Loss versus training iteration**'
  prefs: []
  type: TYPE_NORMAL
- en: Below is a plot of D & G’s losses versus training iterations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Generator and Discriminator Loss During Training](../Images/097cd68a7de6371c697afbe4230ef328.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Visualization of G’s progression**'
  prefs: []
  type: TYPE_NORMAL
- en: Remember how we saved the generator’s output on the fixed_noise batch after
    every epoch of training. Now, we can visualize the training progression of G with
    an animation. Press the play button to start the animation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![dcgan faces tutorial](../Images/2a31b55ef7bfff0c24c35bc635656078.png)<link
    href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css"
    rel="stylesheet">'
  prefs: []
  type: TYPE_NORMAL
