- en: StreamWriter Basic Usage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StreamWriter基本用法
- en: 原文：[https://pytorch.org/audio/stable/tutorials/streamwriter_basic_tutorial.html](https://pytorch.org/audio/stable/tutorials/streamwriter_basic_tutorial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/audio/stable/tutorials/streamwriter_basic_tutorial.html](https://pytorch.org/audio/stable/tutorials/streamwriter_basic_tutorial.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Click [here](#sphx-glr-download-tutorials-streamwriter-basic-tutorial-py) to
    download the full example code
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 点击[这里](#sphx-glr-download-tutorials-streamwriter-basic-tutorial-py)下载完整示例代码
- en: '**Author**: [Moto Hira](mailto:moto%40meta.com)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者**：[Moto Hira](mailto:moto%40meta.com)'
- en: This tutorial shows how to use [`torchaudio.io.StreamWriter`](../generated/torchaudio.io.StreamWriter.html#torchaudio.io.StreamWriter
    "torchaudio.io.StreamWriter") to encode and save audio/video data into various
    formats/destinations.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了如何使用[`torchaudio.io.StreamWriter`](../generated/torchaudio.io.StreamWriter.html#torchaudio.io.StreamWriter
    "torchaudio.io.StreamWriter")将音频/视频数据编码并保存为各种格式/目的地。
- en: Note
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This tutorial requires FFmpeg libraries. Please refer to [FFmpeg dependency](../installation.html#ffmpeg-dependency)
    for the detail.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程需要FFmpeg库。请参考[FFmpeg依赖](../installation.html#ffmpeg-dependency)获取详细信息。
- en: Warning
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: TorchAudio dynamically loads compatible FFmpeg libraries installed on the system.
    The types of supported formats (media format, encoder, encoder options, etc) depend
    on the libraries.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: TorchAudio动态加载安装在系统上的兼容FFmpeg库。支持的格式类型（媒体格式、编码器、编码器选项等）取决于这些库。
- en: To check the available muxers and encoders, you can use the following command
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查可用的混合器和编码器，可以使用以下命令
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Preparation[](#preparation "Permalink to this heading")
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备[](#preparation "跳转到此标题的永久链接")
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The basic usage[](#the-basic-usage "Permalink to this heading")
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本用法[](#the-basic-usage "跳转到此标题的永久链接")
- en: To save Tensor data into media formats with StreamWriter, there are three necessary
    steps
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用StreamWriter将张量数据保存为媒体格式，需要三个必要步骤
- en: Specify the output
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定输出
- en: Configure streams
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置流
- en: Write data
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写入数据
- en: The following code illustrates how to save audio data as WAV file.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何将音频数据保存为WAV文件。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: null
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: Now we look into each step in more detail.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更详细地看一下每个步骤。
- en: Write destination[](#write-destination "Permalink to this heading")
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入目的地[](#write-destination "跳转到此标题的永久链接")
- en: StreamWriter supports different types of write destinations
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: StreamWriter支持不同类型的写入目的地
- en: Local files
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地文件
- en: File-like objects
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似文件的对象
- en: Streaming protocols (such as RTMP and UDP)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流协议（如RTMP和UDP）
- en: Media devices (speakers and video players) †
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 媒体设备（扬声器和视频播放器）†
- en: † For media devices, please refer to [StreamWriter Advanced Usages](./streamwriter_advanced.html).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: † 对于媒体设备，请参考[StreamWriter高级用法](./streamwriter_advanced.html)。
- en: Local files[](#local-files "Permalink to this heading")
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地文件[](#local-files "跳转到此标题的永久链接")
- en: StreamWriter supports saving media to local files.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: StreamWriter支持将媒体保存到本地文件。
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This works for still images and videos as well.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于静态图像和视频。
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: File-like objects[](#file-like-objects "Permalink to this heading")
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类似文件的对象[](#file-like-objects "跳转到此标题的永久链接")
- en: You can also pass a file-lie object. A file-like object must implement `write`
    method conforming to [`io.RawIOBase.write`](https://docs.python.org/3/library/io.html#io.RawIOBase.write
    "(in Python v3.12)").
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以传递一个类似文件的对象。类似文件的对象必须实现符合[`io.RawIOBase.write`](https://docs.python.org/3/library/io.html#io.RawIOBase.write
    "（在Python v3.12中）")的`write`方法。
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Streaming protocols[](#streaming-protocols "Permalink to this heading")
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流协议[](#streaming-protocols "跳转到此标题的永久链接")
- en: You can stream the media with streaming protocols
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用流协议来流式传输媒体
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Configuring output streams[](#configuring-output-streams "Permalink to this
    heading")
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置输出流[](#configuring-output-streams "跳转到此标题的永久链接")
- en: Once the destination is specified, the next step is to configure the streams.
    For typical audio and still image cases, only one stream is required, but for
    video with audio, at least two streams (one for audio and the other for video)
    need to be configured.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦目的地被指定，下一步是配置流。对于典型的音频和静态图像情况，只需要一个流，但对于带有音频的视频，至少需要配置两个流（一个用于音频，另一个用于视频）。
- en: Audio Stream[](#audio-stream "Permalink to this heading")
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音频流[](#audio-stream "跳转到此标题的永久链接")
- en: An audio stream can be added with `add_audio_stream()` method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`add_audio_stream()`方法添加音频流。
- en: For writing regular audio files, at minimum `sample_rate` and `num_channels`
    are required.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于写入常规音频文件，至少需要`sample_rate`和`num_channels`。
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By default, audio streams expect the input waveform tensors to be `torch.float32`
    type. If the above case, the data will be encoded into the detault encoding format
    of WAV format, which is 16-bit signed integer Linear PCM. StreamWriter converts
    the sample format internally.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，音频流期望输入波形张量为`torch.float32`类型。在上述情况下，数据将被编码为WAV格式的默认编码格式，即16位有符号整数线性PCM。StreamWriter会在内部转换采样格式。
- en: If the encoder supports multiple sample formats and you want to change the encoder
    sample format, you can use `encoder_format` option.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果编码器支持多种采样格式，并且您想要更改编码器的采样格式，可以使用`encoder_format`选项。
- en: In the following example, the StreamWriter expects the data type of the input
    waveform Tensor to be `torch.float32`, but it will convert the sample to 16-bit
    signed integer when encoding.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，StreamWriter期望输入波形张量的数据类型为`torch.float32`，但在编码时会将采样转换为16位有符号整数。
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If the data type of your waveform Tensor is something other than `torch.float32`,
    you can provide `format` option to change the expected data type.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的波形张量的数据类型不是`torch.float32`，您可以提供`format`选项来更改预期的数据类型。
- en: The following example configures StreamWriter to expect Tensor of `torch.int16`
    type.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例配置StreamWriter以期望`torch.int16`类型的张量。
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The following figure illustrates how `format` and `encoder_format` options work
    for audio streams.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示了音频流中`format`和`encoder_format`选项的工作原理。
- en: '![https://download.pytorch.org/torchaudio/tutorial-assets/streamwriter-format-audio.png](../Images/cc11e30ca877aed22f85b963e3d21750.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![https://download.pytorch.org/torchaudio/tutorial-assets/streamwriter-format-audio.png](../Images/cc11e30ca877aed22f85b963e3d21750.png)'
- en: Video Stream[](#video-stream "Permalink to this heading")
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视频流[](#video-stream "跳转到此标题的永久链接")
- en: To add a still image or a video stream, you can use `add_video_stream()` method.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加静态图像或视频流，可以使用`add_video_stream()`方法。
- en: At minimum, `frame_rate`, `height` and `width` are required.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要`frame_rate`、`height`和`width`。
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For still images, please use `frame_rate=1`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于静态图像，请使用`frame_rate=1`。
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Similar to the audio stream, you can provide `format` and `encoder_format` option
    to controll the format of input data and encoding.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与音频流类似，您可以提供`format`和`encoder_format`选项来控制输入数据和编码的格式。
- en: The following example encodes video data in YUV422 format.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将视频数据编码为YUV422格式。
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: YUV formats are commonly used in video encoding. Many YUV formats are composed
    of chroma channel of different plane size than that of luma channel. This makes
    it difficult to directly express it as `torch.Tensor` type. Therefore, StreamWriter
    will automatically convert the input video Tensor into the target format.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: YUV格式通常用于视频编码。许多YUV格式由不同平面大小的色度通道组成，这使得直接将其表达为`torch.Tensor`类型变得困难。因此，StreamWriter将自动将输入视频张量转换为目标格式。
- en: StreamWriter expects the input image tensor to be 4-D (time, channel, height,
    width) and `torch.uint8` type.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: StreamWriter期望输入图像张量为4-D（时间，通道，高度，宽度）和`torch.uint8`类型。
- en: The default color channel is RGB. That is three color channels corresponding
    red, green and blue. If your input has different color channel, such as BGR and
    YUV, you can specify it with `format` option.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的颜色通道是RGB。即三个颜色通道对应红色、绿色和蓝色。如果您的输入具有不同的颜色通道，例如BGR和YUV，可以使用`format`选项指定。
- en: The following example specifies BGR format.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例指定了BGR格式。
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The following figure illustrates how `format` and `encoder_format` options work
    for video streams.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了`format`和`encoder_format`选项如何为视频流工作。
- en: '![https://download.pytorch.org/torchaudio/tutorial-assets/streamwriter-format-video.png](../Images/dae3b96285e227e70b2ff53781bc191c.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![https://download.pytorch.org/torchaudio/tutorial-assets/streamwriter-format-video.png](../Images/dae3b96285e227e70b2ff53781bc191c.png)'
- en: Write data[](#write-data "Permalink to this heading")
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入数据[](#write-data "跳转到此标题的永久链接")
- en: Once streams are configured, the next step is to open the output location and
    start writing data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦流配置完成，下一步是打开输出位置并开始写入数据。
- en: Use `open()` method to open the destination, and then write data with `write_audio_chunk()`
    and/or `write_video_chunk()`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`open()`方法打开目的地，然后使用`write_audio_chunk()`和/或`write_video_chunk()`写入数据。
- en: Audio tensors are expected to have the shape of (time, channels), and video/image
    tensors are expected to have the shape of (time, channels, height, width).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 音频张量应具有形状（时间，通道），视频/图像张量应具有形状（时间，通道，高度，宽度）。
- en: Channels, height and width must match the configuration of the corresponding
    stream, specified with `"format"` option.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通道、高度和宽度必须与相应流的配置匹配，使用`"format"`选项指定。
- en: Tensor representing a still image must have only one frame in time dimension,
    but audio and video tensors can have arbitral number of frames in time dimension.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 表示静态图像的张量必须在时间维度上只有一个帧，但音频和视频张量可以在时间维度上具有任意数量的帧。
- en: The following code snippet illustrates this;
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段说明了这一点；
- en: Ex) Audio[](#ex-audio "Permalink to this heading")
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例如）音频[](#ex-audio "跳转到此标题的永久链接")
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Ex) Image[](#ex-image "Permalink to this heading")
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例如）图像[](#ex-image "跳转到此标题的永久链接")
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Ex) Video without audio[](#ex-video-without-audio "Permalink to this heading")
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例如）无音频的视频[](#ex-video-without-audio "跳转到此标题的永久链接")
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Ex) Video with audio[](#ex-video-with-audio "Permalink to this heading")
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例如）带有音频的视频[](#ex-video-with-audio "跳转到此标题的永久链接")
- en: To write video with audio, separate streams have to be configured.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入带有音频的视频，必须配置单独的流。
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Writing data chunk by chunk[](#writing-data-chunk-by-chunk "Permalink to this
    heading")
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逐块写入数据[](#writing-data-chunk-by-chunk "跳转到此标题的永久链接")
- en: When writing data, it is possible to split data along time dimension and write
    them by smaller chunks.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在写入数据时，可以沿时间维度拆分数据并按较小的块写入。
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Example - Spectrum Visualizer[](#example-spectrum-visualizer "Permalink to this
    heading")
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 频谱可视化器[](#example-spectrum-visualizer "跳转到此标题的永久链接")
- en: In this section, we use StreamWriter to create a spectrum visualization of audio
    and save it as a video file.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用StreamWriter创建音频的频谱可视化并将其保存为视频文件。
- en: To create spectrum visualization, we use [`torchaudio.transforms.Spectrogram`](../generated/torchaudio.transforms.Spectrogram.html#torchaudio.transforms.Spectrogram
    "torchaudio.transforms.Spectrogram"), to get spectrum presentation of audio, generate
    raster images of its visualization using matplotplib, then use StreamWriter to
    convert them to video with the original audio.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建频谱可视化，我们使用[`torchaudio.transforms.Spectrogram`](../generated/torchaudio.transforms.Spectrogram.html#torchaudio.transforms.Spectrogram
    "torchaudio.transforms.Spectrogram")来获取音频的频谱表示，使用matplotplib生成其可视化的光栅图像，然后使用StreamWriter将它们转换为带有原始音频的视频。
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Prepare Data[](#prepare-data "Permalink to this heading")
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备数据[](#prepare-data "跳转到此标题的永久链接")
- en: First, we prepare the spectrogram data. We use [`Spectrogram`](../generated/torchaudio.transforms.Spectrogram.html#torchaudio.transforms.Spectrogram
    "torchaudio.transforms.Spectrogram").
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们准备频谱数据。我们使用[`Spectrogram`](../generated/torchaudio.transforms.Spectrogram.html#torchaudio.transforms.Spectrogram
    "torchaudio.transforms.Spectrogram")。
- en: We adjust `hop_length` so that one frame of the spectrogram corresponds to one
    video frame.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调整`hop_length`，使得频谱图的一帧对应于一个视频帧。
- en: '[PRE29]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The resulting spectrogram looks like the following.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的频谱图看起来像下面这样。
- en: '[PRE30]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![streamwriter basic tutorial](../Images/23bb162fe5e2ad4ea90d1784cca151d1.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![streamwriter基础教程](../Images/23bb162fe5e2ad4ea90d1784cca151d1.png)'
- en: Prepare Canvas[](#prepare-canvas "Permalink to this heading")
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备画布[](#prepare-canvas "跳转到此标题的永久链接")
- en: We use `matplotlib` to visualize the spectrogram per frame. We create a helper
    function that plots the spectrogram data and generates a raster imager of the
    figure.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`matplotlib`来可视化每帧的频谱图。我们创建一个辅助函数来绘制频谱数据并生成图像的光栅图像。
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Write Video[](#write-video "Permalink to this heading")
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写视频[](#write-video "跳转到此标题的永久链接")
- en: Finally, we use StreamWriter and write video. We process one second of audio
    and video frames at a time.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用StreamWriter并写入视频。我们一次处理一秒的音频和视频帧。
- en: '[PRE32]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Result[](#result "Permalink to this heading")
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果[](#result "跳转到此标题的永久链接")
- en: The result looks like below.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示。
- en: '[PRE34]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: null
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the video tag.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持视频标签。
- en: Carefully watching the video, it can be observed that the sound of “s” (curio**si**ty,
    be**si**des, thi**s**) has more energy allocated on higher frequency side (right
    side of the video).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察视频，可以发现“s”音的声音（curio**si**ty, be**si**des, thi**s**）在高频侧（视频的右侧）有更多的能量分配。
- en: 'Tag: [`torchaudio.io`](../io.html#module-torchaudio.io "torchaudio.io")'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：[`torchaudio.io`](../io.html#module-torchaudio.io "torchaudio.io")
- en: '**Total running time of the script:** ( 0 minutes 6.918 seconds)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本的总运行时间：**（0分钟6.918秒）'
- en: '[`Download Python source code: streamwriter_basic_tutorial.py`](../_downloads/d8d57badf5e878c5beb8d32b0aefc7dd/streamwriter_basic_tutorial.py)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Python源代码：streamwriter_basic_tutorial.py`](../_downloads/d8d57badf5e878c5beb8d32b0aefc7dd/streamwriter_basic_tutorial.py)'
- en: '[`Download Jupyter notebook: streamwriter_basic_tutorial.ipynb`](../_downloads/78e5305a9c1fa517857bc0197643e56d/streamwriter_basic_tutorial.ipynb)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Jupyter笔记本：streamwriter_basic_tutorial.ipynb`](../_downloads/78e5305a9c1fa517857bc0197643e56d/streamwriter_basic_tutorial.ipynb)'
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sphinx-Gallery生成的图库](https://sphinx-gallery.github.io)'
