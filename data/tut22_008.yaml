- en: Datasets & DataLoaders
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集和DataLoaders
- en: 原文：[https://pytorch.org/tutorials/beginner/basics/data_tutorial.html](https://pytorch.org/tutorials/beginner/basics/data_tutorial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/tutorials/beginner/basics/data_tutorial.html](https://pytorch.org/tutorials/beginner/basics/data_tutorial.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Click [here](#sphx-glr-download-beginner-basics-data-tutorial-py) to download
    the full example code
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 点击[这里](#sphx-glr-download-beginner-basics-data-tutorial-py)下载完整示例代码
- en: '[Learn the Basics](intro.html) || [Quickstart](quickstart_tutorial.html) ||
    [Tensors](tensorqs_tutorial.html) || **Datasets & DataLoaders** || [Transforms](transforms_tutorial.html)
    || [Build Model](buildmodel_tutorial.html) || [Autograd](autogradqs_tutorial.html)
    || [Optimization](optimization_tutorial.html) || [Save & Load Model](saveloadrun_tutorial.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[学习基础知识](intro.html) || [快速入门](quickstart_tutorial.html) || [张量](tensorqs_tutorial.html)
    || **数据集和DataLoaders** || [转换](transforms_tutorial.html) || [构建模型](buildmodel_tutorial.html)
    || [自动求导](autogradqs_tutorial.html) || [优化](optimization_tutorial.html) || [保存和加载模型](saveloadrun_tutorial.html)'
- en: 'Code for processing data samples can get messy and hard to maintain; we ideally
    want our dataset code to be decoupled from our model training code for better
    readability and modularity. PyTorch provides two data primitives: `torch.utils.data.DataLoader`
    and `torch.utils.data.Dataset` that allow you to use pre-loaded datasets as well
    as your own data. `Dataset` stores the samples and their corresponding labels,
    and `DataLoader` wraps an iterable around the `Dataset` to enable easy access
    to the samples.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 处理数据样本的代码可能会变得混乱且难以维护；我们理想情况下希望我们的数据集代码与模型训练代码解耦，以提高可读性和模块化性。PyTorch提供了两个数据原语：`torch.utils.data.DataLoader`和`torch.utils.data.Dataset`，允许您使用预加载数据集以及您自己的数据。`Dataset`存储样本及其对应的标签，`DataLoader`将可迭代对象包装在`Dataset`周围，以便轻松访问样本。
- en: 'PyTorch domain libraries provide a number of pre-loaded datasets (such as FashionMNIST)
    that subclass `torch.utils.data.Dataset` and implement functions specific to the
    particular data. They can be used to prototype and benchmark your model. You can
    find them here: [Image Datasets](https://pytorch.org/vision/stable/datasets.html),
    [Text Datasets](https://pytorch.org/text/stable/datasets.html), and [Audio Datasets](https://pytorch.org/audio/stable/datasets.html)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch领域库提供了许多预加载数据集（如FashionMNIST），它们是`torch.utils.data.Dataset`的子类，并实现了特定于特定数据的函数。它们可用于原型设计和模型基准测试。您可以在这里找到它们：[图像数据集](https://pytorch.org/vision/stable/datasets.html)、[文本数据集](https://pytorch.org/text/stable/datasets.html)和[音频数据集](https://pytorch.org/audio/stable/datasets.html)
- en: Loading a Dataset
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据集
- en: Here is an example of how to load the [Fashion-MNIST](https://research.zalando.com/project/fashion_mnist/fashion_mnist/)
    dataset from TorchVision. Fashion-MNIST is a dataset of Zalando’s article images
    consisting of 60,000 training examples and 10,000 test examples. Each example
    comprises a 28×28 grayscale image and an associated label from one of 10 classes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何从TorchVision加载[Fashion-MNIST](https://research.zalando.com/project/fashion_mnist/fashion_mnist/)数据集的示例。Fashion-MNIST是Zalando文章图像数据集，包括60,000个训练示例和10,000个测试示例。每个示例包括一个28×28的灰度图像和来自10个类别之一的相关标签。
- en: 'We load the [FashionMNIST Dataset](https://pytorch.org/vision/stable/datasets.html#fashion-mnist)
    with the following parameters:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下参数加载[FashionMNIST数据集](https://pytorch.org/vision/stable/datasets.html#fashion-mnist)：
- en: '`root` is the path where the train/test data is stored,'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root`是存储训练/测试数据的路径，'
- en: '`train` specifies training or test dataset,'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`train`指定训练或测试数据集，'
- en: '`download=True` downloads the data from the internet if it’s not available
    at `root`.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`download=True`如果在`root`中不可用，则从互联网下载数据。'
- en: '`transform` and `target_transform` specify the feature and label transformations'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transform`和`target_transform`指定特征和标签转换'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Iterating and Visualizing the Dataset
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代和可视化数据集
- en: 'We can index `Datasets` manually like a list: `training_data[index]`. We use
    `matplotlib` to visualize some samples in our training data.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像列表一样手动索引`Datasets`：`training_data[index]`。我们使用`matplotlib`来可视化我们训练数据中的一些样本。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Ankle Boot, Shirt, Bag, Ankle Boot, Trouser, Sandal, Coat, Sandal, Pullover](../Images/414b2c11be252247fbe8746751fe1cad.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![踝靴、衬衫、包、踝靴、裤子、凉鞋、外套、凉鞋、套头衫](../Images/414b2c11be252247fbe8746751fe1cad.png)'
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Creating a Custom Dataset for your files
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为您的文件创建自定义数据集
- en: 'A custom Dataset class must implement three functions: __init__, __len__, and
    __getitem__. Take a look at this implementation; the FashionMNIST images are stored
    in a directory `img_dir`, and their labels are stored separately in a CSV file
    `annotations_file`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义数据集类必须实现三个函数：`__init__`、`__len__`和`__getitem__`。看一下这个实现；FashionMNIST图像存储在一个名为`img_dir`的目录中，它们的标签单独存储在一个名为`annotations_file`的CSV文件中。
- en: In the next sections, we’ll break down what’s happening in each of these functions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将分解每个函数中发生的情况。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`__init__`'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__init__`'
- en: The __init__ function is run once when instantiating the Dataset object. We
    initialize the directory containing the images, the annotations file, and both
    transforms (covered in more detail in the next section).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__`函数在实例化数据集对象时运行一次。我们初始化包含图像的目录、注释文件和两个转换（在下一节中详细介绍）。'
- en: 'The labels.csv file looks like:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 标签.csv文件如下：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`__len__`'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__len__`'
- en: The __len__ function returns the number of samples in our dataset.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`__len__`函数返回数据集中样本的数量。'
- en: 'Example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`__getitem__`'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__getitem__`'
- en: The __getitem__ function loads and returns a sample from the dataset at the
    given index `idx`. Based on the index, it identifies the image’s location on disk,
    converts that to a tensor using `read_image`, retrieves the corresponding label
    from the csv data in `self.img_labels`, calls the transform functions on them
    (if applicable), and returns the tensor image and corresponding label in a tuple.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`__getitem__`函数加载并返回给定索引`idx`处数据集中的样本。根据索引，它确定磁盘上图像的位置，使用`read_image`将其转换为张量，从`self.img_labels`中的csv数据中检索相应的标签，对它们调用转换函数（如果适用），并以元组形式返回张量图像和相应标签。'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '* * *'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Preparing your data for training with DataLoaders
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为使用DataLoaders准备数据
- en: The `Dataset` retrieves our dataset’s features and labels one sample at a time.
    While training a model, we typically want to pass samples in “minibatches”, reshuffle
    the data at every epoch to reduce model overfitting, and use Python’s `multiprocessing`
    to speed up data retrieval.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dataset`以一次一个样本的方式检索我们数据集的特征和标签。在训练模型时，我们通常希望以“小批量”方式传递样本，每个时代重新洗牌数据以减少模型过拟合，并使用Python的`multiprocessing`加速数据检索。'
- en: '`DataLoader` is an iterable that abstracts this complexity for us in an easy
    API.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataLoader`是一个可迭代对象，它在易用的API中为我们抽象了这种复杂性。'
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Iterate through the DataLoader
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历DataLoader
- en: We have loaded that dataset into the `DataLoader` and can iterate through the
    dataset as needed. Each iteration below returns a batch of `train_features` and
    `train_labels` (containing `batch_size=64` features and labels respectively).
    Because we specified `shuffle=True`, after we iterate over all batches the data
    is shuffled (for finer-grained control over the data loading order, take a look
    at [Samplers](https://pytorch.org/docs/stable/data.html#data-loading-order-and-sampler)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将数据集加载到`DataLoader`中，并可以根据需要遍历数据集。下面的每次迭代都会返回一批`train_features`和`train_labels`（分别包含`batch_size=64`个特征和标签）。因为我们指定了`shuffle=True`，在遍历所有批次后，数据会被洗牌（为了更精细地控制数据加载顺序，请查看[Samplers](https://pytorch.org/docs/stable/data.html#data-loading-order-and-sampler)）。
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![data tutorial](../Images/984f7e1474d00727ca26fcbc11a91b69.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![数据教程](../Images/984f7e1474d00727ca26fcbc11a91b69.png)'
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '* * *'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Further Reading
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[torch.utils.data API](https://pytorch.org/docs/stable/data.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[torch.utils.data API](https://pytorch.org/docs/stable/data.html)'
- en: '**Total running time of the script:** ( 0 minutes 5.632 seconds)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本的总运行时间：**（0分钟5.632秒）'
- en: '[`Download Python source code: data_tutorial.py`](../../_downloads/56e3f440fc204e02856f8889c226d2d1/data_tutorial.py)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Python源代码：data_tutorial.py`](../../_downloads/56e3f440fc204e02856f8889c226d2d1/data_tutorial.py)'
- en: '[`Download Jupyter notebook: data_tutorial.ipynb`](../../_downloads/36608d2d57f623ba3a623e0c947a8c3e/data_tutorial.ipynb)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Jupyter笔记本：data_tutorial.ipynb`](../../_downloads/36608d2d57f623ba3a623e0c947a8c3e/data_tutorial.ipynb)'
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sphinx-Gallery生成的画廊](https://sphinx-gallery.github.io)'
