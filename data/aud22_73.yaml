- en: torio::io::StreamingMediaEncoder
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: torio::io::StreamingMediaEncoder
- en: 原文：[https://pytorch.org/audio/stable/libtorio.stream_writer.html](https://pytorch.org/audio/stable/libtorio.stream_writer.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/audio/stable/libtorio.stream_writer.html](https://pytorch.org/audio/stable/libtorio.stream_writer.html)
- en: Warning
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: TorchAudio’s C++ API is prototype feature. API/ABI backward compatibility is
    not guaranteed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: TorchAudio的C++ API是原型功能。不保证API/ABI向后兼容性。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The top-level namespace has been changed from `torchaudio` to `torio`. `StreamWriter`
    has been renamed to `StreamingMediaEncoder`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 顶层命名空间已从`torchaudio`更改为`torio`。`StreamWriter`已更名为`StreamingMediaEncoder`。
- en: '`StreamingMediaEncoder` is the implementation used by Python equivalent and
    provides similar interface. When working with custom I/O, such as in-memory data,
    `StreamingMediaEncoderCustomIO` class can be used.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`StreamingMediaEncoder`是Python等效实现使用的实现，并提供类似的接口。在处理自定义I/O（例如内存数据）时，可以使用`StreamingMediaEncoderCustomIO`类。'
- en: Both classes have the same methods defined, so their usages are the same.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个类定义了相同的方法，因此它们的用法相同。
- en: Constructors[](#constructors "Permalink to this heading")
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数[](#constructors "Permalink to this heading")
- en: StreamingMediaEncoder[](#streamingmediaencoder "Permalink to this heading")
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: StreamingMediaEncoder[](#streamingmediaencoder "Permalink to this heading")
- en: class  StreamingMediaEncoder[](#_CPPv4N5torio2io21StreamingMediaEncoderE "Permalink
    to this definition")
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 类StreamingMediaEncoder[](#_CPPv4N5torio2io21StreamingMediaEncoderE "Permalink
    to this definition")
- en: Encode and write audio/video streams chunk by chunk
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 逐块编码和写入音频/视频流
- en: Subclassed by [torio::io::StreamingMediaEncoderCustomIO](#classtorio_1_1io_1_1StreamingMediaEncoderCustomIO)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由[torio::io::StreamingMediaEncoderCustomIO](#classtorio_1_1io_1_1StreamingMediaEncoderCustomIO)派生
- en: explicit  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::StreamingMediaEncoder(const  std::string  &dst,
    const  c10::optional<std::string>  &format  =  c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder21StreamingMediaEncoderERKNSt6stringERKN3c108optionalINSt6stringEEE
    "Permalink to this definition")
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 显式torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::StreamingMediaEncoder(const  std::string  &dst,
    const  c10::optional<std::string>  &format  =  c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder21StreamingMediaEncoderERKNSt6stringERKN3c108optionalINSt6stringEEE
    "Permalink to this definition")
- en: Construct [StreamingMediaEncoder](#classtorio_1_1io_1_1StreamingMediaEncoder)
    from destination URI
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从目的地URI构造[StreamingMediaEncoder](#classtorio_1_1io_1_1StreamingMediaEncoder)
- en: 'Parameters:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dst** – Destination where encoded data are written.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dst** - 编码数据写入的目的地。'
- en: '**format** – Specify output format. If not provided, it is guessed from `dst`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式** - 指定输出格式。如果未提供，则从`dst`中猜测。'
- en: StreamingMediaEncoderCustomIO[](#streamingmediaencodercustomio "Permalink to
    this heading")
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: StreamingMediaEncoderCustomIO[](#streamingmediaencodercustomio "Permalink to
    this heading")
- en: 'class  StreamingMediaEncoderCustomIO  :  private  detail::CustomOutput,  public  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")[](#_CPPv4N5torio2io29StreamingMediaEncoderCustomIOE
    "Permalink to this definition")'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 类StreamingMediaEncoderCustomIO：private detail::CustomOutput, public torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")[](#_CPPv4N5torio2io29StreamingMediaEncoderCustomIOE
    "Permalink to this definition")
- en: A subclass of [StreamingMediaDecoder](libtorio.stream_reader.html#classtorio_1_1io_1_1StreamingMediaDecoder)
    which works with custom read function. Can be used for encoding media into memory
    or custom object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[StreamingMediaDecoder](libtorio.stream_reader.html#classtorio_1_1io_1_1StreamingMediaDecoder)的子类，可以与自定义读取函数一起使用。可用于将媒体编码到内存或自定义对象中。
- en: torio::io::[StreamingMediaEncoderCustomIO](#_CPPv4N5torio2io29StreamingMediaEncoderCustomIOE
    "torio::io::StreamingMediaEncoderCustomIO")::StreamingMediaEncoderCustomIO(void  *opaque,
    const  c10::optional<std::string>  &format, int  buffer_size, int  (*write_packet)(void  *opaque,  uint8_t  *buf,  int  buf_size),
    int64_t  (*seek)(void  *opaque,  int64_t  offset,  int  whence)  =  nullptr)[](#_CPPv4N5torio2io29StreamingMediaEncoderCustomIO29StreamingMediaEncoderCustomIOEPvRKN3c108optionalINSt6stringEEEiPFiPvP7uint8_tiEPF7int64_tPv7int64_tiE
    "Permalink to this definition")
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: torio::io::[StreamingMediaEncoderCustomIO](#_CPPv4N5torio2io29StreamingMediaEncoderCustomIOE
    "torio::io::StreamingMediaEncoderCustomIO")::StreamingMediaEncoderCustomIO(void  *opaque,
    const  c10::optional<std::string>  &format, int  buffer_size, int  (*write_packet)(void  *opaque,  uint8_t  *buf,  int  buf_size),
    int64_t  (*seek)(void  *opaque,  int64_t  offset,  int  whence)  =  nullptr)[](#_CPPv4N5torio2io29StreamingMediaEncoderCustomIO29StreamingMediaEncoderCustomIOEPvRKN3c108optionalINSt6stringEEEiPFiPvP7uint8_tiEPF7int64_tPv7int64_tiE
    "Permalink to this definition")
- en: Construct [StreamingMediaEncoderCustomIO](#classtorio_1_1io_1_1StreamingMediaEncoderCustomIO)
    with custom write and seek functions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义写入和寻址函数构造[StreamingMediaEncoderCustomIO](#classtorio_1_1io_1_1StreamingMediaEncoderCustomIO)。
- en: 'Parameters:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**opaque** – Custom data used by `write_packet` and `seek` functions.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**opaque** - `write_packet`和`seek`函数使用的自定义数据。'
- en: '**format** – Specify output format.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式** - 指定输出格式。'
- en: '**buffer_size** – The size of the intermediate buffer, which FFmpeg uses to
    pass data to write_packet function.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**buffer_size** - 中间缓冲区的大小，FFmpeg用于将数据传递给write_packet函数。'
- en: '**write_packet** – Custom write function that is called from FFmpeg to actually
    write data to the custom destination.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**write_packet** - 自定义写入函数，从FFmpeg调用以实际将数据写入自定义目的地。'
- en: '**seek** – Optional seek function that is used to seek the destination.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**seek** - 可选的寻址函数，用于寻址目的地。'
- en: Config methods[](#config-methods "Permalink to this heading")
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置方法[](#config-methods "Permalink to this heading")
- en: add_audio_stream[](#add-audio-stream "Permalink to this heading")
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: add_audio_stream[](#add-audio-stream "Permalink to this heading")
- en: void  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::add_audio_stream(int  sample_rate, int  num_channels,
    const  std::string  &format, const  c10::optional<std::string>  &encoder  =  c10::nullopt,
    const  c10::optional<OptionDict>  &encoder_option  =  c10::nullopt, const  c10::optional<std::string>  &encoder_format  =  c10::nullopt,
    const  c10::optional<int>  &encoder_sample_rate  =  c10::nullopt, const  c10::optional<int>  &encoder_num_channels  =  c10::nullopt,
    const  c10::optional<CodecConfig>  &codec_config  =  c10::nullopt, const  c10::optional<std::string>  &filter_desc  =  c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder16add_audio_streamEiiRKNSt6stringERKN3c108optionalINSt6stringEEERKN3c108optionalI10OptionDictEERKN3c108optionalINSt6stringEEERKN3c108optionalIiEERKN3c108optionalIiEERKN3c108optionalI11CodecConfigEERKN3c108optionalINSt6stringEEE
    "Permalink to this definition")
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: void torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::add_audio_stream(int sample_rate, int num_channels,
    const std::string &format, const c10::optional<std::string> &encoder = c10::nullopt,
    const c10::optional<OptionDict> &encoder_option = c10::nullopt, const c10::optional<std::string>
    &encoder_format = c10::nullopt, const c10::optional<int> &encoder_sample_rate
    = c10::nullopt, const c10::optional<int> &encoder_num_channels = c10::nullopt,
    const c10::optional<CodecConfig> &codec_config = c10::nullopt, const c10::optional<std::string>
    &filter_desc = c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder16add_audio_streamEiiRKNSt6stringERKN3c108optionalINSt6stringEEERKN3c108optionalI10OptionDictEERKN3c108optionalINSt6stringEEERKN3c108optionalIiEERKN3c108optionalIiEERKN3c108optionalI11CodecConfigEERKN3c108optionalINSt6stringEEE
    "跳转到此定义")
- en: Add an output audio stream.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个输出音频流。
- en: 'Parameters:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**sample_rate** – The sample rate.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sample_rate** - 采样率。'
- en: '**num_channels** – The number of channels.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**num_channels** - 通道数。'
- en: '**format** – Input sample format, which determines the dtype of the input tensor.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**format** - 输入样本格式，确定输入张量的dtype。'
- en: '`"u8"`: The input tensor must be `torch.uint8` type.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"u8"：输入张量必须是`torch.uint8`类型。'
- en: '`"s16"`: The input tensor must be `torch.int16` type.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"s16"：输入张量必须是`torch.int16`类型。'
- en: '`"s32"`: The input tensor must be `torch.int32` type.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"s32"：输入张量必须是`torch.int32`类型。'
- en: '`"s64"`: The input tensor must be `torch.int64` type.'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"s64"：输入张量必须是`torch.int64`类型。'
- en: '`"flt"`: The input tensor must be `torch.float32` type.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"flt"：输入张量必须是`torch.float32`类型。'
- en: '`"dbl"`: The input tensor must be `torch.float64` type.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"dbl"：输入张量必须是`torch.float64`类型。'
- en: 'Default: `"flt"`.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认值："flt"。
- en: '**encoder** – The name of the encoder to be used.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder** - 要使用的编码器的名称。'
- en: When provided, use the specified encoder instead of the default one.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在提供时，使用指定的编码器而不是默认的编码器。
- en: To list the available encoders, you can use `ffmpeg -encoders` command.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要列出可用的编码器，可以使用`ffmpeg -encoders`命令。
- en: '**encoder_option** – Options passed to encoder. To list encoder options for
    a encoder, you can use `ffmpeg -h encoder=<ENCODER>`.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder_option** - 传递给编码器的选项。要列出编码器的编码器选项，可以使用`ffmpeg -h encoder=<ENCODER>`。'
- en: '**encoder_format** – Format used to encode media. When encoder supports multiple
    formats, passing this argument will override the format used for encoding. To
    list supported formats for the encoder, you can use `ffmpeg -h encoder=<ENCODER>`
    command.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder_format** - 用于编码媒体的格式。当编码器支持多种格式时，传递此参数将覆盖用于编码的格式。要列出编码器支持的格式，可以使用`ffmpeg
    -h encoder=<ENCODER>`命令。'
- en: '**encoder_sample_rate** – If provided, perform resampling before encoding.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder_sample_rate** - 如果提供，执行编码前的重采样。'
- en: '**encoder_num_channels** – If provided, change channel configuration before
    encoding.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder_num_channels** - 如果提供，改变编码前的通道配置。'
- en: '**codec_config** – Codec configuration.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**codec_config** - 编解码器配置。'
- en: '**filter_desc** – Additional processing to apply before encoding the input
    data'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**filter_desc** - 在编码输入数据之前应用的附加处理'
- en: add_video_stream[](#add-video-stream "Permalink to this heading")
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: add_video_stream[](#add-video-stream "跳转到此标题")
- en: void  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::add_video_stream(double  frame_rate, int  width,
    int  height, const  std::string  &format, const  c10::optional<std::string>  &encoder  =  c10::nullopt,
    const  c10::optional<OptionDict>  &encoder_option  =  c10::nullopt, const  c10::optional<std::string>  &encoder_format  =  c10::nullopt,
    const  c10::optional<double>  &encoder_frame_rate  =  c10::nullopt, const  c10::optional<int>  &encoder_width  =  c10::nullopt,
    const  c10::optional<int>  &encoder_height  =  c10::nullopt, const  c10::optional<std::string>  &hw_accel  =  c10::nullopt,
    const  c10::optional<CodecConfig>  &codec_config  =  c10::nullopt, const  c10::optional<std::string>  &filter_desc  =  c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder16add_video_streamEdiiRKNSt6stringERKN3c108optionalINSt6stringEEERKN3c108optionalI10OptionDictEERKN3c108optionalINSt6stringEEERKN3c108optionalIdEERKN3c108optionalIiEERKN3c108optionalIiEERKN3c108optionalINSt6stringEEERKN3c108optionalI11CodecConfigEERKN3c108optionalINSt6stringEEE
    "Permalink to this definition")
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: void torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::add_video_stream(double frame_rate, int width,
    int height, const std::string &format, const c10::optional<std::string> &encoder
    = c10::nullopt, const c10::optional<OptionDict> &encoder_option = c10::nullopt,
    const c10::optional<std::string> &encoder_format = c10::nullopt, const c10::optional<double>
    &encoder_frame_rate = c10::nullopt, const c10::optional<int> &encoder_width =
    c10::nullopt, const c10::optional<int> &encoder_height = c10::nullopt, const c10::optional<std::string>
    &hw_accel = c10::nullopt, const c10::optional<CodecConfig> &codec_config = c10::nullopt,
    const c10::optional<std::string> &filter_desc = c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder16add_video_streamEdiiRKNSt6stringERKN3c108optionalINSt6stringEEERKN3c108optionalI10OptionDictEERKN3c108optionalINSt6stringEEERKN3c108optionalIdEERKN3c108optionalIiEERKN3c108optionalIiEERKN3c108optionalINSt6stringEEERKN3c108optionalI11CodecConfigEERKN3c108optionalINSt6stringEEE
    "跳转到此定义")
- en: Add an output video stream.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个输出视频流。
- en: 'Parameters:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**frame_rate** – Frame rate'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**frame_rate** - 帧率'
- en: '**width** – Width'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**width** - 宽度'
- en: '**height** – Height'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**height** - 高度'
- en: '**format** – Input pixel format, which determines the color channel order of
    the input tensor.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**format** - 输入像素格式，确定输入张量的颜色通道顺序。'
- en: '`"gray8"`: One channel, grayscale.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"gray8"：一个通道，灰度。'
- en: '`"rgb24"`: Three channels in the order of RGB.'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"rgb24"：RGB顺序的三个通道。'
- en: '`"bgr24"`: Three channels in the order of BGR.'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"bgr24"：BGR顺序的三个通道。'
- en: '`"yuv444p"`: Three channels in the order of YUV.'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"yuv444p"：YUV顺序的三个通道。'
- en: In either case, the input tensor has to be `torch.uint8` type and the shape
    must be (frame, channel, height, width).
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在任何情况下，输入张量必须是`torch.uint8`类型，形状必须是（frame，channel，height，width）。
- en: '**encoder** – See `[add_audio_stream()](#classtorio_1_1io_1_1StreamingMediaEncoder_1af7f8bbbe1d7b6363969eb099c48e5d04)`.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder** – 参见`[add_audio_stream()](#classtorio_1_1io_1_1StreamingMediaEncoder_1af7f8bbbe1d7b6363969eb099c48e5d04)`。'
- en: '**encoder_option** – See `[add_audio_stream()](#classtorio_1_1io_1_1StreamingMediaEncoder_1af7f8bbbe1d7b6363969eb099c48e5d04)`.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder_option** – 参见`[add_audio_stream()](#classtorio_1_1io_1_1StreamingMediaEncoder_1af7f8bbbe1d7b6363969eb099c48e5d04)`。'
- en: '**encoder_format** – See `[add_audio_stream()](#classtorio_1_1io_1_1StreamingMediaEncoder_1af7f8bbbe1d7b6363969eb099c48e5d04)`.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder_format** – 参见`[add_audio_stream()](#classtorio_1_1io_1_1StreamingMediaEncoder_1af7f8bbbe1d7b6363969eb099c48e5d04)`。'
- en: '**encoder_frame_rate** – If provided, change frame rate before encoding.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder_frame_rate** – 如果提供，编码前更改帧率。'
- en: '**encoder_width** – If provided, resize image before encoding.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder_width** – 如果提供，编码前调整图像大小。'
- en: '**encoder_height** – If provided, resize image before encoding.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**encoder_height** – 如果提供，编码前调整图像大小。'
- en: '**hw_accel** – Enable hardware acceleration.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**hw_accel** – 启用硬件加速。'
- en: '**codec_config** – Codec configuration.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**codec_config** – 编解码器配置。'
- en: When video is encoded on CUDA hardware, for example `encoder="h264_nvenc"`,
    passing CUDA device indicator to `hw_accel` (i.e. `hw_accel="cuda:0"`) will make
    [StreamingMediaEncoder](#classtorio_1_1io_1_1StreamingMediaEncoder) expect video
    chunk to be a CUDA Tensor. Passing CPU Tensor will result in an error.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当视频在CUDA硬件上编码时，例如`encoder="h264_nvenc"`，将CUDA设备指示器传递给`hw_accel`（即`hw_accel="cuda:0"`）将使[StreamingMediaEncoder](#classtorio_1_1io_1_1StreamingMediaEncoder)期望视频块是CUDA张量。传递CPU张量将导致错误。
- en: If `None`, the video chunk Tensor has to be a CPU Tensor.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为`None`，视频块张量必须是CPU张量。
- en: '**filter_desc** – Additional processing to apply before encoding the input
    data'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**filter_desc** – 在编码输入数据之前应用的附加处理'
- en: set_metadata[](#set-metadata "Permalink to this heading")
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: set_metadata[](#set-metadata "Permalink to this heading")
- en: void  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::set_metadata(const  OptionDict  &metadata)[](#_CPPv4N5torio2io21StreamingMediaEncoder12set_metadataERK10OptionDict
    "Permalink to this definition")
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: void torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::set_metadata(const OptionDict &metadata)[](#_CPPv4N5torio2io21StreamingMediaEncoder12set_metadataERK10OptionDict
    "Permalink to this definition")
- en: Set file-level metadata
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 设置文件级元数据
- en: 'Parameters:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**metadata** – metadata.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**metadata** – 元数据。'
- en: Write methods[](#write-methods "Permalink to this heading")
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入方法[](#write-methods "Permalink to this heading")
- en: open[](#open "Permalink to this heading")
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: open[](#open "Permalink to this heading")
- en: void  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::open(const  c10::optional<OptionDict>  &opt  =  c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder4openERKN3c108optionalI10OptionDictEE
    "Permalink to this definition")
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: void torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::open(const c10::optional<OptionDict> &opt
    = c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder4openERKN3c108optionalI10OptionDictEE
    "Permalink to this definition")
- en: Open the output file / device and write the header.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 打开输出文件/设备并写入头部。
- en: 'Parameters:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**opt** – Private options for protocol, device and muxer.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**opt** – 协议、设备和复用器的私有选项。'
- en: close[](#close "Permalink to this heading")
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: close[](#close "Permalink to this heading")
- en: void  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::close()[](#_CPPv4N5torio2io21StreamingMediaEncoder5closeEv
    "Permalink to this definition")
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: void torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::close()[](#_CPPv4N5torio2io21StreamingMediaEncoder5closeEv
    "Permalink to this definition")
- en: Close the output file / device and finalize metadata.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭输出文件/设备并完成元数据。
- en: write_audio_chunk[](#write-audio-chunk "Permalink to this heading")
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: write_audio_chunk[](#write-audio-chunk "Permalink to this heading")
- en: void  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::write_audio_chunk(int  i, const  torch::Tensor  &frames,
    const  c10::optional<double>  &pts  =  c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder17write_audio_chunkEiRKN5torch6TensorERKN3c108optionalIdEE
    "Permalink to this definition")
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: void torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::write_audio_chunk(int i, const torch::Tensor
    &frames, const c10::optional<double> &pts = c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder17write_audio_chunkEiRKN5torch6TensorERKN3c108optionalIdEE
    "Permalink to this definition")
- en: Write audio data
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 写入音频数据
- en: 'Parameters:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**i** – Stream index.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**i** – 流索引。'
- en: '**frames** – Waveform tensor. Shape: `(frame, channel)`. The `dtype` must match
    what was passed to `[add_audio_stream()](#classtorio_1_1io_1_1StreamingMediaEncoder_1af7f8bbbe1d7b6363969eb099c48e5d04)`
    method.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**frames** – 波形张量。形状：`(frame, channel)`。`dtype`必须与传递给`[add_audio_stream()](#classtorio_1_1io_1_1StreamingMediaEncoder_1af7f8bbbe1d7b6363969eb099c48e5d04)`方法相匹配。'
- en: '**pts** –'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pts** –'
- en: Presentation timestamp. If provided, it overwrites the PTS of the first frame
    with the provided one. Otherwise, PTS are incremented per an inverse of sample
    rate. Only values exceed the PTS values processed internally.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 呈现时间戳。如果提供，则用提供的时间戳覆盖第一帧的时间戳。否则，时间戳按照采样率的倒数递增。仅处理内部处理的时间戳值。
- en: '**NOTE**: The provided value is converted to integer value expressed in basis
    of sample rate. Therefore, it is truncated to the nearest value of `n / sample_rate`.'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**：提供的值转换为以采样率为基础的整数值。因此，它被截断为最接近的`n / sample_rate`值。'
- en: write_video_chunk[](#write-video-chunk "Permalink to this heading")
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: write_video_chunk[](#write-video-chunk "Permalink to this heading")
- en: void  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::write_video_chunk(int  i, const  torch::Tensor  &frames,
    const  c10::optional<double>  &pts  =  c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder17write_video_chunkEiRKN5torch6TensorERKN3c108optionalIdEE
    "Permalink to this definition")
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: void torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::write_video_chunk(int i, const torch::Tensor
    &frames, const c10::optional<double> &pts = c10::nullopt)[](#_CPPv4N5torio2io21StreamingMediaEncoder17write_video_chunkEiRKN5torch6TensorERKN3c108optionalIdEE
    "Permalink to this definition")
- en: Write video data
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 写入视频数据
- en: 'Parameters:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**i** – Stream index.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**i** – 流索引。'
- en: '**frames** – Video/image tensor. Shape: `(time, channel, height, width)`. The
    `dtype` must be `torch.uint8`. The shape `(height, width and the number of channels)`
    must match what was configured when calling `[add_video_stream()](#classtorio_1_1io_1_1StreamingMediaEncoder_1a5337088220f338d2aa5fddfd3d256579)`.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**frames** – 视频/图像张量。形状：`(时间，通道，高度，宽度)`。`dtype` 必须是 `torch.uint8`。形状 `(高度、宽度和通道数)`
    必须与调用 `[add_video_stream()](#classtorio_1_1io_1_1StreamingMediaEncoder_1a5337088220f338d2aa5fddfd3d256579)`
    时配置的相匹配。'
- en: '**pts** –'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pts** –'
- en: Presentation timestamp. If provided, it overwrites the PTS of the first frame
    with the provided one. Otherwise, PTS are incremented per an inverse of frame
    rate. Only values exceed the PTS values processed internally.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 呈现时间戳。如果提供，则用提供的时间戳覆盖第一帧的时间戳。否则，时间戳按帧速率的倒数递增。仅超过内部处理的时间戳值。
- en: '**NOTE**: The provided value is converted to integer value expressed in basis
    of frame rate. Therefore, it is truncated to the nearest value of `n / frame_rate`.'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**：提供的值被转换为以帧速率为基础的整数值。因此，它被截断为最接近的值 `n / frame_rate`。'
- en: flush[](#flush "Permalink to this heading")
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刷新[](#flush "此标题的永久链接")
- en: void  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::flush()[](#_CPPv4N5torio2io21StreamingMediaEncoder5flushEv
    "Permalink to this definition")
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: void  torio::io::[StreamingMediaEncoder](#_CPPv4N5torio2io21StreamingMediaEncoderE
    "torio::io::StreamingMediaEncoder")::flush()[](#_CPPv4N5torio2io21StreamingMediaEncoder5flushEv
    "此定义的永久链接")
- en: Flush the frames from encoders and write the frames to the destination.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新编码器中的帧并将帧写入目标。
