- en: Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符
- en: 原文：[https://pytorch.org/vision/stable/ops.html](https://pytorch.org/vision/stable/ops.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/vision/stable/ops.html](https://pytorch.org/vision/stable/ops.html)
- en: '`torchvision.ops` implements operators, losses and layers that are specific
    for Computer Vision.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`torchvision.ops` 实现了特定于计算机视觉的运算符、损失和层。'
- en: Note
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All operators have native support for TorchScript.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所有运算符都原生支持TorchScript。
- en: Detection and Segmentation Operators[](#detection-and-segmentation-operators
    "Permalink to this heading")
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测和分割运算符[](#detection-and-segmentation-operators "跳转到此标题")
- en: The below operators perform pre-processing as well as post-processing required
    in object detection and segmentation models.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下运算符执行对象检测和分割模型中所需的预处理和后处理。
- en: '| [`batched_nms`](generated/torchvision.ops.batched_nms.html#torchvision.ops.batched_nms
    "torchvision.ops.batched_nms")(boxes, scores, idxs, iou_threshold) | Performs
    non-maximum suppression in a batched fashion. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`batched_nms`](generated/torchvision.ops.batched_nms.html#torchvision.ops.batched_nms
    "torchvision.ops.batched_nms")(boxes, scores, idxs, iou_threshold) | 以批处理方式执行非极大值抑制。
    |'
- en: '| [`masks_to_boxes`](generated/torchvision.ops.masks_to_boxes.html#torchvision.ops.masks_to_boxes
    "torchvision.ops.masks_to_boxes")(masks) | Compute the bounding boxes around the
    provided masks. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`masks_to_boxes`](generated/torchvision.ops.masks_to_boxes.html#torchvision.ops.masks_to_boxes
    "torchvision.ops.masks_to_boxes")(masks) | 计算提供的掩码周围的边界框。 |'
- en: '| [`nms`](generated/torchvision.ops.nms.html#torchvision.ops.nms "torchvision.ops.nms")(boxes, scores, iou_threshold)
    | Performs non-maximum suppression (NMS) on the boxes according to their intersection-over-union
    (IoU). |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`nms`](generated/torchvision.ops.nms.html#torchvision.ops.nms "torchvision.ops.nms")(boxes, scores, iou_threshold)
    | 根据它们的交并比（IoU）对框执行非极大值抑制（NMS）。 |'
- en: '| [`roi_align`](generated/torchvision.ops.roi_align.html#torchvision.ops.roi_align
    "torchvision.ops.roi_align")(input, boxes, output_size[, ...]) | Performs Region
    of Interest (RoI) Align operator with average pooling, as described in Mask R-CNN.
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`roi_align`](generated/torchvision.ops.roi_align.html#torchvision.ops.roi_align
    "torchvision.ops.roi_align")(input, boxes, output_size[, ...]) | 执行具有平均池化的感兴趣区域（RoI）对齐运算符，如Mask
    R-CNN中所述。 |'
- en: '| [`roi_pool`](generated/torchvision.ops.roi_pool.html#torchvision.ops.roi_pool
    "torchvision.ops.roi_pool")(input, boxes, output_size[, ...]) | Performs Region
    of Interest (RoI) Pool operator described in Fast R-CNN |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`roi_pool`](generated/torchvision.ops.roi_pool.html#torchvision.ops.roi_pool
    "torchvision.ops.roi_pool")(input, boxes, output_size[, ...]) | 执行Fast R-CNN中描述的感兴趣区域（RoI）池运算符。
    |'
- en: '| [`ps_roi_align`](generated/torchvision.ops.ps_roi_align.html#torchvision.ops.ps_roi_align
    "torchvision.ops.ps_roi_align")(input, boxes, output_size[, ...]) | Performs Position-Sensitive
    Region of Interest (RoI) Align operator mentioned in Light-Head R-CNN. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`ps_roi_align`](generated/torchvision.ops.ps_roi_align.html#torchvision.ops.ps_roi_align
    "torchvision.ops.ps_roi_align")(input, boxes, output_size[, ...]) | 执行Light-Head
    R-CNN中提到的位置敏感的感兴趣区域（RoI）对齐运算符。 |'
- en: '| [`ps_roi_pool`](generated/torchvision.ops.ps_roi_pool.html#torchvision.ops.ps_roi_pool
    "torchvision.ops.ps_roi_pool")(input, boxes, output_size[, ...]) | Performs Position-Sensitive
    Region of Interest (RoI) Pool operator described in R-FCN |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`ps_roi_pool`](generated/torchvision.ops.ps_roi_pool.html#torchvision.ops.ps_roi_pool
    "torchvision.ops.ps_roi_pool")(input, boxes, output_size[, ...]) | 执行R-FCN中描述的位置敏感的感兴趣区域（RoI）池运算符。
    |'
- en: '| [`FeaturePyramidNetwork`](generated/torchvision.ops.FeaturePyramidNetwork.html#torchvision.ops.FeaturePyramidNetwork
    "torchvision.ops.FeaturePyramidNetwork")(in_channels_list, ...) | Module that
    adds a FPN from on top of a set of feature maps. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`FeaturePyramidNetwork`](generated/torchvision.ops.FeaturePyramidNetwork.html#torchvision.ops.FeaturePyramidNetwork
    "torchvision.ops.FeaturePyramidNetwork")(in_channels_list, ...) | 从一组特征图顶部添加FPN的模块。
    |'
- en: '| [`MultiScaleRoIAlign`](generated/torchvision.ops.MultiScaleRoIAlign.html#torchvision.ops.MultiScaleRoIAlign
    "torchvision.ops.MultiScaleRoIAlign")(featmap_names, ...[, ...]) | Multi-scale
    RoIAlign pooling, which is useful for detection with or without FPN. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`MultiScaleRoIAlign`](generated/torchvision.ops.MultiScaleRoIAlign.html#torchvision.ops.MultiScaleRoIAlign
    "torchvision.ops.MultiScaleRoIAlign")(featmap_names, ...[, ...]) | 多尺度RoIAlign池化，适用于具有或不具有FPN的检测。
    |'
- en: '| [`RoIAlign`](generated/torchvision.ops.RoIAlign.html#torchvision.ops.RoIAlign
    "torchvision.ops.RoIAlign")(output_size, spatial_scale, ...[, ...]) | See [`roi_align()`](generated/torchvision.ops.roi_align.html#torchvision.ops.roi_align
    "torchvision.ops.roi_align"). |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`RoIAlign`](generated/torchvision.ops.RoIAlign.html#torchvision.ops.RoIAlign
    "torchvision.ops.RoIAlign")(output_size, spatial_scale, ...[, ...]) | 参见[`roi_align()`](generated/torchvision.ops.roi_align.html#torchvision.ops.roi_align
    "torchvision.ops.roi_align")。 |'
- en: '| [`RoIPool`](generated/torchvision.ops.RoIPool.html#torchvision.ops.RoIPool
    "torchvision.ops.RoIPool")(output_size, spatial_scale) | See [`roi_pool()`](generated/torchvision.ops.roi_pool.html#torchvision.ops.roi_pool
    "torchvision.ops.roi_pool"). |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`RoIPool`](generated/torchvision.ops.RoIPool.html#torchvision.ops.RoIPool
    "torchvision.ops.RoIPool")(output_size, spatial_scale) | 参见[`roi_pool()`](generated/torchvision.ops.roi_pool.html#torchvision.ops.roi_pool
    "torchvision.ops.roi_pool")。 |'
- en: '| [`PSRoIAlign`](generated/torchvision.ops.PSRoIAlign.html#torchvision.ops.PSRoIAlign
    "torchvision.ops.PSRoIAlign")(output_size, spatial_scale, ...) | See [`ps_roi_align()`](generated/torchvision.ops.ps_roi_align.html#torchvision.ops.ps_roi_align
    "torchvision.ops.ps_roi_align"). |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`PSRoIAlign`](generated/torchvision.ops.PSRoIAlign.html#torchvision.ops.PSRoIAlign
    "torchvision.ops.PSRoIAlign")(output_size, spatial_scale, ...) | 参见[`ps_roi_align()`](generated/torchvision.ops.ps_roi_align.html#torchvision.ops.ps_roi_align
    "torchvision.ops.ps_roi_align")。 |'
- en: '| [`PSRoIPool`](generated/torchvision.ops.PSRoIPool.html#torchvision.ops.PSRoIPool
    "torchvision.ops.PSRoIPool")(output_size, spatial_scale) | See [`ps_roi_pool()`](generated/torchvision.ops.ps_roi_pool.html#torchvision.ops.ps_roi_pool
    "torchvision.ops.ps_roi_pool"). |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`PSRoIPool`](generated/torchvision.ops.PSRoIPool.html#torchvision.ops.PSRoIPool
    "torchvision.ops.PSRoIPool")(output_size, spatial_scale) | 参见[`ps_roi_pool()`](generated/torchvision.ops.ps_roi_pool.html#torchvision.ops.ps_roi_pool
    "torchvision.ops.ps_roi_pool")。 |'
- en: Box Operators[](#box-operators "Permalink to this heading")
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 框运算符[](#box-operators "跳转到此标题")
- en: These utility functions perform various operations on bounding boxes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实用函数在边界框上执行各种操作。
- en: '| [`box_area`](generated/torchvision.ops.box_area.html#torchvision.ops.box_area
    "torchvision.ops.box_area")(boxes) | Computes the area of a set of bounding boxes,
    which are specified by their (x1, y1, x2, y2) coordinates. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`box_area`](generated/torchvision.ops.box_area.html#torchvision.ops.box_area
    "torchvision.ops.box_area")(boxes) | 计算一组边界框的面积，这些边界框由它们的（x1，y1，x2，y2）坐标指定。 |'
- en: '| [`box_convert`](generated/torchvision.ops.box_convert.html#torchvision.ops.box_convert
    "torchvision.ops.box_convert")(boxes, in_fmt, out_fmt) | Converts boxes from given
    in_fmt to out_fmt. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`box_convert`](generated/torchvision.ops.box_convert.html#torchvision.ops.box_convert
    "torchvision.ops.box_convert")(boxes, in_fmt, out_fmt) | 将框从给定的in_fmt转换为out_fmt。
    |'
- en: '| [`box_iou`](generated/torchvision.ops.box_iou.html#torchvision.ops.box_iou
    "torchvision.ops.box_iou")(boxes1, boxes2) | Return intersection-over-union (Jaccard
    index) between two sets of boxes. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`box_iou`](generated/torchvision.ops.box_iou.html#torchvision.ops.box_iou
    "torchvision.ops.box_iou")(boxes1, boxes2) | 返回两组框之间的交并比（Jaccard指数）。 |'
- en: '| [`clip_boxes_to_image`](generated/torchvision.ops.clip_boxes_to_image.html#torchvision.ops.clip_boxes_to_image
    "torchvision.ops.clip_boxes_to_image")(boxes, size) | Clip boxes so that they
    lie inside an image of size size. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`clip_boxes_to_image`](generated/torchvision.ops.clip_boxes_to_image.html#torchvision.ops.clip_boxes_to_image
    "torchvision.ops.clip_boxes_to_image")(boxes, size) | 将框裁剪到大小为size的图像内。 |'
- en: '| [`complete_box_iou`](generated/torchvision.ops.complete_box_iou.html#torchvision.ops.complete_box_iou
    "torchvision.ops.complete_box_iou")(boxes1, boxes2[, eps]) | Return complete intersection-over-union
    (Jaccard index) between two sets of boxes. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`complete_box_iou`](generated/torchvision.ops.complete_box_iou.html#torchvision.ops.complete_box_iou
    "torchvision.ops.complete_box_iou")(boxes1, boxes2[, eps]) | 返回两组框之间的完整交并比（Jaccard指数）。
    |'
- en: '| [`distance_box_iou`](generated/torchvision.ops.distance_box_iou.html#torchvision.ops.distance_box_iou
    "torchvision.ops.distance_box_iou")(boxes1, boxes2[, eps]) | Return distance intersection-over-union
    (Jaccard index) between two sets of boxes. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`distance_box_iou`](generated/torchvision.ops.distance_box_iou.html#torchvision.ops.distance_box_iou
    "torchvision.ops.distance_box_iou")(boxes1, boxes2[, eps]) | 返回两组框之间的距离交并比（Jaccard指数）。
    |'
- en: '| [`generalized_box_iou`](generated/torchvision.ops.generalized_box_iou.html#torchvision.ops.generalized_box_iou
    "torchvision.ops.generalized_box_iou")(boxes1, boxes2) | Return generalized intersection-over-union
    (Jaccard index) between two sets of boxes. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`generalized_box_iou`](generated/torchvision.ops.generalized_box_iou.html#torchvision.ops.generalized_box_iou
    "torchvision.ops.generalized_box_iou")(boxes1, boxes2) | 返回两组框之间的广义交并比（Jaccard指数）。
    |'
- en: '| [`remove_small_boxes`](generated/torchvision.ops.remove_small_boxes.html#torchvision.ops.remove_small_boxes
    "torchvision.ops.remove_small_boxes")(boxes, min_size) | Remove boxes which contains
    at least one side smaller than min_size. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`remove_small_boxes`](generated/torchvision.ops.remove_small_boxes.html#torchvision.ops.remove_small_boxes
    "torchvision.ops.remove_small_boxes")(boxes, min_size) | 删除至少有一边小于min_size的框。
    |'
- en: Losses[](#losses "Permalink to this heading")
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Losses[](#losses "Permalink to this heading")
- en: 'The following vision-specific loss functions are implemented:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了以下特定于视觉的损失函数：
- en: '| [`complete_box_iou_loss`](generated/torchvision.ops.complete_box_iou_loss.html#torchvision.ops.complete_box_iou_loss
    "torchvision.ops.complete_box_iou_loss")(boxes1, boxes2[, ...]) | Gradient-friendly
    IoU loss with an additional penalty that is non-zero when the boxes do not overlap.
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`complete_box_iou_loss`](generated/torchvision.ops.complete_box_iou_loss.html#torchvision.ops.complete_box_iou_loss
    "torchvision.ops.complete_box_iou_loss")(boxes1, boxes2[, ...]) | 具有额外惩罚的梯度友好的IoU损失，当框不重叠时，惩罚值不为零。
    |'
- en: '| [`distance_box_iou_loss`](generated/torchvision.ops.distance_box_iou_loss.html#torchvision.ops.distance_box_iou_loss
    "torchvision.ops.distance_box_iou_loss")(boxes1, boxes2[, ...]) | Gradient-friendly
    IoU loss with an additional penalty that is non-zero when the distance between
    boxes'' centers isn''t zero. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`distance_box_iou_loss`](generated/torchvision.ops.distance_box_iou_loss.html#torchvision.ops.distance_box_iou_loss
    "torchvision.ops.distance_box_iou_loss")(boxes1, boxes2[, ...]) | 具有额外惩罚的梯度友好的IoU损失，当框之间的中心距离不为零时，惩罚值不为零。
    |'
- en: '| [`generalized_box_iou_loss`](generated/torchvision.ops.generalized_box_iou_loss.html#torchvision.ops.generalized_box_iou_loss
    "torchvision.ops.generalized_box_iou_loss")(boxes1, boxes2[, ...]) | Gradient-friendly
    IoU loss with an additional penalty that is non-zero when the boxes do not overlap
    and scales with the size of their smallest enclosing box. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`generalized_box_iou_loss`](generated/torchvision.ops.generalized_box_iou_loss.html#torchvision.ops.generalized_box_iou_loss
    "torchvision.ops.generalized_box_iou_loss")(boxes1, boxes2[, ...]) | 具有额外惩罚的梯度友好的IoU损失，当框不重叠且与其最小外接框的大小成比例时，惩罚值不为零。
    |'
- en: '| [`sigmoid_focal_loss`](generated/torchvision.ops.sigmoid_focal_loss.html#torchvision.ops.sigmoid_focal_loss
    "torchvision.ops.sigmoid_focal_loss")(inputs, targets[, alpha, ...]) | Loss used
    in RetinaNet for dense detection: [https://arxiv.org/abs/1708.02002](https://arxiv.org/abs/1708.02002).
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`sigmoid_focal_loss`](generated/torchvision.ops.sigmoid_focal_loss.html#torchvision.ops.sigmoid_focal_loss
    "torchvision.ops.sigmoid_focal_loss")(inputs, targets[, alpha, ...]) | 用于密集检测的RetinaNet中使用的损失函数：[https://arxiv.org/abs/1708.02002](https://arxiv.org/abs/1708.02002)。
    |'
- en: Layers[](#layers "Permalink to this heading")
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Layers[](#layers "Permalink to this heading")
- en: 'TorchVision provides commonly used building blocks as layers:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: TorchVision提供常用的构建块作为层：
- en: '| [`Conv2dNormActivation`](generated/torchvision.ops.Conv2dNormActivation.html#torchvision.ops.Conv2dNormActivation
    "torchvision.ops.Conv2dNormActivation")(in_channels, ...) | Configurable block
    used for Convolution2d-Normalization-Activation blocks. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`Conv2dNormActivation`](generated/torchvision.ops.Conv2dNormActivation.html#torchvision.ops.Conv2dNormActivation
    "torchvision.ops.Conv2dNormActivation")(in_channels, ...) | 用于卷积2D-规范化-激活块的可配置块。
    |'
- en: '| [`Conv3dNormActivation`](generated/torchvision.ops.Conv3dNormActivation.html#torchvision.ops.Conv3dNormActivation
    "torchvision.ops.Conv3dNormActivation")(in_channels, ...) | Configurable block
    used for Convolution3d-Normalization-Activation blocks. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`Conv3dNormActivation`](generated/torchvision.ops.Conv3dNormActivation.html#torchvision.ops.Conv3dNormActivation
    "torchvision.ops.Conv3dNormActivation")(in_channels, ...) | 用于卷积3D-规范化-激活块的可配置块。
    |'
- en: '| [`DeformConv2d`](generated/torchvision.ops.DeformConv2d.html#torchvision.ops.DeformConv2d
    "torchvision.ops.DeformConv2d")(in_channels, out_channels, ...) | See [`deform_conv2d()`](generated/torchvision.ops.deform_conv2d.html#torchvision.ops.deform_conv2d
    "torchvision.ops.deform_conv2d"). |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`DeformConv2d`](generated/torchvision.ops.DeformConv2d.html#torchvision.ops.DeformConv2d
    "torchvision.ops.DeformConv2d")(in_channels, out_channels, ...) | 参见[`deform_conv2d()`](generated/torchvision.ops.deform_conv2d.html#torchvision.ops.deform_conv2d
    "torchvision.ops.deform_conv2d")。 |'
- en: '| [`DropBlock2d`](generated/torchvision.ops.DropBlock2d.html#torchvision.ops.DropBlock2d
    "torchvision.ops.DropBlock2d")(p, block_size[, inplace, eps]) | See [`drop_block2d()`](generated/torchvision.ops.drop_block2d.html#torchvision.ops.drop_block2d
    "torchvision.ops.drop_block2d"). |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`DropBlock2d`](generated/torchvision.ops.DropBlock2d.html#torchvision.ops.DropBlock2d
    "torchvision.ops.DropBlock2d")(p, block_size[, inplace, eps]) | 参见[`drop_block2d()`](generated/torchvision.ops.drop_block2d.html#torchvision.ops.drop_block2d
    "torchvision.ops.drop_block2d")。 |'
- en: '| [`DropBlock3d`](generated/torchvision.ops.DropBlock3d.html#torchvision.ops.DropBlock3d
    "torchvision.ops.DropBlock3d")(p, block_size[, inplace, eps]) | See [`drop_block3d()`](generated/torchvision.ops.drop_block3d.html#torchvision.ops.drop_block3d
    "torchvision.ops.drop_block3d"). |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`DropBlock3d`](generated/torchvision.ops.DropBlock3d.html#torchvision.ops.DropBlock3d
    "torchvision.ops.DropBlock3d")(p, block_size[, inplace, eps]) | 参见[`drop_block3d()`](generated/torchvision.ops.drop_block3d.html#torchvision.ops.drop_block3d
    "torchvision.ops.drop_block3d")。 |'
- en: '| [`FrozenBatchNorm2d`](generated/torchvision.ops.FrozenBatchNorm2d.html#torchvision.ops.FrozenBatchNorm2d
    "torchvision.ops.FrozenBatchNorm2d")(num_features[, eps]) | BatchNorm2d where
    the batch statistics and the affine parameters are fixed |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`FrozenBatchNorm2d`](generated/torchvision.ops.FrozenBatchNorm2d.html#torchvision.ops.FrozenBatchNorm2d
    "torchvision.ops.FrozenBatchNorm2d")(num_features[, eps]) | 批量归一化2d，其中批量统计数据和仿射参数是固定的。
    |'
- en: '| [`MLP`](generated/torchvision.ops.MLP.html#torchvision.ops.MLP "torchvision.ops.MLP")(in_channels, hidden_channels, ...)
    | This block implements the multi-layer perceptron (MLP) module. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`MLP`](generated/torchvision.ops.MLP.html#torchvision.ops.MLP "torchvision.ops.MLP")(in_channels, hidden_channels, ...)
    | 此块实现多层感知器（MLP）模块。 |'
- en: '| [`Permute`](generated/torchvision.ops.Permute.html#torchvision.ops.Permute
    "torchvision.ops.Permute")(dims) | This module returns a view of the tensor input
    with its dimensions permuted. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`Permute`](generated/torchvision.ops.Permute.html#torchvision.ops.Permute
    "torchvision.ops.Permute")(dims) | 此模块返回一个对输入张量进行维度重新排列的视图。 |'
- en: '| [`SqueezeExcitation`](generated/torchvision.ops.SqueezeExcitation.html#torchvision.ops.SqueezeExcitation
    "torchvision.ops.SqueezeExcitation")(input_channels, ...) | This block implements
    the Squeeze-and-Excitation block from [https://arxiv.org/abs/1709.01507](https://arxiv.org/abs/1709.01507)
    (see Fig. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`SqueezeExcitation`](generated/torchvision.ops.SqueezeExcitation.html#torchvision.ops.SqueezeExcitation
    "torchvision.ops.SqueezeExcitation")(input_channels, ...) | 此块实现来自[https://arxiv.org/abs/1709.01507](https://arxiv.org/abs/1709.01507)的Squeeze-and-Excitation块（参见图）。
    |'
- en: '| [`StochasticDepth`](generated/torchvision.ops.StochasticDepth.html#torchvision.ops.StochasticDepth
    "torchvision.ops.StochasticDepth")(p, mode) | See [`stochastic_depth()`](generated/torchvision.ops.stochastic_depth.html#torchvision.ops.stochastic_depth
    "torchvision.ops.stochastic_depth"). |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`StochasticDepth`](generated/torchvision.ops.StochasticDepth.html#torchvision.ops.StochasticDepth
    "torchvision.ops.StochasticDepth")(p, mode) | 参见[`stochastic_depth()`](generated/torchvision.ops.stochastic_depth.html#torchvision.ops.stochastic_depth
    "torchvision.ops.stochastic_depth")。 |'
- en: '| [`deform_conv2d`](generated/torchvision.ops.deform_conv2d.html#torchvision.ops.deform_conv2d
    "torchvision.ops.deform_conv2d")(input, offset, weight[, bias, ...]) | Performs
    Deformable Convolution v2, described in [Deformable ConvNets v2: More Deformable,
    Better Results](https://arxiv.org/abs/1811.11168) if `mask` is not `None` and
    Performs Deformable Convolution, described in [Deformable Convolutional Networks](https://arxiv.org/abs/1703.06211)
    if `mask` is `None`. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`deform_conv2d`](generated/torchvision.ops.deform_conv2d.html#torchvision.ops.deform_conv2d
    "torchvision.ops.deform_conv2d")(input, offset, weight[, bias, ...]) | 执行可变形卷积
    v2，如果`mask`不是`None`，则描述在[可变形卷积网络v2：更可变形，更好的结果](https://arxiv.org/abs/1811.11168)，如果`mask`是`None`，则执行可变形卷积，描述在[可变形卷积网络](https://arxiv.org/abs/1703.06211)。
    |'
- en: '| [`drop_block2d`](generated/torchvision.ops.drop_block2d.html#torchvision.ops.drop_block2d
    "torchvision.ops.drop_block2d")(input, p, block_size[, ...]) | Implements DropBlock2d
    from "DropBlock: A regularization method for convolutional networks" <https://arxiv.org/abs/1810.12890>.
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`drop_block2d`](generated/torchvision.ops.drop_block2d.html#torchvision.ops.drop_block2d
    "torchvision.ops.drop_block2d")(input, p, block_size[, ...]) | 从"DropBlock:卷积网络的正则化方法"中实现DropBlock2d
    <https://arxiv.org/abs/1810.12890>。 |'
- en: '| [`drop_block3d`](generated/torchvision.ops.drop_block3d.html#torchvision.ops.drop_block3d
    "torchvision.ops.drop_block3d")(input, p, block_size[, ...]) | Implements DropBlock3d
    from "DropBlock: A regularization method for convolutional networks" <https://arxiv.org/abs/1810.12890>.
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`drop_block3d`](generated/torchvision.ops.drop_block3d.html#torchvision.ops.drop_block3d
    "torchvision.ops.drop_block3d")(input, p, block_size[, ...]) | 从"DropBlock:卷积网络的正则化方法"中实现DropBlock3d
    <https://arxiv.org/abs/1810.12890>。 |'
- en: '| [`stochastic_depth`](generated/torchvision.ops.stochastic_depth.html#torchvision.ops.stochastic_depth
    "torchvision.ops.stochastic_depth")(input, p, mode[, training]) | Implements the
    Stochastic Depth from ["Deep Networks with Stochastic Depth"](https://arxiv.org/abs/1603.09382)
    used for randomly dropping residual branches of residual architectures. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`stochastic_depth`](generated/torchvision.ops.stochastic_depth.html#torchvision.ops.stochastic_depth
    "torchvision.ops.stochastic_depth")(input, p, mode[, training]) | 实现来自["具有随机深度的深度网络"](https://arxiv.org/abs/1603.09382)的随机深度，用于随机丢弃残差架构的残差分支。
    |'
