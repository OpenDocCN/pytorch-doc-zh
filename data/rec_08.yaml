- en: torchrec.inference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: torchrec.inference
- en: 原文：[https://pytorch.org/torchrec/torchrec.inference.html](https://pytorch.org/torchrec/torchrec.inference.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/torchrec/torchrec.inference.html](https://pytorch.org/torchrec/torchrec.inference.html)
- en: Torchrec Inference
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Torchrec 推理
- en: Torchrec inference provides a Torch.Deploy based library for GPU inference.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Torchrec 推理提供了一个基于Torch.Deploy的库，用于GPU推理。
- en: 'These includes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括：
- en: Model packaging in Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的模型打包
- en: PredictModule and PredictFactory are the contracts between the Python model
    authoring and the C++ model serving.
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PredictModule和PredictFactory是Python模型编写和C++模型服务之间的契约。
- en: PredictFactoryPackager can be used to package a PredictFactory class using torch.package.
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PredictFactoryPackager可用于使用torch.package打包PredictFactory类。
- en: Model serving in C++
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在C++中提供模型服务
- en: BatchingQueue is a generalized config-based request tensor batching implementation.
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: BatchingQueue是一个通用的基于配置的请求张量批处理实现。
- en: GPUExecutor handles the forward call into the inference model inside Torch.Deploy.
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPUExecutor处理前向调用，进入Torch.Deploy中的推理模型。
- en: We implemented an example of how to use this library with the TorchRec DLRM
    model.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了如何使用这个库与TorchRec DLRM模型的示例。
- en: 'examples/dlrm/inference/dlrm_packager.py: this demonstrates how to export the
    DLRM model as a torch.package.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'examples/dlrm/inference/dlrm_packager.py: 这演示了如何将DLRM模型导出为torch.package。'
- en: 'examples/dlrm/inference/dlrm_predict.py: this shows how to use PredictModule
    and PredictFactory based on an existing model.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'examples/dlrm/inference/dlrm_predict.py: 这展示了如何基于现有模型使用PredictModule和PredictFactory。'
- en: torchrec.inference.model_packager[](#torchrec-inference-model-packager "Permalink
    to this heading")
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: torchrec.inference.model_packager[](#torchrec-inference-model-packager "Permalink
    to this heading")
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Bases: `object`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`object`
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A decorator indicating abstract classmethods.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 指示抽象类方法的装饰器。
- en: Deprecated, use ‘classmethod’ with ‘abstractmethod’ instead.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 已弃用，改用‘classmethod’和‘abstractmethod’。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A decorator indicating abstract classmethods.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 指示抽象类方法的装饰器。
- en: Deprecated, use ‘classmethod’ with ‘abstractmethod’ instead.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 已弃用，改用‘classmethod’和‘abstractmethod’。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: torchrec.inference.modules[](#torchrec-inference-modules "Permalink to this
    heading")
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: torchrec.inference.modules[](#torchrec-inference-modules "Permalink to this
    heading")
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Bases: `object`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`object`
- en: Metadata class for batching, this should be kept in sync with the C++ definition.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 用于批处理的元数据类，这应该与C++定义保持同步。
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Bases: `ABC`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`ABC`
- en: Creates a model (with already learned weights) to be used inference time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个（已学习权重的）模型，用于推理时间。
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Returns a dict from input name to BatchingMetadata. This infomation is used
    for batching for input requests.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个从输入名称到BatchingMetadata的字典。此信息用于输入请求的批处理。
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Serialize the batching metadata to JSON, for ease of parsing with torch::deploy
    environments.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将批处理元数据序列化为JSON，以便在torch::deploy环境中进行解析。
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Returns already sharded model with allocated weights. state_dict() must match
    TransformModule.transform_state_dict(). It assumes that torch.distributed.init_process_group
    was already called and will shard model according to torch.distributed.get_world_size().
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 返回已经分片模型并分配了权重。state_dict()必须匹配TransformModule.transform_state_dict()。它假定torch.distributed.init_process_group已经被调用，并将根据torch.distributed.get_world_size()对模型进行分片。
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Returns a dict of various data for benchmarking input generation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含各种数据的字典，用于基准测试输入生成。
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Returns a dict from qualname (method name) to QualNameMetadata. This is additional
    information for execution of specific methods of the model.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个从qualname（方法名）到QualNameMetadata的字典。这是执行模型特定方法时的附加信息。
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Serialize the qualname metadata to JSON, for ease of parsing with torch::deploy
    environments.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将qualname元数据序列化为JSON，以便在torch::deploy环境中进行解析。
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Returns a string which represents the result type. This information is used
    for result split.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表示结果类型的字符串。此信息用于结果拆分。
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Run transformations that depends on weights of the predict module. e.g. lowering
    to a backend.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运行依赖于预测模块权重的转换。例如降级到后端。
- en: '[PRE19]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Run transformations that don’t rely on weights of the predict module. e.g. fx
    tracing, model split etc.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 运行不依赖于预测模块权重的转换。例如 fx 追踪，模型拆分等。
- en: '[PRE20]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Bases: `Module`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`Module`
- en: Interface for modules to work in a torch.deploy based backend. Users should
    override predict_forward to convert batch input format to module input format.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 模块在基于torch.deploy的后端中工作的接口。用户应该重写predict_forward以将批处理输入格式转换为模块输入格式。
- en: 'Call Args:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 调用参数：
- en: 'batch: a dict of input tensors'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 'batch: 一个输入张量的字典'
- en: 'Returns:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dict of output tensors
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个输出张量的字典
- en: 'Return type:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: output
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: 'Parameters:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**module** – the actual predict module'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**module** – 实际的预测模块'
- en: '**device** – the primary device for this module that will be used in forward
    calls.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**device** – 此模块的主要设备，将在前向调用中使用。'
- en: 'Example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Define the computation performed at every call.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 定义每次调用执行的计算。
- en: Should be overridden by all subclasses.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 应该被所有子类重写。
- en: Note
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the registered hooks while the latter silently ignores them.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的步骤需要在此函数内定义，但应该在此之后调用`Module`实例，而不是在此处调用，因为前者负责运行已注册的钩子，而后者会默默忽略它们。
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Return a dictionary containing references to the whole state of the module.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含模块整个状态引用的字典。
- en: Both parameters and persistent buffers (e.g. running averages) are included.
    Keys are corresponding parameter and buffer names. Parameters and buffers set
    to `None` are not included.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 包括参数和持久缓冲区（例如运行平均值）。键是相应的参数和缓冲区名称。设置为`None`的参数和缓冲区不包括在内。
- en: Note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The returned object is a shallow copy. It contains references to the module’s
    parameters and buffers.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是一个浅拷贝。它包含对模块参数和缓冲区的引用。
- en: Warning
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Currently `state_dict()` also accepts positional arguments for `destination`,
    `prefix` and `keep_vars` in order. However, this is being deprecated and keyword
    arguments will be enforced in future releases.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 目前`state_dict()`也接受`destination`，`prefix`和`keep_vars`的位置参数。但是，这将被弃用，并且将在未来版本中强制使用关键字参数。
- en: Warning
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Please avoid the use of argument `destination` as it is not designed for end-users.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请避免使用参数“destination”，因为它不是为最终用户设计的。
- en: 'Parameters:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**destination** (*dict**,* *optional*) – If provided, the state of module will
    be updated into the dict and the same object is returned. Otherwise, an `OrderedDict`
    will be created and returned. Default: `None`.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**destination**（*dict**，*可选*）- 如果提供，模块的状态将更新到字典中，并返回相同的对象。否则，将创建并返回一个`OrderedDict`。默认值：`None`。'
- en: '**prefix** (*str**,* *optional*) – a prefix added to parameter and buffer names
    to compose the keys in state_dict. Default: `''''`.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**prefix**（*str**，*可选*）- 用于组成state_dict中参数和缓冲区名称的键的前缀。默认值：`''''`。'
- en: '**keep_vars** (*bool**,* *optional*) – by default the `Tensor` s returned in
    the state dict are detached from autograd. If it’s set to `True`, detaching will
    not be performed. Default: `False`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**keep_vars**（*bool**，*可选*）- 默认情况下，state dict中返回的`Tensor`会从autograd中分离。如果设置为`True`，则不会执行分离。默认值：`False`。'
- en: 'Returns:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a dictionary containing a whole state of the module
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 包含模块整体状态的字典
- en: 'Return type:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型：
- en: dict
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 字典
- en: 'Example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Bases: `object`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 基类：`object`
- en: '[PRE29]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]  ## Module contents[](#module-0 "Permalink to this heading")'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE33]  ## 模块内容[]（#module-0“此标题的永久链接”）'
- en: Torchrec Inference
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Torchrec推理
- en: Torchrec inference provides a Torch.Deploy based library for GPU inference.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Torchrec推理提供了一个基于Torch.Deploy的GPU推理库。
- en: 'These includes:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包括：
- en: Model packaging in Python
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的模型打包
- en: PredictModule and PredictFactory are the contracts between the Python model
    authoring and the C++ model serving.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PredictModule和PredictFactory是Python模型编写和C++模型服务之间的合同。
- en: PredictFactoryPackager can be used to package a PredictFactory class using torch.package.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PredictFactoryPackager可以用于使用torch.package打包PredictFactory类。
- en: Model serving in C++
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++中的模型服务
- en: BatchingQueue is a generalized config-based request tensor batching implementation.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: BatchingQueue是一个基于通用配置的请求张量批处理实现。
- en: GPUExecutor handles the forward call into the inference model inside Torch.Deploy.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPUExecutor处理Torch.Deploy内部推理模型的前向调用。
- en: We implemented an example of how to use this library with the TorchRec DLRM
    model.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了一个如何使用这个库与TorchRec DLRM模型的示例。
- en: 'examples/dlrm/inference/dlrm_packager.py: this demonstrates how to export the
    DLRM model as a torch.package.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例/dlrm/inference/dlrm_packager.py：这演示了如何将DLRM模型导出为torch.package。
- en: 'examples/dlrm/inference/dlrm_predict.py: this shows how to use PredictModule
    and PredictFactory based on an existing model.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例/dlrm/inference/dlrm_predict.py：这展示了如何基于现有模型使用PredictModule和PredictFactory。
