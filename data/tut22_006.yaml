- en: Quickstart
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速入门
- en: 原文：[https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html](https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阅读原文：[https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html](https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Click [here](#sphx-glr-download-beginner-basics-quickstart-tutorial-py) to download
    the full example code
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 点击[这里](#sphx-glr-download-beginner-basics-quickstart-tutorial-py)下载完整示例代码
- en: '[Learn the Basics](intro.html) || **Quickstart** || [Tensors](tensorqs_tutorial.html)
    || [Datasets & DataLoaders](data_tutorial.html) || [Transforms](transforms_tutorial.html)
    || [Build Model](buildmodel_tutorial.html) || [Autograd](autogradqs_tutorial.html)
    || [Optimization](optimization_tutorial.html) || [Save & Load Model](saveloadrun_tutorial.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[学习基础知识](intro.html) || **快速入门** || [张量](tensorqs_tutorial.html) || [数据集和数据加载器](data_tutorial.html)
    || [转换](transforms_tutorial.html) || [构建模型](buildmodel_tutorial.html) || [自动求导](autogradqs_tutorial.html)
    || [优化](optimization_tutorial.html) || [保存和加载模型](saveloadrun_tutorial.html)'
- en: This section runs through the API for common tasks in machine learning. Refer
    to the links in each section to dive deeper.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了机器学习中常见任务的API。请参考每个部分中的链接以深入了解。
- en: Working with data
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理数据
- en: 'PyTorch has two [primitives to work with data](https://pytorch.org/docs/stable/data.html):
    `torch.utils.data.DataLoader` and `torch.utils.data.Dataset`. `Dataset` stores
    the samples and their corresponding labels, and `DataLoader` wraps an iterable
    around the `Dataset`.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch有两个[用于处理数据的基本方法](https://pytorch.org/docs/stable/data.html)：`torch.utils.data.DataLoader`和`torch.utils.data.Dataset`。`Dataset`存储样本及其对应的标签，而`DataLoader`将一个可迭代对象包装在`Dataset`周围。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: PyTorch offers domain-specific libraries such as [TorchText](https://pytorch.org/text/stable/index.html),
    [TorchVision](https://pytorch.org/vision/stable/index.html), and [TorchAudio](https://pytorch.org/audio/stable/index.html),
    all of which include datasets. For this tutorial, we will be using a TorchVision
    dataset.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch提供了领域特定的库，如[TorchText](https://pytorch.org/text/stable/index.html)、[TorchVision](https://pytorch.org/vision/stable/index.html)和[TorchAudio](https://pytorch.org/audio/stable/index.html)，其中包括数据集。在本教程中，我们将使用一个TorchVision数据集。
- en: 'The `torchvision.datasets` module contains `Dataset` objects for many real-world
    vision data like CIFAR, COCO ([full list here](https://pytorch.org/vision/stable/datasets.html)).
    In this tutorial, we use the FashionMNIST dataset. Every TorchVision `Dataset`
    includes two arguments: `transform` and `target_transform` to modify the samples
    and labels respectively.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`torchvision.datasets`模块包含许多现实世界视觉数据的`Dataset`对象，如CIFAR、COCO（[完整列表在此](https://pytorch.org/vision/stable/datasets.html)）。在本教程中，我们使用FashionMNIST数据集。每个TorchVision
    `Dataset`都包括两个参数：`transform`和`target_transform`，分别用于修改样本和标签。'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We pass the `Dataset` as an argument to `DataLoader`. This wraps an iterable
    over our dataset, and supports automatic batching, sampling, shuffling and multiprocess
    data loading. Here we define a batch size of 64, i.e. each element in the dataloader
    iterable will return a batch of 64 features and labels.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`Dataset`作为参数传递给`DataLoader`。这会将一个可迭代对象包装在我们的数据集周围，并支持自动批处理、采样、洗牌和多进程数据加载。在这里，我们定义了一个批量大小为64，即数据加载器可迭代对象中的每个元素将返回一个包含64个特征和标签的批次。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Read more about [loading data in PyTorch](data_tutorial.html).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于[在PyTorch中加载数据](data_tutorial.html)。
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Creating Models
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模型
- en: To define a neural network in PyTorch, we create a class that inherits from
    [nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html). We
    define the layers of the network in the `__init__` function and specify how data
    will pass through the network in the `forward` function. To accelerate operations
    in the neural network, we move it to the GPU or MPS if available.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要在PyTorch中定义神经网络，我们创建一个从[nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html)继承的类。我们在`__init__`函数中定义网络的层，并在`forward`函数中指定数据如何通过网络传递。为了加速神经网络中的操作，我们将其移动到GPU或MPS（如果可用）。
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Read more about [building neural networks in PyTorch](buildmodel_tutorial.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于[在PyTorch中构建神经网络](buildmodel_tutorial.html)。
- en: '* * *'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Optimizing the Model Parameters
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化模型参数
- en: To train a model, we need a [loss function](https://pytorch.org/docs/stable/nn.html#loss-functions)
    and an [optimizer](https://pytorch.org/docs/stable/optim.html).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要训练一个模型，我们需要一个[损失函数](https://pytorch.org/docs/stable/nn.html#loss-functions)和一个[优化器](https://pytorch.org/docs/stable/optim.html)。
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In a single training loop, the model makes predictions on the training dataset
    (fed to it in batches), and backpropagates the prediction error to adjust the
    model’s parameters.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个训练循环中，模型对训练数据集进行预测（以批量方式提供），并将预测错误反向传播以调整模型的参数。
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We also check the model’s performance against the test dataset to ensure it
    is learning.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会检查模型在测试数据集上的表现，以确保它正在学习。
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The training process is conducted over several iterations (*epochs*). During
    each epoch, the model learns parameters to make better predictions. We print the
    model’s accuracy and loss at each epoch; we’d like to see the accuracy increase
    and the loss decrease with every epoch.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 训练过程是在几个迭代（*epochs*）中进行的。在每个迭代中，模型学习参数以做出更好的预测。我们在每个迭代中打印模型的准确性和损失；我们希望看到准确性随着每个迭代的增加而增加，损失随着每个迭代的减少而减少。
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Read more about [Training your model](optimization_tutorial.html).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于[训练模型](optimization_tutorial.html)。
- en: '* * *'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Saving Models
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存模型
- en: A common way to save a model is to serialize the internal state dictionary (containing
    the model parameters).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 保存模型的常见方法是序列化内部状态字典（包含模型参数）。
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Loading Models
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载模型
- en: The process for loading a model includes re-creating the model structure and
    loading the state dictionary into it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模型的过程包括重新创建模型结构并将状态字典加载到其中。
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This model can now be used to make predictions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用这个模型进行预测了。
- en: '[PRE16]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Read more about [Saving & Loading your model](saveloadrun_tutorial.html).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于[保存和加载模型](saveloadrun_tutorial.html)。
- en: '**Total running time of the script:** ( 0 minutes 58.630 seconds)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本的总运行时间：**（0分钟58.630秒）'
- en: '[`Download Python source code: quickstart_tutorial.py`](../../_downloads/51f1e1167acc0fda8f9d8fd8597ee626/quickstart_tutorial.py)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Python源代码：quickstart_tutorial.py`](../../_downloads/51f1e1167acc0fda8f9d8fd8597ee626/quickstart_tutorial.py)'
- en: '[`Download Jupyter notebook: quickstart_tutorial.ipynb`](../../_downloads/af0caf6d7af0dda755f4c9d7af9ccc2c/quickstart_tutorial.ipynb)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Jupyter笔记本：quickstart_tutorial.ipynb`](../../_downloads/af0caf6d7af0dda755f4c9d7af9ccc2c/quickstart_tutorial.ipynb)'
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sphinx-Gallery生成的图库](https://sphinx-gallery.github.io)'
