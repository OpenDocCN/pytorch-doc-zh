- en: (beta) Building a Simple CPU Performance Profiler with FX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: （beta）使用FX构建一个简单的CPU性能分析器
- en: 原文：[https://pytorch.org/tutorials/intermediate/fx_profiling_tutorial.html](https://pytorch.org/tutorials/intermediate/fx_profiling_tutorial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/tutorials/intermediate/fx_profiling_tutorial.html](https://pytorch.org/tutorials/intermediate/fx_profiling_tutorial.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Click [here](#sphx-glr-download-intermediate-fx-profiling-tutorial-py) to download
    the full example code
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 点击[这里](#sphx-glr-download-intermediate-fx-profiling-tutorial-py)下载完整的示例代码
- en: '**Author**: [James Reed](https://github.com/jamesr66a)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者**：[James Reed](https://github.com/jamesr66a)'
- en: 'In this tutorial, we are going to use FX to do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用FX来执行以下操作：
- en: Capture PyTorch Python code in a way that we can inspect and gather statistics
    about the structure and execution of the code
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以一种我们可以检查和收集关于代码结构和执行的统计信息的方式捕获PyTorch Python代码
- en: Build out a small class that will serve as a simple performance “profiler”,
    collecting runtime statistics about each part of the model from actual runs.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个小类，作为一个简单的性能“分析器”，收集关于模型各部分的运行时统计信息。
- en: For this tutorial, we are going to use the torchvision ResNet18 model for demonstration
    purposes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用torchvision ResNet18模型进行演示。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that we have our model, we want to inspect deeper into its performance.
    That is, for the following invocation, which parts of the model are taking the
    longest?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的模型，我们想要更深入地检查其性能。也就是说，在以下调用中，模型的哪些部分花费时间最长？
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A common way of answering that question is to go through the program source,
    add code that collects timestamps at various points in the program, and compare
    the difference between those timestamps to see how long the regions between the
    timestamps take.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 回答这个问题的常见方法是浏览程序源代码，在程序的各个点添加收集时间戳的代码，并比较这些时间戳之间的差异，以查看这些时间戳之间的区域需要多长时间。
- en: That technique is certainly applicable to PyTorch code, however it would be
    nicer if we didn’t have to copy over model code and edit it, especially code we
    haven’t written (like this torchvision model). Instead, we are going to use FX
    to automate this “instrumentation” process without needing to modify any source.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术当然适用于PyTorch代码，但如果我们不必复制模型代码并进行编辑，尤其是我们没有编写的代码（比如这个torchvision模型），那将更好。相反，我们将使用FX自动化这个“仪器化”过程，而无需修改任何源代码。
- en: First, let’s get some imports out of the way (we will be using all of these
    later in the code).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们解决一些导入问题（我们稍后将在代码中使用所有这些）。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`tabulate` is an external library that is not a dependency of PyTorch. We will
    be using it to more easily visualize performance data. Please make sure you’ve
    installed it from your favorite Python package source.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`tabulate`是一个外部库，不是PyTorch的依赖项。我们将使用它来更轻松地可视化性能数据。请确保您已从您喜欢的Python软件包源安装了它。'
- en: Capturing the Model with Symbolic Tracing
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用符号跟踪捕获模型
- en: Next, we are going to use FX’s symbolic tracing mechanism to capture the definition
    of our model in a data structure we can manipulate and examine.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用FX的符号跟踪机制来捕获我们模型的定义，以便我们可以操作和检查它。
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This gives us a Graph representation of the ResNet18 model. A Graph consists
    of a series of Nodes connected to each other. Each Node represents a call-site
    in the Python code (whether to a function, a module, or a method) and the edges
    (represented as `args` and `kwargs` on each node) represent the values passed
    between these call-sites. More information about the Graph representation and
    the rest of FX’s APIs ca be found at the FX documentation [https://pytorch.org/docs/master/fx.html](https://pytorch.org/docs/master/fx.html).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了ResNet18模型的图形表示。图形由一系列相互连接的节点组成。每个节点代表Python代码中的调用点（无论是函数、模块还是方法），边缘（在每个节点上表示为`args`和`kwargs`）代表这些调用点之间传递的值。有关图形表示和FX的其余API的更多信息，请参阅FX文档[https://pytorch.org/docs/master/fx.html](https://pytorch.org/docs/master/fx.html)。
- en: Creating a Profiling Interpreter
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个性能分析解释器
- en: 'Next, we are going to create a class that inherits from `torch.fx.Interpreter`.
    Though the `GraphModule` that `symbolic_trace` produces compiles Python code that
    is run when you call a `GraphModule`, an alternative way to run a `GraphModule`
    is by executing each `Node` in the `Graph` one by one. That is the functionality
    that `Interpreter` provides: It interprets the graph node- by-node.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个从`torch.fx.Interpreter`继承的类。虽然`symbolic_trace`生成的`GraphModule`编译了Python代码，当您调用`GraphModule`时运行，但运行`GraphModule`的另一种方法是逐个执行`Graph`中的每个`Node`。这就是`Interpreter`提供的功能：它逐个解释图节点。
- en: By inheriting from `Interpreter`, we can override various functionality and
    install the profiling behavior we want. The goal is to have an object to which
    we can pass a model, invoke the model 1 or more times, then get statistics about
    how long the model and each part of the model took during those runs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过继承`Interpreter`，我们可以重写各种功能，并安装我们想要的分析行为。目标是有一个对象，我们可以将一个模型传递给它，调用模型1次或多次，然后获取关于模型和模型各部分在这些运行中花费多长时间的统计信息。
- en: 'Let’s define our `ProfilingInterpreter` class:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义我们的`ProfilingInterpreter`类：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We use Python’s `time.time` function to pull wall clock timestamps and compare
    them. This is not the most accurate way to measure performance, and will only
    give us a first- order approximation. We use this simple technique only for the
    purpose of demonstration in this tutorial.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Python的`time.time`函数来获取墙钟时间戳并进行比较。这不是衡量性能的最准确方法，只会给我们一个一阶近似。我们仅仅出于演示目的使用这种简单的技术。
- en: Investigating the Performance of ResNet18
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调查ResNet18的性能
- en: We can now use `ProfilingInterpreter` to inspect the performance characteristics
    of our ResNet18 model;
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用`ProfilingInterpreter`来检查我们的ResNet18模型的性能特征；
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are two things we should call out here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两件事情我们应该注意：
- en: '`MaxPool2d` takes up the most time. This is a known issue: [https://github.com/pytorch/pytorch/issues/51393](https://github.com/pytorch/pytorch/issues/51393)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MaxPool2d`占用了最多的时间。这是一个已知问题：[https://github.com/pytorch/pytorch/issues/51393](https://github.com/pytorch/pytorch/issues/51393)'
- en: BatchNorm2d also takes up significant time. We can continue this line of thinking
    and optimize this in the Conv-BN Fusion with FX [tutorial](https://pytorch.org/tutorials/intermediate/fx_conv_bn_fuser.html).
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BatchNorm2d也占用了相当多的时间。我们可以继续这种思路，并在Conv-BN Fusion with FX [教程](https://pytorch.org/tutorials/intermediate/fx_conv_bn_fuser.html)中对其进行优化。
- en: Conclusion
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: As we can see, using FX we can easily capture PyTorch programs (even ones we
    don’t have the source code for!) in a machine-interpretable format and use that
    for analysis, such as the performance analysis we’ve done here. FX opens up an
    exciting world of possibilities for working with PyTorch programs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，使用FX，我们可以轻松地捕获PyTorch程序（甚至是我们没有源代码的程序！）以机器可解释的格式进行分析，比如我们在这里所做的性能分析。FX为使用PyTorch程序开辟了一个充满可能性的世界。
- en: Finally, since FX is still in beta, we would be happy to hear any feedback you
    have about using it. Please feel free to use the PyTorch Forums ([https://discuss.pytorch.org/](https://discuss.pytorch.org/))
    and the issue tracker ([https://github.com/pytorch/pytorch/issues](https://github.com/pytorch/pytorch/issues))
    to provide any feedback you might have.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于FX仍处于测试阶段，我们很乐意听取您对其使用的任何反馈意见。请随时使用PyTorch论坛（[https://discuss.pytorch.org/](https://discuss.pytorch.org/)）和问题跟踪器（[https://github.com/pytorch/pytorch/issues](https://github.com/pytorch/pytorch/issues)）提供您可能有的任何反馈意见。
- en: '**Total running time of the script:** ( 0 minutes 0.374 seconds)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的总运行时间：（0分钟0.374秒）
- en: '[`Download Python source code: fx_profiling_tutorial.py`](../_downloads/8c575aa36ad9a61584ec0ddf11cbe84d/fx_profiling_tutorial.py)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Python源代码：fx_profiling_tutorial.py`](../_downloads/8c575aa36ad9a61584ec0ddf11cbe84d/fx_profiling_tutorial.py)'
- en: '[`Download Jupyter notebook: fx_profiling_tutorial.ipynb`](../_downloads/945dab6b984b8789385e32187d4a8964/fx_profiling_tutorial.ipynb)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[`下载Jupyter笔记本：fx_profiling_tutorial.ipynb`](../_downloads/945dab6b984b8789385e32187d4a8964/fx_profiling_tutorial.ipynb)'
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sphinx-Gallery生成的图库](https://sphinx-gallery.github.io)'
