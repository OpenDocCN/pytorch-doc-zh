- en: TorchScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TorchScript
- en: 原文：[https://pytorch.org/docs/stable/jit.html](https://pytorch.org/docs/stable/jit.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/docs/stable/jit.html](https://pytorch.org/docs/stable/jit.html)
- en: '[TorchScript Language Reference](jit_language_reference_v2.html)'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TorchScript语言参考](jit_language_reference_v2.html)'
- en: '[Creating TorchScript Code](#creating-torchscript-code)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建TorchScript代码](#创建TorchScript代码)'
- en: '[Mixing Tracing and Scripting](#mixing-tracing-and-scripting)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[混合追踪和脚本化](#混合追踪和脚本化)'
- en: '[TorchScript Language](#torchscript-language)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TorchScript语言](#TorchScript语言)'
- en: '[Built-in Functions and Modules](#built-in-functions-and-modules)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[内置函数和模块](#内置函数和模块)'
- en: '[PyTorch Functions and Modules](#pytorch-functions-and-modules)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyTorch函数和模块](#PyTorch函数和模块)'
- en: '[Python Functions and Modules](#python-functions-and-modules)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python函数和模块](#python函数和模块)'
- en: '[Python Language Reference Comparison](#python-language-reference-comparison)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python语言参考比较](#Python语言参考比较)'
- en: '[Debugging](#debugging)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[调试](#调试)'
- en: '[Disable JIT for Debugging](#disable-jit-for-debugging)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于调试的禁用JIT](#用于调试的禁用JIT)'
- en: '[Inspecting Code](#inspecting-code)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[检查代码](#检查代码)'
- en: '[Interpreting Graphs](#interpreting-graphs)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[解释图表](#解释图表)'
- en: '[Tracer](#tracer)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[追踪器](#追踪器)'
- en: '[Frequently Asked Questions](#frequently-asked-questions)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[常见问题解答](#常见问题解答)'
- en: '[Known Issues](#known-issues)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[已知问题](#已知问题)'
- en: '[Appendix](#appendix)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[附录](#附录)'
- en: '[Migrating to PyTorch 1.2 Recursive Scripting API](#migrating-to-pytorch-1-2-recursive-scripting-api)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[迁移到PyTorch 1.2递归脚本API](#迁移到-pytorch-1-2-递归脚本API)'
- en: '[Fusion Backends](#fusion-backends)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[融合后端](#融合后端)'
- en: '[References](#references)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[参考资料](#参考资料)'
- en: TorchScript is a way to create serializable and optimizable models from PyTorch
    code. Any TorchScript program can be saved from a Python process and loaded in
    a process where there is no Python dependency.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript是一种从PyTorch代码创建可序列化和可优化模型的方式。任何TorchScript程序都可以从Python进程中保存并加载到没有Python依赖项的进程中。
- en: We provide tools to incrementally transition a model from a pure Python program
    to a TorchScript program that can be run independently from Python, such as in
    a standalone C++ program. This makes it possible to train models in PyTorch using
    familiar tools in Python and then export the model via TorchScript to a production
    environment where Python programs may be disadvantageous for performance and multi-threading
    reasons.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供工具，逐步将模型从纯Python程序转换为一个可以独立于Python运行的TorchScript程序，比如在一个独立的C++程序中。这使得可以使用Python中熟悉的工具在PyTorch中训练模型，然后通过TorchScript将模型导出到一个生产环境中，在这个环境中，由于性能和多线程原因，Python程序可能不利。
- en: For a gentle introduction to TorchScript, see the [Introduction to TorchScript](https://pytorch.org/tutorials/beginner/Intro_to_TorchScript_tutorial.html)
    tutorial.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解TorchScript的初学者，可以参考[介绍TorchScript](https://pytorch.org/tutorials/beginner/Intro_to_TorchScript_tutorial.html)教程。
- en: For an end-to-end example of converting a PyTorch model to TorchScript and running
    it in C++, see the [Loading a PyTorch Model in C++](https://pytorch.org/tutorials/advanced/cpp_export.html)
    tutorial.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解如何将PyTorch模型转换为TorchScript并在C++中运行的端到端示例，可以参考[在C++中加载PyTorch模型](https://pytorch.org/tutorials/advanced/cpp_export.html)教程。
- en: '[Creating TorchScript Code](#id4)[](#creating-torchscript-code "Permalink to
    this heading")'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[创建TorchScript代码](#id4)[](#创建TorchScript代码 "跳转到此标题的永久链接")'
- en: '| [`script`](generated/torch.jit.script.html#torch.jit.script "torch.jit.script")
    | Script the function. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`script`](generated/torch.jit.script.html#torch.jit.script "torch.jit.script")
    | 对函数进行脚本化。 |'
- en: '| [`trace`](generated/torch.jit.trace.html#torch.jit.trace "torch.jit.trace")
    | Trace a function and return an executable or [`ScriptFunction`](generated/torch.jit.ScriptFunction.html#torch.jit.ScriptFunction
    "torch.jit.ScriptFunction") that will be optimized using just-in-time compilation.
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`trace`](generated/torch.jit.trace.html#torch.jit.trace "torch.jit.trace")
    | 追踪一个函数并返回一个可执行的或[`ScriptFunction`](generated/torch.jit.ScriptFunction.html#torch.jit.ScriptFunction
    "torch.jit.ScriptFunction")，该函数将使用即时编译进行优化。 |'
- en: '| [`script_if_tracing`](generated/torch.jit.script_if_tracing.html#torch.jit.script_if_tracing
    "torch.jit.script_if_tracing") | Compiles `fn` when it is first called during
    tracing. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`script_if_tracing`](generated/torch.jit.script_if_tracing.html#torch.jit.script_if_tracing
    "torch.jit.script_if_tracing") | 当在追踪期间首次调用`fn`时，编译`fn`。 |'
- en: '| [`trace_module`](generated/torch.jit.trace_module.html#torch.jit.trace_module
    "torch.jit.trace_module") | Trace a module and return an executable [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") that will be optimized using just-in-time compilation.
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`trace_module`](generated/torch.jit.trace_module.html#torch.jit.trace_module
    "torch.jit.trace_module") | 追踪一个模块并返回一个可执行的[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")，该模块将使用即时编译进行优化。 |'
- en: '| [`fork`](generated/torch.jit.fork.html#torch.jit.fork "torch.jit.fork") |
    Create an asynchronous task executing func and a reference to the value of the
    result of this execution. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`fork`](generated/torch.jit.fork.html#torch.jit.fork "torch.jit.fork") |
    创建一个执行func的异步任务，并引用此执行结果的值。 |'
- en: '| [`wait`](generated/torch.jit.wait.html#torch.jit.wait "torch.jit.wait") |
    Force completion of a torch.jit.Future[T] asynchronous task, returning the result
    of the task. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`wait`](generated/torch.jit.wait.html#torch.jit.wait "torch.jit.wait") |
    强制完成一个torch.jit.Future[T]异步任务，返回任务的结果。 |'
- en: '| [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") | Wrapper for C++ torch::jit::Module with methods, attributes,
    and parameters. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") | 用于C++ torch::jit::Module的包装器，具有方法、属性和参数。 |'
- en: '| [`ScriptFunction`](generated/torch.jit.ScriptFunction.html#torch.jit.ScriptFunction
    "torch.jit.ScriptFunction") | Functionally equivalent to a [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule"), but represents a single function and does not have
    any attributes or Parameters. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`ScriptFunction`](generated/torch.jit.ScriptFunction.html#torch.jit.ScriptFunction
    "torch.jit.ScriptFunction") | 与[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")在功能上等效，但表示单个函数，不具有任何属性或参数。 |'
- en: '| [`freeze`](generated/torch.jit.freeze.html#torch.jit.freeze "torch.jit.freeze")
    | Freeze ScriptModule, inline submodules, and attributes as constants. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`freeze`](generated/torch.jit.freeze.html#torch.jit.freeze "torch.jit.freeze")
    | 冻结 ScriptModule，内联子模块，并将属性作为常量。 |'
- en: '| [`optimize_for_inference`](generated/torch.jit.optimize_for_inference.html#torch.jit.optimize_for_inference
    "torch.jit.optimize_for_inference") | Perform a set of optimization passes to
    optimize a model for the purposes of inference. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`optimize_for_inference`](generated/torch.jit.optimize_for_inference.html#torch.jit.optimize_for_inference
    "torch.jit.optimize_for_inference") | 执行一系列优化传递，以优化模型以用于推断目的。 |'
- en: '| [`enable_onednn_fusion`](generated/torch.jit.enable_onednn_fusion.html#torch.jit.enable_onednn_fusion
    "torch.jit.enable_onednn_fusion") | Enable or disables onednn JIT fusion based
    on the parameter enabled. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`enable_onednn_fusion`](generated/torch.jit.enable_onednn_fusion.html#torch.jit.enable_onednn_fusion
    "torch.jit.enable_onednn_fusion") | 根据启用的参数启用或禁用onednn JIT融合。 |'
- en: '| [`onednn_fusion_enabled`](generated/torch.jit.onednn_fusion_enabled.html#torch.jit.onednn_fusion_enabled
    "torch.jit.onednn_fusion_enabled") | Return whether onednn JIT fusion is enabled.
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`onednn_fusion_enabled`](generated/torch.jit.onednn_fusion_enabled.html#torch.jit.onednn_fusion_enabled
    "torch.jit.onednn_fusion_enabled") | 返回 onednn JIT 融合是否已启用。 |'
- en: '| [`set_fusion_strategy`](generated/torch.jit.set_fusion_strategy.html#torch.jit.set_fusion_strategy
    "torch.jit.set_fusion_strategy") | Set the type and number of specializations
    that can occur during fusion. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`set_fusion_strategy`](generated/torch.jit.set_fusion_strategy.html#torch.jit.set_fusion_strategy
    "torch.jit.set_fusion_strategy") | 设置在融合过程中可以发生的特化类型和数量。 |'
- en: '| [`strict_fusion`](generated/torch.jit.strict_fusion.html#torch.jit.strict_fusion
    "torch.jit.strict_fusion") | Give errors if not all nodes have been fused in inference,
    or symbolically differentiated in training. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`strict_fusion`](generated/torch.jit.strict_fusion.html#torch.jit.strict_fusion
    "torch.jit.strict_fusion") | 如果推断中没有融合所有节点，或者在训练中没有符号微分，则会出错。 |'
- en: '| [`save`](generated/torch.jit.save.html#torch.jit.save "torch.jit.save") |
    Save an offline version of this module for use in a separate process. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`save`](generated/torch.jit.save.html#torch.jit.save "torch.jit.save") |
    保存此模块的离线版本，以供在单独的进程中使用。 |'
- en: '| [`load`](generated/torch.jit.load.html#torch.jit.load "torch.jit.load") |
    Load a [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") or [`ScriptFunction`](generated/torch.jit.ScriptFunction.html#torch.jit.ScriptFunction
    "torch.jit.ScriptFunction") previously saved with [`torch.jit.save`](generated/torch.jit.save.html#torch.jit.save
    "torch.jit.save"). |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`load`](generated/torch.jit.load.html#torch.jit.load "torch.jit.load") |
    加载之前使用 [`torch.jit.save`](generated/torch.jit.save.html#torch.jit.save "torch.jit.save")
    保存的 [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") 或 [`ScriptFunction`](generated/torch.jit.ScriptFunction.html#torch.jit.ScriptFunction
    "torch.jit.ScriptFunction")。 |'
- en: '| [`ignore`](generated/torch.jit.ignore.html#torch.jit.ignore "torch.jit.ignore")
    | This decorator indicates to the compiler that a function or method should be
    ignored and left as a Python function. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`ignore`](generated/torch.jit.ignore.html#torch.jit.ignore "torch.jit.ignore")
    | 此装饰器指示编译器应忽略一个函数或方法，并将其保留为Python函数。 |'
- en: '| [`unused`](generated/torch.jit.unused.html#torch.jit.unused "torch.jit.unused")
    | This decorator indicates to the compiler that a function or method should be
    ignored and replaced with the raising of an exception. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`unused`](generated/torch.jit.unused.html#torch.jit.unused "torch.jit.unused")
    | 此装饰器指示编译器应忽略一个函数或方法，并用引发异常替换。 |'
- en: '| [`interface`](generated/torch.jit.interface.html#torch.jit.interface "torch.jit.interface")
    | Decorate to annotate classes or modules of different types. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`interface`](generated/torch.jit.interface.html#torch.jit.interface "torch.jit.interface")
    | 用于注释不同类型的类或模块的装饰器。 |'
- en: '| [`isinstance`](generated/torch.jit.isinstance.html#torch.jit.isinstance "torch.jit.isinstance")
    | Provide container type refinement in TorchScript. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`isinstance`](generated/torch.jit.isinstance.html#torch.jit.isinstance "torch.jit.isinstance")
    | 在TorchScript中提供容器类型细化。 |'
- en: '| [`Attribute`](generated/torch.jit.Attribute.html#torch.jit.Attribute "torch.jit.Attribute")
    | This method is a pass-through function that returns value, mostly used to indicate
    to the TorchScript compiler that the left-hand side expression is a class instance
    attribute with type of type. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`Attribute`](generated/torch.jit.Attribute.html#torch.jit.Attribute "torch.jit.Attribute")
    | 此方法是一个传递函数，返回值，主要用于指示TorchScript编译器左侧表达式是具有类型的类实例属性。 |'
- en: '| [`annotate`](generated/torch.jit.annotate.html#torch.jit.annotate "torch.jit.annotate")
    | Use to give type of the_value in TorchScript compiler. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`annotate`](generated/torch.jit.annotate.html#torch.jit.annotate "torch.jit.annotate")
    | 用于在TorchScript编译器中给出 the_value 的类型。 |'
- en: '[Mixing Tracing and Scripting](#id5)[](#mixing-tracing-and-scripting "Permalink
    to this heading")'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[混合跟踪和脚本化](#id5)[](#mixing-tracing-and-scripting "跳转到此标题的永久链接")'
- en: In many cases either tracing or scripting is an easier approach for converting
    a model to TorchScript. Tracing and scripting can be composed to suit the particular
    requirements of a part of a model.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，跟踪或脚本化是将模型转换为TorchScript的更简单方法。跟踪和脚本化可以组合以满足模型的特定要求。
- en: Scripted functions can call traced functions. This is particularly useful when
    you need to use control-flow around a simple feed-forward model. For instance
    the beam search of a sequence to sequence model will typically be written in script
    but can call an encoder module generated using tracing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本函数可以调用跟踪函数。当您需要在一个简单的前馈模型周围使用控制流时，这是特别有用的。例如，序列到序列模型的波束搜索通常会以脚本形式编写，但可以调用使用跟踪生成的编码器模块。
- en: 'Example (calling a traced function in script):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 示例（在脚本中调用跟踪函数）：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Traced functions can call script functions. This is useful when a small part
    of a model requires some control-flow even though most of the model is just a
    feed-forward network. Control-flow inside of a script function called by a traced
    function is preserved correctly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪函数可以调用脚本函数。当模型的一小部分需要一些控制流时，即使大部分模型只是一个前馈网络时，这是有用的。由跟踪函数调用的脚本函数内的控制流会被正确保留。
- en: 'Example (calling a script function in a traced function):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 示例（在跟踪函数中调用脚本函数）：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This composition also works for `nn.Module`s as well, where it can be used to
    generate a submodule using tracing that can be called from the methods of a script
    module.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组合也适用于`nn.Module`，可以使用跟踪生成一个子模块，可以从脚本模块的方法中调用。
- en: 'Example (using a traced module):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 示例（使用跟踪模块）：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[TorchScript Language](#id6)'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[TorchScript语言](#id6)'
- en: TorchScript is a statically typed subset of Python, so many Python features
    apply directly to TorchScript. See the full [TorchScript Language Reference](jit_language_reference.html#language-reference)
    for details.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript是Python的静态类型子集，因此许多Python功能直接适用于TorchScript。有关详细信息，请参阅完整的[TorchScript语言参考](jit_language_reference.html#language-reference)。
- en: '## [Built-in Functions and Modules](#id7)[](#built-in-functions-and-modules
    "Permalink to this heading")'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '## [内置函数和模块](#id7)[](#built-in-functions-and-modules "跳转到此标题的永久链接")'
- en: TorchScript supports the use of most PyTorch functions and many Python built-ins.
    See [TorchScript Builtins](jit_builtin_functions.html#builtin-functions) for a
    full reference of supported functions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript支持大多数PyTorch函数和许多Python内置函数。查看[TorchScript内置函数](jit_builtin_functions.html#builtin-functions)以获取支持函数的完整参考。
- en: '[PyTorch Functions and Modules](#id8)[](#pytorch-functions-and-modules "Permalink
    to this heading")'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[PyTorch函数和模块](#id8)[](#pytorch-functions-and-modules "跳转到此标题的永久链接")'
- en: TorchScript supports a subset of the tensor and neural network functions that
    PyTorch provides. Most methods on Tensor as well as functions in the `torch` namespace,
    all functions in `torch.nn.functional` and most modules from `torch.nn` are supported
    in TorchScript.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript支持PyTorch提供的张量和神经网络函数的子集。Tensor上的大多数方法以及`torch`命名空间中的函数，`torch.nn.functional`中的所有函数以及`torch.nn`中的大多数模块都受TorchScript支持。
- en: See [TorchScript Unsupported PyTorch Constructs](jit_unsupported.html#jit-unsupported)
    for a list of unsupported PyTorch functions and modules.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[TorchScript不支持的PyTorch构造](jit_unsupported.html#jit-unsupported)以获取不支持的PyTorch函数和模块列表。
- en: '[Python Functions and Modules](#id9)[](#python-functions-and-modules "Permalink
    to this heading")'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[Python函数和模块](#id9)[](#python-functions-and-modules "跳转到此标题的永久链接")'
- en: Many of Python’s [built-in functions](https://docs.python.org/3/library/functions.html)
    are supported in TorchScript. The [`math`](https://docs.python.org/3/library/math.html#module-math
    "(in Python v3.12)") module is also supported (see [math Module](jit_builtin_functions.html#math-module)
    for details), but no other Python modules (built-in or third party) are supported.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript支持Python的许多[内置函数](https://docs.python.org/3/library/functions.html)。[`math`](https://docs.python.org/3/library/math.html#module-math
    "(在Python v3.12中)")模块也受支持（有关详细信息，请参阅[math模块](jit_builtin_functions.html#math-module)），但不支持其他Python模块（内置或第三方）。
- en: '[Python Language Reference Comparison](#id10)[](#python-language-reference-comparison
    "Permalink to this heading")'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[Python语言参考比较](#id10)[](#python-language-reference-comparison "跳转到此标题的永久链接")'
- en: For a full listing of supported Python features, see [Python Language Reference
    Coverage](jit_python_reference.html#python-language-reference).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看支持的Python功能的完整列表，请参阅[Python语言参考覆盖范围](jit_python_reference.html#python-language-reference)。
- en: '[Debugging](#id11)'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[调试](#id11)'
- en: '### [Disable JIT for Debugging](#id12)[](#disable-jit-for-debugging "Permalink
    to this heading")'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '### [调试时禁用JIT](#id12)[](#disable-jit-for-debugging "跳转到此标题的永久链接")'
- en: PYTORCH_JIT
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: PYTORCH_JIT
- en: 'Setting the environment variable `PYTORCH_JIT=0` will disable all script and
    tracing annotations. If there is hard-to-debug error in one of your TorchScript
    models, you can use this flag to force everything to run using native Python.
    Since TorchScript (scripting and tracing) is disabled with this flag, you can
    use tools like `pdb` to debug the model code. For example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 设置环境变量`PYTORCH_JIT=0`将禁用所有脚本和跟踪注释。如果您的TorchScript模型中有难以调试的错误，您可以使用此标志强制所有内容都使用本机Python运行。由于使用此标志禁用了TorchScript（脚本和跟踪），您可以使用`pdb`等工具来调试模型代码。例如：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Debugging this script with `pdb` works except for when we invoke the [`@torch.jit.script`](generated/torch.jit.script.html#torch.jit.script
    "torch.jit.script") function. We can globally disable JIT, so that we can call
    the [`@torch.jit.script`](generated/torch.jit.script.html#torch.jit.script "torch.jit.script")
    function as a normal Python function and not compile it. If the above script is
    called `disable_jit_example.py`, we can invoke it like so:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pdb`调试此脚本可以正常工作，除非我们调用[`@torch.jit.script`](generated/torch.jit.script.html#torch.jit.script
    "torch.jit.script")函数。我们可以全局禁用JIT，这样我们可以像普通Python函数一样调用[`@torch.jit.script`](generated/torch.jit.script.html#torch.jit.script
    "torch.jit.script")函数而不进行编译。如果上述脚本被称为`disable_jit_example.py`，我们可以这样调用它：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'and we will be able to step into the [`@torch.jit.script`](generated/torch.jit.script.html#torch.jit.script
    "torch.jit.script") function as a normal Python function. To disable the TorchScript
    compiler for a specific function, see [`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore").  ### [Inspecting Code](#id13)[](#inspecting-code "Permalink
    to this heading")'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将能够像普通Python函数一样进入[`@torch.jit.script`](generated/torch.jit.script.html#torch.jit.script
    "torch.jit.script")函数。要禁用特定函数的TorchScript编译器，请参阅[`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore")。### [检查代码](#id13)[](#inspecting-code "跳转到此标题的永久链接")
- en: 'TorchScript provides a code pretty-printer for all [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") instances. This pretty-printer gives an interpretation
    of the script method’s code as valid Python syntax. For example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript为所有[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")实例提供了代码漂亮打印机。这个漂亮打印机将脚本方法的代码解释为有效的Python语法。例如：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") with a single `forward` method will have an attribute
    `code`, which you can use to inspect the [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")’s code. If the [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") has more than one method, you will need to access `.code`
    on the method itself and not the module. We can inspect the code of a method named
    `foo` on a [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") by accessing `.foo.code`. The example above produces
    this output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 具有单个`forward`方法的[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")将具有一个名为`code`的属性，您可以使用它来检查[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")的代码。如果[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")有多个方法，则需要在方法本身上访问`.code`，而不是模块。我们可以通过访问`.foo.code`来检查名为`foo`的方法的代码，该方法位于[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")上。上面的示例产生了这个输出：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is TorchScript’s compilation of the code for the `forward` method. You
    can use this to ensure TorchScript (tracing or scripting) has captured your model
    code correctly.  ### [Interpreting Graphs](#id14)[](#interpreting-graphs "Permalink
    to this heading")'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是TorchScript对`forward`方法的代码编译。您可以使用此功能来确保TorchScript（跟踪或脚本化）正确捕获了您的模型代码。###
    [解释图形](#id14)[](#interpreting-graphs "跳转到此标题的永久链接")
- en: TorchScript also has a representation at a lower level than the code pretty-
    printer, in the form of IR graphs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript还具有比代码漂亮打印机更低级别的表示形式，即IR图形。
- en: 'TorchScript uses a static single assignment (SSA) intermediate representation
    (IR) to represent computation. The instructions in this format consist of ATen
    (the C++ backend of PyTorch) operators and other primitive operators, including
    control flow operators for loops and conditionals. As an example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript使用静态单赋值（SSA）中间表示（IR）来表示计算。此格式中的指令包括ATen（PyTorch的C++后端）运算符和其他原始运算符，包括用于循环和条件的控制流运算符。例如：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`graph` follows the same rules described in the [Inspecting Code](#inspecting-code)
    section with regard to `forward` method lookup.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`graph`遵循与[检查代码](#inspecting-code)部分中关于`forward`方法查找的相同规则。'
- en: 'The example script above produces the graph:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例脚本产生了以下图形：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Take the instruction `%rv.1 : Tensor = aten::zeros(%4, %6, %6, %10, %12) #
    test.py:9:10` for example.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以指令`％rv.1：Tensor = aten::zeros（％4，％6，％6，％10，％12）＃test.py：9:10`为例。
- en: '`%rv.1 : Tensor` means we assign the output to a (unique) value named `rv.1`,
    that value is of `Tensor` type and that we do not know its concrete shape.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％rv.1：Tensor`表示我们将输出分配给名为`rv.1`的（唯一）值，该值是`Tensor`类型的，我们不知道其具体形状。'
- en: '`aten::zeros` is the operator (equivalent to `torch.zeros`) and the input list
    `(%4, %6, %6, %10, %12)` specifies which values in scope should be passed as inputs.
    The schema for built-in functions like `aten::zeros` can be found at [Builtin
    Functions](#builtin-functions).'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aten::zeros`是运算符（等同于`torch.zeros`），输入列表`（％4，％6，％6，％10，％12）`指定应将哪些作用域内的值作为输入传递。内置函数（如`aten::zeros`）的模式可以在[Builtin
    Functions](#builtin-functions)中找到。'
- en: '`# test.py:9:10` is the location in the original source file that generated
    this instruction. In this case, it is a file named test.py, on line 9, and at
    character 10.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`＃test.py：9:10`是生成此指令的原始源文件中的位置。在这种情况下，它是一个名为test.py的文件，在第9行，第10个字符处。'
- en: Notice that operators can also have associated `blocks`, namely the `prim::Loop`
    and `prim::If` operators. In the graph print-out, these operators are formatted
    to reflect their equivalent source code forms to facilitate easy debugging.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，运算符也可以有关联的`blocks`，即`prim::Loop`和`prim::If`运算符。在图形打印输出中，这些运算符的格式化方式反映了它们等效的源代码形式，以便进行简单的调试。
- en: Graphs can be inspected as shown to confirm that the computation described by
    a [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") is correct, in both automated and manual fashion, as
    described below.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 可以像下面描述的那样检查图形，以确认由[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")描述的计算是正确的，无论是自动还是手动方式。
- en: '[Tracer](#id15)'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[跟踪器](#id15)'
- en: Tracing Edge Cases
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 跟踪特殊情况
- en: 'There are some edge cases that exist where the trace of a given Python function/module
    will not be representative of the underlying code. These cases can include:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一些特殊情况，其中给定Python函数/模块的跟踪可能不代表底层代码。这些情况可能包括：
- en: Tracing of control flow that is dependent on inputs (e.g. tensor shapes)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪依赖于输入（例如张量形状）的控制流
- en: Tracing of in-place operations of tensor views (e.g. indexing on the left-hand
    side of an assignment)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪张量视图的原位操作（例如在赋值的左侧进行索引）
- en: Note that these cases may in fact be traceable in the future.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些情况实际上可能在将来是可跟踪的。
- en: Automatic Trace Checking
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自动跟踪检查
- en: 'One way to automatically catch many errors in traces is by using `check_inputs`
    on the `torch.jit.trace()` API. `check_inputs` takes a list of tuples of inputs
    that will be used to re-trace the computation and verify the results. For example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`torch.jit.trace()` API上使用`check_inputs`来自动捕获跟踪中的许多错误是一种方法。`check_inputs`接受一个输入元组列表，用于重新跟踪计算并验证结果。例如：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Gives us the following diagnostic information:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 给我们提供以下诊断信息：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This message indicates to us that the computation differed between when we first
    traced it and when we traced it with the `check_inputs`. Indeed, the loop within
    the body of `loop_in_traced_fn` depends on the shape of the input `x`, and thus
    when we try another `x` with a different shape, the trace differs.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息告诉我们，当我们首次跟踪它和使用`check_inputs`重新跟踪它时，计算之间存在差异。实际上，在`loop_in_traced_fn`的主体内的循环取决于输入`x`的形状，因此当我们尝试另一个具有不同形状的`x`时，跟踪会有所不同。
- en: 'In this case, data-dependent control flow like this can be captured using [`torch.jit.script()`](generated/torch.jit.script.html#torch.jit.script
    "torch.jit.script") instead:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，像这样的数据相关控制流可以使用[`torch.jit.script()`](generated/torch.jit.script.html#torch.jit.script
    "torch.jit.script")来捕获：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Which produces:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tracer Warnings
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 跟踪器警告
- en: 'The tracer produces warnings for several problematic patterns in traced computation.
    As an example, take a trace of a function that contains an in-place assignment
    on a slice (a view) of a Tensor:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪器会为跟踪计算中的几种问题模式产生警告。例如，考虑包含对张量切片（视图）进行就地赋值的函数的跟踪：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Produces several warnings and a graph which simply returns the input:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 产生几个警告和一个简单返回输入的图形：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can fix this by modifying the code to not use the in-place update, but rather
    build up the result tensor out-of-place with `torch.cat`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过修改代码以不使用就地更新，而是使用`torch.cat`在原地构建结果张量来解决这个问题：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Frequently Asked Questions](#id16)[](#frequently-asked-questions "Permalink
    to this heading")'
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[常见问题](#id16)[](#frequently-asked-questions "跳转到此标题的永久链接")'
- en: 'Q: I would like to train a model on GPU and do inference on CPU. What are the
    best practices?'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 问：我想在GPU上训练模型，然后在CPU上进行推断。有什么最佳实践吗？
- en: 'First convert your model from GPU to CPU and then save it, like so:'
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 首先将您的模型从GPU转换为CPU，然后保存，就像这样：
- en: ''
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE16]'
- en: ''
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is recommended because the tracer may witness tensor creation on a specific
    device, so casting an already-loaded model may have unexpected effects. Casting
    the model *before* saving it ensures that the tracer has the correct device information.
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这是推荐的做法，因为跟踪器可能会在特定设备上看到张量的创建，因此在保存模型之前对模型进行转换可能会产生意外效果。在保存模型之前对模型进行转换可以确保跟踪器具有正确的设备信息。
- en: 'Q: How do I store attributes on a [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")?'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 问：如何在[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")上存储属性？
- en: 'Say we have a model like:'
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 假设我们有一个模型：
- en: ''
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE17]'
- en: ''
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If `Model` is instantiated it will result in a compilation error since the
    compiler doesn’t know about `x`. There are 4 ways to inform the compiler of attributes
    on [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule"):'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果实例化`Model`，将导致编译错误，因为编译器不知道`x`。有4种方法可以通知编译器[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")上的属性：
- en: ''
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. `nn.Parameter` - Values wrapped in `nn.Parameter` will work as they do on
    `nn.Module`s
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1. `nn.Parameter` - 包装在`nn.Parameter`中的值将像在`nn.Module`上一样工作
- en: ''
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2\. `register_buffer` - Values wrapped in `register_buffer` will work as they
    do on `nn.Module`s. This is equivalent to an attribute (see 4) of type `Tensor`.
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2. `register_buffer` - 包装在`register_buffer`中的值将像在`nn.Module`上一样工作。这相当于类型为`Tensor`的属性（见4）。
- en: ''
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3\. Constants - Annotating a class member as `Final` (or adding it to a list
    called `__constants__` at the class definition level) will mark the contained
    names as constants. Constants are saved directly in the code of the model. See
    builtin-constants for details.
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 3. 常量 - 将类成员标记为`Final`（或将其添加到类定义级别的名为`__constants__`的列表中）将会将包含的名称标记为常量。常量直接保存在模型的代码中。详细信息请参见内置常量。
- en: ''
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. Attributes - Values that are a supported type can be added as mutable attributes.
    Most types can be inferred but some may need to be specified, see module attributes
    for details.
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 4. 属性 - 可以将支持的类型添加为可变属性的值。大多数类型可以推断，但有些可能需要指定，详细信息请参见模块属性。
- en: 'Q: I would like to trace module’s method but I keep getting this error:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 问：我想跟踪模块的方法，但我一直收到这个错误：
- en: '`RuntimeError: Cannot insert a Tensor that requires grad as a constant. Consider
    making it a parameter or input, or detaching the gradient`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`RuntimeError: 无法将需要梯度的张量插入为常量。考虑将其作为参数或输入，或分离梯度`'
- en: This error usually means that the method you are tracing uses a module’s parameters
    and you are passing the module’s method instead of the module instance (e.g. `my_module_instance.forward`
    vs `my_module_instance`).
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个错误通常意味着您正在跟踪的方法使用了模块的参数，并且您正在传递模块的方法而不是模块实例（例如`my_module_instance.forward`
    vs `my_module_instance`）。
- en: ''
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Invoking `trace` with a module’s method captures module parameters (which may
    require gradients) as **constants**.
  id: totrans-143
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模块的方法调用`trace`会捕获模块参数（可能需要梯度）作为**常量**。
- en: ''
  id: totrans-144
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-145
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: On the other hand, invoking `trace` with module’s instance (e.g. `my_module`)
    creates a new module and correctly copies parameters into the new module, so they
    can accumulate gradients if required.
  id: totrans-146
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，使用模块实例（例如`my_module`）调用`trace`会创建一个新模块，并将参数正确复制到新模块中，因此如果需要，它们可以累积梯度。
- en: ''
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To trace a specific method on a module, see [`torch.jit.trace_module`](generated/torch.jit.trace_module.html#torch.jit.trace_module
    "torch.jit.trace_module")
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要跟踪模块上的特定方法，请参见[`torch.jit.trace_module`](generated/torch.jit.trace_module.html#torch.jit.trace_module
    "torch.jit.trace_module")
- en: '[Known Issues](#id17)'
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[已知问题](#id17)'
- en: If you’re using `Sequential` with TorchScript, the inputs of some of the `Sequential`
    submodules may be falsely inferred to be `Tensor`, even if they’re annotated otherwise.
    The canonical solution is to subclass `nn.Sequential` and redeclare `forward`
    with the input typed correctly.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在TorchScript中使用`Sequential`，则某些`Sequential`子模块的输入可能会被错误地推断为`Tensor`，即使它们已经被注释。标准解决方案是子类化`nn.Sequential`并使用正确类型的输入重新声明`forward`。
- en: '[Appendix](#id18)'
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[附录](#id18)'
- en: '[Migrating to PyTorch 1.2 Recursive Scripting API](#id19)[](#migrating-to-pytorch-1-2-recursive-scripting-api
    "Permalink to this heading")'
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[迁移到PyTorch 1.2递归脚本API](#id19)[](#migrating-to-pytorch-1-2-recursive-scripting-api
    "跳转到此标题的永久链接")'
- en: This section details the changes to TorchScript in PyTorch 1.2\. If you are
    new to TorchScript you can skip this section. There are two main changes to the
    TorchScript API with PyTorch 1.2.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细介绍了PyTorch 1.2中TorchScript的更改。如果您是TorchScript的新手，可以跳过本节。PyTorch 1.2对TorchScript
    API进行了两个主要更改。
- en: 1\. [`torch.jit.script`](generated/torch.jit.script.html#torch.jit.script "torch.jit.script")
    will now attempt to recursively compile functions, methods, and classes that it
    encounters. Once you call `torch.jit.script`, compilation is “opt-out”, rather
    than “opt-in”.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 1. [`torch.jit.script`](generated/torch.jit.script.html#torch.jit.script "torch.jit.script")现在将尝试递归编译遇到的函数、方法和类。一旦调用`torch.jit.script`，编译就是“opt-out”，而不是“opt-in”。
- en: 2\. `torch.jit.script(nn_module_instance)` is now the preferred way to create
    [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")s, instead of inheriting from `torch.jit.ScriptModule`.
    These changes combine to provide a simpler, easier-to-use API for converting your
    `nn.Module`s into [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")s, ready to be optimized and executed in a non-Python
    environment.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 2. `torch.jit.script(nn_module_instance)`现在是创建[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")的首选方法，而不是继承自`torch.jit.ScriptModule`。这些更改结合在一起，为将您的`nn.Module`转换为[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")提供了一个更简单、更易于使用的API，准备在非Python环境中进行优化和执行。
- en: 'The new usage looks like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 新的用法如下：
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The module’s `forward` is compiled by default. Methods called from `forward`
    are lazily compiled in the order they are used in `forward`.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块的`forward`默认被编译。从`forward`调用的方法会按照它们在`forward`中被使用的顺序进行延迟编译。
- en: To compile a method other than `forward` that is not called from `forward`,
    add `@torch.jit.export`.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了从`forward`调用的方法之外，要编译其他方法，请添加`@torch.jit.export`。
- en: To stop the compiler from compiling a method, add [`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore") or [`@torch.jit.unused`](generated/torch.jit.unused.html#torch.jit.unused
    "torch.jit.unused"). `@ignore` leaves the
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要阻止编译器编译一个方法，请添加[`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore")或[`@torch.jit.unused`](generated/torch.jit.unused.html#torch.jit.unused
    "torch.jit.unused")。`@ignore`保留了
- en: method as a call to python, and `@unused` replaces it with an exception. `@ignored`
    cannot be exported; `@unused` can.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将方法作为对python的调用，并用`@unused`替换它以引发异常。`@ignored`不能被导出；`@unused`可以。
- en: Most attribute types can be inferred, so `torch.jit.Attribute` is not necessary.
    For empty container types, annotate their types using [PEP 526-style](https://www.python.org/dev/peps/pep-0526/#class-and-instance-variable-annotations)
    class annotations.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数属性类型可以被推断，因此不需要`torch.jit.Attribute`。对于空容器类型，使用[PEP 526风格](https://www.python.org/dev/peps/pep-0526/#class-and-instance-variable-annotations)的类注释来注释它们的类型。
- en: Constants can be marked with a `Final` class annotation instead of adding the
    name of the member to `__constants__`.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常量可以用`Final`类注释标记，而不是将成员名称添加到`__constants__`中。
- en: Python 3 type hints can be used in place of `torch.jit.annotate`
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3类型提示可以用来替代`torch.jit.annotate`
- en: 'As a result of these changes, the following items are considered deprecated
    and should not appear in new code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些更改，以下项目被视为已弃用，不应出现在新代码中：
- en: The `@torch.jit.script_method` decorator
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@torch.jit.script_method`装饰器'
- en: Classes that inherit from `torch.jit.ScriptModule`
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承自`torch.jit.ScriptModule`的类
- en: The `torch.jit.Attribute` wrapper class
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`torch.jit.Attribute`包装类'
- en: The `__constants__` array
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__constants__`数组'
- en: The `torch.jit.annotate` function
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`torch.jit.annotate`函数'
- en: Modules
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模块
- en: Warning
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore "torch.jit.ignore")
    annotation’s behavior changes in PyTorch 1.2\. Before PyTorch 1.2 the @ignore
    decorator was used to make a function or method callable from code that is exported.
    To get this functionality back, use `@torch.jit.unused()`. `@torch.jit.ignore`
    is now equivalent to `@torch.jit.ignore(drop=False)`. See [`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore") and [`@torch.jit.unused`](generated/torch.jit.unused.html#torch.jit.unused
    "torch.jit.unused") for details.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyTorch 1.2中，[`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore")注解的行为发生了变化。在PyTorch 1.2之前，@ignore装饰器用于使一个函数或方法可以从导出的代码中调用。要恢复此功能，请使用`@torch.jit.unused()`。`@torch.jit.ignore`现在等同于`@torch.jit.ignore(drop=False)`。有关详细信息，请参阅[`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore")和[`@torch.jit.unused`](generated/torch.jit.unused.html#torch.jit.unused
    "torch.jit.unused")。
- en: When passed to the [`torch.jit.script`](generated/torch.jit.script.html#torch.jit.script
    "torch.jit.script") function, a `torch.nn.Module`'s data is copied to a [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") and the TorchScript compiler compiles the module. The
    module’s `forward` is compiled by default. Methods called from `forward` are lazily
    compiled in the order they are used in `forward`, as well as any `@torch.jit.export`
    methods.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递给[`torch.jit.script`](generated/torch.jit.script.html#torch.jit.script "torch.jit.script")函数时，`torch.nn.Module`的数据会被复制到一个[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")中，TorchScript编译器会编译该模块。模块的`forward`默认被编译。从`forward`调用的方法会按照它们在`forward`中被使用的顺序进行延迟编译，以及任何`@torch.jit.export`方法。
- en: '[PRE19]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This decorator indicates that a method on an `nn.Module` is used as an entry
    point into a [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") and should be compiled.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个装饰器表示`nn.Module`上的一个方法被用作进入[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")的入口点，并且应该被编译。
- en: '`forward` implicitly is assumed to be an entry point, so it does not need this
    decorator. Functions and methods called from `forward` are compiled as they are
    seen by the compiler, so they do not need this decorator either.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`forward`隐式地被假定为入口点，因此不需要这个装饰器。从`forward`调用的函数和方法会被编译器按照它们在`forward`中被看到的顺序编译，因此它们也不需要这个装饰器。'
- en: 'Example (using `@torch.jit.export` on a method):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 示例（在方法上使用`@torch.jit.export`）：
- en: '[PRE20]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Functions
  id: totrans-180
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数
- en: Functions don’t change much, they can be decorated with [`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore") or [`torch.jit.unused`](generated/torch.jit.unused.html#torch.jit.unused
    "torch.jit.unused") if needed.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 函数没有太大变化，如果需要，可以用[`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore")或[`torch.jit.unused`](generated/torch.jit.unused.html#torch.jit.unused
    "torch.jit.unused")进行装饰。
- en: '[PRE21]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: TorchScript Classes
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: TorchScript类
- en: Warning
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: TorchScript class support is experimental. Currently it is best suited for simple
    record-like types (think a `NamedTuple` with methods attached).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript类支持是实验性的。目前最适合简单的类似记录的类型（考虑带有附加方法的`NamedTuple`）。
- en: Everything in a user defined [TorchScript Class](torchscript-class) is exported
    by default, functions can be decorated with [`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore") if needed.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的[TorchScript类](torchscript-class)中的所有内容默认导出，如果需要，函数可以用[`@torch.jit.ignore`](generated/torch.jit.ignore.html#torch.jit.ignore
    "torch.jit.ignore")进行装饰。
- en: Attributes
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 属性
- en: The TorchScript compiler needs to know the types of module attributes. Most
    types can be inferred from the value of the member. Empty lists and dicts cannot
    have their types inferred and must have their types annotated with [PEP 526-style](https://www.python.org/dev/peps/pep-0526/#class-and-instance-variable-annotations)
    class annotations. If a type cannot be inferred and is not explicitly annotated,
    it will not be added as an attribute to the resulting [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript编译器需要知道模块属性的类型。大多数类型可以从成员的值中推断出来。空列表和字典无法推断其类型，必须使用[PEP 526风格](https://www.python.org/dev/peps/pep-0526/#class-and-instance-variable-annotations)的类注释来注释其类型。如果类型无法推断并且没有明确注释，则不会将其添加为结果[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")的属性。
- en: 'Old API:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 旧API：
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'New API:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 新API：
- en: '[PRE23]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Constants
  id: totrans-193
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 常量
- en: The `Final` type constructor can be used to mark members as constant. If members
    are not marked constant, they will be copied to the resulting [`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule") as an attribute. Using `Final` opens opportunities for
    optimization if the value is known to be fixed and gives additional type safety.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`Final`类型构造函数可用于将成员标记为常量。如果成员未标记为常量，则它们将被复制到结果[`ScriptModule`](generated/torch.jit.ScriptModule.html#torch.jit.ScriptModule
    "torch.jit.ScriptModule")作为属性。使用`Final`可以在值已知为固定时进行优化，并提供额外的类型安全性。'
- en: 'Old API:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '旧API:'
- en: '[PRE24]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'New API:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 新API：
- en: '[PRE25]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '#### Variables'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 变量'
- en: Containers are assumed to have type `Tensor` and be non-optional (see Default
    Types for more information). Previously, `torch.jit.annotate` was used to tell
    the TorchScript compiler what the type should be. Python 3 style type hints are
    now supported.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 假定容器的类型为`Tensor`且非可选（有关更多信息，请参见默认类型）。以前，使用`torch.jit.annotate`告诉TorchScript编译器应该是什么类型。现在支持Python
    3风格的类型提示。
- en: '[PRE26]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[Fusion Backends](#id20)'
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[融合后端](#id20)'
- en: There are a couple of fusion backends available to optimize TorchScript execution.
    The default fuser on CPUs is NNC, which can perform fusions for both CPUs and
    GPUs. The default fuser on GPUs is NVFuser, which supports a wider range of operators
    and has demonstrated generated kernels with improved throughput. See the [NVFuser
    documentation](https://github.com/pytorch/pytorch/blob/main/torch/csrc/jit/codegen/cuda/README.md)
    for more details on usage and debugging.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种融合后端可用于优化TorchScript执行。在CPU上的默认融合器是NNC，可以为CPU和GPU执行融合。在GPU上的默认融合器是NVFuser，支持更广泛的运算符，并且已经生成了具有改进吞吐量的内核。有关使用和调试的更多详细信息，请参阅[NVFuser文档](https://github.com/pytorch/pytorch/blob/main/torch/csrc/jit/codegen/cuda/README.md)。
- en: '[References](#id21)'
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[参考资料](#id21)'
- en: '[Python Language Reference Coverage](jit_python_reference.html)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python语言参考覆盖](jit_python_reference.html)'
- en: '[TorchScript Unsupported PyTorch Constructs](jit_unsupported.html)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TorchScript不支持的PyTorch构造](jit_unsupported.html)'
