- en: torch.special
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: torch.special
- en: 原文：[https://pytorch.org/docs/stable/special.html](https://pytorch.org/docs/stable/special.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/docs/stable/special.html](https://pytorch.org/docs/stable/special.html)
- en: The torch.special module, modeled after SciPy’s [special](https://docs.scipy.org/doc/scipy/reference/special.html)
    module.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: torch.special模块，模仿SciPy的[special](https://docs.scipy.org/doc/scipy/reference/special.html)模块。
- en: '## Functions'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 函数'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Airy function $\text{Ai}\left(\text{input}\right)$Ai(input).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Airy函数$\text{Ai}\left(\text{input}\right)$。
- en: Parameters
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输入张量。'
- en: Keyword Arguments
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输出张量（可选）- 输出张量。'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Bessel function of the first kind of order $0$0.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一类贝塞尔函数的阶数为$0$。
- en: Parameters
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输入张量。'
- en: Keyword Arguments
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输出张量（可选）- 输出张量。'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Bessel function of the first kind of order $1$1.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一类贝塞尔函数的阶数为$1$。
- en: Parameters
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输入张量。'
- en: Keyword Arguments
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输出张量（可选）- 输出张量。'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Computes the logarithmic derivative of the gamma function on input.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 计算输入上的伽玛函数的对数导数。
- en: $\digamma(x) = \frac{d}{dx} \ln\left(\Gamma\left(x\right)\right) = \frac{\Gamma'(x)}{\Gamma(x)}$
    ϝ(x)=dxd​ln(Γ(x))=Γ(x)Γ′(x)​
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: $\digamma(x) = \frac{d}{dx} \ln\left(\Gamma\left(x\right)\right) = \frac{\Gamma'(x)}{\Gamma(x)}$
- en: Parameters
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the tensor
    to compute the digamma function on'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输入张量。在其上计算digamma函数的张量'
- en: Keyword Arguments
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输出张量（可选）- 输出张量。'
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This function is similar to SciPy’s scipy.special.digamma.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数类似于SciPy的scipy.special.digamma。
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: From PyTorch 1.8 onwards, the digamma function returns -Inf for 0. Previously
    it returned NaN for 0.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从PyTorch 1.8开始，digamma函数对于0返回-Inf。之前对于0返回NaN。
- en: 'Example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Computes the entropy on `input` (as defined below), elementwise.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 计算输入上的熵（如下所定义），逐元素。
- en: $\begin{align} \text{entr(x)} = \begin{cases} -x * \ln(x) & x > 0 \\ 0 & x =
    0.0 \\ -\infty & x < 0 \end{cases} \end{align}$ entr(x)=⎩⎨⎧​−x∗ln(x)0−∞​x>0x=0.0x<0​​​
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: $\begin{align} \text{entr(x)} = \begin{cases} -x * \ln(x) & x > 0 \\ 0 & x =
    0.0 \\ -\infty & x < 0 \end{cases} \end{align}$
- en: Parameters
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输入张量。'
- en: Keyword Arguments
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输出张量（可选）- 输出张量。'
- en: 'Example::'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Computes the error function of `input`. The error function is defined as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 计算输入的误差函数。误差函数定义如下：
- en: $\mathrm{erf}(x) = \frac{2}{\sqrt{\pi}} \int_{0}^{x} e^{-t^2} dt$ erf(x)=π​2​∫0x​e−t2dt
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: $\mathrm{erf}(x) = \frac{2}{\sqrt{\pi}} \int_{0}^{x} e^{-t^2} dt$
- en: Parameters
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输入张量。'
- en: Keyword Arguments
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输出张量（可选）- 输出张量。'
- en: 'Example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Computes the complementary error function of `input`. The complementary error
    function is defined as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 计算输入的互补误差函数。互补误差函数定义如下：
- en: $\mathrm{erfc}(x) = 1 - \frac{2}{\sqrt{\pi}} \int_{0}^{x} e^{-t^2} dt$ erfc(x)=1−π​2​∫0x​e−t2dt
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: $\mathrm{erfc}(x) = 1 - \frac{2}{\sqrt{\pi}} \int_{0}^{x} e^{-t^2} dt$
- en: Parameters
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输入张量。'
- en: Keyword Arguments
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输出张量（可选）- 输出张量。'
- en: 'Example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Computes the scaled complementary error function for each element of `input`.
    The scaled complementary error function is defined as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 计算输入的每个元素的缩放互补误差函数。缩放互补误差函数定义如下：
- en: $\mathrm{erfcx}(x) = e^{x^2} \mathrm{erfc}(x)$ erfcx(x)=ex2erfc(x)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: $\mathrm{erfcx}(x) = e^{x^2} \mathrm{erfc}(x)$
- en: Parameters
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输入张量。'
- en: Keyword Arguments
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输出张量（可选）- 输出张量。'
- en: 'Example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Computes the inverse error function of `input`. The inverse error function
    is defined in the range $(-1, 1)$(−1,1) as:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 计算输入的逆误差函数。逆误差函数在范围$(-1, 1)$内定义如下：
- en: $\mathrm{erfinv}(\mathrm{erf}(x)) = x$ erfinv(erf(x))=x
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: $\mathrm{erfinv}(\mathrm{erf}(x)) = x$
- en: Parameters
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输入张量。'
- en: Keyword Arguments
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输出张量（可选）- 输出张量。'
- en: 'Example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Computes the base two exponential function of `input`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 计算输入的以2为底的指数函数。
- en: $y_{i} = 2^{x_{i}}$ yi​=2xi​
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: $y_{i} = 2^{x_{i}}$
- en: Parameters
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '- 输入张量。'
- en: Keyword Arguments
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*，* *可选*）- 输出张量。'
- en: 'Example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Computes the expit (also known as the logistic sigmoid function) of the elements
    of `input`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 计算`input`元素的expit（也称为逻辑Sigmoid函数）。
- en: $\text{out}_{i} = \frac{1}{1 + e^{-\text{input}_{i}}}$ outi​=1+e−inputi​1​
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = \frac{1}{1 + e^{-\text{input}_{i}}}$ outi​=1+e−inputi​1​
- en: Parameters
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")）- 输入张量。'
- en: Keyword Arguments
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*，* *可选*）- 输出张量。'
- en: 'Example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Computes the exponential of the elements minus 1 of `input`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 计算`input`元素减1的指数。
- en: $y_{i} = e^{x_{i}} - 1$ yi​=exi​−1
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: $y_{i} = e^{x_{i}} - 1$ yi​=exi​−1
- en: Note
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This function provides greater precision than exp(x) - 1 for small values of
    x.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较小的x值，此函数提供比exp(x) - 1更高的精度。
- en: Parameters
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")）- 输入张量。'
- en: Keyword Arguments
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*，* *可选*）- 输出张量。'
- en: 'Example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Computes the regularized lower incomplete gamma function:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 计算正则化的下不完全伽玛函数：
- en: $\text{out}_{i} = \frac{1}{\Gamma(\text{input}_i)} \int_0^{\text{other}_i} t^{\text{input}_i-1}
    e^{-t} dt$ outi​=Γ(inputi​)1​∫0otheri​​tinputi​−1e−tdt
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = \frac{1}{\Gamma(\text{input}_i)} \int_0^{\text{other}_i} t^{\text{input}_i-1}
    e^{-t} dt$ outi​=Γ(inputi​)1​∫0otheri​​tinputi​−1e−tdt
- en: where both $\text{input}_i$inputi​ and $\text{other}_i$otheri​ are weakly positive
    and at least one is strictly positive. If both are zero or either is negative
    then $\text{out}_i=\text{nan}$outi​=nan. $\Gamma(\cdot)$Γ(⋅) in the equation above
    is the gamma function,
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 其中$\text{input}_i$inputi​和$\text{other}_i$otheri​均为弱正且至少一个严格为正。如果两者都为零或其中一个为负，则$\text{out}_i=\text{nan}$outi​=nan。上述方程中的$\Gamma(\cdot)$Γ(⋅)是伽玛函数，
- en: $\Gamma(\text{input}_i) = \int_0^\infty t^{(\text{input}_i-1)} e^{-t} dt.$ Γ(inputi​)=∫0∞​t(inputi​−1)e−tdt.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: $\Gamma(\text{input}_i) = \int_0^\infty t^{(\text{input}_i-1)} e^{-t} dt.$ Γ(inputi​)=∫0∞​t(inputi​−1)e−tdt.
- en: See [`torch.special.gammaincc()`](#torch.special.gammaincc "torch.special.gammaincc")
    and [`torch.special.gammaln()`](#torch.special.gammaln "torch.special.gammaln")
    for related functions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有关相关函数，请参见[`torch.special.gammaincc()`](#torch.special.gammaincc "torch.special.gammaincc")和[`torch.special.gammaln()`](#torch.special.gammaln
    "torch.special.gammaln")。
- en: Supports [broadcasting to a common shape](notes/broadcasting.html#broadcasting-semantics)
    and float inputs.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 支持[广播到公共形状](notes/broadcasting.html#broadcasting-semantics)和浮点输入。
- en: Note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The backward pass with respect to `input` is not yet supported. Please open
    an issue on PyTorch’s Github to request it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不支持对`input`的反向传播。请在PyTorch的Github上提出问题以请求支持。
- en: Parameters
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the first
    non-negative input tensor'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")）- 第一个非负输入张量'
- en: '**other** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the second
    non-negative input tensor'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**other**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")）- 第二个非负输入张量'
- en: Keyword Arguments
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*，* *可选*）- 输出张量。'
- en: 'Example:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Computes the regularized upper incomplete gamma function:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 计算正则化的上不完全伽玛函数：
- en: $\text{out}_{i} = \frac{1}{\Gamma(\text{input}_i)} \int_{\text{other}_i}^{\infty}
    t^{\text{input}_i-1} e^{-t} dt$ outi​=Γ(inputi​)1​∫otheri​∞​tinputi​−1e−tdt
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = \frac{1}{\Gamma(\text{input}_i)} \int_{\text{other}_i}^{\infty}
    t^{\text{input}_i-1} e^{-t} dt$ outi​=Γ(inputi​)1​∫otheri​∞​tinputi​−1e−tdt
- en: where both $\text{input}_i$inputi​ and $\text{other}_i$otheri​ are weakly positive
    and at least one is strictly positive. If both are zero or either is negative
    then $\text{out}_i=\text{nan}$outi​=nan. $\Gamma(\cdot)$Γ(⋅) in the equation above
    is the gamma function,
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 其中$\text{input}_i$inputi​和$\text{other}_i$otheri​均为弱正且至少一个严格为正。如果两者都为零或其中一个为负，则$\text{out}_i=\text{nan}$outi​=nan。上述方程中的$\Gamma(\cdot)$Γ(⋅)是伽玛函数，
- en: $\Gamma(\text{input}_i) = \int_0^\infty t^{(\text{input}_i-1)} e^{-t} dt.$ Γ(inputi​)=∫0∞​t(inputi​−1)e−tdt.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: $\Gamma(\text{input}_i) = \int_0^\infty t^{(\text{input}_i-1)} e^{-t} dt.$ Γ(inputi​)=∫0∞​t(inputi​−1)e−tdt.
- en: See [`torch.special.gammainc()`](#torch.special.gammainc "torch.special.gammainc")
    and [`torch.special.gammaln()`](#torch.special.gammaln "torch.special.gammaln")
    for related functions.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有关相关函数，请参见[`torch.special.gammainc()`](#torch.special.gammainc "torch.special.gammainc")和[`torch.special.gammaln()`](#torch.special.gammaln
    "torch.special.gammaln")。
- en: Supports [broadcasting to a common shape](notes/broadcasting.html#broadcasting-semantics)
    and float inputs.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 支持[广播到公共形状](notes/broadcasting.html#broadcasting-semantics)和浮点输入。
- en: Note
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The backward pass with respect to `input` is not yet supported. Please open
    an issue on PyTorch’s Github to request it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不支持对`input`的反向传播。请在PyTorch的Github上提出问题以请求支持。
- en: Parameters
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the first
    non-negative input tensor'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")）- 第一个非负输入张量'
- en: '**other** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the second
    non-negative input tensor'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**other**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")）- 第二个非负输入张量'
- en: Keyword Arguments
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*，* *可选*）- 输出张量。'
- en: 'Example:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Computes the natural logarithm of the absolute value of the gamma function on
    `input`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 计算`input`上伽玛函数绝对值的自然对数。
- en: $\text{out}_{i} = \ln \Gamma(|\text{input}_{i}|)$ outi​=lnΓ(∣inputi​∣)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = \ln \Gamma(|\text{input}_{i}|)$ outi​=lnΓ(∣inputi​∣)
- en: Parameters
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")）- 输入张量。'
- en: Keyword Arguments
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*，* *可选*）- 输出张量。'
- en: 'Example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Computes the zeroth order modified Bessel function of the first kind for each
    element of `input`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 计算每个`input`元素的第零阶修正贝塞尔函数（如下所定义）。
- en: $\text{out}_{i} = I_0(\text{input}_{i}) = \sum_{k=0}^{\infty} \frac{(\text{input}_{i}^2/4)^k}{(k!)^2}$
    outi​=I0​(inputi​)=k=0∑∞​(k!)2(inputi2​/4)k​
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = I_0(\text{input}_{i}) = \sum_{k=0}^{\infty} \frac{(\text{input}_{i}^2/4)^k}{(k!)^2}$
- en: Parameters
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**input**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 输入张量'
- en: Keyword Arguments
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*，*可选） - 输出张量。'
- en: 'Example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Computes the exponentially scaled zeroth order modified Bessel function of the
    first kind (as defined below) for each element of `input`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 计算每个`input`元素的指数缩放的第零阶修正贝塞尔函数（如下所定义）。
- en: $\text{out}_{i} = \exp(-|x|) * i0(x) = \exp(-|x|) * \sum_{k=0}^{\infty} \frac{(\text{input}_{i}^2/4)^k}{(k!)^2}$
    outi​=exp(−∣x∣)∗i0(x)=exp(−∣x∣)∗k=0∑∞​(k!)2(inputi2​/4)k​
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = \exp(-|x|) * i0(x) = \exp(-|x|) * \sum_{k=0}^{\infty} \frac{(\text{input}_{i}^2/4)^k}{(k!)^2}$
- en: Parameters
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**input**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 输入张量。'
- en: Keyword Arguments
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*，*可选） - 输出张量。'
- en: 'Example::'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Computes the first order modified Bessel function of the first kind (as defined
    below) for each element of `input`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 计算每个`input`元素的第一类修正贝塞尔函数（如下所定义）。
- en: $\text{out}_{i} = \frac{(\text{input}_{i})}{2} * \sum_{k=0}^{\infty} \frac{(\text{input}_{i}^2/4)^k}{(k!)
    * (k+1)!}$ outi​=2(inputi​)​∗k=0∑∞​(k!)∗(k+1)!(inputi2​/4)k​
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = \frac{(\text{input}_{i})}{2} * \sum_{k=0}^{\infty} \frac{(\text{input}_{i}^2/4)^k}{(k!)
    * (k+1)!}$
- en: Parameters
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**input**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 输入张量。'
- en: Keyword Arguments
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*，*可选） - 输出张量。'
- en: 'Example::'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE32]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Computes the exponentially scaled first order modified Bessel function of the
    first kind (as defined below) for each element of `input`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 计算每个`input`元素的指数缩放的第一类修正贝塞尔函数（如下所定义）。
- en: $\text{out}_{i} = \exp(-|x|) * i1(x) = \exp(-|x|) * \frac{(\text{input}_{i})}{2}
    * \sum_{k=0}^{\infty} \frac{(\text{input}_{i}^2/4)^k}{(k!) * (k+1)!}$ outi​=exp(−∣x∣)∗i1(x)=exp(−∣x∣)∗2(inputi​)​∗k=0∑∞​(k!)∗(k+1)!(inputi2​/4)k​
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = \exp(-|x|) * i1(x) = \exp(-|x|) * \frac{(\text{input}_{i})}{2}
    * \sum_{k=0}^{\infty} \frac{(\text{input}_{i}^2/4)^k}{(k!) * (k+1)!}$
- en: Parameters
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 输入张量。
- en: Keyword Arguments
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*，*可选） - 输出张量。'
- en: 'Example::'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Alias for [`torch.log1p()`](generated/torch.log1p.html#torch.log1p "torch.log1p").
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[`torch.log1p()`](generated/torch.log1p.html#torch.log1p "torch.log1p")的别名。'
- en: '[PRE36]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Computes the log of the area under the standard Gaussian probability density
    function, integrated from minus infinity to `input`, elementwise.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 计算标准高斯概率密度函数下面积的对数，从负无穷到`input`，逐元素。
- en: $\text{log\_ndtr}(x) = \log\left(\frac{1}{\sqrt{2 \pi}}\int_{-\infty}^{x} e^{-\frac{1}{2}t^2}
    dt \right)$ log_ndtr(x)=log(2π​1​∫−∞x​e−21​t2dt)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{log\_ndtr}(x) = \log\left(\frac{1}{\sqrt{2 \pi}}\int_{-\infty}^{x} e^{-\frac{1}{2}t^2}
    dt \right)$
- en: Parameters
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**input**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 输入张量。'
- en: Keyword Arguments
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*，*可选） - 输出张量。'
- en: 'Example::'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Computes softmax followed by a logarithm.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 计算softmax后跟对数。
- en: 'While mathematically equivalent to log(softmax(x)), doing these two operations
    separately is slower and numerically unstable. This function is computed as:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在数学上等价于log(softmax(x))，但分别执行这两个操作会更慢且数值不稳定。此函数计算如下：
- en: $\text{log\_softmax}(x_{i}) = \log\left(\frac{\exp(x_i) }{ \sum_j \exp(x_j)}
    \right)$ log_softmax(xi​)=log(∑j​exp(xj​)exp(xi​)​)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{log\_softmax}(x_{i}) = \log\left(\frac{\exp(x_i) }{ \sum_j \exp(x_j)}
    \right)$
- en: Parameters
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – input'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**input**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 输入'
- en: '**dim** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – A dimension along which log_softmax will be computed.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dim**（[*int*](https://docs.python.org/3/library/functions.html#int "(在Python
    v3.12中)")） - log_softmax将计算的维度。'
- en: '**dtype** ([`torch.dtype`](tensor_attributes.html#torch.dtype "torch.dtype"),
    optional) – the desired data type of returned tensor. If specified, the input
    tensor is cast to `dtype` before the operation is performed. This is useful for
    preventing data type overflows. Default: None.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dtype**（[`torch.dtype`](tensor_attributes.html#torch.dtype "torch.dtype")，可选）
    - 返回张量的期望数据类型。如果指定，操作执行前将输入张量转换为`dtype`。这对于防止数据类型溢出很有用。默认值：无。'
- en: 'Example::'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE39]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Returns a new tensor with the logit of the elements of `input`. `input` is clamped
    to [eps, 1 - eps] when eps is not None. When eps is None and `input` < 0 or `input`
    > 1, the function will yields NaN.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新张量，其中包含`input`元素的logit。当eps不为None时，`input`被夹在[eps, 1 - eps]之间。当eps为None且`input`
    < 0或`input` > 1时，函数将产生NaN。
- en: $\begin{align} y_{i} &= \ln(\frac{z_{i}}{1 - z_{i}}) \\ z_{i} &= \begin{cases}
    x_{i} & \text{if eps is None} \\ \text{eps} & \text{if } x_{i} < \text{eps} \\
    x_{i} & \text{if } \text{eps} \leq x_{i} \leq 1 - \text{eps} \\ 1 - \text{eps}
    & \text{if } x_{i} > 1 - \text{eps} \end{cases} \end{align}$ yi​zi​​=ln(1−zi​zi​​)=⎩⎨⎧​xi​epsxi​1−eps​if eps is Noneif xi​<epsif eps≤xi​≤1−epsif xi​>1−eps​​​
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: $\begin{align} y_{i} &= \ln(\frac{z_{i}}{1 - z_{i}}) \\ z_{i} &= \begin{cases}
    x_{i} & \text{if eps is None} \\ \text{eps} & \text{if } x_{i} < \text{eps} \\
    x_{i} & \text{if } \text{eps} \leq x_{i} \leq 1 - \text{eps} \\ 1 - \text{eps}
    & \text{if } x_{i} > 1 - \text{eps} \end{cases} \end{align}$
- en: Parameters
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"））- 输入张量。'
- en: '**eps** ([*float*](https://docs.python.org/3/library/functions.html#float "(in
    Python v3.12)")*,* *optional*) – the epsilon for input clamp bound. Default: `None`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**eps**（[*float*](https://docs.python.org/3/library/functions.html#float "(在Python
    v3.12中)")*,* *可选*）- 输入夹紧边界的epsilon。默认值：`None`'
- en: Keyword Arguments
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*）- 输出张量。'
- en: 'Example:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '示例:'
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Alias for [`torch.logsumexp()`](generated/torch.logsumexp.html#torch.logsumexp
    "torch.logsumexp").
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[`torch.logsumexp()`](generated/torch.logsumexp.html#torch.logsumexp "torch.logsumexp")的别名。'
- en: '[PRE43]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Computes the [multivariate log-gamma function](https://en.wikipedia.org/wiki/Multivariate_gamma_function)
    with dimension $p$p element-wise, given by
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 计算多元对数伽玛函数，维度为$p$，逐元素给出
- en: $\log(\Gamma_{p}(a)) = C + \displaystyle \sum_{i=1}^{p} \log\left(\Gamma\left(a
    - \frac{i - 1}{2}\right)\right)$ log(Γp​(a))=C+i=1∑p​log(Γ(a−2i−1​))
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: $\log(\Gamma_{p}(a)) = C + \displaystyle \sum_{i=1}^{p} \log\left(\Gamma\left(a
    - \frac{i - 1}{2}\right)\right)$
- en: where $C = \log(\pi) \cdot \frac{p (p - 1)}{4}$C=log(π)⋅4p(p−1)​ and $\Gamma(-)$Γ(−)
    is the Gamma function.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 其中$C = \log(\pi) \cdot \frac{p (p - 1)}{4}$，$\Gamma(-)$是Gamma函数。
- en: All elements must be greater than $\frac{p - 1}{2}$2p−1​, otherwise the behavior
    is undefiend.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 所有元素必须大于$\frac{p - 1}{2}$，否则行为未定义。
- en: Parameters
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the tensor
    to compute the multivariate log-gamma function'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"））- 计算多元对数伽玛函数的张量'
- en: '**p** ([*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.12)")) – the number of dimensions'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**p**（[*int*](https://docs.python.org/3/library/functions.html#int "(在Python
    v3.12中)")）- 维度的数量'
- en: Keyword Arguments
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*）- 输出张量。'
- en: 'Example:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '示例:'
- en: '[PRE44]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Computes the area under the standard Gaussian probability density function,
    integrated from minus infinity to `input`, elementwise.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 计算标准高斯概率密度函数下的面积，从负无穷积分到`输入`，逐元素计算。
- en: $\text{ndtr}(x) = \frac{1}{\sqrt{2 \pi}}\int_{-\infty}^{x} e^{-\frac{1}{2}t^2}
    dt$ ndtr(x)=2π​1​∫−∞x​e−21​t2dt
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{ndtr}(x) = \frac{1}{\sqrt{2 \pi}}\int_{-\infty}^{x} e^{-\frac{1}{2}t^2}
    dt$
- en: Parameters
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"））- 输入张量。'
- en: Keyword Arguments
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*）- 输出张量。'
- en: 'Example::'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '示例::'
- en: '[PRE46]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Computes the argument, x, for which the area under the Gaussian probability
    density function (integrated from minus infinity to x) is equal to `input`, elementwise.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 计算参数$x$，使得高斯概率密度函数下的面积（从负无穷积分到x）等于`输入`，逐元素计算。
- en: $\text{ndtri}(p) = \sqrt{2}\text{erf}^{-1}(2p - 1)$ ndtri(p)=2​erf−1(2p−1)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{ndtri}(p) = \sqrt{2}\text{erf}^{-1}(2p - 1)$
- en: Note
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Also known as quantile function for Normal Distribution.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为正态分布的分位函数。
- en: Parameters
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"））- 输入张量。'
- en: Keyword Arguments
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*）- 输出张量。'
- en: 'Example::'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '示例::'
- en: '[PRE48]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Computes the $n^{th}$nth derivative of the digamma function on `input`. $n \geq
    0$n≥0 is called the order of the polygamma function.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 计算`输入`上的第$n$阶digamma函数的导数。$n \geq 0$
- en: $\psi^{(n)}(x) = \frac{d^{(n)}}{dx^{(n)}} \psi(x)$ ψ(n)(x)=dx(n)d(n)​ψ(x)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: $\psi^{(n)}(x) = \frac{d^{(n)}}{dx^{(n)}} \psi(x)$
- en: Note
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This function is implemented only for nonnegative integers $n \geq 0$n≥0.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数仅实现非负整数$n \geq 0$。
- en: Parameters
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**n** ([*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.12)")) – the order of the polygamma function'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**n**（[*int*](https://docs.python.org/3/library/functions.html#int "(在Python
    v3.12中)")）- polygamma函数的阶数'
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"））- 输入张量。'
- en: Keyword Arguments
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*）- 输出张量。'
- en: 'Example::'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '示例::'
- en: '[PRE50]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Alias for [`torch.special.digamma()`](#torch.special.digamma "torch.special.digamma").
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '[`torch.special.digamma()`](#torch.special.digamma "torch.special.digamma")的别名。'
- en: '[PRE52]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Alias for [`torch.round()`](generated/torch.round.html#torch.round "torch.round").
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[`torch.round()`](generated/torch.round.html#torch.round "torch.round")的别名。'
- en: '[PRE53]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Scaled modified Bessel function of the second kind of order $0$0.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 第二类修正贝塞尔函数的缩放形式，阶数为$0$。
- en: Parameters
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"））- 输入张量。'
- en: Keyword Arguments
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**（[*张量*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*）- 输出张量。'
- en: '[PRE54]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Scaled modified Bessel function of the second kind of order $1$1.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 第二类修正贝塞尔函数的缩放形式，阶数为$1$。
- en: Parameters
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**（[*张量*](tensors.html#torch.Tensor "torch.Tensor"））- 输入张量。'
- en: Keyword Arguments
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*） - 输出张量。'
- en: '[PRE55]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Computes the normalized sinc of `input.`
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 计算`input`的归一化sinc。
- en: $\text{out}_{i} = \begin{cases} 1, & \text{if}\ \text{input}_{i}=0 \\ \sin(\pi
    \text{input}_{i}) / (\pi \text{input}_{i}), & \text{otherwise} \end{cases}$ outi​={1,sin(πinputi​)/(πinputi​),​if inputi​=0otherwise​
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = \begin{cases} 1, & \text{if}\ \text{input}_{i}=0 \\ \sin(\pi
    \text{input}_{i}) / (\pi \text{input}_{i}), & \text{otherwise} \end{cases}$
- en: Parameters
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**input**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 输入张量。'
- en: Keyword Arguments
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*） - 输出张量。'
- en: 'Example::'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '示例::'
- en: '[PRE56]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Computes the softmax function.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 计算softmax函数。
- en: 'Softmax is defined as:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Softmax定义为：
- en: $\text{Softmax}(x_{i}) = \frac{\exp(x_i)}{\sum_j \exp(x_j)}$Softmax(xi​)=∑j​exp(xj​)exp(xi​)​
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{Softmax}(x_{i}) = \frac{\exp(x_i)}{\sum_j \exp(x_j)}$
- en: It is applied to all slices along dim, and will re-scale them so that the elements
    lie in the range [0, 1] and sum to 1.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 应用于沿dim的所有切片，并将它们重新缩放，使元素位于范围[0, 1]并总和为1。
- en: Parameters
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – input'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**input**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 输入'
- en: '**dim** ([*int*](https://docs.python.org/3/library/functions.html#int "(in
    Python v3.12)")) – A dimension along which softmax will be computed.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dim**（[*int*](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.12)")） - 将进行softmax计算的维度。'
- en: '**dtype** ([`torch.dtype`](tensor_attributes.html#torch.dtype "torch.dtype"),
    optional) – the desired data type of returned tensor. If specified, the input
    tensor is cast to `dtype` before the operation is performed. This is useful for
    preventing data type overflows. Default: None.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dtype**（[`torch.dtype`](tensor_attributes.html#torch.dtype "torch.dtype")，可选）
    - 返回张量的期望数据类型。如果指定，操作执行之前将输入张量转换为`dtype`。这对于防止数据类型溢出很有用。默认值：无。'
- en: 'Examples::'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '示例::'
- en: '[PRE58]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Spherical Bessel function of the first kind of order $0$0.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 第一类零阶球贝塞尔函数。
- en: Parameters
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '**input**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 输入张量。'
- en: Keyword Arguments
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*） - 输出张量。'
- en: '[PRE60]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Computes `input * log1p(other)` with the following cases.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下情况计算`input * log1p(other)`。
- en: $\text{out}_{i} = \begin{cases} \text{NaN} & \text{if } \text{other}_{i} = \text{NaN}
    \\ 0 & \text{if } \text{input}_{i} = 0.0 \text{ and } \text{other}_{i} != \text{NaN}
    \\ \text{input}_{i} * \text{log1p}(\text{other}_{i})& \text{otherwise} \end{cases}$
    outi​=⎩⎨⎧​NaN0inputi​∗log1p(otheri​)​if otheri​=NaNif inputi​=0.0 and otheri​!=NaNotherwise​
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = \begin{cases} \text{NaN} & \text{if } \text{other}_{i} = \text{NaN}
    \\ 0 & \text{if } \text{input}_{i} = 0.0 \text{ and } \text{other}_{i} != \text{NaN}
    \\ \text{input}_{i} * \text{log1p}(\text{other}_{i})& \text{otherwise} \end{cases}$
- en: Similar to SciPy’s scipy.special.xlog1py.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于SciPy的scipy.special.xlog1py。
- en: Parameters
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** (*Number* *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – Multiplier'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**input**（*Number* *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 乘数'
- en: '**other** (*Number* *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – Argument'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**other**（*Number* *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 参数'
- en: Note
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At least one of `input` or `other` must be a tensor.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`input`或`other`中至少有一个必须是张量。'
- en: Keyword Arguments
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*） - 输出张量。'
- en: 'Example:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE61]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Computes `input * log(other)` with the following cases.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下情况计算`input * log(other)`。
- en: $\text{out}_{i} = \begin{cases} \text{NaN} & \text{if } \text{other}_{i} = \text{NaN}
    \\ 0 & \text{if } \text{input}_{i} = 0.0 \\ \text{input}_{i} * \log{(\text{other}_{i})}
    & \text{otherwise} \end{cases}$ outi​=⎩⎨⎧​NaN0inputi​∗log(otheri​)​if otheri​=NaNif inputi​=0.0otherwise​
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: $\text{out}_{i} = \begin{cases} \text{NaN} & \text{if } \text{other}_{i} = \text{NaN}
    \\ 0 & \text{if } \text{input}_{i} = 0.0 \\ \text{input}_{i} * \log{(\text{other}_{i})}
    & \text{otherwise} \end{cases}$
- en: Similar to SciPy’s scipy.special.xlogy.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于SciPy的scipy.special.xlogy。
- en: Parameters
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** (*Number* *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – Multiplier'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**input**（*Number* *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 乘数'
- en: '**other** (*Number* *or* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor"))
    – Argument'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**other**（*Number* *或* [*Tensor*](tensors.html#torch.Tensor "torch.Tensor")）
    - 参数'
- en: Note
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At least one of `input` or `other` must be a tensor.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`input`或`other`中至少有一个必须是张量。'
- en: Keyword Arguments
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*） - 输出张量。'
- en: 'Example:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE63]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Computes the Hurwitz zeta function, elementwise.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 逐元素计算Hurwitz zeta函数。
- en: $\zeta(x, q) = \sum_{k=0}^{\infty} \frac{1}{(k + q)^x}$ ζ(x,q)=k=0∑∞​(k+q)x1​
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: $\zeta(x, q) = \sum_{k=0}^{\infty} \frac{1}{(k + q)^x}$
- en: Parameters
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**input** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor corresponding to x.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**input**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 与x对应的输入张量。'
- en: '**other** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")) – the input
    tensor corresponding to q.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**other**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")） - 与q对应的输入张量。'
- en: Note
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Riemann zeta function corresponds to the case when q = 1
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Riemann zeta函数对应于q = 1的情况
- en: Keyword Arguments
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字参数
- en: '**out** ([*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *optional*)
    – the output tensor.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**（[*Tensor*](tensors.html#torch.Tensor "torch.Tensor")*,* *可选*） - 输出张量。'
- en: 'Example::'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '示例::'
- en: '[PRE65]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
