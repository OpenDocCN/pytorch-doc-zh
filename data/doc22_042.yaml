- en: Understanding CUDA Memory Usage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解CUDA内存使用情况
- en: 原文：[https://pytorch.org/docs/stable/torch_cuda_memory.html](https://pytorch.org/docs/stable/torch_cuda_memory.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/docs/stable/torch_cuda_memory.html](https://pytorch.org/docs/stable/torch_cuda_memory.html)
- en: To debug CUDA memory use, PyTorch provides a way to generate memory snapshots
    that record the state of allocated CUDA memory at any point in time, and optionally
    record the history of allocation events that led up to that snapshot.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调试CUDA内存使用，PyTorch提供了一种生成内存快照的方法，记录分配的CUDA内存在任何时间点的状态，并可选择记录导致该快照的分配事件的历史记录。
- en: The generated snapshots can then be drag and dropped onto the interactiver viewer
    hosted at [pytorch.org/memory_viz](https://pytorch.org/memory_viz) which can be
    used to explore the snapshot.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以将生成的快照拖放到托管在[pytorch.org/memory_viz](https://pytorch.org/memory_viz)上的交互式查看器中，用于探索快照。
- en: Generating a Snapshot
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成快照
- en: 'The common pattern for recording a snapshot is to enable memory history, run
    the code to be observed, and then save a file with a pickled snapshot:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 记录快照的常见模式是启用内存历史记录，运行要观察的代码，然后保存一个包含pickled快照的文件：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using the visualizer
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可视化工具
- en: Open [pytorch.org/memory_viz](https://pytorch.org/memory_viz) and drag/drop
    the pickled snapshot file into the visualizer. The visualizer is a javascript
    application that runs locally on your computer. It does not upload any snapshot
    data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 打开[pytorch.org/memory_viz](https://pytorch.org/memory_viz)，将pickled快照文件拖放到可视化工具中。该可视化工具是一个在您的计算机上本地运行的JavaScript应用程序。它不会上传任何快照数据。
- en: Active Memory Timeline
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动内存时间线
- en: The Active Memory Timeline shows all the live tensors over time in the snapshot
    on a particular GPU. Pan/Zoom over the plot to look at smaller allocations. Mouse
    over allocated blocks to see a stack trace for when that block was allocated,
    and details like its address. The detail slider can be adjusted to render fewer
    allocations and improve performance when there is a lot of data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 活动内存时间线显示了快照中特定GPU上的所有张量随时间的变化。在图表上进行平移/缩放，以查看较小的分配。将鼠标悬停在分配的块上，以查看分配该块时的堆栈跟踪，以及其地址等详细信息。可以调整详细滑块以渲染更少的分配，并在数据量较大时提高性能。
- en: '![_images/active_memory_timeline.png](../Images/eed5d13530c32a9ffc147fbef83865d2.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![_images/active_memory_timeline.png](../Images/eed5d13530c32a9ffc147fbef83865d2.png)'
- en: Allocator State History
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分配器状态历史
- en: The Allocator State History shows individual allocator events in a timeline
    on the left. Select an event in the timeline to see a visual summary of the allocator
    state at that event. This summary shows each individual segment returned from
    cudaMalloc and how it is split up into blocks of individual allocations or free
    space. Mouse over segments and blocks to see the stack trace when the memory was
    allocated. Mouse over events to see the stack trace when the event occurred, such
    as when a tensor was freed. Out of memory errors are reported as OOM events. Looking
    at the state of memory during an OOM may provide insight into why an allocation
    failed even though reserved memory still exists.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 分配器状态历史在左侧的时间轴上显示了单个分配器事件。在时间轴中选择一个事件，以查看该事件时的分配器状态的可视摘要。此摘要显示了从cudaMalloc返回的每个单独段以及如何将其分割为单个分配或空闲空间的块。将鼠标悬停在段和块上，以查看内存分配时的堆栈跟踪。将鼠标悬停在事件上，以查看事件发生时的堆栈跟踪，例如张量何时被释放。内存不足错误报告为OOM事件。查看OOM时的内存状态可能有助于了解为什么分配失败，即使保留的内存仍然存在。
- en: '![_images/allocator_state_history.png](../Images/330e9ea5e1c7c9cf54145afa5cde9d6e.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![_images/allocator_state_history.png](../Images/330e9ea5e1c7c9cf54145afa5cde9d6e.png)'
- en: The stack trace information also reports the address at which an allocation
    occurred. The address b7f064c000000_0 refers to the (b)lock at address 7f064c000000
    which is the “_0”th time this address was allocated. This unique string can be
    looked up in the Active Memory Timeline and searched in the Active State History
    to examine the memory state when a tensor was allocated or freed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈跟踪信息还报告了分配发生的地址。地址b7f064c000000_0指的是地址为7f064c000000的块，这是该地址被分配的“_0”次。可以在活动内存时间线中查找此唯一字符串，并在活动状态历史中搜索，以检查张量分配或释放时的内存状态。
- en: Snapshot API Reference
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快照API参考
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Enable recording of stack traces associated with memory allocations, so you
    can tell what allocated any piece of memory in [`torch.cuda.memory._snapshot()`](#torch.cuda.memory._snapshot
    "torch.cuda.memory._snapshot").
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 启用与内存分配相关的堆栈跟踪记录，这样您就可以知道[`torch.cuda.memory._snapshot()`](#torch.cuda.memory._snapshot
    "torch.cuda.memory._snapshot")中分配了哪些内存片段。
- en: In addition too keeping stack traces with each current allocation and free,
    this will also enable recording of a history of all alloc/free events.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了保留每个当前分配和释放的堆栈跟踪，这也将启用记录所有分配/释放事件的历史记录。
- en: Use [`torch.cuda.memory._snapshot()`](#torch.cuda.memory._snapshot "torch.cuda.memory._snapshot")
    to retrieve this information, and the tools in _memory_viz.py to visualize snapshots.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`torch.cuda.memory._snapshot()`](#torch.cuda.memory._snapshot "torch.cuda.memory._snapshot")来检索此信息，并使用_memory_viz.py中的工具来可视化快照。
- en: The Python trace collection is fast (2us per trace), so you may consider enabling
    this on production jobs if you anticipate ever having to debug memory issues.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Python跟踪收集速度快（每个跟踪为2us），因此如果您预计需要调试内存问题，则可以考虑在生产作业中启用此功能。
- en: C++ trace collection is also fast (~50ns/frame), which for many typical programs
    works out to ~2us per trace, but can vary depending on stack depth.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: C++跟踪收集也很快（~50ns/帧），对于许多典型程序来说，每个跟踪大约为2us，但可能会因堆栈深度而有所变化。
- en: Parameters
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**enabled** (*Literal**[**None**,* *"state"**,* *"all"**]**,* *optional*) –
    None, disable recording memory history. “state”, keep information for currenly
    allocated memory. “all”, additionally keep a history of all alloc/free calls.
    Defaults to “all”.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**enabled**（*字面值*[**None**,* *"state"**,* *"all"**]**,* *可选*) – None，禁用记录内存历史。
    “state”，保留当前分配内存的信息。 “all”，此外还保留所有分配/释放调用的历史记录。默认为“all”。'
- en: '**context** (*Literal**[**None**,* *"state"**,* *"alloc"**,* *"all"**]**,*
    *optional*) – None, Do not record any tracebacks. “state”, Record tracebacks for
    currently allocated memory. “alloc”, additionally keep tracebacks for alloc calls.
    “all”, additionally keep tracebacks for free calls. Defaults to “all”.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**context**（*Literal**[**None**,* *"state"**,* *"alloc"**,* *"all"**]**，“可选”）
    - None，不记录任何tracebacks。“state”，记录当前分配的内存的tracebacks。“alloc”，另外保留分配调用的tracebacks。“all”，另外保留释放调用的tracebacks。默认为“all”。'
- en: '**stacks** (*Literal**[**"python"**,* *"all"**]**,* *optional*) – “python”,
    include Python, TorchScript, and inductor frames in tracebacks “all”, additionally
    include C++ frames Defaults to “all”.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**stacks**（*Literal**[**"python"**,* *"all"**]**，“可选”） - “python”，包括Python、TorchScript和感应器帧在tracebacks中，“all”，另外包括C++帧，默认为“all”。'
- en: '**max_entries** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *optional*) – Keep a maximum of max_entries alloc/free
    events in the recorded history recorded.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**max_entries**（[*int*](https://docs.python.org/3/library/functions.html#int)，“可选”）
    - 在记录的历史记录中保留最多max_entries个分配/释放事件。'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save a snapshot of CUDA memory state at the time it was called.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用时保存CUDA内存状态的快照。
- en: The state is represented as a dictionary with the following structure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 状态表示为具有以下结构的字典。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Returns
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值
- en: The Snapshot dictionary object
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 快照字典对象
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save a pickled version of the torch.memory._snapshot() dictionary to a file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将torch.memory._snapshot()字典的pickled版本保存到文件中。
- en: This file can be opened by the interactive snapshot viewer at pytorch.org/memory_viz
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件可以由pytorch.org/memory_viz上的交互式快照查看器打开
- en: Parameters
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**filename** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")*,* *optional*) – Name of the file to create. Defaults to “dump_snapshot.pickle”.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**filename**（[*str*](https://docs.python.org/3/library/stdtypes.html#str)，“可选”）
    - 要创建的文件名。默认为“dump_snapshot.pickle”。'
