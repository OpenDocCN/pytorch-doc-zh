- en: Benchmark Utils - torch.utils.benchmark
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基准工具 - torch.utils.benchmark
- en: 原文：[https://pytorch.org/docs/stable/benchmark_utils.html](https://pytorch.org/docs/stable/benchmark_utils.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://pytorch.org/docs/stable/benchmark_utils.html](https://pytorch.org/docs/stable/benchmark_utils.html)'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Helper class for measuring execution time of PyTorch statements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用于测量PyTorch语句执行时间的辅助类。
- en: 'For a full tutorial on how to use this class, see: [https://pytorch.org/tutorials/recipes/recipes/benchmark.html](https://pytorch.org/tutorials/recipes/recipes/benchmark.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用此类的完整教程，请参见：[https://pytorch.org/tutorials/recipes/recipes/benchmark.html](https://pytorch.org/tutorials/recipes/recipes/benchmark.html)
- en: 'The PyTorch Timer is based on timeit.Timer (and in fact uses timeit.Timer internally),
    but with several key differences:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch计时器基于timeit.Timer（实际上在内部使用timeit.Timer），但有几个关键区别：
- en: 'Runtime aware:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '运行时感知:'
- en: Timer will perform warmups (important as some elements of PyTorch are lazily
    initialized), set threadpool size so that comparisons are apples-to-apples, and
    synchronize asynchronous CUDA functions when necessary.
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计时器将执行预热（因为PyTorch的某些元素是惰性初始化的），设置线程池大小以便进行苹果对苹果的比较，并在必要时同步异步CUDA函数。
- en: 'Focus on replicates:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 专注于复制品：
- en: When measuring code, and particularly complex kernels / models, run-to-run variation
    is a significant confounding factor. It is expected that all measurements should
    include replicates to quantify noise and allow median computation, which is more
    robust than mean. To that effect, this class deviates from the timeit API by conceptually
    merging timeit.Timer.repeat and timeit.Timer.autorange. (Exact algorithms are
    discussed in method docstrings.) The timeit method is replicated for cases where
    an adaptive strategy is not desired.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在测量代码时，特别是复杂的内核/模型时，运行到运行的变化是一个重要的混淆因素。预计所有测量都应包括复制品以量化噪声并允许中位数计算，这比平均值更稳健。为此，该类从时间API的概念上合并了timeit.Timer.repeat和timeit.Timer.autorange。（确切的算法在方法文档字符串中讨论。）对于不希望使用自适应策略的情况，复制了timeit方法。
- en: 'Optional metadata:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选元数据：
- en: When defining a Timer, one can optionally specify label, sub_label, description,
    and env. (Defined later) These fields are included in the representation of result
    object and by the Compare class to group and display results for comparison.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在定义计时器时，可以选择指定标签、子标签、描述和环境。（稍后定义）这些字段包含在结果对象的表示中，并由Compare类用于分组和显示比较结果。
- en: Instruction counts
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指令计数
- en: In addition to wall times, Timer can run a statement under Callgrind and report
    instructions executed.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了墙上时间，计时器还可以在Callgrind下运行语句并报告执行的指令。
- en: 'Directly analogous to timeit.Timer constructor arguments:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 直接类似于timeit.Timer构造函数参数：
- en: stmt, setup, timer, globals
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: stmt、setup、timer、globals
- en: 'PyTorch Timer specific constructor arguments:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch计时器特定的构造函数参数：
- en: label, sub_label, description, env, num_threads
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 标签、子标签、描述、环境、线程数
- en: Parameters
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**stmt** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – Code snippet to be run in a loop and timed.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**stmt**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12中)")）- 要在循环中运行和计时的代码片段。'
- en: '**setup** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")) – Optional setup code. Used to define variables used in stmt'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12中)")）- 可选的设置代码。用于定义在stmt中使用的变量'
- en: '**global_setup** ([*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")) – (C++ only) Code which is placed at the top level of the
    file for things like #include statements.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局设置**（[*str*](https://docs.python.org/3/library/stdtypes.html#str "(在Python
    v3.12中)")）- （仅限C++）放置在文件顶层的代码，用于#include语句等。'
- en: '**timer** ([*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*[**[**]**,* [*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")*]*) – Callable which returns the current time. If PyTorch
    was built without CUDA or there is no GPU present, this defaults to timeit.default_timer;
    otherwise it will synchronize CUDA before measuring the time.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计时器**（[*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(在Python v3.12中)")*[**[**]**,* [*float*](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12中)")*]*) - 返回当前时间的可调用函数。如果PyTorch没有使用CUDA构建或没有GPU存在，则默认为timeit.default_timer；否则在测量时间之前将同步CUDA。'
- en: '**globals** ([*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")*[*[*Dict*](https://docs.python.org/3/library/typing.html#typing.Dict
    "(in Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*]**]*) – A dict which defines the global variables when stmt
    is being executed. This is the other method for providing variables which stmt
    needs.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局**（[*可选*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(在Python v3.12中)")*[*[*Dict*](https://docs.python.org/3/library/typing.html#typing.Dict
    "(在Python v3.12中)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)")*,* [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(在Python v3.12中)")*]**]*) - 在执行stmt时定义全局变量的字典。这是提供stmt需要的变量的另一种方法。'
- en: '**label** ([*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]*) – String which summarizes stmt. For instance, if stmt
    is “torch.nn.functional.relu(torch.add(x, 1, out=out))” one might set label to
    “ReLU(x + 1)” to improve readability.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**（[*可选*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(在Python v3.12中)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)")*]*) - 概括stmt的字符串。例如，如果stmt是“torch.nn.functional.relu(torch.add(x,
    1, out=out))”，可以将标签设置为“ReLU(x + 1)”以提高可读性。'
- en: '**sub_label** ([*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]*) –'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子标签**（[*可选*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(在Python v3.12中)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12中)")*]*) - '
- en: 'Provide supplemental information to disambiguate measurements with identical
    stmt or label. For instance, in our example above sub_label might be “float” or
    “int”, so that it is easy to differentiate: “ReLU(x + 1): (float)”'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '提供额外信息以消除具有相同stmt或标签的测量的歧义。例如，在我们上面的示例中，sub_label可能是“float”或“int”，这样就很容易区分：“ReLU(x
    + 1): (float)”'
- en: '”ReLU(x + 1): (int)” when printing Measurements or summarizing using Compare.'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在打印Measurements或使用Compare进行总结时，“ReLU(x + 1): (int)”。'
- en: '**description** ([*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]*) –'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**description**（[*可选*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(在Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12)")*]*) -'
- en: 'String to distinguish measurements with identical label and sub_label. The
    principal use of description is to signal to Compare the columns of data. For
    instance one might set it based on the input size to create a table of the form:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于区分具有相同标签和sub_label的测量的字符串。description的主要用途是向Compare信号数据列。例如，可以基于输入大小设置它以创建以下形式的表：
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: using Compare. It is also included when printing a Measurement.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用Compare。在打印Measurement时也包括在内。
- en: '**env** ([*Optional*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(in Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*]*) – This tag indicates that otherwise identical tasks were
    run in different environments, and are therefore not equivalent, for instance
    when A/B testing a change to a kernel. Compare will treat Measurements with different
    env specification as distinct when merging replicate runs.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**env**（[*可选*](https://docs.python.org/3/library/typing.html#typing.Optional
    "(在Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.12)")*]*) - 此标记表示在不同环境中运行了相同任务，因此它们不等效，例如在对内核进行A/B测试时。当合并复制运行时，Compare将处理具有不同env规范的Measurements为不同。'
- en: '**num_threads** ([*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")) – The size of the PyTorch threadpool when executing stmt.
    Single threaded performance is important as both a key inference workload and
    a good indicator of intrinsic algorithmic efficiency, so the default is set to
    one. This is in contrast to the default PyTorch threadpool size which tries to
    utilize all cores.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**num_threads**（[*int*](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.12)")） - 在执行stmt时PyTorch线程池的大小。单线程性能很重要，既是关键的推理工作负载，也是内在算法效率的良好指标，因此默认设置为1。这与默认的PyTorch线程池大小相反，后者尝试利用所有核心。'
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Similar to blocked_autorange but also checks for variablility in measurements
    and repeats until iqr/median is smaller than threshold or max_run_time is reached.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于blocked_autorange，但还检查测量中的变异性，并重复直到iqr/median小于阈值或达到max_run_time。
- en: 'At a high level, adaptive_autorange executes the following pseudo-code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，adaptive_autorange执行以下伪代码：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**threshold** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")) – value of iqr/median threshold for stopping'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**threshold**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12)")） - 停止的iqr/median阈值的值'
- en: '**min_run_time** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")) – total runtime needed before checking threshold'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**min_run_time**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12)")） - 在检查阈值之前所需的总运行时间'
- en: '**max_run_time** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")) – total runtime for all measurements regardless of threshold'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**max_run_time**（[*float*](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.12)")） - 所有测量的总运行时间，无论阈值如何'
- en: Returns
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: A Measurement object that contains measured runtimes and repetition counts,
    and can be used to compute statistics. (mean, median, etc.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 包含测量运行时间和重复计数的Measurement对象，可用于计算统计数据（均值、中位数等）。
- en: Return type
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Measurement*](#torch.utils.benchmark.Measurement "torch.utils.benchmark.utils.common.Measurement")'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Measurement*](#torch.utils.benchmark.Measurement "torch.utils.benchmark.utils.common.Measurement")'
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Measure many replicates while keeping timer overhead to a minimum.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在保持计时器开销最低的情况下测量许多复制品。
- en: 'At a high level, blocked_autorange executes the following pseudo-code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，blocked_autorange执行以下伪代码：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note the variable block_size in the inner loop. The choice of block size is
    important to measurement quality, and must balance two competing objectives:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意内部循环中的变量block_size。块大小的选择对测量质量很重要，必须平衡两个竞争目标：
- en: A small block size results in more replicates and generally better statistics.
  id: totrans-51
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 较小的块大小会产生更多的复制品，通常会有更好的统计数据。
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A large block size better amortizes the cost of timer invocation, and results
    in a less biased measurement. This is important because CUDA synchronization time
    is non-trivial (order single to low double digit microseconds) and would otherwise
    bias the measurement.
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 较大的块大小更好地分摊计时器调用的成本，并导致较少偏倚的测量。这很重要，因为CUDA同步时间不容忽视（单个到低双位数微秒的顺序），否则会影响测量结果。
- en: blocked_autorange sets block_size by running a warmup period, increasing block
    size until timer overhead is less than 0.1% of the overall computation. This value
    is then used for the main measurement loop.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: blocked_autorange通过运行预热期来设置块大小，增加块大小直到计时器开销小于总体计算的0.1%。然后将此值用于主测量循环。
- en: Returns
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: A Measurement object that contains measured runtimes and repetition counts,
    and can be used to compute statistics. (mean, median, etc.)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 包含测量运行时间和重复计数的Measurement对象，可用于计算统计数据（均值、中位数等）。
- en: Return type
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Measurement*](#torch.utils.benchmark.Measurement "torch.utils.benchmark.utils.common.Measurement")'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Measurement*](#torch.utils.benchmark.Measurement "torch.utils.benchmark.utils.common.Measurement")'
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Collect instruction counts using Callgrind.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Callgrind收集指令计数。
- en: Unlike wall times, instruction counts are deterministic (modulo non-determinism
    in the program itself and small amounts of jitter from the Python interpreter.)
    This makes them ideal for detailed performance analysis. This method runs stmt
    in a separate process so that Valgrind can instrument the program. Performance
    is severely degraded due to the instrumentation, however this is ameliorated by
    the fact that a small number of iterations is generally sufficient to obtain good
    measurements.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与墙上时间不同，指令计数是确定性的（除了程序本身的非确定性和来自Python解释器的少量抖动）。这使它们非常适合进行详细的性能分析。此方法在单独的进程中运行stmt，以便Valgrind可以对程序进行仪器化。由于仪器化，性能会严重下降，但是由于通常少量迭代就足以获得良好的测量结果，这一点得到了改善。
- en: In order to to use this method valgrind, callgrind_control, and callgrind_annotate
    must be installed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用这种方法，必须安装valgrind、callgrind_control和callgrind_annotate。
- en: 'Because there is a process boundary between the caller (this process) and the
    stmt execution, globals cannot contain arbitrary in-memory data structures. (Unlike
    timing methods) Instead, globals are restricted to builtins, nn.Modules’s, and
    TorchScripted functions/modules to reduce the surprise factor from serialization
    and subsequent deserialization. The GlobalsBridge class provides more detail on
    this subject. Take particular care with nn.Modules: they rely on pickle and you
    may need to add an import to setup for them to transfer properly.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于调用者（此进程）和stmt执行之间存在进程边界，全局变量不能包含任意的内存数据结构。（与计时方法不同）相反，全局变量仅限于内置函数、nn.Modules和TorchScripted函数/模块，以减少由于序列化和后续反序列化而引起的意外因素。GlobalsBridge类提供了更多关于此主题的详细信息。特别注意nn.Modules：它们依赖pickle，您可能需要为它们添加一个导入以便正确传输。
- en: By default, a profile for an empty statement will be collected and cached to
    indicate how many instructions are from the Python loop which drives stmt.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，将收集并缓存一个空语句的性能分析，以指示有多少指令来自驱动语句的Python循环。
- en: Returns
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: A CallgrindStats object which provides instruction counts and some basic facilities
    for analyzing and manipulating results.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个CallgrindStats对象，提供指令计数和一些基本设施用于分析和操作结果。
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Mirrors the semantics of timeit.Timer.timeit().
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 反映了timeit.Timer.timeit()的语义。
- en: Execute the main statement (stmt) number times. [https://docs.python.org/3/library/timeit.html#timeit.Timer.timeit](https://docs.python.org/3/library/timeit.html#timeit.Timer.timeit)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 执行主语句（stmt）的次数。[https://docs.python.org/3/library/timeit.html#timeit.Timer.timeit](https://docs.python.org/3/library/timeit.html#timeit.Timer.timeit)
- en: Return type
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*Measurement*](#torch.utils.benchmark.Measurement "torch.utils.benchmark.utils.common.Measurement")'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Measurement*](#torch.utils.benchmark.Measurement "torch.utils.benchmark.utils.common.Measurement")'
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The result of a Timer measurement.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器测量的结果。
- en: This class stores one or more measurements of a given statement. It is serializable
    and provides several convenience methods (including a detailed __repr__) for downstream
    consumers.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类存储给定语句的一个或多个测量。它是可序列化的，并为下游消费者提供几种便利方法（包括详细的__repr__）。
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Convenience method for merging replicates.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 用于合并重复实验的便利方法。
- en: Merge will extrapolate times to number_per_run=1 and will not transfer any metadata.
    (Since it might differ between replicates)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 合并将将时间推断为number_per_run=1，并且不会传输任何元数据。（因为在重复实验之间可能会有差异）
- en: Return type
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*List*](https://docs.python.org/3/library/typing.html#typing.List "(in Python
    v3.12)")[[*Measurement*](#torch.utils.benchmark.Measurement "torch.utils.benchmark.utils.common.Measurement")]'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[*List*](https://docs.python.org/3/library/typing.html#typing.List "(在Python
    v3.12中)")[[*Measurement*](#torch.utils.benchmark.Measurement "torch.utils.benchmark.utils.common.Measurement")]'
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Approximate significant figure estimate.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 近似的显著数字估计。
- en: This property is intended to give a convenient way to estimate the precision
    of a measurement. It only uses the interquartile region to estimate statistics
    to try to mitigate skew from the tails, and uses a static z value of 1.645 since
    it is not expected to be used for small values of n, so z can approximate t.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性旨在提供一种方便的方法来估计测量的精度。它仅使用四分位范围来估计统计数据，以尝试减少尾部的偏差，并使用静态z值1.645，因为不希望用于小值n，所以z可以近似于t。
- en: The significant figure estimation used in conjunction with the trim_sigfig method
    to provide a more human interpretable data summary. __repr__ does not use this
    method; it simply displays raw values. Significant figure estimation is intended
    for Compare.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 与trim_sigfig方法一起使用的显著数字估计，以提供更易于人类理解的数据摘要。__repr__不使用此方法；它只显示原始值。显著数字估计用于Compare。
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Top level container for Callgrind results collected by Timer.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由计时器收集的Callgrind结果的顶层容器。
- en: Manipulation is generally done using the FunctionCounts class, which is obtained
    by calling CallgrindStats.stats(…). Several convenience methods are provided as
    well; the most significant is CallgrindStats.as_standardized().
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用FunctionCounts类进行操作，该类通过调用CallgrindStats.stats(…)获得。还提供了几种便利方法；最重要的是CallgrindStats.as_standardized()。
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Strip library names and some prefixes from function strings.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从函数字符串中删除库名称和一些前缀。
- en: 'When comparing two different sets of instruction counts, on stumbling block
    can be path prefixes. Callgrind includes the full filepath when reporting a function
    (as it should). However, this can cause issues when diffing profiles. If a key
    component such as Python or PyTorch was built in separate locations in the two
    profiles, which can result in something resembling:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在比较两组不同的指令计数时，一个障碍可能是路径前缀。Callgrind在报告函数时包括完整的文件路径（应该如此）。但是，在进行性能分析时，这可能会导致问题。如果两个性能分析中的关键组件（如Python或PyTorch）在不同位置构建，可能会导致类似以下的情况：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Stripping prefixes can ameliorate this issue by regularizing the strings and
    causing better cancellation of equivalent call sites when diffing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过去除前缀可以改善这个问题，使字符串规范化，并在进行差异比较时更好地取消等效调用点。
- en: Return type
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*CallgrindStats*](#torch.utils.benchmark.CallgrindStats "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.CallgrindStats")'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[*CallgrindStats*](#torch.utils.benchmark.CallgrindStats "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.CallgrindStats")'
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Returns the total number of instructions executed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 返回执行的指令总数。
- en: See FunctionCounts.denoise() for an explanation of the denoise arg.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 FunctionCounts.denoise() 以了解 denoise 参数的解释。
- en: Return type
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.12)")'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[int](https://docs.python.org/3/library/functions.html#int "(在 Python v3.12
    中)")'
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Diff two sets of counts.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两组计数。
- en: One common reason to collect instruction counts is to determine the the effect
    that a particular change will have on the number of instructions needed to perform
    some unit of work. If a change increases that number, the next logical question
    is “why”. This generally involves looking at what part if the code increased in
    instruction count. This function automates that process so that one can easily
    diff counts on both an inclusive and exclusive basis.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 收集指令计数的一个常见原因是确定某个特定更改对执行某个工作单元所需的指令数量的影响。如果更改增加了该数字，下一个逻辑问题是“为什么”。这通常涉及查看代码的哪个部分增加了指令计数。此函数自动化了该过程，以便可以轻松地在包含和不包含的基础上对计数进行差异。
- en: Return type
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*FunctionCounts*](#torch.utils.benchmark.FunctionCounts "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts")'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[*FunctionCounts*](#torch.utils.benchmark.FunctionCounts "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts")'
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Returns detailed function counts.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 返回详细的函数计数。
- en: Conceptually, the FunctionCounts returned can be thought of as a tuple of (count,
    path_and_function_name) tuples.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，返回的 FunctionCounts 可以被视为一个元组，其中包含 (计数，路径和函数名称) 元组。
- en: inclusive matches the semantics of callgrind. If True, the counts include instructions
    executed by children. inclusive=True is useful for identifying hot spots in code;
    inclusive=False is useful for reducing noise when diffing counts from two different
    runs. (See CallgrindStats.delta(…) for more details)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: inclusive 匹配 callgrind 的语义。如果为 True，则计数包括子级执行的指令。inclusive=True 用于识别代码中的热点；inclusive=False
    用于在比较两次运行的计数时减少噪音。 （有关更多详细信息，请参见 CallgrindStats.delta(…)）
- en: Return type
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*FunctionCounts*](#torch.utils.benchmark.FunctionCounts "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts")'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[*FunctionCounts*](#torch.utils.benchmark.FunctionCounts "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts")'
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Container for manipulating Callgrind results.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 用于操作 Callgrind 结果的容器。
- en: 'It supports:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持：
- en: Addition and subtraction to combine or diff results.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加法和减法以组合或差异结果。
- en: Tuple-like indexing.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似元组索引。
- en: A denoise function which strips CPython calls which are known to be non-deterministic
    and quite noisy.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个去噪函数，用于剥离已知为非确定性且相当嘈杂的 CPython 调用。
- en: Two higher order methods (filter and transform) for custom manipulation.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个高阶方法（filter 和 transform）用于自定义操作。
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Remove known noisy instructions.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 删除已知的嘈杂指令。
- en: Several instructions in the CPython interpreter are rather noisy. These instructions
    involve unicode to dictionary lookups which Python uses to map variable names.
    FunctionCounts is generally a content agnostic container, however this is sufficiently
    important for obtaining reliable results to warrant an exception.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: CPython 解释器中的几条指令相当嘈杂。这些指令涉及 Python 用于将变量名映射到字典查找的 Unicode。FunctionCounts 通常是一个内容不可知的容器，但这对于获得可靠结果是足够重要的，值得例外。
- en: Return type
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*FunctionCounts*](#torch.utils.benchmark.FunctionCounts "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts")'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[*FunctionCounts*](#torch.utils.benchmark.FunctionCounts "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts")'
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Keep only the elements where filter_fn applied to function name returns True.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 仅保留 filter_fn 应用于函数名称返回 True 的元素。
- en: Return type
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*FunctionCounts*](#torch.utils.benchmark.FunctionCounts "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts")'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[*FunctionCounts*](#torch.utils.benchmark.FunctionCounts "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts")'
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Apply map_fn to all of the function names.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将 map_fn 应用于所有函数名称。
- en: This can be used to regularize function names (e.g. stripping irrelevant parts
    of the file path), coalesce entries by mapping multiple functions to the same
    name (in which case the counts are added together), etc.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用于规范化函数名称（例如剥离文件路径的无关部分），通过将多个函数映射到相同名称来合并条目（在这种情况下，计数将相加），等等。
- en: Return type
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[*FunctionCounts*](#torch.utils.benchmark.FunctionCounts "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts")'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[*FunctionCounts*](#torch.utils.benchmark.FunctionCounts "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.FunctionCounts")'
