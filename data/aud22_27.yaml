- en: CTC forced alignment API tutorial
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CTC强制对齐API教程
- en: 原文：[https://pytorch.org/audio/stable/tutorials/ctc_forced_alignment_api_tutorial.html](https://pytorch.org/audio/stable/tutorials/ctc_forced_alignment_api_tutorial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/audio/stable/tutorials/ctc_forced_alignment_api_tutorial.html](https://pytorch.org/audio/stable/tutorials/ctc_forced_alignment_api_tutorial.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Click [here](#sphx-glr-download-tutorials-ctc-forced-alignment-api-tutorial-py)
    to download the full example code
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 点击[这里](#sphx-glr-download-tutorials-ctc-forced-alignment-api-tutorial-py)下载完整示例代码
- en: '**Author**: [Xiaohui Zhang](mailto:xiaohuizhang%40meta.com), [Moto Hira](mailto:moto%40meta.com)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者**：[Xiaohui Zhang](mailto:xiaohuizhang%40meta.com), [Moto Hira](mailto:moto%40meta.com)'
- en: The forced alignment is a process to align transcript with speech. This tutorial
    shows how to align transcripts to speech using [`torchaudio.functional.forced_align()`](../generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align
    "torchaudio.functional.forced_align") which was developed along the work of [Scaling
    Speech Technology to 1,000+ Languages](https://research.facebook.com/publications/scaling-speech-technology-to-1000-languages/).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 强制对齐是将文本与语音对齐的过程。本教程展示了如何使用[`torchaudio.functional.forced_align()`](../generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align)将文本对齐到语音，该函数是在[将语音技术扩展到1000多种语言](https://research.facebook.com/publications/scaling-speech-technology-to-1000-languages/)的工作中开发的。
- en: '[`forced_align()`](../generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align
    "torchaudio.functional.forced_align") has custom CPU and CUDA implementations
    which are more performant than the vanilla Python implementation above, and are
    more accurate. It can also handle missing transcript with special `<star>` token.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`forced_align()`](../generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align)具有自定义的CPU和CUDA实现，比上面的普通Python实现更高效，更准确。它还可以处理带有特殊`<star>`标记的缺失文本。'
- en: There is also a high-level API, [`torchaudio.pipelines.Wav2Vec2FABundle`](../generated/torchaudio.pipelines.Wav2Vec2FABundle.html#torchaudio.pipelines.Wav2Vec2FABundle
    "torchaudio.pipelines.Wav2Vec2FABundle"), which wraps the pre/post-processing
    explained in this tutorial and makes it easy to run forced-alignments. [Forced
    alignment for multilingual data](./forced_alignment_for_multilingual_data_tutorial.html)
    uses this API to illustrate how to align non-English transcripts.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个高级API，[`torchaudio.pipelines.Wav2Vec2FABundle`](../generated/torchaudio.pipelines.Wav2Vec2FABundle.html#torchaudio.pipelines.Wav2Vec2FABundle)，它包装了本教程中解释的预处理/后处理，并使得运行强制对齐变得更加容易。[多语言数据的强制对齐](./forced_alignment_for_multilingual_data_tutorial.html)使用此API来说明如何对齐非英语文本。
- en: Preparation[](#preparation "Permalink to this heading")
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备[](#preparation "跳转到此标题的永久链接")
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: First we prepare the speech data and the transcript we area going to use.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们准备要使用的语音数据和文本。
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Generating emissions[](#generating-emissions "Permalink to this heading")
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成发射[](#generating-emissions "跳转到此标题的永久链接")
- en: '[`forced_align()`](../generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align
    "torchaudio.functional.forced_align") takes emission and token sequences and outputs
    timestaps of the tokens and their scores.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`forced_align()`](../generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align)接受发射和标记序列，并输出标记的时间戳和它们的分数。'
- en: Emission reperesents the frame-wise probability distribution over tokens, and
    it can be obtained by passing waveform to an acoustic model.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 发射表示逐帧的标记概率分布，可以通过将波形传递给声学模型来获得。
- en: Tokens are numerical expression of transcripts. There are many ways to tokenize
    transcripts, but here, we simply map alphabets into integer, which is how labels
    were constructed when the acoustice model we are going to use was trained.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 标记是文本的数字表达。有许多方法可以对文本进行标记，但在这里，我们简单地将字母映射为整数，这是在训练我们将要使用的声学模型时构建标签的方式。
- en: We will use a pre-trained Wav2Vec2 model, [`torchaudio.pipelines.MMS_FA`](../generated/torchaudio.pipelines.MMS_FA.html#torchaudio.pipelines.MMS_FA
    "torchaudio.pipelines.MMS_FA"), to obtain emission and tokenize the transcript.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个预训练的Wav2Vec2模型，[`torchaudio.pipelines.MMS_FA`](../generated/torchaudio.pipelines.MMS_FA.html#torchaudio.pipelines.MMS_FA)，来获取发射和标记文本。
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Frame-wise class probabilities](../Images/c32f061e6dd78030a0acb0683cc73658.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![帧级别的类别概率](../Images/c32f061e6dd78030a0acb0683cc73658.png)'
- en: Tokenize the transcript[](#tokenize-the-transcript "Permalink to this heading")
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对文本进行标记[](#tokenize-the-transcript "跳转到此标题的永久链接")
- en: We create a dictionary, which maps each label into token.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个字典，将每个标签映射到标记。
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: converting transcript to tokens is as simple as
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将文本转换为标记就是这么简单
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Computing alignments[](#computing-alignments "Permalink to this heading")
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算对齐[](#computing-alignments "跳转到此标题的永久链接")
- en: Frame-level alignments[](#frame-level-alignments "Permalink to this heading")
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 帧级别的对齐[](#frame-level-alignments "跳转到此标题的永久链接")
- en: Now we call TorchAudio’s forced alignment API to compute the frame-level alignment.
    For the detail of function signature, please refer to [`forced_align()`](../generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align
    "torchaudio.functional.forced_align").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们调用TorchAudio的强制对齐API来计算帧级别的对齐。有关函数签名的详细信息，请参考[`forced_align()`](../generated/torchaudio.functional.forced_align.html#torchaudio.functional.forced_align)。
- en: '[PRE13]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now let’s look at the output.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下输出。
- en: '[PRE14]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The alignment is expressed in the frame cordinate of the emission, which is
    different from the original waveform.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对齐是以发射的帧坐标表示的，这与原始波形不同。
- en: It contains blank tokens and repeated tokens. The following is the interpretation
    of the non-blank tokens.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含空白标记和重复标记。以下是非空白标记的解释。
- en: '[PRE16]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When same token occured after blank tokens, it is not treated as a repeat, but
    as a new occurrence.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当相同的标记在空白标记之后出现时，它不被视为重复，而是作为一个新的出现。
- en: '[PRE17]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Token-level alignments[](#token-level-alignments "Permalink to this heading")
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标记级别的对齐[](#token-level-alignments "跳转到此标题的永久链接")
- en: Next step is to resolve the repetation, so that each alignment does not depend
    on previous alignments. [`torchaudio.functional.merge_tokens()`](../generated/torchaudio.functional.merge_tokens.html#torchaudio.functional.merge_tokens
    "torchaudio.functional.merge_tokens") computes the [`TokenSpan`](../generated/torchaudio.functional.TokenSpan.html#torchaudio.functional.TokenSpan
    "torchaudio.functional.TokenSpan") object, which represents which token from the
    transcript is present at what time span.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是解决重复，以便每个对齐不依赖于先前的对齐。[`torchaudio.functional.merge_tokens()`](../generated/torchaudio.functional.merge_tokens.html#torchaudio.functional.merge_tokens
    "torchaudio.functional.merge_tokens") 计算表示转录中哪个标记在什么时间跨度出现的 [`TokenSpan`](../generated/torchaudio.functional.TokenSpan.html#torchaudio.functional.TokenSpan
    "torchaudio.functional.TokenSpan") 对象。
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Word-level alignments[](#word-level-alignments "Permalink to this heading")
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单词级别的对齐[](#word-level-alignments "跳转到此标题的永久链接")
- en: Now let’s group the token-level alignments into word-level alignments.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将标记级别的对齐分组成单词级别的对齐。
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Audio previews[](#audio-previews "Permalink to this heading")
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音频预览[](#audio-previews "跳转到此标题的永久链接")
- en: '[PRE21]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: null
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE24]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: null
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE26]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: null
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE28]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: null
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE30]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: null
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE32]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: null
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE34]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: null
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE36]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: null
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE38]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: null
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE40]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: null
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: Visualization[](#visualization "Permalink to this heading")
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可视化[](#visualization "跳转到此标题的永久链接")
- en: Now let’s look at the alignment result and segment the original speech into
    words.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看对齐结果，并将原始语音分割成单词。
- en: '[PRE42]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![Emission](../Images/d047a1551a466fc4548b45cea0074e1a.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![发射](../Images/d047a1551a466fc4548b45cea0074e1a.png)'
- en: Inconsistent treatment of `blank` token[](#inconsistent-treatment-of-blank-token
    "Permalink to this heading")
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不一致处理`blank`标记[](#inconsistent-treatment-of-blank-token "跳转到此标题的永久链接")
- en: When splitting the token-level alignments into words, you will notice that some
    blank tokens are treated differently, and this makes the interpretation of the
    result somehwat ambigious.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将标记级别的对齐拆分为单词时，您会注意到一些空白标记被不同对待，这使得结果的解释有些模糊。
- en: This is easy to see when we plot the scores. The following figure shows word
    regions and non-word regions, with the frame-level scores of non-blank tokens.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们绘制分数时，这一点很容易看出。以下图显示了单词区域和非单词区域，以及非空白标记的帧级分数。
- en: '[PRE44]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '![Frame-level scores and word segments](../Images/fecac1c5bc6119c808419fbce87e00c0.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![帧级分数和单词片段](../Images/fecac1c5bc6119c808419fbce87e00c0.png)'
- en: In this plot, the blank tokens are those highlighted area without vertical bar.
    You can see that there are blank tokens which are interpreted as part of a word
    (highlighted red), while the others (highlighted blue) are not.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图中，空白标记是那些没有垂直条的突出区域。您可以看到有些空白标记被解释为单词的一部分（突出显示为红色），而其他的（突出显示为蓝色）则不是。
- en: One reason for this is because the model was trained without a label for the
    word boundary. The blank tokens are treated not just as repeatation but also as
    silence between words.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个原因是模型在训练时没有为单词边界添加标签。空白标记不仅被视为重复，还被视为单词之间的静默。
- en: But then, a question arises. Should frames immediately after or near the end
    of a word be silent or repeat?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，接着出现了一个问题。单词结束后或附近的帧应该是静音还是重复？
- en: In the above example, if you go back to the previous plot of spectrogram and
    word regions, you see that after “y” in “curiosity”, there is still some activities
    in multiple frequency buckets.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，如果您回到之前的频谱图和单词区域的绘图，您会看到在“curiosity”的“y”后，多个频率桶中仍然有一些活动。
- en: Would it be more accurate if that frame was included in the word?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将该帧包含在单词中，会更准确吗？
- en: 'Unfortunately, CTC does not provide a comprehensive solution to this. Models
    trained with CTC are known to exhibit “peaky” response, that is, they tend to
    spike for an aoccurance of a label, but the spike does not last for the duration
    of the label. (Note: Pre-trained Wav2Vec2 models tend to spike at the beginning
    of label occurances, but this not always the case.)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，CTC 没有为此提供全面的解决方案。使用 CTC 训练的模型被认为表现出“尖峰”响应，即它们倾向于在标签出现时出现尖峰，但尖峰并不持续整个标签的持续时间。（注意：预训练的
    Wav2Vec2 模型倾向于在标签出现的开始处出现尖峰，但这并非总是如此。）
- en: '[[Zeyer *et al.*, 2021](../references.html#id2 "Albert Zeyer, Ralf Schlüter,
    and Hermann Ney. Why does ctc result in peaky behavior? 2021\. arXiv:2105.14849.")]
    has in-depth alanysis on the peaky behavior of CTC. We encourage those who are
    interested understanding more to refer to the paper. The following is a quote
    from the paper, which is the exact issue we are facing here.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Zeyer *et al.*, 2021](../references.html#id2 "Albert Zeyer, Ralf Schlüter,
    and Hermann Ney. Why does ctc result in peaky behavior? 2021\. arXiv:2105.14849.")]
    对 CTC 的尖峰行为进行了深入分析。我们鼓励对此感兴趣的人参考该论文。以下是论文中的一句引用，这正是我们在这里面临的确切问题。'
- en: '*Peaky behavior can be problematic in certain cases,* *e.g. when an application
    requires to not use the blank label,* *e.g. to get meaningful time accurate alignments
    of phonemes* *to a transcription.*'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在某些情况下，尖峰行为可能会有问题，* *例如当应用程序要求不使用空白标签时，* *例如获得音素到转录的有意义的时间准确对齐。*'
- en: 'Advanced: Handling transcripts with `<star>` token[](#advanced-handling-transcripts-with-star-token
    "Permalink to this heading")'
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级：处理带有`<star>`标记的转录[](#advanced-handling-transcripts-with-star-token "跳转到此标题的永久链接")
- en: Now let’s look at when the transcript is partially missing, how can we improve
    alignment quality using the `<star>` token, which is capable of modeling any token.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看当转录部分丢失时，如何使用`<star>`标记来提高对齐质量，该标记能够建模任何标记。
- en: Here we use the same English example as used above. But we remove the beginning
    text `“i had that curiosity beside me at”` from the transcript. Aligning audio
    with such transcript results in wrong alignments of the existing word “this”.
    However, this issue can be mitigated by using the `<star>` token to model the
    missing text.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用与上面相同的英文示例。但是我们从剧本中删除了开头的文本“我旁边有这种好奇心”。将音频与这样的剧本对齐会导致现有单词“this”的错误对齐。然而，通过使用“<star>”标记来建模缺失的文本，可以缓解这个问题。
- en: First, we extend the dictionary to include the `<star>` token.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们扩展字典以包括“<star>”标记。
- en: '[PRE45]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Next, we extend the emission tensor with the extra dimension corresponding to
    the `<star>` token.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将发射张量扩展到与“<star>”标记对应的额外维度。
- en: '[PRE46]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![Frame-wise class probabilities](../Images/8398bfb2cbf4975411aad5762becbb24.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![逐帧类概率](../Images/8398bfb2cbf4975411aad5762becbb24.png)'
- en: The following function combines all the processes, and compute word segments
    from emission in one-go.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数将组合所有过程，并一次性从发射中计算单词片段。
- en: '[PRE47]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Full Transcript[](#full-transcript "Permalink to this heading")
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完整剧本
- en: '[PRE48]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![Emission](../Images/06c55215ab23aa7e45ffbdb39ec92005.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![发射](../Images/06c55215ab23aa7e45ffbdb39ec92005.png)'
- en: Partial Transcript with `<star>` token[](#partial-transcript-with-star-token
    "Permalink to this heading")
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有“<star>”标记的部分剧本
- en: Now we replace the first part of the transcript with the `<star>` token.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们用“<star>”标记替换剧本的第一部分。
- en: '[PRE49]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![Emission](../Images/758a546451a8a63d8eaab41dceca0333.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![发射](../Images/758a546451a8a63d8eaab41dceca0333.png)'
- en: '[PRE50]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: null
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE52]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: null
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: '[PRE54]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: null
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the audio element.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您的浏览器不支持音频元素。
- en: Partial Transcript without `<star>` token[](#partial-transcript-without-star-token
    "Permalink to this heading")
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不带“<star>”标记的部分剧本
- en: As a comparison, the following aligns the partial transcript without using `<star>`
    token. It demonstrates the effect of `<star>` token for dealing with deletion
    errors.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 作为比较，以下是不使用“<star>”标记对部分剧本进行对齐的情况。它展示了使用“<star>”标记处理删除错误的效果。
- en: '[PRE56]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '![Emission](../Images/e7fe5710f77da40ba8454960b5ecebfe.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![发射](../Images/e7fe5710f77da40ba8454960b5ecebfe.png)'
- en: Conclusion[](#conclusion "Permalink to this heading")
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this tutorial, we looked at how to use torchaudio’s forced alignment API
    to align and segment speech files, and demonstrated one advanced usage: How introducing
    a `<star>` token could improve alignment accuracy when transcription errors exist.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们看了如何使用torchaudio的强制对齐API来对齐和分割语音文件，并展示了一个高级用法：当存在转录错误时，引入“<star>”标记如何提高对齐准确性。
- en: Acknowledgement[](#acknowledgement "Permalink to this heading")
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 致谢
- en: Thanks to [Vineel Pratap](mailto:vineelkpratap%40meta.com) and [Zhaoheng Ni](mailto:zni%40meta.com)
    for developing and open-sourcing the forced aligner API.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢[Vineel Pratap](mailto:vineelkpratap%40meta.com)和[Zhaoheng Ni](mailto:zni%40meta.com)开发并开源强制对齐器API。
- en: '**Total running time of the script:** ( 0 minutes 8.811 seconds)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本的总运行时间：**（0分钟8.811秒）'
- en: '[`Download Python source code: ctc_forced_alignment_api_tutorial.py`](../_downloads/fd312a07c77ccd892cb337379bf91f16/ctc_forced_alignment_api_tutorial.py)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[下载Python源代码：ctc_forced_alignment_api_tutorial.py](../_downloads/fd312a07c77ccd892cb337379bf91f16/ctc_forced_alignment_api_tutorial.py)'
- en: '[`Download Jupyter notebook: ctc_forced_alignment_api_tutorial.ipynb`](../_downloads/97729a601eea05725da9715649633311/ctc_forced_alignment_api_tutorial.ipynb)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[下载Jupyter笔记本：ctc_forced_alignment_api_tutorial.ipynb](../_downloads/97729a601eea05725da9715649633311/ctc_forced_alignment_api_tutorial.ipynb)'
- en: '[Gallery generated by Sphinx-Gallery](https://sphinx-gallery.github.io)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sphinx-Gallery生成的图库](https://sphinx-gallery.github.io)'
