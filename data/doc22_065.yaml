- en: torch.overrides
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: torch.overrides
- en: 原文：[https://pytorch.org/docs/stable/torch.overrides.html](https://pytorch.org/docs/stable/torch.overrides.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pytorch.org/docs/stable/torch.overrides.html](https://pytorch.org/docs/stable/torch.overrides.html)
- en: This module exposes various helper functions for the `__torch_function__` protocol.
    See [Extending torch Python API](notes/extending.html#extending-torch-python)
    for more details on the `__torch_function__` protocol.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块公开了各种辅助函数，用于`__torch_function__`协议。有关`__torch_function__`协议的更多详细信息，请参见[扩展torch
    Python API](notes/extending.html#extending-torch-python)。
- en: Functions
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Return public functions that cannot be overridden by `__torch_function__`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 返回不能通过`__torch_function__`覆盖的公共函数。
- en: Returns
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: A tuple of functions that are publicly available in the torch API but cannot
    be overridden with `__torch_function__`. Mostly this is because none of the arguments
    of these functions are tensors or tensor-likes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个元组，其中包含在torch API中公开但不能使用`__torch_function__`覆盖的函数。主要是因为这些函数的参数都不是张量或类似张量。
- en: Return type
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: Set[Callable]
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Set[Callable]
- en: Examples
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: List functions that are overridable via __torch_function__
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 列出可以通过__torch_function__覆盖的函数
- en: Returns
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: A dictionary that maps namespaces that contain overridable functions to functions
    in that namespace that can be overridden.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个将包含可重写函数的命名空间映射到该命名空间中可重写的函数的字典。
- en: Return type
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: Dict[Any, List[Callable]]
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Dict[Any, List[Callable]]
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Get a human readable string name for a function passed to __torch_function__
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 获取传递给__torch_function__的函数的人类可读字符串名称
- en: Parameters
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**f** (*Callable*) – Function to resolve the name of.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**f** (*Callable*) - 要解析名称的函数。'
- en: Returns
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Name of the function; if eval’ed it should give back the input function.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的名称；如果对其进行eval，则应返回输入函数。
- en: Return type
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[str](https://docs.python.org/3/library/stdtypes.html#str "(在Python v3.12中)")'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Return a dict containing dummy overrides for all overridable functions
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含所有可重写函数的虚拟覆盖的字典
- en: Returns
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: A dictionary that maps overridable functions in the PyTorch API to lambda functions
    that have the same signature as the real function and unconditionally return -1\.
    These lambda functions are useful for testing API coverage for a type that defines
    `__torch_function__`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典，将PyTorch API中可重写函数映射到具有与真实函数相同签名的lambda函数，这些lambda函数无条件返回-1。这些lambda函数对于测试为定义`__torch_function__`的类型的API覆盖率很有用。
- en: Return type
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: Dict[Callable, Callable]
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Dict[Callable, Callable]
- en: Examples
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Implement a function with checks for `__torch_function__` overrides.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 实现带有`__torch_function__`覆盖的函数。
- en: See torch::autograd::handle_torch_function for the equivalent of this function
    in the C++ implementation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅torch::autograd::handle_torch_function，了解C++实现中此函数的等效部分。
- en: Parameters
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**public_api** (*function*) – Function exposed by the public torch API originally
    called like `public_api(*args, **kwargs)` on which arguments are now being checked.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**public_api** (*function*) - 最初在公共torch API中调用的函数，如`public_api(*args, **kwargs)`，现在正在检查其参数。'
- en: '**relevant_args** (*iterable*) – Iterable of arguments to check for __torch_function__
    methods.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**relevant_args** (*iterable*) - 要检查__torch_function__方法的参数的可迭代对象。'
- en: '**args** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple "(in
    Python v3.12)")) – Arbitrary positional arguments originally passed into `public_api`.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple "(在Python
    v3.12中)")) - 最初传递给`public_api`的任意位置参数。'
- en: '**kwargs** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")) – Arbitrary keyword arguments originally passed into `public_api`.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kwargs** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在Python v3.12中)")) - 最初传递给`public_api`的任意关键字参数。'
- en: Returns
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Result from calling `implementation` or an `__torch_function__` method, as appropriate.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`implementation`或适当的`__torch_function__`方法的结果。
- en: Return type
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[object](https://docs.python.org/3/library/functions.html#object "(in Python
    v3.12)")'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[object](https://docs.python.org/3/library/functions.html#object "(在Python
    v3.12中)")'
- en: ':raises TypeError : if no implementation is found.:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ':如果找不到实现，则引发TypeError。:'
- en: Example
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Check for __torch_function__ implementations in the elements of an iterable
    or if a __torch_function__ mode is enabled. Considers exact `Tensor` s and `Parameter`
    s non-dispatchable. Use this to guard a call to [`handle_torch_function()`](#torch.overrides.handle_torch_function
    "torch.overrides.handle_torch_function"); don’t use it to test if something is
    Tensor-like, use [`is_tensor_like()`](#torch.overrides.is_tensor_like "torch.overrides.is_tensor_like")
    instead. :param relevant_args: Iterable or arguments to check for __torch_function__
    methods. :type relevant_args: iterable'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '检查可迭代对象中元素的__torch_function__实现，或者是否启用了__torch_function__模式。将确切的`Tensor`和`Parameter`视为不可分派。使用此功能来保护对[`handle_torch_function()`](#torch.overrides.handle_torch_function
    "torch.overrides.handle_torch_function")的调用；不要用它来测试某物是否类似于Tensor，而是使用[`is_tensor_like()`](#torch.overrides.is_tensor_like
    "torch.overrides.is_tensor_like")。:param relevant_args: 要检查__torch_function__方法的可迭代对象或参数。:type
    relevant_args: iterable'
- en: Returns
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: True if any of the elements of relevant_args have __torch_function__ implementations,
    False otherwise.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果relevant_args的任何元素具有__torch_function__实现，则返回True，否则返回False。
- en: Return type
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(在Python v3.12中)")'
- en: See also
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '`torch.is_tensor_like`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.is_tensor_like`'
- en: Checks if something is a Tensor-like, including an exact `Tensor`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 检查某物是否类似于Tensor，包括确切的`Tensor`。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Returns `True` if the passed-in input is a Tensor-like.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传入的输入是类似于Tensor的，则返回`True`。
- en: Currently, this occurs whenever there’s a `__torch_function__` attribute on
    the type of the input.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，只要输入类型的`__torch_function__`属性存在，就会发生这种情况。
- en: Examples
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: A subclass of tensor is generally a Tensor-like.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 张量的子类通常是类似于Tensor的。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Built-in or user types aren’t usually Tensor-like.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 内置或用户类型通常不类似于Tensor。
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: But, they can be made Tensor-like by implementing __torch_function__.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，通过实现__torch_function__，它们可以变得类似于Tensor。
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Returns True if the function passed in is a handler for a method or property
    belonging to `torch.Tensor`, as passed into `__torch_function__`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传入的函数是`torch.Tensor`的方法或属性的处理程序，则返回True，如传入`__torch_function__`。
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For properties, their `__get__` method must be passed in.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于属性，必须传递它们的`__get__`方法。
- en: 'This may be needed, in particular, for the following reasons:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是必要的，特别是出于以下原因：
- en: Methods/properties sometimes don’t contain a __module__ slot.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法/属性有时不包含__module__槽。
- en: They require that the first passed-in argument is an instance of `torch.Tensor`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们要求第一个传入的参数是`torch.Tensor`的实例。
- en: Examples
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Return type
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型
- en: '[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.12)")'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[bool](https://docs.python.org/3/library/functions.html#bool "(在Python v3.12中)")'
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Wraps a given function with `__torch_function__` -related functionality.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与`__torch_function__`相关的功能包装给定的函数。
- en: Parameters
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '**dispatcher** (*Callable*) – A callable that returns an iterable of Tensor-likes
    passed into the function.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**dispatcher**（*Callable*）- 一个可调用对象，返回传递给函数的类似张量的可迭代对象。'
- en: Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This decorator may reduce the performance of your code. Generally, it’s enough
    to express your code as a series of functions that, themselves, support __torch_function__.
    If you find yourself in the rare situation where this is not the case, e.g. if
    you’re wrapping a low-level library and you also need it to work for Tensor-likes,
    then this function is available.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个装饰器可能会降低代码的性能。通常，将代码表达为一系列支持__torch_function__的函数就足够了。如果您发现自己处于罕见的情况，即如果您正在包装一个低级库，并且还需要它适用于类似张量，那么这个函数是可用的。
- en: Examples
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
